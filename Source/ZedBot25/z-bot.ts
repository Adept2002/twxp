# Title: Z-Bot 
# Author: Zed 
# Copyright (c) 2011 by Archibald H. Vilanos III 
# All Rights Reserved. 
# Z-Bot. 
# #225 - beta symbol 
SystemScript
ReqRecording
SetVar $version "2.50" & #225
SetVar $creditz "Zed, Traveler, CareTaker, Remco Mulder, Cherokee, LoneStar"
SetVar $scriptname "Z-Bot"
SetVar $scripttitle "Z-Bot"
SetVar $Z_Lib~scriptname $scriptname
SetVar $Z_Lib~scripttitle $scripttitle
SetVar $Z_Lib~Version $version
GoSub :Z_Lib~INITLIB
Gosub :Z_Lib~CHECKONCE
# AUTHORISE 
SetVar $authorise FALSE
SetVar $Z_Auth~allowpublic TRUE
If ($authorise <> TRUE)
	Gosub :Z_Auth~CHECK
End
If ($Z_Auth~k = TRUE)
	SetVar $version ($version & "+")
	SetVar $Z_Lib~Version $version
	GoSub :Z_Lib~INITLIB
	SetVar $Z_Lib~license LOGINNAME
	SetVar $p TRUE
	SetVar $Z_Auth~k ""
End
# End Authorise 
Gosub :Z_Lib~SYNC
Gosub :SETANSI
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~message "Attempting to reach the Command prompt..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Send "z s * q q q q z 0* q z 0* q z 0**"
	SetVar $Z_Lib~setprompt "CITCOM"
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		SetVar $Z_Lib~message "Failed to reach the Command prompt..*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Halt
	Else
		SetVar $Z_Lib~message "Successfully reached the " & $prompt & " prompt!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
PROCESSIN 1 "[Z]ZSCRIPTLOADING[Z]"
SetVar $dashedline "----------------------------------------------------------------------*"
SetVar $doubledashedline "-====================================================================-*"
SetVar $fileline "-------------------------------------------------------------------"
SetVar $z_selfbotkey "."
SetVar $z_selfbotkeyd "."
SetVar $z_selfbotkeyof "."
SetVar $z_menukey #9
SetVar $z_menukeyd "TAB"
SetVar $z_menukeyof "TAB"
SetVar $z_chargekey "]"
SetVar $z_chargekeyd "]"
SetVar $z_chargekeyof "]"
SetVar $z_mowkey "{"
SetVar $z_mowkeyd "{"
SetVar $z_mowkeyof "{"
SetVar $z_botonoffkey #26
SetVar $z_botonoffkeyd "CTRL-Z"
SetVar $z_botonoffkeyof "CTRL-Z"
SetVar $z_actkey ","
SetVar $z_actkeyd ","
SetVar $z_actkeyof ","
SetVar $z_transwarpkey "["
SetVar $z_transwarpkeyd "["
SetVar $z_transwarpkeyof "["
SetVar $z_hooktowkey "J"
SetVar $z_hooktowkeyd "SHFT-J"
SetVar $z_hooktowkeyof "SHFT-J"
SetVar $z_topoffkey "T"
SetVar $z_topoffkeyd "SHFT-T"
SetVar $z_topoffkeyof "SHFT-T"
SetVar $z_xferkey "X"
SetVar $z_xferkeyd "SHFT-X"
SetVar $z_xferkeyof "SHFT-X"
SetVar $z_bannerkey "B"
SetVar $z_bannerkeyd "SHFT-B"
SetVar $z_bannerkeyof "SHFT-B"
SetVar $z_disrkey "D"
SetVar $z_disrkeyd "SHFT-D"
SetVar $z_disrkeyof "SHFT-D"
SetVar $z_citmenukey "-"
SetVar $z_citmenukeyd "-"
SetVar $z_citmenukeyof "-"
SetVar $z_blindwarpkey "}"
SetVar $z_blindwarpkeyd "}"
SetVar $z_blindwarpkeyof "}"
SetVar $z_safetynetkey "S"
SetVar $z_safetynetkeyd "SHFT-S"
SetVar $z_safetynetkeyof "SHFT-S"
SetVar $z_hotmenukey "K"
SetVar $z_hotmenukeyd "SHFT-K"
SetVar $z_hotmenukeyof "SHFT-K"
SetVar $z_infokey "G"
SetVar $z_infokeyd "SHFT-G"
SetVar $z_infokeyof "SHFT-G"
SetVar $z_probekey "E"
SetVar $z_probekeyd "SHFT-E"
SetVar $z_probekeyof "SHFT-E"
SetVar $z_ztmkey "O"
SetVar $z_ztmkeyd "SHFT-O"
SetVar $z_ztmkeyof "SHFT-O"
SetVar $z_attackkey "A"
SetVar $z_attackkeyd "SHFT-A"
SetVar $z_attackkeyof "SHFT-A"
SetVar $z_fuelkey "F"
SetVar $z_fuelkeyd "SHFT-F"
SetVar $z_fuelkeyof "SHFT-F"
SetVar $z_capkey "C"
SetVar $z_capkeyd "SHFT-C"
SetVar $z_capkeyof "SHFT-C"
SetVar $z_refigkey "R"
SetVar $z_refigkeyd "SHFT-R"
SetVar $z_refigkeyof "SHFT-R"
SetVar $z_matrixkey "V"
SetVar $z_matrixkeyd "SHFT-V"
SetVar $z_matrixkeyof "SHFT-V"
SetVar $z_hookmankey "J"
SetVar $z_hookmankeyd "SHFT-J"
SetVar $z_hookmankeyof "SHFT-J"
SetVar $z_stopallkey "L"
SetVar $z_stopallkeyd "SHFT-L"
SetVar $z_stopallkeyof "SHFT-L"
SetVar $z_autokey "U"
SetVar $z_autokeyd "SHFT-U"
SetVar $z_autokeyof "SHFT-U"
SetVar $z_huntkey "N"
SetVar $z_huntkeyd "SHFT-N"
SetVar $z_huntkeyof "SHFT-N"
SetVar $z_hotlistkey "H"
SetVar $z_hotlistkeyd "SHIFT-H"
SetVar $z_hotlistkeyof "SHIFT-H"
SetVar $z_lastbotkey "("
SetVar $z_lastbotkeyd "("
SetVar $z_lastbotkeyof "("
SetVar $z_panelkey "I"
SetVar $z_panelkeyd "SHIFT-I"
SetVar $z_panelkeyof "SHIFT-I"
SetVar $z_watchkey "Z"
SetVar $z_watchkeyd "SHIFT-Z"
SetVar $z_watchkeyof "SHIFT-Z"
SetVar $z_fastrefillkey "."
SetVar $z_fastrefillkeyd "."
SetVar $z_fastrefillkeyof "DOT"
SetVar $z_setplanetkey "P"
SetVar $z_setplanetkeyd "SHIFT-P"
SetVar $z_setplanetkeyof "SHIFT-P"
SetVar $z_loopkey "M"
SetVar $z_loopkeyd "SHIFT-M"
SetVar $z_loopkeyof "SHIFT-M"
SetArray $lastselfbot 9
LoadVar $z_volley
LoadVar $z_broadcast
SetVar $Z_Lib~silentmode FALSE
LoadVar $z_ingamename
LowerCase $z_ingamename
LoadVar $z_bot
LoadVar $pdropreturndelay
LoadVar $z_remoteaccess
LoadVar $z_altcitview
LoadVar $z_figherald
LoadVar $z_selfbotss
If ($p = TRUE)
	LoadVar $z_sr
	UpperCase $z_sr
	If ($z_sr <> "OFF") and ($z_sr <> "KILL") and ($z_sr <> "CAP")
		SetVar $z_sr "OFF"
		SaveVar $z_sr
	End
End
SetVar $Z_Lib~selfbotss $z_selfbotss
If ($z_remoteaccess <> "TRUE") and ($z_remoteaccess <> "FALSE")
	SetVar $z_remoteaccess "TRUE"
	SaveVar $z_remoteaccess
End
If ($z_proximityalert <> "TRUE") and ($z_proximityalert <> "FALSE")
	SetVar $z_proximityalert "TRUE"
	SaveVar $z_proximityalert
End
If ($z_bot <> TRUE)
	Gosub :SETUP
End
SetVar $servershutdowntriggers TRUE
GetTime $timecheckmins "nn"
GetTime $timecheckhour "hh"
Gosub :CREATESCRIPTMENUS
SetVar $mode "GENERAL"
LoadVar $z_clv
Gosub :ONLINEWATCH
SetVar $starting TRUE
Gosub :INTCOM_RESET
SetVar $starting FALSE
If ($startprompt = "Command")
	If ($z_dockfast = "TRUE") and ($p = TRUE)
		If ($startsector = $z_base) and ($z_planet <> "0")
			Send "l j" & #8 & #8 & $z_planet & "* * c x q * "
		ElseIf ($startsector = STARDOCK)
			Send "p sg yg q"
		ElseIf (PORT.EXISTS[$startsector] = TRUE)
			Send "p *"
		End
		Send #145
		WaitOn #145 & #8
		GetWord CURRENTLINE $startprompt 1
		Echo "*" & $boldwhite & "-=[" & $boldgreen & $blinkon & "DOCK FAST" & $blinkoff & $boldwhite & "]=-*"
	End
End
GetRnd $rnd 1 10
If ($z_motto <> "") and ($z_motto <> "0") and (($startprompt = "Command") or ($startprompt = "Citadel")) and ($rnd = 3) and ($announcemottos <> "OFF")
	SetVar $temp $z_motto
	GetLength $temp $len
	If ($len > 155)
		CutText $temp $temp 1 155
	End
	Send "c a " & $temp & "* y q"
	SetVar $Z_Logs~logentry $scripttitle & ": ANNOUNCED - " & $temp
	Gosub :Z_Logs~ENTERLOG
End
Goto :START
# STARTMENU 
:MENU
KillAllTriggers
Gosub :Z_Lib~COMMSOFF
SetVar $exitmenu FALSE
:STARTMENU
ListActiveScripts $scripts
SetVar $i 1
SetVar $figmonison FALSE
While ($i <= $scripts)
	UpperCase $scripts[$i]
	GetWordPos $scripts[$i] $pos "Z-FIGMON"
	If ($pos > 0)
		SetVar $figmonison TRUE
	End
	SetVar $i ($i + 1)
End
If ($figmonison = TRUE)
	LoadVar $z_broadcast
	If ($z_broadcast = TRUE)
		SetVar $z_broadcastd $boldgreen & "ON"
	Else
		SetVar $z_broadcastd $boldred & "OFF"
	End
End
If ($z_updateship = "TRUE")
	SetVar $z_update ANSI_10 & "YES"
Else
	SetVar $z_update ANSI_12 & "NO"
End
If ($z_usesound = TRUE)
	SetVar $z_usesoundd ANSI_10 & "ON"
Else
	SetVar $z_usesoundd ANSI_12 & "OFF"
End
If ($z_figowner = "c")
	SetVar $z_figownerd ANSI_15 & "Corporate"
Else
	SetVar $z_figownerd ANSI_12 & "Personal"
End
If ($z_figtype = "d")
	SetVar $z_figtyped ANSI_15 & "Defensive"
ElseIf ($z_figtype = "o")
	SetVar $z_figtyped ANSI_12 & "Offensive"
Else
	SetVar $z_figtyped ANSI_10 & "Toll"
End
If ($z_mslflag = TRUE)
	SetVar $z_mslflagd  ANSI_10 & "ON"
Else
	SetVar $z_mslflagd  ANSI_12 & "OFF"
End
If ($z_bustflag = TRUE)
	SetVar $z_bustflagd  ANSI_10 & "ON"
Else
	SetVar $z_bustflagd  ANSI_12 & "OFF"
End
If ($z_turnsflag = TRUE)
	SetVar $z_turnsflagd  ANSI_10 & "ON"
Else
	SetVar $z_turnsflagd  ANSI_12 & "OFF"
End
If ($z_lrsflag = TRUE)
	SetVar $z_lrsflagd  ANSI_10 & "ON"
Else
	SetVar $z_lrsflagd  ANSI_12 & "OFF"
End
If ($z_autoss = TRUE)
	SetVar $z_autossd  ANSI_10 & "ON"
Else
	SetVar $z_autossd  ANSI_12 & "OFF"
End
If ($pulsecheck = TRUE)
	SetVar $pulsecheckd  ANSI_10 & "ON"
Else
	SetVar $pulsecheckd  ANSI_12 & "OFF"
End
If ($z_timecheck = FALSE)
	SetVar $z_timecheckd  ANSI_10 & "ON"
Else
	SetVar $z_timecheckd  ANSI_12 & "OFF"
End
If ($servershutdowntriggers = TRUE)
	SetVar $servershutdowntriggersd  ANSI_10 & "ON"
Else
	SetVar $servershutdowntriggersd  ANSI_12 & "OFF"
End
If ($z_furbshipletter <> "0")
	SetVar $z_furbshipletterd $z_furbshipletter
	UpperCase $z_furbshipletterd
	SetVar $z_furbshipletterd $boldgreen & $z_furbshipletterd
Else
	SetVar $z_furbshipletterd $boldred & "Not Set"
End
If ($watch = TRUE)
	If ($z_watchtime = "0") or ($z_watchtime = "")
		SetVar $z_watchtime 10
	End
	SetVar $watchd $boldgreen & "ACTIVE - " & $boldyellow & $z_watchtime & $boldgreen & " secs"
Else
	SetVar $watchd $boldwhite & "OFF"
End
If ($z_heraldturns = TRUE)
	SetVar $z_heraldturnsd $boldgreen & "ON"
Else
	SetVar $z_heraldturnsd $boldwhite & "OFF"
End
If ($z_limpalarm = TRUE)
	SetVar $z_limpalarmd $boldgreen & "ON"
Else
	SetVar $z_limpalarmd $boldred & "OFF"
End
If ($Z_Lib~silentmode = TRUE)
	SetVar $silentmoded $boldgreen & "ON"
Else
	SetVar $silentmoded $boldwhite & "OFF"
End
If ($z_mowfigs = "0")
	SetVar $z_mowfigsd $blinkon & ANSI_12 & $z_mowfigs & $blinkoff
Else
	SetVar $z_mowfigsd ANSI_15 & $z_mowfigs
End
If ($z_base = "0")
	SetVar $z_based ANSI_2 & "[" & $blinkon & ANSI_12 & $z_base & $blinkoff & ANSI_2 & "]"
Else
	SetVar $z_based ANSI_2 & "[" & ANSI_14 & $z_base & ANSI_2 & "]"
End
If ($z_safesector = "0")
	 SetVar $z_safesectord ANSI_2 & "[" & $blinkon & ANSI_12 & $z_safesector & $blinkoff & ANSI_2 & "]"
ElseIf ($z_safesector = STARDOCK)
	SetVar $z_safesectord ANSI_2 & "[" & ANSI_15 & $z_safesector & ANSI_2 & "] - " & ANSI_14 & "Stardock"
ElseIf ($z_safesector = ALPHACENTAURI)
	SetVar $z_safesectord ANSI_2 & "[" & ANSI_15 & $z_safesector & ANSI_2 & "] - " & ANSI_14 & "Alpha"
ElseIf ($z_safesector = RYLOS)
	SetVar $z_safesectord ANSI_2 & "[" & ANSI_15 & $z_safesector & ANSI_2 & "] - " & ANSI_14 & "Rylos"
ElseIf ($z_safesector = "1")
	SetVar $z_safesectord ANSI_2 & "[" & ANSI_15 & $z_safesector & ANSI_2 & "] - " & ANSI_14 & "Terra"
Else
	SetVar $z_safesectord ANSI_2 & "[" & ANSI_15 & $z_safesector & ANSI_2 & "]"
End
If ($z_safeship = "0")
	SetVar $z_safeshipd ANSI_2 & "[" & $blinkon & ANSI_12 & $z_safeship & $blinkoff & ANSI_2 & "]"
Else
	SetVar $z_safeshipd ANSI_2 & "[" & ANSI_15 & $z_safeship & ANSI_2 & "]"
End
If ($z_team = "") or ($z_team = "0")
	SetVar $z_teamd ANSI_12 & "None"
Else
	SetVar $z_teamd ANSI_10 & $z_team
End
If ($z_volley = "") or ($z_volley = "0")
	SetVar $z_volleyd ANSI_15 & "None"
Else
	SetVar $z_volleyd ANSI_15 & $z_volley
End
If ($z_ingamename = "0") or ($z_ingamename = "")
	SetVar $z_ingamenamed ANSI_12 & "Not Set"
Else
	SetVar $z_ingamenamed ANSI_15 & $z_ingamename
End
If ($z_specflag = TRUE)
	SetVar $z_specflagd $boldgreen & "ON"
Else
	SetVar $z_specflagd $boldred & "OFF"
End
If ($z_seed <> "0")
	SetVar $z_seedd $boldgreen & $z_seed
Else
	SetVar $z_seedd $boldred & $z_seed
End
If ($z_doublecheckdock = "TRUE")
	SetVar $z_doublecheckdockd $boldgreen & "ON"
Else
	SetVar $z_doublecheckdockd $boldred & "OFF"
End
If ($z_autoigon = "TRUE")
	SetVar $z_autoigond $boldgreen & "ON"
Else
	SetVar $z_autoigond $boldred & "OFF"
End
If ($z_remoteaccess = "TRUE")
	SetVar $z_remoteaccessd  $boldgreen & "ON"
Else
	SetVar $z_remoteaccessd  $boldred & $blinkon & "!!! OFF !!!" & $blinkoff
End
If ($z_proximityalert = "TRUE")
	SetVar $z_proximityalertd $boldgreen & "ON"
Else
	SetVar $z_proximityalertd $boldred & "OFF"
End
If ($z_planet <> "0")
	SetVar $z_planetd ANSI_2 & "[" & ANSI_15 & $z_planet & ANSI_2 & "]" 
Else
	SetVar $z_planetd ANSI_2 & "[" & $blinkon & ANSI_12 & $z_planet & $blinkoff & ANSI_2 & "]" 
End
If ($z_clv = "TRUE")
	SetVar $z_clvd  $boldgreen & "ON"
Else
	SetVar $z_clvd  $boldwhite & "OFF"
End
If ($z_pr = "TRUE")
	If ($prtarget <> "0")
		SetVar $z_prd  $boldyellow & $blinkon & $prtarget & $blinkoff
	Else
		SetVar $z_prd  $boldyellow & $blinkon & "ON" & $blinkoff
	End
Else
	SetVar $z_prd  $boldwhite & "OFF"
End
If ($z_dockfast = "TRUE")
	SetVar $z_dockfastd  $boldgreen & "ON"
Else
	SetVar $z_dockfastd  $boldwhite & "OFF"
End
If ($z_minturns < 20)
	SetVar $z_minturnsd $boldred & $z_minturns
Else
	SetVar $z_minturnsd $boldwhite & $z_minturns
End
If ($z_minfigs < 20)
	SetVar $z_minfigsd $boldred & $z_minfigs
Else
	SetVar $z_minfigsd $boldwhite & $z_minfigs
End
If ($z_callfast = "TRUE")
	SetVar $z_callfastd  $boldgreen & "FAST"
Else
	SetVar $z_callfastd  $boldwhite & "Normal"
End
If ($z_altcitview = TRUE)
	SetVar $z_altcitviewd $boldwhite & "Verbose"
Else
	SetVar $z_altcitviewd $boldwhite & "Brief"
End
If ($z_figherald = TRUE)
	SetVar $z_figheraldd $boldgreen & "ON"
Else
	SetVar $z_figheraldd $boldwhite & "OFF"
End
If ($z_selfbotss = TRUE)
	SetVar $z_selfbotssd $boldgreen & "ON"
Else
	SetVar $z_selfbotssd $boldwhite & "OFF"
End
If ($z_autoexec = TRUE)
	If ($z_autoexeccom <> "") and ($z_autoexeccom <> "0") and ($z_autoexeccom <> " ")
		SetVar $z_autoexecd $boldgreen & "ON"
	Else
		SetVar $z_autoexecd $boldred & "ON"
	End
Else
	If ($z_autoexeccom <> "") and ($z_autoexeccom <> "0") and ($z_autoexeccom <> " ")
		SetVar $z_autoexecd $boldwhite & "OFF"
	Else
		SetVar $z_autoexecd $boldgreen & "OFF"
	End
End
If ($z_autoexeccom <> "") and ($z_autoexeccom <> "0") and ($z_autoexeccom <> " ")
	If ($z_autoexec = TRUE)
		SetVar $z_autoexeccomd $boldgreen & $z_autoexeccom
	Else
		SetVar $z_autoexeccomd $boldwhite & $z_autoexeccom
	End
Else
	If ($z_autoexec = TRUE)
		SetVar $z_autoexeccomd $boldred & $blinkon & "No Command" & $blinkoff
	Else
		SetVar $z_autoexeccomd $boldwhite & "None"
	End
End
If ($z_heraldhit = FALSE)
	If ($targetsystemok <> TRUE)
		SetVar $z_heraldhitd $boldred & "RUN INIT"
	Else
		SetVar $z_heraldhitd $boldwhite & "OFF"
	End
ElseIf ($z_heraldhit = "E")
	SetVar $z_heraldhitd $boldgreen & "ECHO"
ElseIf ($z_heraldhit = "R")
	SetVar $z_heraldhitd $boldgreen & "SS"
End
If ($z_ignorescriptloads = "TRUE")
	SetVar $z_ignorescriptloadsd $boldwhite & "TRUE"
Else
	SetVar $z_ignorescriptloadsd $boldgreen & "FALSE"
End
If ($z_sr <> "OFF")
	SetVar $z_srd $boldyellow & $blinkon & $z_sr & $blinkoff
Else
	SetVar $z_srd $boldwhite & "OFF"
End
If ($z_twarpadj = "TRUE")
	SetVar $z_twarpadjd $boldgreen & "Direct/Adjacent"
Else
	SetVar $z_twarpadjd $boldwhite & "Direct ONLY"
End
# OPTIONS MENU 
# Example 
# "[4;40H" means display at screen column 40 on line 4. 
#
LoadVar $z_optionspage
If ($z_optionspage = "0")
	SetVar $z_optionspage 1
	SaveVar $z_optionspage
End
SetVar $Z_Lib~extra ANSI_15 & "     OPTIONS MENU - Page " & $z_optionspage
GoSub :Z_Lib~CLEARSCREEN
Gosub :Z_Lib~HEADER
If ($z_optionspage = "1")
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- " & ANSI_11 & "Base Sector : " & $z_based
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- " & ANSI_11 & "Safe Sector : " & $z_safesectord
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- " & ANSI_11 & "Safe Ship   : " & $z_safeshipd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- " & ANSI_11 & "Main Planet : " & $z_planetd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- " & ANSI_11 & "Dock Safer  : " & $z_doublecheckdockd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- " & ANSI_11 & "Call Mode   : " & $z_callfastd
	If ($z_updateship = "FALSE") and ($z_autoigon = "TRUE")
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "7" & ANSI_12 & "]=- " & ANSI_11 & "Xport Update: " & ANSI_15 & $z_update & $boldred & $blinkon & "   <-- Auto IG is ON" & $blinkoff
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "8" & ANSI_12 & "]=- " & ANSI_11 & "Auto IG On  : " & $z_autoigond & $boldred & $blinkon & "   <-- Xport Update is OFF" & $blinkoff
	Else
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "7" & ANSI_12 & "]=- " & ANSI_11 & "Xport Update: " & ANSI_15 & $z_update
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "8" & ANSI_12 & "]=- " & ANSI_11 & "Auto IG On  : " & $z_autoigond
	End
	Echo "*" & ANSI_12 & "-=["& ANSI_14 &"9"& ANSI_12 &"]=- " & ANSI_11 & "TWarp Mode  : " & $z_twarpadjd
	Echo "*" & ANSI_12 & "-=["& ANSI_14 &"A"& ANSI_12 &"]=- " & ANSI_11 & "Sound       : " & $z_usesoundd
	If ($p = TRUE)
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"B"& ANSI_12 &"]=- "& ANSI_11 &"Se Respond  : " & $z_srd
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"C"& ANSI_12 &"]=- "& ANSI_11 &"Ph Respond  : " & $z_prd
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"D"& ANSI_12 &"]=- "& ANSI_11 &"Dock Fast   : " & $z_dockfastd
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"E"& ANSI_12 &"]=- "& ANSI_11 &"AutoExec    : " & $z_autoexecd
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"F"& ANSI_12 &"]=- "& ANSI_11 &"Auto Command: " & $z_autoexeccomd
	Else
		Echo "*"
	End
ElseIf ($z_optionspage = "2")
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_11 & "Drop Figs   : " & $z_mowfigsd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Drop Mines  : " & ANSI_15 & $z_mowmines
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- "& ANSI_11 & "Drop Limpets: " & ANSI_15 & $z_mowlimps
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- "& ANSI_11 & "Drop Owner  : " & $z_figownerd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- "& ANSI_11 & "Fighter Type: " & $z_figtyped
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- "& ANSI_11 & "Min Figs    : " & $z_minfigsd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"7"& ANSI_12 &"]=- "& ANSI_11 & "Min Turns   : " & $z_minturnsd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"8"& ANSI_12 &"]=- "& ANSI_11 & "Furb Ship   : " & $z_furbshipletterd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"9"& ANSI_12 &"]=- "& ANSI_11 & "Furb Holds  : " & $boldwhite & $z_furbholds
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"A"& ANSI_12 &"]=- "& ANSI_11 & "Wave Volley : " & $z_volleyd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"B"& ANSI_12 &"]=- "& ANSI_11 & "Pdrop Delay : " & $boldwhite & $pdropreturndelay
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"C"& ANSI_12 &"]=- "& ANSI_11 & "Team Name   : " & $z_teamd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"D"& ANSI_12 &"]=- "& ANSI_11 & "InGame Name : " & $z_ingamenamed
ElseIf ($z_optionspage = "3")
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_11 & "MSL Echos   : " & $z_mslflagd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Bust Echos  : " & $z_bustflagd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- "& ANSI_11 & "LastRS Echo : " & $z_lrsflagd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- "& ANSI_11 & "Port Echos  : " & $z_specflagd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- "& ANSI_11 & "LowTurnEcho : " & $z_turnsflagd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- "& ANSI_11 & "Limp Alarm  : " & $z_limpalarmd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"7"& ANSI_12 &"]=- "& ANSI_11 & "OnlineWatch : " & $watchd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"8"& ANSI_12 &"]=- "& ANSI_11 & "CLV Watch   : " & $z_clvd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"9"& ANSI_12 &"]=- "& ANSI_11 & "HeraldTurns : " & $z_heraldturnsd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"A"& ANSI_12 &"]=- "& ANSI_11 & "Prox. Alert : " & $z_proximityalertd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"B"& ANSI_12 &"]=- "& ANSI_11 & "Alert on SS : " & $z_broadcastd   
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"C"& ANSI_12 &"]=- "& ANSI_11 & "Time Check  : " & $z_timecheckd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"D"& ANSI_12 &"]=- "& ANSI_11 & "Bot Shutdown: " & $servershutdowntriggersd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"E"& ANSI_12 &"]=- "& ANSI_11 & "Silent Mode : " & $silentmoded
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"F"& ANSI_12 &"]=- "& ANSI_11 & "Fig Herald  : " & $z_figheraldd
	If ($p = TRUE)
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"G"& ANSI_12 &"]=- "& ANSI_11 & "Herald Hits : " & $z_heraldhitd
	End
ElseIf ($z_optionspage = "4")
	If ($avoidsfiledeleted = TRUE)
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_10 &"Delete Avoids File :" & ANSI_14 & $blinkon & " DELETED!" & $blinkoff
		SetVar $avoidsfiledeleted FALSE
	Else
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_10 &"Delete Avoids File"
	End
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_10 &"Export Avoids List"
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- "& ANSI_10 & "Import Avoids List"
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- "& ANSI_11 &"RemoteAccess : " & $z_remoteaccessd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- "& ANSI_11 &"AutoSS       : " & $z_autossd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- "& ANSI_11 &"AutoSS Seed  : " & $z_seedd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"7"& ANSI_12 &"]=- "& ANSI_11 &"Bot Password : " & $boldwhite & $z_botpw
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"8"& ANSI_12 &"]=- "& ANSI_11 &"FigMon Check : " & $pulsecheckd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"9"& ANSI_12 &"]=- "& ANSI_11 &"CitMenu View : " & $z_altcitviewd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"A"& ANSI_12 &"]=- "& ANSI_11 &"Self Bot SS  : " & $z_selfbotssd
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"B"& ANSI_12 &"]=- "& ANSI_11 &"IgnoreScripts: " & $z_ignorescriptloadsd
	Fileexists $jumplistok GAMENAME & "_JUMPLIST.txt"
	If ($jumplistok = TRUE)  
		If ($jumplistptr = "1")
			SetVar $istop ANSI_10 & " - Top"
		ElseIf ($jumplistptr = $jumplist) and ($jumplist <> "0")
			SetVar $istop ANSI_12 & " - Last"
		ElseIf ($jumplist <> "0")
			SetPrecision 4
			SetVar $istop ((100 / $jumplist) * $jumplistptr)
			SetPrecision 0
			SetVar $istop ($istop * 1)
			SetVar $istop (ANSI_10 & " - " & $istop & "%")
		Else
			SetVar $istop " "
		End
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"C"& ANSI_12 &"]=- "& ANSI_10 &"Reload Jump List"
		Echo "*" & ANSI_12 & "-=["& ANSI_14 &"D"& ANSI_12 &"]=- "& ANSI_11 & "Next Sector : " & ANSI_15 & $z_nextsector & $istop
	Else
		Gosub :Z_Strings~LINE
		Echo "*" & $Z_Strings~line
		Echo "*" & ANSI_8 & "             Jumplist file NOT FOUND - " & ANSI_8 & GAMENAME & "_JUMPLIST.txt"
		SetArray $jumplist 0
		SetVar $z_nextsector 0
		SaveVar $z_nextsector
		SetVar $jumplistptr 0
	End
	Gosub :Z_Strings~LINE
	Echo "*" & $Z_Strings~line
	If ($flashconfig = FALSE)
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"Z"& ANSI_12 &"]=- " & $blinkon & ANSI_10 & "Z-Bot Configurator" & $blinkoff
	Else
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"Z"& ANSI_12 &"]=- " & ANSI_10 & "Z-Bot Configurator"
	End
End

Gosub :Z_Strings~LINE
Echo "*" & $Z_Strings~line
Echo "*" & $boldred & "-=[" & $boldyellow & "ENTER"& $boldred & "]=- " & $boldcyan & "Continue"
Echo "           " & $boldred & "-=[" & $boldyellow & "<" & $boldred & "] " & $boldwhite & "PAGE " & $z_optionspage & $boldred & " [" & $boldyellow & ">" & $boldred & "]=-"
Echo "           " & $boldred & "-=[" & $boldmagenta & "Q"& $boldred & "]=- " & $boldcyan & "Quit Z-Bot"
Gosub :Z_Strings~LINE
Echo "*" & $Z_Strings~line
Echo "*"
KillAllTriggers
SetTextOutTrigger getopt :GETOPT
SetDelayTrigger opttimeout :OPTTIMEOUT 300000
Pause
:GETOPT
KillAllTriggers
GetOutText $choice 
Goto :STARTMENU2
:OPTTIMEOUT
KillAllTriggers
SetVar $choice #13
#GetConsoleInput $choice SINGLEKEY
:STARTMENU2
UpperCase $choice
If ($choice = #13)
	Gosub :SETPULSETRIGGER
	If ($watch = TRUE)
		Gosub :ONLINEWATCH
	End
	Gosub :Z_Lib~COMMSON
	If ($z_usesound = TRUE)
		Sound ding
	End
	Goto :START2
ElseIf ($choice = ",") or ($choice = "<")
	SetVar $z_optionspage ($z_optionspage - 1)
	If ($z_optionspage < 1)
		SetVar $z_optionspage 4
	End
	SaveVar $z_optionspage
ElseIf ($choice = ".") or ($choice = ">")
	SetVar $z_optionspage ($z_optionspage + 1)
	If ($z_optionspage > 4)
		SetVar $z_optionspage 1
	End
	SaveVar $z_optionspage
ElseIf ($choice = "Q")
	Echo "**" & $boldyellow & " !!! Quit Z-Bot? - " & $boldred & "Are you crazy? (y/N): "
	GetConsoleInput $value SINGLEKEY
	LowerCase $value
	If ($value <> "y")
		Goto :STARTMENU
	End
	Goto :FINISH
ElseIf ($z_optionspage = "1")
	If ($choice = "1")
		Echo "**" & ANSI_10 & "Enter your Base Sector: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If (($value > 0) and ($value <= SECTORS))
				SetVar $z_base $value
				SaveVar $z_base
			End
		End	
	ElseIf ($choice = "2")
		Echo "**" & ANSI_10 & "Enter your Safe Sector - [D|A|R|SECTOR]: "
		GetConsoleInput $value
		LowerCase $value
		If ($value = "d")
			SetVar $value STARDOCK
		ElseIf ($value = "a")
			SetVar $value ALPHACENTAURI
		ElseIf ($value = "r")
			SetVar $value RYLOS
		End
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If (($value > 0) and ($value <= SECTORS))
				SetVar $z_safesector $value
				SaveVar $z_safesector
			End
		End	
	ElseIf ($choice = "3")
		Echo "**" & ANSI_10 & "Enter your Safe Ship Number: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_safeship $value
			SaveVar $z_safeship
			SetVar $z_safetynet FALSE
		End	
	ElseIf ($choice = "4")
		Echo "**" & ANSI_10 & "Enter the number of your MAIN planet: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_planet $value
			SaveVar $z_planet
		End	
	ElseIf ($choice = "5")
		If ($z_doublecheckdock = "TRUE")
			SetVar $z_doublecheckdock "FALSE"
		Else
			SetVar $z_doublecheckdock "TRUE"
		End
		SaveVar $z_doublecheckdock
	ElseIf ($choice = "6")
		If ($z_callfast = "TRUE")
			SetVar $z_callfast "FALSE"
		Else
			SetVar $z_callfast "TRUE"
		End
		SaveVar $z_callfast
	ElseIf ($choice = "7")
		If ($z_updateship = "TRUE")
			SetVar $z_updateship "FALSE"
		Else
			SetVar $z_updateship "TRUE"
		End
		SaveVar $z_updateship
	ElseIf ($choice = "8")
		If ($z_autoigon = "TRUE")
			SetVar $z_autoigon "FALSE"
		Else 
			SetVar $z_autoigon "TRUE"
		End
		SaveVar $z_autoigon
	ElseIf ($choice = "9")
		If ($z_twarpadj = "TRUE")
			SetVar $z_twarpadj "FALSE"
		Else 
			SetVar $z_twarpadj "TRUE"
		End
		SaveVar $z_twarpadj
	ElseIf ($choice = "A")
		If ($z_usesound = TRUE)
			SetVar $z_usesound FALSE
			PROCESSIN 1 "[Z]SETSOUNDOFF[Z]"
		ElseIf ($z_usesound = FALSE)
			SetVar $z_usesound TRUE
			PROCESSIN 1 "[Z]SETSOUNDON[Z]"
		End
		SaveVar $z_usesound
		Sound ding
	ElseIf ($choice = "B") and ($p = TRUE)
		If ($z_sr = "OFF")
			SetVar $z_sr "KILL"
		ElseIf ($z_sr = "KILL")
			SetVar $z_sr "CAP"
		Else
			SetVar $z_sr "OFF"
		End
		SaveVar $z_sr
	ElseIf ($choice = "C") and ($p = TRUE)
		If ($z_pr = "TRUE")
			SetVar $z_pr "FALSE"
		Else 
			SetVar $z_pr "TRUE"
			SetVar $prtarget "0"
			Echo "**" & ANSI_10 & "Enter the PR Target Sector (ENTER for none): "
			GetConsoleInput $value
			IsNumber $isnum $value
			If ($isnum = TRUE)
				If (($value > 0) and ($value <= SECTORS))
					SetVar $prtarget $value
				End
			End
		End
	ElseIf (($choice = "D") and ($p = TRUE))
		If ($z_dockfast = "TRUE")
			SetVar $z_dockfast "FALSE"
		Else
			SetVar $z_dockfast "TRUE"
		End
		SaveVar $z_dockfast
	ElseIf ($choice = "E") and ($p = TRUE)
		If ($z_autoexec = TRUE)
			SetVar $z_autoexec FALSE
		Else
			SetVar $z_autoexec TRUE
		End
		SaveVar $z_autoexec
	ElseIf ($choice = "F") and ($p = TRUE)
		Echo "**" & ANSI_10 & "Enter the command line to execute. (as if at the BOT prompt)*"
		GetConsoleInput $value
		If ($value <> #13) and ($value <> "")
			SetVar $z_autoexeccom $value
			SaveVar $z_autoexeccom
		End
	End
ElseIf ($z_optionspage = "2")
	If ($choice = "1")
		Echo "**" & ANSI_10 & "Number of figs to drop in each sector: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_mowfigs $value
			If ($z_mowfigs > 50000)
				SetVar $z_mowfigs "50000"
			End
			SaveVar $z_mowfigs
			SetVar $CKSURROUNDFIGAMOUNT $z_mowfigs
			SaveVar $CKSURROUNDFIGAMOUNT
		End
	ElseIf ($choice = "2")
		Echo "**" & ANSI_10 & "Number of armid mines to drop in each sector: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_mowmines $value
			SaveVar $z_mowmines
			SetVar $CKSURROUNDARMIDAMOUNT $z_mowmines
			SaveVar $CKSURROUNDARMIDAMOUNT
		End
	ElseIf ($choice = "3")
		Echo "**" & ANSI_10 & "Number of Limpets to drop in each sector: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_mowlimps $value
			SaveVar $z_mowlimps
			SetVar $CKSURROUNDLIMPETAMOUNT $z_mowlimps
			SaveVar $CKSURROUNDLIMPETAMOUNT
		End
	ElseIf ($choice = "4")
		If ($z_figowner = "c")
			SetVar $z_figowner "p"
		Else
			SetVar $z_figowner "c"
		End
		SaveVar $z_figowner
	ElseIf ($choice = "5")
		If ($z_figtype = "d")
			SetVar $z_figtype "o"
		ElseIf ($z_figtype = "o")
			SetVar $z_figtype "t"
		Else
			SetVar $z_figtype "d"
		End
		SaveVar $z_figtype
		SetVar $CKSURROUNDFIGTYPE $z_figtype
		SaveVar $CKSURROUNDFIGTYPE
	ElseIf ($choice = "6")
		Echo "**" & ANSI_10 & "Minimum number of figs to conserve: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_minfigs $value
			SaveVar $z_minfigs
		End
	ElseIf ($choice = "7")
		Echo "**" & ANSI_10 & "Minimum number of turns to conserve: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_minturns $value
			SaveVar $z_minturns
		End
	ElseIf ($choice = "8")
		Echo "**" & ANSI_10 & "Enter the Buy Ship Letter for the Furb Ship: "
		GetConsoleInput $value
		If ($value <> "")
			SetVar $z_furbshipletter $value
			SaveVar $z_furbshipletter
		End
	ElseIf ($choice = "9")
		Echo "**" & ANSI_10 & "Enter the number of extra holds for the Furb Ship: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_furbholds $value
			SaveVar $z_furbholds
		End
	ElseIf ($choice = "A")
		Echo "**" & ANSI_10 & "Number of waves to throw in a volley: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_volley $value
			SaveVar $z_volley
		End
	ElseIf ($choice = "B")
		Echo "**" & ANSI_10 & "Pdrop: Number of seconds delay before return: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $pdropreturndelay $value
			If ($pdropreturndelay > 300)
				SetVar $pdropreturndelay "300"
			End
			If ($pdropreturndelay < 0)
				SetVar $pdropreturndelay "0"
			End
			SaveVar $pdropreturndelay
		End
	ElseIf ($choice = "C")
		Echo "**" & ANSI_10 & "Enter the Team Name: "
		GetConsoleInput $value
		LowerCase $value
		SetVar $z_team $value
		SaveVar $z_team
	ElseIf ($choice = "D")
		Echo "**" & ANSI_10 & "Enter your In-Game Name: "
		GetConsoleInput $value
		SetVar $z_ingamename $value
		LowerCase $z_ingamename
		SaveVar $z_ingamename
	End
ElseIf ($z_optionspage = "3")
	If ($choice = "1")
		If ($z_mslflag = TRUE)
			SetVar $z_mslflag FALSE
		ElseIf ($z_mslflag = FALSE)
			SetVar $z_mslflag TRUE
			Gosub :GETMSLS
			If ($z_mslsok <> TRUE)
				SetVar $z_mslflag FALSE
			End
			If ($didmsls = TRUE)
				SetVar $didmsls FALSE
				Gosub :Z_Lib~SYNC
			End
		End
		SaveVar $z_mslflag
	ElseIf ($choice = "2")
		If ($z_bustflag = TRUE)
			SetVar $z_bustflag FALSE
		ElseIf ($z_bustflag = FALSE)
			SetVar $z_bustflag TRUE
		End
		SaveVar $z_bustflag
	ElseIf ($choice = "3")
		If ($z_lrsflag = TRUE)
			SetVar $z_lrsflag FALSE
		ElseIf ($z_lrsflag = FALSE)
			SetVar $z_lrsflag TRUE
		End
		SaveVar $z_lrsflag
	ElseIf ($choice = "4")
		If ($z_specflag = TRUE)
			SetVar $z_specflag FALSE
		Else
			SetVar $z_specflag TRUE
		End
		SaveVar $z_specflag
	ElseIf ($choice = "5")
		If ($z_turnsflag = TRUE)
			SetVar $z_turnsflag FALSE
		Else
			SetVar $z_turnsflag TRUE
		End
		SaveVar $z_turnsflag
	ElseIf ($choice = "6")
		If ($z_limpalarm = TRUE)
			SetVar $z_limpalarm FALSE
		ElseIf ($z_limpalarm = FALSE)
			SetVar $z_limpalarm TRUE
		End
		SaveVar $z_limpalarm
	ElseIf ($choice = "7")
		If ($watch = TRUE)
			SetVar $watch FALSE
		ElseIf ($watch = FALSE)
			SetVar $watch TRUE
			Echo "**" & ANSI_15 & " Enter the number of seconds between checks (5-59): "
			GetConsoleInput $value 
			IsNumber $isnum $value
			If ($isnum = TRUE)
				If ($value < 5)
					SetVar $z_watchtime 5
				ElseIf ($value > 59) 
					SetVar $z_watchtime 59
				Else
					SetVar $z_watchtime $value
				End
			End
		End
	ElseIf ($choice = "8")
		If ($z_clv = "TRUE") or ($z_clv = FALSE)
			SetVar $z_clv "FALSE"
		Else 
			SetVar $z_clv "TRUE"
		End
		SaveVar $z_clv
	ElseIf ($choice = "9")
		If ($z_heraldturns = TRUE)
			SetVar $z_heraldturns FALSE
		ElseIf ($z_heraldturns = FALSE)
			SetVar $z_heraldturns TRUE
		End
		SaveVar $z_heraldturns
	ElseIf ($choice = "A")
		If ($z_proximityalert = "TRUE")
			SetVar $z_proximityalert "FALSE"
			PROCESSIN 1 "[Z]PROXIMITYOFF[Z]"
		Else 
			SetVar $z_proximityalert "TRUE"
			PROCESSIN 1 "[Z]PROXIMITYON[Z]"
		End
		SaveVar $z_proximityalert
	ElseIf ($choice = "B")
		If ($z_broadcast = TRUE)
			PROCESSIN 1 "[Z]SETBROADCASTOFF[Z]"
			SetVar $z_broadcast FALSE
		Else
			PROCESSIN 1 "[Z]SETBROADCASTON[Z]"
			SetVar $z_broadcast TRUE
		End
		SaveVar $z_broadcast
	ElseIf ($choice = "C")
		If ($z_timecheck = TRUE)
			SetVar $z_timecheck FALSE
		ElseIf ($z_timecheck = FALSE)
			SetVar $z_timecheck TRUE
		End
		SaveVar $z_timecheck
	ElseIf ($choice = "D")
		If ($servershutdowntriggers = TRUE)
			SetVar $servershutdowntriggers FALSE
		ElseIf ($servershutdowntriggers = FALSE)
			SetVar $servershutdowntriggers TRUE
		End
	ElseIf ($choice = "E")
		If ($Z_Lib~silentmode = TRUE)
			SetVar $Z_Lib~silentmode FALSE
		ElseIf ($Z_Lib~silentmode = FALSE)
			SetVar $Z_Lib~silentmode TRUE
		End
	ElseIf ($choice = "F")
		If ($z_figherald = TRUE)
			SetVar $z_figherald FALSE
		ElseIf ($z_figherald = FALSE)
			SetVar $z_figherald TRUE
		End
		SaveVar $z_figherald
	ElseIf ($choice = "G") and ($p = TRUE) and ($targetsystemok = TRUE)
		If ($z_heraldhit = FALSE)
			SetVar $z_heraldhit "E"
		ElseIf ($z_heraldhit = "E")
			SetVar $z_heraldhit "R"
		ElseIf ($z_heraldhit = "R")
			SetVar $z_heraldhit FALSE	
		End
	End
ElseIf ($z_optionspage = "4")
	If ($choice = "1")
		Echo "**" & ANSI_12 & "This will delete the " & ANSI_14 & GAMENAME & "_AVOIDSLIST.TXT" & ANSI_12 & " avoids backup file."
		Echo "**" & "[5m" & ANSI_15 & "     ARE YOU SURE (y/N)?" & "[0m"
		GetConsoleInput $value SINGLEKEY
		UpperCase $value
		If ($value = "Y")
			Delete GAMENAME & "_AVOIDSLIST.TXT"
		End
		SetVar $avoidsfiledeleted TRUE
	ElseIf ($choice = "2")
		Gosub :EXPORTAVOIDS
	ElseIf ($choice = "3")
		Gosub :IMPORTAVOIDS
	ElseIf ($choice = "4")
		If ($z_remoteaccess = "TRUE")
			Echo "**" & ANSI_12 &              "     This will DISALLOW REMOTE ACCESS to your Bot altogether."
			Echo "*" & ANSI_12 &               "         Your corpies will NOT be able to BOT you AT ALL!"
			Echo "**" & "[5m" & ANSI_15 & "                        ARE YOU SURE (y/N)?"    & "[0m"
			GetConsoleInput $value SINGLEKEY
			UpperCase $value
			If ($value = "Y")
				SetVar $z_remoteaccess "FALSE"
				PROCESSIN 1 "[Z]REMOTEOFF[Z]"
				SetVar $Z_Logs~logentry $scripttitle & ": " & "REMOTE ACCESS turned OFF."
				Gosub :Z_Logs~ENTERLOG
			End
		Else
			SetVar $z_remoteaccess "TRUE"
			PROCESSIN 1 "[Z]REMOTEON[Z]"
			SetVar $Z_Logs~logentry $scripttitle & ": " & "REMOTE ACCESS turned ON."
			Gosub :Z_Logs~ENTERLOG
		End
		SaveVar $z_remoteaccess
	ElseIf ($choice = "5")
		If ($z_autoss = TRUE)
			SetVar $z_autoss FALSE
		ElseIf ($z_autoss = FALSE)
			SetVar $z_autoss TRUE
			SetVar $lasthours "-1"
			#SetVar $pulsecheck TRUE
			#SaveVar $pulsecheck
			#PROCESSIN 1 $z_botname & "[Z]COMMSGUARDON[Z]" & $z_botname
		End
		SaveVar $z_autoss
	ElseIf ($choice = "6")
		Echo "**" & ANSI_10 & "Enter the AutoSS Seed: "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($isnum = TRUE)
			SetVar $z_seed $value
			SaveVar $z_seed
		End
	ElseIf ($choice = "7")
		Echo "**" & ANSI_10 & "Enter the bot password for PM commands: "
		GetConsoleInput $value
		If ($value <> #13) and ($value <> "")
			SetVar $z_botpw $value
			SaveVar $z_botpw
		End	
	ElseIf ($choice = "8")
		If ($pulsecheck = TRUE)
			SetVar $pulsecheck FALSE
			PROCESSIN 1 $z_botname & "[Z]COMMSGUARDOFF[Z]" & $z_botname
		ElseIf ($pulsecheck = FALSE)
			SetVar $pulsecheck TRUE
			PROCESSIN 1 $z_botname & "[Z]COMMSGUARDON[Z]" & $z_botname
		End
		SaveVar $pulsecheck
	ElseIf ($choice = "9")
		If ($z_altcitview = TRUE)
			SetVar $z_altcitview FALSE
		ElseIf ($z_altcitview = FALSE)
			SetVar $z_altcitview TRUE
		End
		SaveVar $z_altcitview
	ElseIf ($choice = "A")
		If ($z_selfbotss = TRUE)
			SetVar $z_selfbotss FALSE
		ElseIf ($z_selfbotss = FALSE)
			SetVar $z_selfbotss TRUE
		End
		SaveVar $z_selfbotss
		SetVar $z_Lib~selfbotss $z_selfbotss
	ElseIf ($choice = "B")
		If ($z_ignorescriptloads = "TRUE")
			SetVar $z_ignorescriptloads "FALSE"
		ElseIf ($z_ignorescriptloads = "FALSE")
			SetVar $z_ignorescriptloads "TRUE"
		End
		SaveVar $z_ignorescriptloads
	ElseIf ($choice = "C") and ($jumplistok = TRUE)
		SetArray $jumplist 0
		ReadToArray GAMENAME & "_JUMPLIST.txt" $jumplist
		GetWord $jumplist[1] $z_nextsector 1
		SaveVar $z_nextsector
		SetVar $jumplistptr 1
	ElseIf ($choice = "D") and ($jumplist > 0)
		Echo "**" & ANSI_10 & "Enter the next sector to visit in the list: "
		GetConsoleInput $value
		If ($value <> #13) and ($value <> "")
			GetWord $jumplist[1] $z_nextsector 1
			SaveVar $z_nextsector
			SetVar $jumplistptr 1
			IsNumber $isnum $value
			If ($isnum = TRUE)
				If ($value > 0) and ($value <= SECTORS)
					SetVar $x 1
					While ($x <= $jumplist)
						GetWord $jumplist[$x] $temp 1
						If ($temp = $value)
							SetVar $z_nextsector $value
							SaveVar $z_nextsector
							SetVar $jumplistptr $x
							SetVar $x $jumplist
						End
						SetVar $x ($x + 1)
					End
				End
			End
		End
	ElseIf ($choice = "Z")
		SetVar $needreset FALSE
		Gosub :CONFIGURATOR
		If ($needreset = TRUE)
			Gosub :INTCOM_RESET
		End
	End
End
Goto :STARTMENU
# START 
:START
Gosub :SPLASH
SetVar $Z_Lib~message "[GENERAL] {" & $z_botname & "} - Initialization Complete - " & $scripttitle & " v" & $version & " engaged...*"
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
SetVar $Z_Logs~logentry $scripttitle & ": " & #42 & #42 & #42 &" ENGAGED " & #42 & #42 & #42
Gosub :Z_Logs~ENTERLOG
LoadVar $z_autoexec
LoadVar $z_autoexeccom
If ($z_autoexec = TRUE) and ($z_autoexeccom <> "0") and ($z_autoexeccom <> "") and ($z_autoexeccom <> " ") and ($p = TRUE)
	Send #145
	WaitOn #145 & #8
	SetVar $Z_Lib~message $scripttitle & ": AUTOEXEC COMMAND  [ " & $z_autoexeccom & " ]  initiated.*"
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	SetVar $commandline $z_autoexeccom
	SetVar $Z_Logs~logentry $scripttitle & ": AUTOEXEC Command [" & $commandline & "] initiated."
	Gosub :Z_Logs~ENTERLOG
	KillAllTriggers
	Goto :AUTOBOT
End
:START2
PROCESSIN 1 "[Z]SCRIPTLOADED[Z]"
If (CONNECTED = TRUE)
	#Send #27
Else
	Goto :CONNECTIONLOST
End
Gosub :SETMAINTRIGGERS
Goto :START3
# WAITFORCOMMAND 
:WAITFORCOMMAND
#SetVar $reset TRUE
If ($reset = TRUE)
	KillAllTriggers
	SetVar $reset FALSE
	Goto :START2
End
:START3
Pause
#Echo "***" & $boldred & $blinkon & "!!! ERROR !!! We should NOT be here !" & $blinkoff
SetVar $Z_Logs~logentry $scripttitle & ": !!! Error Correction !!!"
Gosub :Z_Logs~ENTERLOG
If ($twxerror <> TRUE)
#	Echo "*" & $boldyellow & "Attempting to correct the problem...***"
	SetVar $twxerror TRUE
	SetVar $reset TRUE
	Goto :START2
End
Gosub :Z_Lib~PAUSE
# FINISH 
:FINISH
If ($shutdowntime <> "NOW")
	Gosub :Z_Lib~COMMSON
End
:FINISH2
SetVar $Z_Logs~logentry $scripttitle & ": Terminating.."
Echo "**" & $boldred & $blinkon & "Z-Bot has powered down !**" & $blinkoff
Gosub :Z_Logs~ENTERLOG
If ($z_usesound = TRUE)
	Sound ding
End
If ($shutdowntime = "NOW")
	DISCONNECT
	SetDelayTrigger disnow :DISCONNECTNOW 4000
	Pause
:DISCONNECTNOW
	KillAllTriggers
	CONNECT
End
Halt
# SELFBOT 
:SELFBOT
KillAllTriggers 
SetVar $selfbot TRUE
SetVar $messagemode "E"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "E"
SetVar $Z_Lib~messageto ""
Gosub :Z_Lib~COMMSOFF
Echo "*" & $boldwhite & "BOT"
GetConsoleInput $commandline
If ($commandline <> "") and ($commandline <> "0") and ($commandline <> $lastselfbot[1])
	SetVar $x 2
	SetVar $inhistory "0"
	While ($x <= 9)
		If ($commandline = $lastselfbot[$x])
			SetVar $inhistory $x
			SetVar $x 9
		End
		SetVar $x ($x + 1)
	End
	If ($inhistory <> "0")
		SetVar $x $inhistory
	Else
		SetVar $x 9
	End
	While ($x > 1)
		SetVar $lastselfbot[$x] $lastselfbot[($x - 1)]
		SetVar $x ($x - 1)
	End
	SetVar $lastselfbot[1] $commandline
	
End
# AUTOBOT 
:AUTOBOT
#Lowercase $commandline
GetWord $commandline $command 1
If ($command <> "") and ($command <> "0") and ($command <> #13)
	GetWordPos $commandline $pos " "
	If ($pos > 1)
		StripText $commandline ($command & " ")
	Else
		StripText $commandline $command
	End
	SetVar $user_command_line $commandline
	Gosub :CHECKEXTERNAL
	If ($isexternalcommand = TRUE)
		SetVar $lastgetstats ""
		Gosub :PARSEUCL
		Gosub :RUNEXTERNALCOMMAND
	Else
		Gosub :CHECKINTERNAL
		If ($isinternalcommand = TRUE)
			Gosub :PARSEUCL
			If ($PARM1 = "help") or ($PARM1 = "?")
				SetVar $Z_Help~messagemode "E"
				SetVar $helptarget ":Z_Help~HELPINDEX" & $internalindex
				SetVar $Z_Help~botaddress $z_selfbotkeyd
				SetVar $Z_Help~z $p
				Gosub $helptarget
			Else
				SetVar $lastgetstats ""
				Gosub :RUNINTERNALCOMMAND
			End
		End
	End
End
Gosub :Z_Lib~COMMSON
SetVar $selfbot FALSE
SetVar $reset TRUE
If ($z_movement = TRUE)
	SetVar $z_movement FALSE
	Return
End
If ($looping = TRUE)
	Return
End
Goto :WAITFORCOMMAND
# NEWCORPY 
:NEWCORPY
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 1
If ($ck = "You")
	GetText $line $sender "from " "."
	If ($len > 6)
		CutText $sender $sender 1 6
	End
	SetVar $Z_Strings~trimstring $sender
	Gosub :Z_Strings~RTRIM
	SetVar $sender $Z_Strings~trimstring
	Gosub :CHECKCORPY
	If ($isacorpy <> TRUE)
		SetVar $z_corpies ($z_corpies + 1)
		SetVar $z_corpy[$z_corpies] $sender
		SaveVar $z_corpy[$z_corpies]
		SaveVar $z_corpies
		SetVar $Z_Lib~messageto ""
		SetVar $Z_Lib~messagemode "R"
		SetVar $Z_Lib~message $sender & " added to Corpy List.*"
	Else
		SetVar $Z_Lib~message $sender & " is already a corpy. No list changes made.*"
	End
	SetVar $Z_Lib~message ($Z_Lib~message & "My bot name is [ " & $z_botname & " ]*")
	Gosub :MSGBRIDGE
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# NEWCORPY2 
:NEWCORPY2
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 2
If ($ck = "joined")
	GetWord $line $sender 1
	If ($len > 6)
		CutText $sender $sender 1 6
	End
	SetVar $Z_Strings~trimstring $sender
	Gosub :Z_Strings~RTRIM
	SetVar $sender $Z_Strings~trimstring
	Gosub :CHECKCORPY
	If ($isacorpy <> TRUE)
		SetVar $z_corpies ($z_corpies + 1)
		SetVar $z_corpy[$z_corpies] $sender
		SaveVar $z_corpy[$z_corpies]
		SaveVar $z_corpies
		SetVar $Z_Lib~message $sender & " added to Corpy List.*"
	Else
		SetVar $Z_Lib~message $sender & " is already a corpy. No list changes made.*"
	End
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# REMOTECOMMANDHANDLER 
:REMOTECOMMANDHANDLER
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :NOCOMMAND
End
Gosub :CLEARPARMS
SetVar $remote FALSE
SetVar $messagemode "R"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~messageto ""
If ($ck = "'")
	GetWord $line $word1 1
	GetLength $word1 $len
	If ($len > 1)
		StripText $word1 "'"
		If ($word1 <> $z_botname) and ($word1 <> $z_team)
			Goto :NOCOMMAND
		End
		Gosub :CLEARPARMS
		GetWord $line $command 2
	Else
		GetWord $line $word1 2
		If ($word1 <> $z_botname)
			Goto :NOCOMMAND
		End
		Gosub :CLEARPARMS
		GetWord $line $command 3
	End
Else
	If ($ck = "P")
		SetTextLineTrigger waitforphclose :WAITFORPHCLOSE "terminated the comm-link!"
		SetDelayTrigger waitforphclose2 :PHNOTCLOSED 3000
		SetVar $messagemode "P"
		CutText $line $sender 3 6
		SetVar $Z_Strings~trimstring $sender
		Gosub :Z_Strings~RTRIM
		SetVar $sender $Z_Strings~trimstring
		SetVar $messageto $sender
		SetVar $Z_Lib~messagemode "P"
		SetVar $Z_Lib~messageto $sender
		Pause
:PHNOTCLOSED
		KillTrigger waitforphclose2
		KillTrigger waitforphclose
		Goto :NOCOMMAND
:WAITFORPHCLOSE
		KillTrigger waitforphclose2
		KillTrigger waitforphclose
		SetVar $Z_Logs~logentry $scripttitle & ": INCOMING PM - " & $line
		Gosub :Z_Logs~ENTERLOG
		If ($z_botpw <> "0") and ($z_botpw <> "")
			SetVar $remote TRUE
#			CutText $line $sender 3 6
#			SetVar $Z_Strings~trimstring $sender
#			Gosub :Z_Strings~RTRIM
#			SetVar $sender $Z_Strings~trimstring
			Gosub :CHECKCORPY
			If ($isacorpy = FALSE)
				Goto :NOCOMMAND
			End
			CutText $line $temp 9 999
			GetWord $temp $ck 1
			LowerCase $ck
			If ($ck <> $z_botname)
				Goto :NOCOMMAND
			End
			Gosub :CLEARPARMS
			GetWord $temp $pwcheck 2
			If ($pwcheck <> $z_botpw)
				Goto :NOCOMMAND
			End
			GetWord $temp $command 3
		Else
			SetVar $remote TRUE
#			CutText $line $sender 3 6
#			SetVar $Z_Strings~trimstring $sender
#			Gosub :Z_Strings~RTRIM
#			SetVar $sender $Z_Strings~trimstring
			Gosub :CHECKCORPY
			If ($isacorpy = FALSE)
				Goto :NOCOMMAND
			End
			CutText $line $temp 9 999
			GetWord $temp $ck 1
			LowerCase $ck
			If ($ck <> $z_botname)
				Goto :NOCOMMAND
			End
			Gosub :CLEARPARMS
			GetWord $temp $command 2
		End
	Else
		SetVar $Z_Logs~logentry $scripttitle & ": INCOMING SS - " & $line
		Gosub :Z_Logs~ENTERLOG
		SetVar $remote TRUE
		CutText $line $sender 3 6
		SetVar $Z_Strings~trimstring $sender
		Gosub :Z_Strings~RTRIM
		SetVar $sender $Z_Strings~trimstring
		Gosub :CHECKCORPY
		If ($isacorpy = FALSE)
			Goto :NOCOMMAND
		End
		CutText $line $temp 9 999
		GetWord $temp $ck 1
		LowerCase $ck
		If ($ck <> $z_botname)  and ($ck <> $z_team)
			Goto :NOCOMMAND
		End
		Gosub :CLEARPARMS
		GetWord $temp $command 2
	End
End
If ($remote = TRUE)
	If ($z_remoteaccess <> "TRUE")
		SetVar $Z_Logs~logentry $scripttitle & ": !!! REMOTE ACCESS DENIED !!! - " & $sender
		Gosub :Z_Logs~ENTERLOG
		SetVar $Z_Lib~message $scripttitle & ": ACCESS DENIED !*"
		Gosub :MSGBRIDGE
		Goto :NOCOMMAND
	End
	SetVar $Z_Logs~logentry $scripttitle & ": BOTTED - " & $line
	Gosub :Z_Logs~ENTERLOG
End
SetVar $line ($line & " !!!")
GetText $line $user_command_line (" " & $command & " ") " !!!"
LowerCase $command
Gosub :CHECKEXTERNAL
If ($isexternalcommand = TRUE)
	Gosub :PARSEUCL
	SetVar $lastgetstats ""
	Gosub :RUNEXTERNALCOMMAND
	Goto :EXTERNALDONE
Else
	Gosub :CHECKINTERNAL
	If ($isinternalcommand = TRUE)
		Gosub :PARSEUCL
		If ($PARM1 = "help") or ($PARM1 = "?")
			SetVar $Z_Help~messageto $sender
			SetVar $Z_Help~messagemode $messagemode
			SetVar $helptarget ":Z_Help~HELPINDEX" & $internalindex
			SetVar $Z_Help~botaddress $z_botname
			SetVar $Z_Help~z $p
			Gosub $helptarget
		Else
			SetVar $lastgetstats ""
			Gosub :RUNINTERNALCOMMAND
		End
	End
End
:NOCOMMAND
Gosub :CLEARPARMS
:EXTERNALDONE
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# RUNINTERNALCOMMAND 
:RUNINTERNALCOMMAND
UpperCase $command
SetVar $icommand (":INTCOM_" & $command)
If ($commandmode <> "#STATUS#")
	SetVar $mode $commandmode
End
Gosub $icommand
If ($icommand <> ":INTCOM_STATUS")
	SetVar $mode "GENERAL"
End
Gosub :CLEARPARMS
Return
# WALKERKEYPRESSED 
:WALKERKEYPRESSED
GetOutText $key
If ($key <> $z_citmenukey)
	PROCESSOUT $key
	Goto :WAITFORCOMMAND
End
KillAllTriggers
Gosub :GETSHIPDATA
If ($walkautoscan = TRUE)
	If ($scanner = 2)
		Send "shsd"
		SetVar $walkscanned TRUE
	ElseIf ($scanner = 1)
		Send "s"
	End
	Send "*"
End
SetVar $walking TRUE
SetArray $walkhistory 9
:WALKLOOP
KillAllTriggers
Gosub :CLEARMOVEOPTIONS
SetArray $adjacents 6
SetArray $portclasses 8
SetVar $portclasses[1] $green & "BB" & $boldcyan & "S"
SetVar $portclasses[2] $green & "B" & $boldcyan & "S" & $green & "B"
SetVar $portclasses[3] $boldcyan & "S" & $green & "BB"
SetVar $portclasses[4] $boldcyan & "SS" & $green & "B"
SetVar $portclasses[5] $boldcyan & "S" & $green & "B" & $boldcyan & "S"
SetVar $portclasses[6] $green & "B" & $boldcyan & "SS"
SetVar $portclasses[7] $boldcyan & "SSS"
SetVar $portclasses[8] $green & "BBB"
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
CutText CURRENTLINE $word 1 7
If ($word <> "Command")
	Goto :ENDWALK
End
Send "*"
Send #145
WaitFor #145 & #8
SetVar $Z_Strings~padchar "0"
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $current_sector
SetVar $Z_Strings~rpad FALSE
Gosub :Z_Strings~PAD
SetVar  $currentsectord $Z_Strings~padded
SetVar $i 1
SetVar $warps SECTOR.WARPCOUNT[$current_sector]
SetVar $line1 ""
SetVar $line2 ""
SetVar $line3 ""
SetVar $line4 ""
SetVar $line5 ""
SetVar $line6 ""
While ($i <= $warps)
	SetVar $adjacents[$i] SECTOR.WARPS[$current_sector][$i]
	If ($adjacents[$i] > 0) and ($adjacents[$i] <= SECTORS)
		SetVar $line1 ($line1 & $boldblue & #179 & $cyan & "---[" & $boldwhite & $i & $cyan & "]---" & $boldblue & #179)
		GetDistance $bdchk $adjacents[$i] $current_sector
		If ($bdchk = "-1")
			SetVar $bktcol $cyan
		ElseIf ($bdchk = "1")
			SetVar $bktcol $boldwhite
		Else
			SetVar $bktcol $boldred
		End
		SetVar $adjcol $boldgreen
		SetVar $walkalert FALSE
		SetVar $walkfigs SECTOR.FIGS.QUANTITY[$adjacents[$i]]
		If ($walkfigs >= 1)
			If (SECTOR.FIGS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.FIGS.OWNER[$adjacents[$i]] = "yours")
				SetVar $adjcol $boldgreen
				SetVar $walkf ($boldgreen & "F")
				If ($walkscanned = TRUE)
					SetSectorParameter $adjacents[$i] "FIGSEC" TRUE
				End
			Else
				If ($walkscanned = TRUE)
					SetSectorParameter $adjacents[$i] "FIGSEC" FALSE
				End
				If ($walkfigs = 1)
					SetVar $adjcol $boldyellow
					SetVar $walkf ($boldyellow & "F")
				ElseIf ($walkfigs <= 100)
					SetVar $adjcol $boldmagenta
					SetVar $walkf ($boldmagenta & "F")
				Else
					SetVar $adjcol $boldred
					SetVar $walkf ($boldred & "F")
					SetVar $walkalert TRUE
				End
			End
		Else
			If ($walkscanned = TRUE)
				SetSectorParameter $adjacents[$i] "FIGSEC" FALSE
			End
			SetVar $adjcol $white
			SetVar $walkf ($boldblack & " ")
		End
		If (PORT.EXISTS[$adjacents[$i]] = TRUE)
			If (PORT.CLASS[$adjacents[$i]] = 0)
				If ($adjacents[$i] = "1")
					SetVar $walkbbb $boldwhite & "TERRA"
				ElseIf ($adjacents[$i] = RYLOS)
					SetVar $walkbbb $boldwhite & "RYLOS"
				ElseIf ($adjacents[$i] = ALPHACENTAURI)
					SetVar $walkbbb $boldwhite & "ALPHA"
				End
			ElseIf (PORT.CLASS[$adjacents[$i]] = 9)
				SetVar $walkbbb $boldwhite & "SDOCK"
			Else
				SetVar $walkbbb ($white & " " & $portclasses[PORT.CLASS[$adjacents[$i]]] & " ")
			End
		Else
			SetVar $walkbbb $boldblack & " --- "
		End
		If (SECTOR.ANOMOLY[$adjacents[$i]] = TRUE)
			If (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "yours")
				SetVar $walkanom $boldgreen & "A"
			Else
				SetVar $walkanom $boldred & "A"
				SetVar $walkalert TRUE
			End
		Else
			SetVar $walkanom " "
		End
		SetVar $walkmines SECTOR.MINES.QUANTITY[$adjacents[$i]]
		If ($walkmines >= 1)
			If (SECTOR.MINES.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.MINES.OWNER[$adjacents[$i]] = "yours")
				SetVar $walkm ($boldgreen & "M")
			Else
				If ($walkmines = 1)
					SetVar $walkf ($yellow & "M")
				ElseIf ($walkmines <= 3)
					SetVar $walkm ($boldyellow & "M")
				Else
					SetVar $adjcol $boldred
					SetVar $walkm ($boldred & "M")
					SetVar $walkalert TRUE
				End
			End
		Else
			SetVar $walkm ($boldblack & " ")
		End
		If (SECTOR.TRADERCOUNT[$adjacents[$i]] > 0)
			SetVar $walktrad $boldred & "TRDRS"
		Else
			SetVar $walktrad $boldblack & " --- "
		End
		If (SECTOR.SHIPCOUNT[$adjacents[$i]] > 0)
			SetVar $walkship $boldwhite & "S"
		Else
			SetVar $walkship " "
		End
		SetVar $walklimps SECTOR.LIMPETS.QUANTITY[$adjacents[$i]]
		If ($walklimps >= 1)
			If (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "yours")
				SetVar $walkl ($boldgreen & "L")
			Else
				SetVar $adjcol $boldred
				SetVar $walkl ($boldred & "L")
				SetVar $walkalert TRUE
			End
		Else
			SetVar $walkl ($boldblack & " ")
		End
		SetVar $walkdens SECTOR.DENSITY[$adjacents[$i]]
		If ($adjacents[$i] = $z_base)
			SetVar $walkd $boldgreen & "BASE "
		Else
			If ($walkdens > 499)
				SetVar $walkd $boldred & "DENSE"
			Else
				If ($adjacents[$i] = $z_safesector)
					SetVar $walkd $green & "SAFE "
				Else
					SetVar $walkd "     "
				End
			End
		End
		If (SECTOR.PLANETCOUNT[$adjacents[$i]] > 0)
			If ($adjacents[$i] = $z_base)
				SetVar $walkp $boldgreen & "P"
			Else
				SetVar $walkp $blinkon & $boldred & "P" & $blinkoff
			End
			If (SECTOR.FIGS.OWNER[$adjacents[$i]] <> "belong to your Corp") and (SECTOR.FIGS.OWNER[$adjacents[$i]] <> "yours") and (SECTOR.FIGS.QUANTITY[$adjacents[$i]] > 0)
				SetVar $walkalert TRUE
			End
		Else
			SetVar $walkp " "
		End
		If (SECTOR.BACKDOORCOUNT[$adjacents[$i]] > 0)
			SetVar $walkbd $red & "BD"
		Else
			SetVar $walkbd "  "
		End
		SetVar $walkwarps SECTOR.WARPCOUNT[$adjacents[$i]]
		If ($walkwarps > 0)
			If ($walkwarps = 1)
				SetVar $walkw $green & $walkwarps & "-Way "
			ElseIf ($walkwarps = 6)
				SetVar $walkw $boldyellow & $walkwarps & "-Way "
			ElseIf ($walkwarps = 5)
				SetVar $walkw $boldcyan & $walkwarps & "-Way "
			Else
				SetVar $walkw $cyan & $walkwarps & "-Way "
			End
		Else
			SetVar $walkw $red & "NO MAP"
		End
		If ($walkalert = TRUE)
			SetVar $adjcol $boldred
		End
		SetVar $Z_Strings~padchar "0"
		SetVar $Z_Strings~padlen 5
		SetVar $Z_Strings~unpadded $adjacents[$i]
		SetVar $Z_Strings~rpad FALSE
		Gosub :Z_Strings~PAD
		SetVar  $adjacentd $Z_Strings~padded
		SetVar $line2 ($line2 & $boldblue & #179 & $bktcol & " [" & $adjcol & $adjacentd & $bktcol & "] " & $boldblue & #179)
		SetVar $line3 ($line3 & $boldblue & #179 & $walkf & " " & $walkbbb & " " & $walkanom & $boldblue & #179)
		SetVar $line4 ($line4 & $boldblue & #179 & $walkm & " " & $walktrad & " " & $walkship & $boldblue & #179)
		SetVar $line5 ($line5 & $boldblue & #179 & $walkl & " " & $walkd & " " & $walkp & $boldblue & #179)
		SetVar $line6 ($line6 & $boldblue & #179 & $walkbd & " " & $walkw & $boldblue & #179)
	End
	SetVar $i ($i + 1)
End
While ($i <= 6)
	SetVar $line1 ($line1 & "           ")
	SetVar $line2 ($line2 & "           ")
	SetVar $line3 ($line3 & "           ")
	SetVar $line4 ($line4 & "           ")
	SetVar $line5 ($line5 & "           ")
	SetVar $line6 ($line6 & "           ")
	SetVar $i ($i + 1)
End
If ($scanner > 0)
	If ($walkautoscan = TRUE)
		SetVar $walkauto $boldgreen & "uto"
	Else
		SetVar $walkauto $red & "uto"
	End
	SetVar $line1 ($line1 & "  " & $boldwhite & "A" & $walkauto)
	SetVar $line1 ($line1 & " " & $boldwhite & "G" & $cyan & "asUp")
	If ($scanner = 2)
		SetVar $line2 ($line2 & "  " & $boldwhite & "S" & $cyan & "can " & $cyan & "s" & $boldwhite & "U" & $cyan & "rrnd")
		SetVar $line3 ($line3 & "  " & $boldwhite & "H" & $cyan & "olo")
	End
	SetVar $line3 ($line3 & " " & $boldwhite & "D" & $cyan & "ens")
End
If ($walklast > 0) and ($walklast <= SECTORS)
	GetDistance $walkdist $current_sector $walklast
	If ($walkdist = 1)
		SetVar $line4 ($line4 & "  " & $boldwhite & "<" & $boldcyan & $walklast)
		SetVar $line4 ($line4 & " " & $boldwhite & "C" & $cyan & "lear")
	Else
		SetVar $line4 ($line4 & "  " & $boldwhite & "C" & $cyan & "lear")
	End
Else
	SetVar $line4 ($line4 & "  " & $boldwhite & "C" & $cyan & "lear")
End
SetVar $line5 ($line5 & "  " & $boldwhite & "F" & $cyan & "ig " & $cyan & "d" & $boldwhite & "I" & $cyan & "srupt")
SetVar $line6 ($line6 & "  " & $boldwhite & "Q" & $cyan & "uit " & $boldwhite & "E" & $cyan & "xEnt")
If ($walkscanned = TRUE)
	SetVar $sectcol $boldcyan
Else
	SetVar $sectcol $white
End
If (SECTOR.BACKDOORCOUNT[$current_sector] > 0)
	SetVar $walkbd "[2C" & $boldred & "BD"
Else
	SetVar $walkbd ""
End
SetVar $curstat ""
If (SECTOR.FIGS.OWNER[$current_sector] <> "belong to your Corp") and (SECTOR.FIGS.OWNER[$current_sector] <> "yours") and (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
	SetVar $curstat $boldred & "F"
ElseIf (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
	SetVar $curstat $boldgreen & "F"
Else
	SetVar $curstat $boldblue & #196
End
If (SECTOR.MINES.OWNER[$current_sector] <> "belong to your Corp") and (SECTOR.MINES.OWNER[$current_sector] <> "yours") and (SECTOR.MINES.QUANTITY[$current_sector] > 0)
	SetVar $curstat ($curstat & $boldred & "M")
ElseIf (SECTOR.MINES.QUANTITY[$current_sector] > 0)
	SetVar $curstat ($curstat & $boldgreen & "M")
Else
	SetVar $curstat ($curstat & $boldblue & #196)
End
If (SECTOR.ANOMOLY[$current_sector] = TRUE)
	If (SECTOR.LIMPETS.OWNER[$current_sector] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$current_sector] = "yours")
		SetVar $curstat ($curstat & $boldgreen & "L")
	Else
		SetVar $curstat ($curstat & $boldred & "A")
	End
Else
	SetVar $curstat ($curstat & $boldblue & #196)
End
SetDelayTrigger creepdelay :CREEPDELAY 300
Pause
:CREEPDELAY
Echo "**"
Gosub :Z_Lib~BLUELINE
Gosub :Z_Lib~ZEDLINE
If ($current_sector = STARDOCK)
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldwhite & "STARDOCK" & $walkbd & "*"
ElseIf ($current_sector = $z_base)
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldgreen & "BASE" & $walkbd & "*"
ElseIf ($current_sector = $z_safesector)
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $green & "SAFE" & $walkbd & "*"
ElseIf ($current_sector = RYLOS)
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $yellow & "RYLOS" & $walkbd & "*"
ElseIf ($current_sector = ALPHACENTAURI)
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $yellow & "ALPHA" & $walkbd & "*"
ElseIf ($current_sector = "1")
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldyellow & "TERRA" & $walkbd & "*"
ElseIf (PORT.CLASS[$current_sector] > 0) and (PORT.CLASS[$current_sector] < 10)
	GetSectorParameter $current_sector "MCIC" $walkmcic
	If ($walkmcic <> "") and ($walkmcic <> "0")
		SetVar $walkmcic ($boldblue & "[2C" & #196 & "[MCIC: " & $green & $walkmcic & $boldblue & "]")
	Else
		SetVar $walkmcic ""
	End
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $portclasses[PORT.CLASS[$current_sector]] & $walkmcic & $walkbd & "*"
Else
	Echo "[78D" & $boldblue & "WALKER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & $walkbd & "*"
End
Echo #27&"[s"
:STARTWALKMENU
Echo #27&"[u"
Echo $line1 & "*"
Echo $line2 & "*"
Echo $line3 & "*"
Echo $line4 & "*"
Echo $line5 & "*"
Echo $line6
Gosub :Z_Lib~BLUELINE
If ($walkhistory[1] > 0)
	Echo "*"
	SetVar $j 9
	While ($j >= 1)
		If ($walkhistory[$j] > 0)
			If ($j = 1)
				Echo $boldwhite & " > " & $boldcyan & $walkhistory[$j]
			ElseIf ($j = 9)
				Echo $boldwhite & " > " & $boldblack & $walkhistory[$j]
			Else
				Echo $boldwhite & " > " & $cyan & $walkhistory[$j]
			End
		End
		SetVar $j ($j - 1)
	End
	Echo $boldwhite & " > " & $boldwhite & $current_sector
	Gosub :Z_Lib~BLUELINE
End
Echo "*" & "                                                  " & "[50D"
KillTrigger connectlost
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1") or ($choice = "2") or ($choice = "3") or ($choice = "4") or ($choice = "5") or ($choice = "6")
	If ($choice <= $warps)
		SetVar $target $adjacents[$choice]
		SetVar $walklast $current_sector
		Gosub :WALKHISTORY
		SetVar $mowmode "MOW"
		Gosub :MOVE
		SetVar $walkscanned FALSE
		If ($walkautoscan = TRUE)
			If ($scanner = 2)
				Send "shsd"
				SetVar $walkscanned TRUE
			ElseIf ($scanner = 1)
				Send "s"
			End
		End
		Send "*"
		Goto :WALKLOOP
	End
ElseIf ($choice = "S")
	If ($scanner = 2)
		Send "shsd"
		SetVar $walkscanned TRUE
	ElseIf ($scanner = 1)
		Send "s"
	End
	Send "*"
	Goto :WALKLOOP
ElseIf ($choice = "#")
	SetVar $Z_Lib~messagemode "R"
	SetVar $messagemode "R"
	Gosub :ONLINEWATCH
	Goto :WALKLOOP
ElseIf ($choice = "P")
	Echo "**" & $boldgreen & "Plot a course to which sector? " & $boldwhite
	GetConsoleInput $PARM1
	If ($PARM1 <> "") and ($PARM1 <> #13) and ($PARM1 <> "0")
		SetVar $Z_Lib~messagemode "R"
		SetVar $messagemode "R"
		Gosub :INTCOM_COURSE
	End
	Goto :WALKLOOP
ElseIf ($choice = "H")
	If ($scanner = 2)
		Send "shsd"
		SetVar $walkscanned TRUE
	End
	Goto :WALKLOOP
ElseIf ($choice = "D")
	If ($scanner = 1)
		Send "s"
	ElseIf ($scanner = 2)
		Send "sd"
	End
	Goto :WALKLOOP
ElseIf ($choice = "F")
	If ($figs > 1) and ($current_sector > 10) and ($current_sector <> STARDOCK)
		Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*" & $z_figtype & "q*"
		SetSectorParameter $current_sector "FIGSEC" TRUE
		Goto :WALKLOOP
	End
ElseIf ($choice = "A")
	If ($walkautoscan = TRUE)
		SetVar $walkautoscan FALSE
	Else
		SetVar $walkautoscan TRUE
		If ($scanner = 2)
			Send "shsd"
			SetVar $walkscanned TRUE
		ElseIf ($scanner = 1)
			Send "s"
		End
		Send "*"
	End
	Goto :WALKLOOP
ElseIf ($choice = "<")
	If ($walklast > 0) and ($walklast <= SECTORS)
		GetDistance $walkdist $current_sector $walklast
		If ($walkdist = 1)
			SetVar $target $walklast
			SetVar $walklast $current_sector
			Gosub :WALKHISTORY
			SetVar $mowmode "MOW"
			Gosub :MOVE
			If ($walkautoscan = TRUE)
				If ($scanner = 2)
					Send "shsd"
				ElseIf ($scanner = 1)
					Send "s"
				End
			End
			Send "*"
			SetVar $walkscanned FALSE
			Goto :WALKLOOP
		End
	End
ElseIf ($choice = "I") or ($choice = $z_disrkey)
	Gosub :INTCOM_DISR
	Goto :WALKLOOP
ElseIf ($choice = "E")
	Send "q y n t * * * " & PASSWORD & "* z a  *  *  *  f z 1* c q * d "
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :WALKLOOP
ElseIf ($choice = "U")
	SetVar $z_surround TRUE
	Gosub :DOOPTIONS
	SetVar $z_surround FALSE
	SetVar $walkscanned FALSE
	Goto :WALKLOOP
ElseIf ($choice = $z_mowkey)
	SetVar $walkscanned FALSE
	Goto :MOWKEYPRESSED
ElseIf ($choice = $z_chargekey)
	SetVar $walkscanned FALSE
	Goto :CHARGEKEYPRESSED
ElseIf ($choice = $z_transwarpkey)	
	SetVar $walkscanned FALSE
	Goto :TWARPKEYPRESSED
ElseIf ($choice = $z_blindwarpkey)	
	SetVar $walkscanned FALSE
	Goto :BLINDWARPKEYPRESSED
ElseIf ($choice = $z_hooktowkey)	
	SetVar $walkscanned FALSE
	Goto :HOOKANDTOW
ElseIf ($choice = $z_topoffkey)
	Gosub :INTCOM_TOPOFF
	Goto :WALKLOOP
ElseIf ($choice = "C")
	Gosub :INTCOM_CLEAR
	Goto :WALKLOOP
ElseIf ($choice = ".")
	Gosub :Z_Lib~CLEARSCREEN
	Echo "*" & $boldwhite & "Press your HOTKEY. Press the [ENTER] key to ABORT.*"
	Send #145
	WaitOn #145 & #8
:WALKWAIT
	KillTrigger ww
	Gosub :Z_Lib~CHECKIFBUSY
	If ($Z_Lib~busy = TRUE)
		SetDelayTrigger ww :WALKWAIT 1000
		Pause
		Goto :WALKWAIT
	End
	Goto :WALKLOOP
ElseIf ($choice = "G")
	If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.CLASS[$current_sector] <> 0) and (PORT.BUYFUEL[$current_sector] <> TRUE)
		If ($ore < $holds) and ($credits > 50)
			Send "p * * * z 0* z 0*"
			Goto :WALKLOOP
		End
	End
ElseIf ($choice = "Q") or ($choice = #13)
	SetVar $walkscanned FALSE
	Goto :ENDWALK
End
Goto :STARTWALKMENU
:ENDWALK
SetVar $line1 ""
SetVar $line2 ""
SetVar $line3 ""
SetVar $line4 ""
SetVar $line5 ""
SetVar $line6 ""
SetArray $portclasses 0
SetArray $adjacents 0
SetArray $walkhistory 0
:NOWALK
Gosub :Z_Lib~COMMSON
PROCESSIN 1 $z_botname & "[Z]COMMSGUARDON[Z]" & $z_botname
SetVar $Z_Lib~heraldss FALSE
Echo "*" & $boldred & "WALKER MODE TERMINATED*"
:NOWALK2
SetVar $reset TRUE
SetVar $walking FALSE
Goto :WAITFORCOMMAND
:WALKHISTORY
SetVar $walkhistory[9] $walkhistory[8]
SetVar $walkhistory[8] $walkhistory[7]
SetVar $walkhistory[7] $walkhistory[6]
SetVar $walkhistory[6] $walkhistory[5]
SetVar $walkhistory[5] $walkhistory[4]
SetVar $walkhistory[4] $walkhistory[3]
SetVar $walkhistory[3] $walkhistory[2]
SetVar $walkhistory[2] $walkhistory[1]
SetVar $walkhistory[1] $walklast
Return
# ZTMKEYPRESSED 
:ZTMKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $goodprompt FALSE
Send #145
WaitFor #145 & #8
SetVar $line CURRENTLINE
CutText $line $ztmprompt 1 7
If ($ztmprompt = "Command") or ($ztmprompt = "Citadel")
	SetVar $goodprompt TRUE
End
Gosub :Z_Lib~COMMSOFF
SetVar $title $boldwhite & " ZTM"
Gosub :GETFILENAME
Fileexists $fileexists $filename
If ($fileexists <> TRUE)
	Echo "**" & $boldred & "File not found - " & $boldyellow & $filename & "**"
	Goto :NOZTM
End
ReadToArray $filename $ztmsectors
SetVar $ztmptr 0
Echo "**" & $boldgreen & "You can abort at any time with the " & $boldyellow & "BACKSPACE" & $boldgreen & " key."
Echo "**" & $boldwhite & "Are you ready to ZTM " & $ztmsectors & " sectors (Y/n)?: "
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice <> "Y") and ($choice <> #13)
	Goto :ABORTZTM
End
Gosub :Z_Lib~COMMSON
Gosub :GETSTATS
Gosub :Z_Lib~SYNC
SetTextOutTrigger abortztm :ABORTZTM #8
If ($goodprompt = TRUE)
	Send "c "
Else
	Send "^"
End
:ZTMLOOP
KillTrigger ztmtrigger
SetDelayTrigger ztmtrigger :ZTMTRIGGER 1
Pause
:ZTMTRIGGER
SetVar $ztmptr ($ztmptr + 1)
If ($ztmptr > $ztmsectors)
	Send "q * "
	Echo "**" & $boldwhite & "ZTM complete..**"
	Goto :NOZTM
End
Send "f " & $current_sector & "*" & $ztmsectors[$ztmptr] & "*"
Send "f " & $ztmsectors[$ztmptr] & "*" & $current_sector & "*"
Send #145
WaitFor #145 & #8
Goto :ZTMLOOP
:ABORTZTM
Send "q * "
Echo "**" & $boldyellow & "ZTM aborted by user..**"
:NOZTM
SetArray $ztmsectors 0
Gosub :Z_Lib~COMMSON
Echo "**"
Gosub :Z_Lib~SYNC
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# PROBEKEYPRESSED 
:PROBEKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~noecho FALSE
SetVar $Z_Lib~heraldss FALSE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPROBE
End
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	SetVar $pkprmpt "Citadel"
Else
	SetVar $pkprmpt "Command"
End
Gosub :Z_Lib~COMMSOFF
SetVar $epfile GAMENAME & "_EProbeReport.txt"
SetVar $epfile2 GAMENAME & "_EPROBESECTORS.txt"
SetVar $title $boldwhite & " eProber"
SetVar $probesource FALSE
SetVar $probestart "0"
SetArray $eprobed SECTORS
SetVar $epreverse FALSE
SetVar $epmines TRUE
SetVar $buyprobes TRUE
SetVar $epmax 100
SetVar $epbroadcast FALSE
Gosub :GETSTATS
SetVar $startsector $current_sector
:EPROBEMENU
If ($probestart = "0")
	SetVar $probestartd "First in list"
Else
	SetVar $probestartd $probestart
End
If ($epreverse = TRUE)
	SetVar $epreversed "REVERSE"
Else
	SetVar $epreversed "FORWARD"
End
If ($epmines = TRUE)
	SetVar $epminesd "YES"
Else
	SetVar $epminesd "NO"
End
If ($buyprobes = TRUE)
	SetVar $buyprobesd "YES"
Else
	SetVar $buyprobesd "NO"
End
If ($epbroadcast = TRUE)
	SetVar $epbroadcastd "YES"
Else
	SetVar $epbroadcastd "NO"
End
SetVar $Z_Lib~extra $title
Gosub :Z_Lib~HEADER
If ($probesource = FALSE)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_11 &"Sector Source   : " & ANSI_13 & "Entire Universe"
Else
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_11 &"Sector Source   : " & ANSI_15 & $filename & $listcheck
End
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 &"Start at Sector : " & ANSI_15 & $probestartd
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- "& ANSI_11 &"Probe Direction : " & ANSI_15 & $epreversed
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- "& ANSI_11 &"Report if Mined : " & ANSI_15 & $epminesd
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- "& ANSI_11 &"Buy eProbes     : " & ANSI_15 & $buyprobesd
If ($buyprobes = TRUE)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- "& ANSI_11 &"Ship eProbe Max : " & ANSI_15 & $epmax
End
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"7"& ANSI_12 &"]=- "& ANSI_11 &"Broadcast on SS : " & ANSI_15 & $epbroadcastd
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"G"& ANSI_12 &"]=- "& ANSI_11 &"GO !"
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"Q"& ANSI_12 &"]=- "& ANSI_11 &"QUIT"
Echo "*"
Echo "*" & ANSI_10 & "Your Selection: " & ANSI_15
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	If ($probesource = TRUE)
		SetVar $probesource FALSE
	Else
		Gosub :GETFILENAME
		SetVar $probesource TRUE
	End
ElseIf ($choice = "2")
	Echo "**" & ANSI_14 & "Enter the SECTOR NUMBER to start at: "
	GetConsoleInput $value
	If ($value <> #13) and ($value <> "")
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If ($value >= 0) and ($value <= SECTORS)
				SetVar $probestart $value
			End
		End
	End
ElseIf ($choice = "3")
	If ($epreverse = TRUE)
		SetVar $epreverse FALSE
	Else
		SetVar $epreverse TRUE
	End
ElseIf ($choice = "4")
	If ($epmines = TRUE)
		SetVar $epmines FALSE
	Else
		SetVar $epmines TRUE
	End
ElseIf ($choice = "5")
	If ($buyprobes = TRUE)
		SetVar $buyprobes FALSE
	Else
		SetVar $buyprobes TRUE
	End
ElseIf ($choice = "6") and ($buyprobes = TRUE)
	Echo "**" & ANSI_14 & "Enter the Maximum eProbes your ship can carry: "
	GetConsoleInput $value
	If ($value <> #13) and ($value <> "")
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If ($value > 0) and ($value <= 100)
				SetVar $epmax $value
			End
		End
	End
ElseIf ($choice = "7")
	If ($epbroadcast = TRUE)
		SetVar $epbroadcast FALSE
	Else
		SetVar $epbroadcast TRUE
	End
ElseIf ($choice = "G")
	Goto :STARTEPROBE
ElseIf ($choice = "Q")
	Goto :ABORTPROBE
End
Goto :EPROBEMENU
:STARTEPROBE
If ($probesource = TRUE)
	Fileexists $fileexists $filename
	If ($fileexists <> TRUE)
		Echo "**" & $boldred & "File not found - " & $boldyellow & $filename & "**"
		Goto :NOPROBE
	End
	Echo "**" & $boldgreen & "Reading sector list, please wait...*"
	ReadToArray $filename $probesectors
Else
	Gosub :GETSTATS
	Echo "**" & $boldgreen & "Preparing sector list, please wait...*"
	SetArray $probesectors 0
	SetVar $probesectors 0
	SetVar $x 11
	Gosub :Z_Lib~SETDIAL
	While ($x <= SECTORS)
		If ($x <> STARDOCK) and ($x <> $current_sector)
			SetVar $probesectors ($probesectors + 1)
			SetVar $probesectors[$probesectors] $x
			Gosub :Z_Lib~UPDATEDIAL
		End
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~ENDDIAL
End
If ($epreverse = FALSE)
	SetVar $probeptr 1
Else
	SetVar $probeptr $probesectors
End
If ($probestart <> "0")
	SetVar $x 1
	While ($x <= $probesectors)
		If ($probesectors[$x] = $probestart)
			SetVar $probeptr $x
			SetVar $x $probesectors
		End
		SetVar $x ($x + 1)
	End
End
Echo "**" & $boldgreen & "You can ABORT at any time with the " & $boldyellow & $blinkon & "BACKSPACE" & $blinkoff & $boldgreen & " key.*"
Echo "**" & $boldgreen & "A report will be written to file: " & $boldyellow & $epfile & $boldgreen & " in the TWX Root.*"
Echo "**" & $boldgreen & "A sector list will be written to file: " & $boldyellow & $epfile2 & $boldgreen & " in the TWX Root.*"
If ($epreverse = FALSE)
	Echo "**" & $boldwhite & "Are you ready to eProbe " & ($probesectors - $probeptr) & " sectors starting at " & $probesectors[$probeptr] & " (Y/n)?: "
Else
	Echo "**" & $boldwhite & "Are you ready to eProbe " & ($probeptr) & " sectors starting at " & $probesectors[$probeptr] & " (Y/n)?: "
End
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice <> "Y") and ($choice <> #13)
	Goto :ABORTPROBE
End
Delete $epfile & ".bak"
Delete $epfile2 & ".bak"
FileExists $epfile1ok $epfile
FileExists $epfile2ok $epfile2
If ($epfile1ok = TRUE)
	Rename $epfile1 $epfile1 & ".bak"
End
If ($epfile2ok = TRUE)
	Rename $epfile2 $epfile2 & ".bak"
End
Write $epfile "Z-Bot eProbe Report - " & DATE & " - " & TIME
Write $epfile $dashedline
Gosub :Z_Lib~COMMSON
SetTextOutTrigger abortprobe :ABORTPROBE #8
If ($epreverse = FALSE)
	SetVar $probeptr ($probeptr - 1)
Else
	SetVar $probeptr ($probesectors + 1)
End
If ($pkprmpt = "Citadel")
	Send "q q "
End
:PROBELOOP
Echo "***" & $boldcyan & "You can ABORT at anytime with the BACKSPACE key...***"
If ($epreverse = FALSE)
	SetVar $probeptr ($probeptr + 1)
	If ($probeptr > $probesectors)
		Echo "**" & $boldwhite & "eProbing complete..**"
		Goto :NOPROBE
	End
Else
	SetVar $probeptr ($probeptr - 1)
	If ($probeptr < 1)
		Echo "**" & $boldwhite & "eProbing complete..**"
		Goto :NOPROBE
	End
End
If ($probesectors[$probeptr] = $current_sector)
	Goto :PROBELOOP
End
:PROBEBOUGHT
Gosub :GETSTATS
SetVar $probesleft $probes
If ($probesleft > 0)
	Echo "**" & $boldwhite & "eProbing sector - " & $boldyellow & $probesectors[$probeptr] & "**"
	SetTextTrigger epstartsect :EPSTART "Probe entering sector :"
	SetTextTrigger epavoids :EPAVOID "Clear Avoids?"
	SetVar $eplines 0
	SetArray $eplines 0
	SetVar $epoutput 0
	SetArray $epoutput 0
	SetVar $epinteresting FALSE
	Send "e" & $probesectors[$probeptr] & "*"
	Pause
:EPAVOID
	KillAllTriggers
	Send "n"
	Goto :PROBELOOP
:EPSTART
	KillAllTriggers
	SetTextLineTrigger epscan :EPSCAN ""
	SetTextOutTrigger abortprobe :ABORTPROBE #8
	Pause
:EPSCAN
	KillAllTriggers
	SetVar $eplines ($eplines + 1)
	SetVar $eplines[$eplines] CURRENTLINE
	StripText $eplines[$eplines] #13
	StripText $eplines[$eplines] #8
	If ($eplines[$eplines] = "")
		SetVar $eplines[$eplines] " "
	End
	GetWord $eplines[$eplines] $word 1
	If ($word = "Probe")
		GetWord $eplines[$eplines] $word 2
		If ($word = "Self")
			Gosub :EPCHECK
			Goto :EPEND
		ElseIf ($word = "Destroyed!")
			SetVar $epinteresting TRUE
			SetVar $epcurrent $epcurrent2
			SetVar $eplines[$eplines] ($eplines[$eplines] & " at " & $epcurrent)
			Gosub :EPCHECK
			Goto :EPEND
		ElseIf ($word = "entering")
			GetWord $eplines[$eplines] $epcurrent2 5
			Gosub :EPCHECK
			SetVar $epinteresting FALSE
		End
	ElseIf ($word = "Sector")
		GetText $eplines[$eplines] $epcurrent " : " " in "
	ElseIf ($word = "Traders")
		SetVar $epinteresting TRUE
	ElseIf ($word = "Planets")
		SetVar $epinteresting TRUE
	ElseIf ($word = "Ships")
		SetVar $epinteresting TRUE
	ElseIf ($word = "Mines") and ($epmines = TRUE)
		SetVar $epinteresting TRUE
	End
	Goto :EPSTART
:EPCHECK
	If ($epinteresting  = TRUE) and ($eprobed[$epcurrent] <> TRUE)
		SetVar $x 1
		While ($x <= $eplines)
			SetVar $epoutput ($epoutput + 1)
			SetVar $epoutput[$epoutput] $eplines[$x]
			SetVar $x ($x + 1)
		End
		SetVar $epoutput ($epoutput + 1)
		SetVar $epoutput[$epoutput] $dashedline
		Write $epfile2 $epcurrent
	End
	SetVar $eplines 0
	SetArray $eplines 0
	SetVar $epinteresting FALSE
	SetVar $eprobed[$epcurrent] TRUE
	Return
:EPEND
	If ($epoutput > 0)
		SetVar $ssmsg "Probe Target : " & $probesectors[$probeptr]
		SetVar $x 1
		If ($epoutput > 0)
			Write $epfile "Probe Target : " & $probesectors[$probeptr]
		End
		While ($x <= $epoutput)
			SetVar $ssmsg ($ssmsg & $epoutput[$x] & "*")
			Write $epfile $epoutput[$x]
			SetVar $x ($x + 1)
		End
		If ($epbroadcast = TRUE)
			SetVar $Z_Lib~messageto ""
			SetVar $Z_Lib~messagemode "R"
			SetVar $Z_Lib~message $ssmsg
			Gosub :MSGBRIDGE
		End
		SetVar $ssmsg ""		
	End
	SetVar $eplines 0
	SetArray $eplines 0
	SetVar $epoutput 0
	SetArray $epoutput 0
	SetVar $epinteresting FALSE
	Gosub :Z_Lib~SYNC
Else
	If ($buyprobes <> TRUE)
		Echo "**" & $boldred & "Out of eProbes - cannot continue..**"
		Goto :NOPROBE
	End
	If ($epreverse = TRUE)
		If ($probeptr > $epmax)
			SetVar $minprobes $epmax
		Else
			SetVar $minprobes $probeptr
		End
	Else
		If ($probesectors - $probeptr > $epmax)
			SetVar $minprobes $epmax
		Else
			SetVar $minprobes ($probesectors - $probeptr)
		End
	End
	If ($credits > ($probecost * $minprobes)) and (PORT.EXISTS[STARDOCK] = TRUE)
		If ($current_sector <> STARDOCK)
			If ($pkprmpt = "Citadel")
				Gosub :Z_Lib~RETURNTOPLANET
			End
			SetVar $z_dockport FALSE
			SetVar $target STARDOCK
			Gosub :TWARPING
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector <> STARDOCK)
				Echo "**" & $boldred & "Failed to arrive at STARDOCK..**"
				Goto :NOPROBE
			End
		End
		Echo "**" & $boldwhite & "Buying eProbes..**"
		SetTextTrigger maxprobes :MAXPROBES "How many Probes do you want (Max"
		Send "p sg yg q h e"
		Pause
:MAXPROBES
		GetText CURRENTLINE $maxprobes "(Max " ")"
		Send $maxprobes & "* q q"
		If ($current_sector <> $startsector)
			SetVar $z_dockport FALSE
			SetVar $target $startsector
			SetVar $prompt "Command"
			Gosub :TWARPING
			If ($pkprmpt = "Citadel")
				SetVar $prompt "Citadel"
			End
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector <> $startsector)
				Echo "**" & $boldred & "Failed to arrive at sector " & $startsector & "..**"
				Goto :NOPROBE
			End
		Else
			Gosub :GETSTATS
		End
		If ($probes = 0)
			Echo "**" & $boldred & "Out of eProbes - cannot continue..**"
			Goto :NOPROBE
		End
		Goto :PROBEBOUGHT
	Else
		Echo "**" & $boldred & "Out of eProbes - cannot continue..**"
		Goto :NOPROBE
	End
End
Goto :PROBELOOP
:ABORTPROBE
KillAllTriggers
Echo "**" & $boldyellow & "eProber aborted by user..**"
:NOPROBE
Gosub :GETSTATS
If ($pkprmpt = "Citadel") and ($current_sector = $startsector)
	SetTextTrigger epp :epp "(?="
	SetDelayTrigger epp2 :epp2 1000
	Send #145
	Pause
:epp
	KillAllTriggers
	GetWord CURRENTLINE $eprmpt 1
	If ($eprmpt <> "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
End
:epp2
KillAllTriggers
Gosub :Z_Lib~COMMSON
Echo "**"

SetArray $probesectors 0
SetArray $eprobed 0
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Goto :WAITFORCOMMAND
# GETMACROS 
:GETMACROS
FileExists $fileok "z-macros.cfg"
If ($fileok = TRUE)
	ReadToArray "z-macros.cfg" $macrofile
	SetVar $macrocount 0
	SetVar $i 1
	SetArray $macros 0
	While ($i <= $macrofile)
		If ($macrofile[$i] <> "") and ($macrofile[$i] <> "0")
			SetVar $macrocount ($macrocount + 1)
			SetVar $macros[$macrocount] $macrofile[$i]
		End
		SetVar $i ($i + 1)
	End
	If ($macrocount = 0)
		Delete "z-macros.cfg"
		Goto :GETMACROS
	End
Else
	SetVar $macros[1] "q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " sz h" & #42 & " sd" & #42
	Write "z-macros.cfg" $macros[1]
	SetVar $macrocount 1
End
SetArray $macrofile 0
Return
# GETTRIGGERS 
:GETTRIGGERS
FileExists $fileok "z-triggers.cfg"
If ($fileok = TRUE)
	ReadToArray "z-triggers.cfg" $triggerfile
	SetVar $triggercount 0
	SetVar $i 1
	SetArray $triggers 0
	While ($i <= $triggerfile)
		If ($triggerfile[$i] <> "") and ($triggerfile[$i] <> "0")
			SetVar $triggercount ($triggercount + 1)
			SetVar $triggers[$triggercount] $triggerfile[$i]
		End
		SetVar $i ($i + 1)
	End
	If ($triggercount = 0)
		Delete "z-triggers.cfg"
		Goto :GETTRIGGERS
	End
Else
	SetVar $triggers[1] "Deployed Fighters Report Sector"
	SetVar $triggers[2] "Limpet mine in"
	SetVar $triggers[3] "Your mines in"
	SetVar $triggers[4] "Shipboard Computers The Interdictor Generator on"
	SetVar $triggers[5] "warps into the sector"
	SetVar $triggers[6] "lifts off from"
	SetVar $triggers[7] "blasts off from the StarDock."
	SetVar $triggers[8] "Quasar Cannon on"
	SetVar $triggers[9] "Busted in Sector"
	Write "z-triggers.cfg" $triggers[1]
	Write "z-triggers.cfg" $triggers[2]
	Write "z-triggers.cfg" $triggers[3]
	Write "z-triggers.cfg" $triggers[4]
	Write "z-triggers.cfg" $triggers[5]
	Write "z-triggers.cfg" $triggers[6]
	Write "z-triggers.cfg" $triggers[7]
	Write "z-triggers.cfg" $triggers[8]
	Write "z-triggers.cfg" $triggers[9]
	SetVar $triggercount 9
End
SetArray $triggerfile 0
Return
# GETFILENAME 
:GETFILENAME
Fileexists $fileok "z-sectorlist.cfg"
If ($fileok = TRUE)
	ReadToArray "z-sectorlist.cfg" $configfile
	SetVar $outputfilecount 0
	SetVar $i 1
	While ($i <= $configfile)
		UpperCase $configfile[$i]
		GetWordPos $configfile[$i] $pos "OUTPUT:"
		If ($pos > 0)
			SetVar $outputfilecount ($outputfilecount + 1)
			SetVar $temp $configfile[$i]
			SetVar $temp ($temp & "!!!")
			GetText $temp $outputfiles[$outputfilecount] "OUTPUT:" "!!!"
			StripText $outputfiles[$outputfilecount] " "
		End
		SetVar $i ($i + 1)
	End
	If ($outputfilecount = 0)
		Delete "z-sectorlist.cfg"
		Goto :GETFILENAME
	End
Else
	Write "z-sectorlist.cfg" "SOURCE:RAWLIST.TXT"
	SetVar $sourcefiles[1] "RAWLIST.TXT"
	Write "z-sectorlist.cfg" "SOURCE:BUBBLE.TXT"
	SetVar $sourcefiles[2] "BUBBLE.TXT"
	Write "z-sectorlist.cfg" "SOURCE:SECTORLIST.TXT"
	SetVar $sourcefiles[3] "SECTORLIST.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:SECTORLIST.TXT"
	SetVar $sourcefiles[4] "PLANETLIST.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:PLANETLIST.TXT"
	SetVar $outputfiles[1] "SECTORLIST.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:BUBBLE.TXT"
	SetVar $outputfiles[2] "BUBBLE.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:PORTLIST.TXT"
	SetVar $outputfiles[3] "PORTLIST.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:PROXIMITY.TXT"
	SetVar $outputfiles[4] "PROXIMITY.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:AVOIDSLIST.TXT"
	SetVar $outputfiles[5] "AVOIDSLIST.TXT"
	Write "z-sectorlist.cfg" "OUTPUT:RAWLIST.TXT"
	SetVar $outputfiles[6] "RAWLIST.TXT"
	Write "z-sectorlist.cfg" "EXCLUDE:BUBBLE.TXT"
	SetVar $excludefiles[1] "BUBBLE.TXT"
	Write "z-sectorlist.cfg" "EXCLUDE:SECTORLIST.TXT"
	SetVar $excludefiles[2] "SECTORLIST.TXT"
	Write "z-sectorlist.cfg" "EXCLUDE:PORTLIST.TXT"
	SetVar $excludefiles[3] "PORTLIST.TXT"
	Write "z-sectorlist.cfg" "EXCLUDE:RAWLIST.TXT"
	SetVar $excludefiles[4] "RAWLIST.TXT"
	SetVar $outputfilecount 6
End
If ($outputfileptr < 1)
	SetVar $outputfileptr 1
End
:STARTFILESELECT
SetVar $filename GAMENAME & "_" & $outputfiles[$outputfileptr]
Fileexists $fileexists $filename
If ($fileexists = TRUE)
	SetVar $listcheck ANSI_2 & " <--- OK"
Else
	SetVar $listcheck ANSI_4 & " <--- Not Found"
End
SetVar $Z_Lib~extra $title
Gosub :Z_Lib~HEADER
If ($outputfileptr = $outputfilecount + 1)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"L"& ANSI_12 &"]=- "& ANSI_11 &"Sector List     : " & ANSI_12 & "-----------"
Else
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"L"& ANSI_12 &"]=- "& ANSI_11 &"Sector List     : " & ANSI_15 & $filename & $listcheck
End
If ($outputfileptr = $outputfilecount + 1)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"A"& ANSI_12 &"]=- "& ANSI_11 &"Add Output File : "
End
Gosub :Z_Lib~REDLINE
Echo "*" & $boldgreen & "Press ENTER to accept current filename and continue.."
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "L")
SetVar $outputfileptr ($outputfileptr + 1)
	If ($outputfileptr > $outputfilecount + 1)
		SetVar $outputfileptr 1
	End
	If ($outputfileptr <= $outputfilecount)
		SetVar $outputfile GAMENAME & "_" & $outputfiles[$outputfileptr]
		SetVar $filename $outputfile
	End
ElseIf ($choice = "A") and ($outputfileptr = $outputfilecount + 1)
	Echo "**" & ANSI_10 & "Enter the sector list filename: " & ANSI_15
	GetConsoleInput $newfilename
	If ($newfilename <> "") and ($newfilename <> #13)
		UpperCase $newfilename
		SetVar $outputfilecount ($outputfilecount + 1)
		SetVar $outputfiles[$outputfilecount] $newfilename
		SetVar $outputfileptr $outputfilecount
		SetVar $outputfile GAMENAME & "_" & $outputfiles[$outputfileptr]
		Write "z-sectorlist.cfg" "OUTPUT:" & $outputfiles[$outputfileptr]
		SetVar $filename $outputfile
	End
ElseIf ($choice = "G") or ($choice = #13) or ($choice = #8)
	Goto :DONEFILESELECT
End
Goto :STARTFILESELECT
:DONEFILESELECT
Return
# INFOKEYPRESSED 
:INFOKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $stardockisok $boldyellow & "Unknown"
If ((STARDOCK > 0) and (STARDOCK <= SECTORS))
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $word 1 7
	StripText $word " "
	If (($word = "Command") or ($word = "Citadel"))
		SetTextTrigger checksdok :CHECKSDOK "Commerce report for"
		SetTextTrigger checksdnotok :CHECKSDNOTOK "I have no information about a port in that sector"
		SetTextTrigger checksdnotok2 :CHECKSDNOTOK "You have never visted sector"
		Send "cr" & STARDOCK & "*q"
		Pause
:CHECKSDOK
		KillTrigger checksdnotok
		KillTrigger checksdok
		SetVar $stardockisok $boldcyan & "OK"
		
		SetTextLineTrigger isdbfchk :ISDBFCHK "Fuel Ore"
		Pause
:ISDBFCHK
		KillTrigger isdbfchk
		GetWord CURRENTLINE $word1 3
		If ($word1 = "Buying")
			SetVar $sdsellfuel FALSE
		ElseIf ($word1 = "Selling")
			SetVar $sdsellfuel TRUE
		End
		Goto :CHECKSDDONE
:CHECKSDNOTOK
		KillTrigger checksdok
		KillTrigger checksdnotok
		SetVar $stardockisok $boldred & "NOT OK"
		Goto :CHECKSDDONE
:CHECKSDDONE
	End
End
SetVar $Z_Lib~extra $boldgreen & "  Game Information"
Gosub :Z_Lib~HEADER
SetVar $i 1
SetVar $zerowarpsectors 0
SetVar $figcount 0
SetVar $bustsectors 0
While ($i <= SECTORS)
	If (SECTOR.WARPCOUNT[$i] = 0)
		SetVar $zerowarpsectors ($zerowarpsectors + 1)
	End
	GetSectorParameter $i "FIGSEC" $figged
	If ($figged = TRUE)
		SetVar $figcount ($figcount + 1)
	End
	GetSectorParameter $i "BUSTED" $bust
	If ($bust = TRUE)
		SetVar $bustsectors ($bustsectors + 1)
	End
	SetVar $i ($i + 1)
End
ListActiveScripts $scripts
SetVar $count 1
SetVar $figmonitorok FALSE
SetVar $temp $figmonitor
UpperCase $temp
While ($count <= $scripts)
  UpperCase $scripts[$count]
  GetWordPos $scripts[$count] $pos $temp
  If ($pos > 0)
	 SetVar $figmonitorok TRUE
  End
  SetVar $count ($count + 1)
End
If ($figmonitorok = TRUE)
	SetVar $figmonitorokd ($boldwhite & "OK")
Else
	SetVar $figmonitorokd ($boldred & "Not running")
End
SetVar $count 1
SetVar $commsguardok FALSE
SetVar $temp "z-commsguard"
UpperCase $temp
While ($count <= $scripts)
  UpperCase $scripts[$count]
  GetWordPos $scripts[$count] $pos $temp
  If ($pos > 0)
	 SetVar $commsguardok TRUE
  End
  SetVar $count ($count + 1)
End
If ($commsguardok = TRUE)
	SetVar $commsguardokd ($boldwhite & "OK")
Else
	SetVar $commsguardokd ($boldred & "Not running")
End
If ($z_mslsok = TRUE)
	SetVar $z_mslsokd ($boldwhite & "OK")
Else
	SetVar $z_mslsokd ($boldred & "Not Available")
End
If ($mbbs = "TRUE") or ($mbbs = TRUE)
	If ($megabug = "TRUE") or ($servertype = "v1")
		SetVar $mbbsd "YES - " & $boldgreen & "Enabled"
	Else
		SetVar $mbbsd "YES - " & $boldred & "Disabled"
	End
Else
	SetVar $mbbsd "NO"
End
If ($subprompts = TRUE)
	SetVar $subpromptsd "ON"
Else
	SetVar $subpromptsd "OFF"
End
If ($rob_multiplier <> "0")
	SetPrecision 2
	SetVar $rob11 (($rob_multiplier * 111) / 100)
	SetPrecision 0
End
LoadVar $z_extern
If ($z_extern = "0") or ($z_extern = "")
	SetVar $z_extern "Unknown"
End
If ($z_extern = "Unknown")
	SetVar $z_externd ($boldred & $z_extern)
Else
	SetVar $z_externd ($boldwhite & $z_extern)
End
If ($sdsellfuel = TRUE)
	SetVar $sdsellfueld $boldcyan & "Selling"
Else
	SetVar $sdsellfueld $boldred & "NOT Selling"
End
Echo "*" & $boldgreen & "Zero Warp Sectors : " & $boldwhite & $zerowarpsectors & "[4;44H" & $boldgreen & "Rob Factor     : " & $boldwhite & $rob_factor 
Echo "*" & $boldgreen & "Gridded Sectors   : " & $boldwhite & $figcount          & "[5;44H" & $boldgreen & "Rob Multiplier : " & $boldwhite & $rob_multiplier & $boldgreen & "   + 11% = " & $boldwhite & $rob11
Echo "*" & $boldgreen & "Busted Sectors    : " & $boldwhite & $bustsectors      & "[6;44H" & $boldgreen & "Steal Factor   : " & $boldwhite & $steal_factor
Echo "*"                                                                                         & "[7;44H" & $boldgreen & "Steal Divisor  : " & $boldwhite & $steal_divisor
Echo "*" & $boldgreen & "Stardock          : " & $boldwhite & STARDOCK           & "[8;44H" & $boldgreen & "StarDock Status: " & $boldwhite & $stardockisok
Echo "*" & $boldgreen & "Rylos             : " & $boldwhite & RYLOS               & "[9;44H" & $boldgreen & "SD Fuel Status : " & $boldwhite & $sdsellfueld
Echo "*" & $boldgreen & "Alpha Centauri    : " & $boldwhite & ALPHACENTAURI     & "[10;44H" & $boldgreen & "MBBS Mode      : " & $boldwhite & $mbbsd
Echo "*"                                                                                       & "[11;44H" & $boldgreen & "MAX Bank Bal   : " & $boldwhite & $z_bankmax
Echo "*" & $boldgreen & "Fighter Monitor   : " & $figmonitorokd                    & "[12;44H" & $boldgreen & "Planet Trade % : " & $boldwhite & $ptradesetting
Echo "*" & $boldgreen & "Comms Guard       : " & $commsguardokd                    & "[13;44H" & $boldgreen & "Port Production: " & $boldwhite &  $portproduction
Echo "*" & $boldgreen & "MSLs              : " & $z_mslsokd                         & "[14;44H" & $boldgreen & "Int. Subprompts: " & $boldwhite &  $subpromptsd
Echo "*" & $boldgreen & "Time Offset       : " & $Boldwhite & $timeoffset        & "[15;44H" & $boldgreen & "Multi Photons  : " & $boldwhite &  $z_phmulti
Echo "*" & $boldgreen & "Extern runs at    : " & $z_externd                         & "[16;44H" & $boldgreen & "Photon Duration: " & $boldwhite & $photonduration & " secs"
Gosub :Z_Lib~REDLINE
Echo "**"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# DISPLAYHOTKEYS 
:DISPLAYHOTKEYS
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                           <<<=-[ " & $boldmagenta & "HOT KEY MENU" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" 
Echo $boldred & " [" & $boldyellow & $z_chargekeycd & $boldred & "]-" & $boldcyan & "Charge"
Echo [6;25H & $boldred & " [" & $boldyellow & $z_mowkeycd & $boldred & "]-" & $boldcyan & "Mow"
Echo [6;50H & $boldred & " [" & $boldyellow & $z_transwarpkeycd & $boldred & "]-" & $boldcyan & "TWarp"
Echo "*" 
Echo $boldred & " [" & $boldyellow & $z_blindwarpkeycd & $boldred & "]-" & $boldcyan & "Blind Warp"
Echo [7;25H & $boldred & " [" & $boldyellow & $z_selfbotkeycd & $boldred & "]-" & $boldcyan & "Self Bot"
Echo [7;50H & $boldred & " [" & $boldyellow & $z_citmenukeycd & $boldred & "]-" & $boldcyan & "Cit/Walk"
Echo "**"
Echo $boldred & " [" & $boldyellow & $z_watchkeycd & $boldred & "]-" & $boldcyan & "Colo Watch"
Echo [9;25H & $boldred & " [" & $boldyellow & $z_hotmenukeycd & $boldred & "]-" & $boldmagenta & "HOT KEY MENU"
Echo [9;50H & $boldred & " [" & $boldyellow & $z_hooktowkeycd & $boldred & "]-" & $boldcyan & "Hook & Tow"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_topoffkeycd & $boldred & "]-" & $boldcyan & "TopOff"
Echo [10;25H & $boldred & " [" & $boldyellow & $z_xferkeycd & $boldred & "]-" & $boldcyan & "Xfer Setup"
Echo [10;50H & $boldred & " [" & $boldyellow & $z_fastrefillkeycd & $boldred & "]-" & $boldcyan & "Fast Xfer"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_capkeycd & $boldred & "]-" & $boldcyan & "Ship Cap"
Echo [11;25H & $boldred & " [" & $boldyellow & $z_safetynetkeycd & $boldred & "]-" & $boldcyan & "SafetyNet"
Echo [11;50H & $boldred & " [" & $boldyellow & $z_bannerkeycd & $boldred & "]-" & $boldcyan & "Banner"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_infokeycd & $boldred & "]-" & $boldcyan & "Game Info"
Echo [12;25H & $boldred & " [" & $boldyellow & $z_probekeycd & $boldred & "]-" & $boldcyan & "eProber"
Echo [12;50H & $boldred & " [" & $boldyellow & $z_ztmkeycd & $boldred & "]-" & $boldcyan & "Short ZTM"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_setplanetkeyd & $boldred & "]-" & $boldcyan & "Set Planet"
Echo [13;25H & $boldred & " [" & $boldyellow & $z_attackkeycd & $boldred & "]-" & $boldcyan & "Attack"
Echo [13;50H & $boldred & " [" & $boldyellow & $z_fuelkeycd & $boldred & "]-" & $boldcyan & "Find Fuel"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_stopallkeycd & $boldred & "]-" & $boldcyan & "Stop Scripts"
Echo [14;25H & $boldred & " [" & $boldyellow & $z_matrixkeycd & $boldred & "]-" & $boldcyan & "View Matrix"
Echo [14;50H & $boldred & " [" & $boldyellow & $z_hookmankeycd & $boldred & "]-" & $boldcyan & "Hook Manned"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_hotlistkeycd & $boldred & "]-" & $boldcyan & "User HotKeys"
Echo [15;25H & $boldred & " [" & $boldyellow & $z_panelkeycd & $boldred & "]-" & $boldcyan & "Info Panel"
Echo [15;50H & $boldred & " [" & $boldyellow & $z_lastbotkeycd & $boldred & "]-" & $boldcyan & "Last Self Bot"
Echo "*"
If ($p = TRUE)
	Echo $boldred & " [" & $boldyellow & $z_refigkeycd & $boldred & "]-" & $boldcyan & "Call Refig"
	Echo [16;50H & $boldred & " [" & $boldyellow & $z_huntkeycd & $boldred & "]-" & $boldcyan & "Hunter"
End
Echo [16;25H & $boldred & " [" & $boldyellow & $z_autokeycd & $boldred & "]-" & $boldcyan & "Automate Menu"
Echo "*"
Echo $boldred & " [" & $boldyellow & $z_botonoffkeycd & $boldred & "]-" & $boldcyan & "Bot ON/OFF"
Echo [17;25H & $boldred & " [" & $boldyellow & $z_loopkeycd & $boldred & "]-" & $boldcyan & "Command Looper"
Echo [17;50H & $boldred & " [" & $boldyellow & $z_disrkeycd & $boldred & "]-" & $boldcyan & "Disrupt"
Echo "*"
Echo [18;25H & $boldred & " [" & $boldyellow & $z_menukeycd & $boldred & "]-" & $boldcyan & "Bot Options"
Gosub :Z_Lib~REDLINE
Echo [20;17H &$cyan & "Double tap " & $boldred & "[" & $boldyellow & $z_actkeyd & $boldred & "]" & $cyan & " for the standalone script menu*"
Echo "**" 
Echo [22;8H & $boldgreen & "Help is available by pressing the " & $boldred & "[" & $boldwhite & $z_selfbotkeyd & $boldred & "]" & $boldgreen & " key and typing " & $boldwhite & "help"
Gosub :Z_Lib~REDLINE
Return
# DISPLAYUSERHOTLIST 
:DISPLAYUSERHOTLIST
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                      <<<=-[ " & $boldwhite & "USER DEFINED HOT KEYS" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($hotkeys > 0)
	SetVar $x 1
	While ($x <= $hotkeys)
		Echo "*" & $boldred & " [" & $boldyellow & $hotkeyd[$x] & $boldred & "]-" & $boldcyan & $hotkeydesc[$x]
		SetVar $x ($x + 1)
	End
Else
	Echo "*" & $boldyellow & "                              NO HOTKEYS DEFINED!"
End
Gosub :Z_Lib~REDLINE
Echo "*" & $boldwhite & "                 Add or edit hotkeys in the z-options.cfg file."
Gosub :Z_Lib~REDLINE
Echo "**"
Return
# ----START INTERNAL COMMANDS --------------------------------------------------------
# QSS 
:INTCOM_QSS
Gosub :GETSTATS
SetVar $ssmsg ""
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $current_sector
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Sector    : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $colonists
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Colonists : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $probes
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "E-Probes  : " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $credits
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Credits   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
If ($scanner = 0)
	SetVar $Z_Strings~unpadded "None"  
ElseIf ($scanner = 1)
	SetVar $Z_Strings~unpadded "Density"
Else
	SetVar $Z_Strings~unpadded "HoloScan"
End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Scanner   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $disruptors
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Disruptors: " & $Z_Strings~padded & "*")
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $figs
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Fighters  : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
If ($twarp = 0)
	SetVar $Z_Strings~unpadded "None"
Else
	SetVar $Z_Strings~unpadded "Type " & $twarp
End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "TransWarp : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
If ($psiprobe = TRUE)
	SetVar $Z_Strings~unpadded "Installed"
Else
	SetVar $Z_Strings~unpadded "None"
End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "PsiProbe  : " & $Z_Strings~padded & "*")
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $mines
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Mines     : " & $Z_Strings~padded)
If ($Z_Lib~isunlimited = TRUE)
	SetVar $ssmsg ($ssmsg & "Turns     : Unlimited  ")
Else
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 11
	SetVar $Z_Strings~unpadded $turns
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & "Turns     : " & $Z_Strings~padded)
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
If ($planetscanner = TRUE)
	SetVar $Z_Strings~unpadded "Installed"
Else
	SetVar $Z_Strings~unpadded "None"
End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "PlanetScan: " & $Z_Strings~padded & "*")
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $limps
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Limpets   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $photons
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Photons   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $align 
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Alignment : " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $shields
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Shields   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $torps
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Gen-Torps : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $experience
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Experience: " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $holds
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Holds     : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $cloaks
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Cloaks    : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $corp
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Corp      : " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $ore
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Fuel Ore  : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $beacons
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Beacons   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $shipid
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Ship ID   : " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $org
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Organics  : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $dets
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "AtomicDets: " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $corbo
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Corbomite : " & $Z_Strings~padded & "*") 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $Z_Strings~unpadded $equ
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Equipment : " & $Z_Strings~padded) 
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
If ($z_autoss = TRUE)
	SetVar $Z_Strings~unpadded "ON"
Else
	SetVar $Z_Strings~unpadded "OFF"
End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Auto SS   : " & $Z_Strings~padded)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 11
SetVar $emptyholds ($holds - ($ore + $org + $equ))
SetVar $Z_Strings~unpadded $emptyholds
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "EmptyHolds: " & $Z_Strings~padded & "*")
SetVar $Z_Lib~message $dashedline & " " & $scripttitle & ": QSS - " & LOGINNAME & "        Ship: - " & $shipclass & "*" & $dashedline & $ssmsg & $dashedline 
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# SCRIPTS 
:INTCOM_SCRIPTS
ListActiveScripts $scripts
SetVar $i 1
SetVar $ssmsg ""
While ($i <= $scripts)
	SetVar $ssmsg ($ssmsg & $scripts[$i] & "*")
	SetVar $i ($i + 1)
End
If ($z_figger = TRUE)
	SetVar $ssmsg ($ssmsg & "Z-Bot Grid Support is active!*")
End
SetVar $z_Lib~message ($dashedline & " " & $scripttitle & " Active Script List*" & $dashedline & $ssmsg & $dashedline & "*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE 
SetVar $ssmsg ""
Return
# RESET 
:INTCOM_RESET
KillAllTriggers
If ($notfirsttime = TRUE)
	OpenMenu TWX_STOPALLFAST FALSE
End
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetVar $Z_Logs~logentry $fileline
Gosub :Z_Logs~ENTERLOG
SetVar $Z_Logs~logentry $scripttitle & ": RESET INITIATED - Resetting Z-Bot"
Gosub :Z_Logs~ENTERLOG
SetVar $lastgetstats ""
LoadVar $z_autotype
LoadVar $z_autotrigger
LoadVar $z_autocommand
LoadVar $z_autorename
LoadVar $z_autoreturn
LoadVar $z_autostrip
LoadVar $z_autostatus
LoadVar $z_autoplanet
LoadVar $z_extern
LoadVar $servertype
GetRnd $z_code 1 1000000
SaveVar $z_code
LoadVar $z_ignorescriptloads
UpperCase $z_ignorescriptloads
If ($z_ignorescriptloads <> "TRUE") and ($z_ignorescriptloads <> "FALSE")
	SetVar $z_ignorescriptloads "FALSE"
	SaveVar $z_ignorescriptloads
End
If ($z_extern = "0") or ($z_extern = "")
	SetVar $z_extern "Unknown"
End
SetVar $Z_Logs~logentry $scripttitle & ": RESET in Progress."
Gosub :Z_Logs~ENTERLOG
SetVar $notfirsttime TRUE
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~message "Attempting to reach the Command prompt..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Send "z s * q q q q z 0* q z 0* q z 0**"
	SetVar $Z_Lib~setprompt "CITCOM"
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		SetVar $Z_Lib~message "Failed to reach the Command prompt..*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	Else
		SetVar $Z_Lib~message "Successfully reached the " & $prompt & " prompt!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		#Gosub :Z_Lib~ANIMCHECK
		Send "c u y q "
		Gosub :Z_Lib~ALLCNS
		#Gosub :Z_Lib~CN9CHECK
		#Gosub :Z_Lib~COMPACTCHECK
		Gosub :UPDATEMARKET
	End
Else
	#Gosub :Z_Lib~ANIMCHECK
	Send "c u y q "
	Gosub :Z_Lib~ALLCNS
	#Gosub :Z_Lib~CN9CHECK
	#Gosub :Z_Lib~COMPACTCHECK
	Gosub :UPDATEMARKET
End
SetVar $Z_Lib~heraldss FALSE
SetVar $z_movement FALSE
Gosub :INITIALISE 
SetVar $filename "Furber"
FileExists $fileok $filename & ".aut"
If ($fileok <> TRUE)
	Write $filename & ".aut" "Z-BOTAUTOMATESNAPSHOT"
	Write $filename & ".aut" "TYPE: 3"
	Write $filename & ".aut" "TRIGGER: Busted in Sector"
	Write $filename & ".aut" "COMMAND: furb [!] /dc"
	Write $filename & ".aut" "RENAME: "
	Write $filename & ".aut" "RETURN: [Sector ] {..}"
	Write $filename & ".aut" "STRIP: "
	Write $filename & ".aut" "PLANET: 0"
	Write $filename & ".aut" "POINTER: 9"
	Write "Z-Snapshots.cfg" $filename
End
SetVar $filename "z-mottos.cfg"
FileExists $fileok $filename
If ($fileok <> TRUE)
	Gosub :MOTTOHEADER
	Write $filename "Z-Bot does MY dirty work!"
	Write $filename "Z-Bot now you're in control!"
#	Write $filename "Edit the  z-mottos.cfg  file to add your own mottos."
End
FileExists $fileok $filename
If ($fileok <> TRUE)
	Echo "*" & $boldred & "Could not create/read z-mottos.cfg file.*"
	SetVar $z_motto ""
Else
	SetArray $array 0
	SetArray $mottos 0
	ReadToArray $filename $array
	SetVar $x 1
	SetVar $z 0
	While ($x <= $array)
		If ($array[$x] <> "") and ($array[$x] <> "0")
			CutText $array[$x] $chk 1 1
			If ($chk <> "#")
				SetVar $z ($z + 1)
				SetVar $mottos[$z] $array[$x]
			End
		End
		SetVar $x ($x + 1)
	End
	If ($z > 0)
		GetRnd $rnd 1 $z
		SetVar $z_motto $mottos[$rnd]
		StripText $z_motto #8
		StripText $z_motto #13
	Else
		SetVar $z_motto ""
	End
	SetArray $array 0
	SetArray $mottos 0
End
Gosub :GETSTATS
Gosub :Z_Lib~SYNC
SetVar $menufile "zp-main.mnu"
Gosub :LOADSCRIPTMENU
SetVar $bot TRUE
If ($Z_Lib~isunlimited = TRUE)
	SetVar $walkautoscan TRUE
Else
	SetVar $walkautoscan FALSE
End
SetVar $gridauto FALSE
Send #145
WaitOn #145 & #8
SetVar $line CURRENTLINE
CutText $line $startprompt 1 7
#GetText $line $startsector "]:[" "] ("
SetVar $startsector $current_sector
If ($startprompt = "Command")
	If ($z_autoigon = "TRUE")
		Gosub :CHECKIGON
	End
End
SetVar $Z_Logs~logentry $scripttitle & ": RESET Complete - Mode set to GENERAL."
Gosub :Z_Logs~ENTERLOG
Gosub :TIMECHECK
If ($startprompt = "Citadel")
	Send "s* "
End
Send #145
WaitOn #145 & #8
If ($showhotkeys = TRUE)
	Gosub :DISPLAYHOTKEYS
End
SetVar $mode "GENERAL"
If ($starting <> TRUE)
	SetVar $Z_Lib~message $scripttitle & " Reset. Mode set to GENERAL.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
SetVar $moderunning ""
SetVar $reset TRUE
Return
# EXIT 
:INTCOM_EXIT
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $atprompt 1 7
If ($atprompt = "Citadel") or ($atprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
Goto :ENTEREXIT
:EXIT
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
:ENTEREXIT
If ($prompt = "ERROR")
	Send "z s * q q q q z 0* q z 0* q z 0*"
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	GetWord CURRENTLINE $prompt 1
End
SetTextTrigger exit1 :EXIT1 "Do you wish to end your turn now and remain here?"
SetTextTrigger exit2 :EXIT2 "Do you want to allow teammates to trade ships with you?"
SetTextTrigger exit3 :EXIT3 "Game Server"
SetTextTrigger exit4 :EXIT4 "Do you wish to engage a Cloaking Device?"
SetTextTrigger exit5 :EXIT5 "Enter your choice:"
If ($prompt = "Citadel")
	Send "r"
Else
	Send "qy"
End
Pause
:QM
KillTrigger qm
Send "?"
Pause
:EXIT1
SetDelayTrigger qm :QM 1000
Send "y"
Pause
:EXIT2
Send "y"
Pause
:EXIT3
KillTrigger qm
KillTrigger exit1
KillTrigger exit2
KillTrigger exit3
KillTrigger exit4
KillTrigger exit5
Send GAME
Goto :STARTLOGIN
:EXIT4
KillTrigger qm
Send "n"
SetDelayTrigger qm :QM 1000
Pause
:EXIT5
KillTrigger qm
KillTrigger exit1
KillTrigger exit2
KillTrigger exit3
KillTrigger exit4
KillTrigger exit5
If ($z_bot <> TRUE) or ($getsettings = TRUE)
	Goto :T4
	#Send #42 & "*"
ElseIf ($leave > 0)
:LEAVEAGAIN
	KillTrigger leaveout1
	KillTrigger leaveout2
	KillTrigger leaveout3
	KillTrigger leaveout4
	KillTrigger leaveout5
	KillTrigger leaveout6
	KillTrigger leaveagain
	KillTrigger leavewait
	KillTrigger leavenow
	KillTrigger leavenow2
	Echo "[s"
	Echo " Entering in " & $leave & " seconds. (BACKSPACE to enter NOW) "
:LEAVESTART
	GetLength $leave $len
	Echo $boldyellow & "[u" & "[K" & "[u" & " Entering in " & $boldred & $leave & $boldyellow & " seconds. " & $boldgreen & "(BACKSPACE=Enter NOW, X=Leave) "
	SetDelayTrigger leavewait :LEAVEWAIT 1000
	SetTextTrigger leaveagain :LEAVEAGAIN "Enter your choice:"
	SetTextOutTrigger leaveout1 :LEAVEOUT "t"
	SetTextOutTrigger leaveout2 :LEAVEOUT "i"
	SetTextOutTrigger leaveout3 :LEAVEOUT "s"
	SetTextOutTrigger leaveout4 :LEAVEOUT "h"
	SetTextOutTrigger leaveout5 :LEAVEOUT "m"
	SetTextOutTrigger leaveout6 :LEAVEGO "x"
	SetTextOutTrigger leavenow :LEAVENOW #8
	SetTextOutTrigger leavenow2 :LEAVENOW "~"
	Send "*"
	Pause
:LEAVEGO
	KillTrigger leaveout1
	KillTrigger leaveout2
	KillTrigger leaveout3
	KillTrigger leaveout4
	KillTrigger leaveout5
	KillTrigger leaveout6
	KillTrigger leaveagain
	KillTrigger leavewait
	KillTrigger leavenow
	KillTrigger leavenow2
	Goto :TIMEOUT
:LEAVEOUT
	KillTrigger leaveout1
	KillTrigger leaveout2
	KillTrigger leaveout3
	KillTrigger leaveout4
	KillTrigger leaveout5
	KillTrigger leaveout6
	KillTrigger leaveagain
	KillTrigger leavewait
	KillTrigger leavenow
	KillTrigger leavenow2
	Send #8
	Goto :LEAVESTART
:LEAVEWAIT
	KillTrigger leaveout1
	KillTrigger leaveout2
	KillTrigger leaveout3
	KillTrigger leaveout4
	KillTrigger leaveout5
	KillTrigger leaveout6
	KillTrigger leaveagain
	KillTrigger leavewait
	KillTrigger leavenow
	KillTrigger leavenow2
	SetVar $leave ($leave - 1)
	If ($leave > 0)
		Goto :LEAVESTART
	End
:LEAVENOW
	KillTrigger leaveout1
	KillTrigger leaveout2
	KillTrigger leaveout3
	KillTrigger leaveout4
	KillTrigger leaveout5
	KillTrigger leaveout6
	KillTrigger leaveagain
	KillTrigger leavewait
	KillTrigger leavenow
	KillTrigger leavenow2
	SetVar $leave "0"
	Send "t*"
Else
	Send "t*"
End
Goto :STARTLOGIN
:STARTLOGIN
SetVar $loop 0
Gosub :SETEXITTRIGGERS
SetVar $onplanet FALSE
If (CONNECTED = FALSE)
	CONNECT
End
:WAIT
If (CONNECTED = FALSE)
	CONNECT
	SetDelayTrigger waitfordisconnect2 :WAITFORDISCONNECT2 3000
	Pause
:WAITFORDISCONNECT2
	KillTrigger waitfordisconnect2
	HALT
End
Pause
:TIMEOUT
KillAllTriggers
DISCONNECT
SetDelayTrigger waitfordisconnect :WAITFORDISCONNECT 2000
Pause
:WAITFORDISCONNECT
KillTrigger waitfordisconnect
Goto :WAIT
:T1
Send LOGINNAME & "*"
Goto :WAIT
:T2
Send GAME
Goto :WAIT
:T3
Send "  "
SetTextTrigger 3 :T3 "[Pause]"
Goto :WAIT
:T4
KillTrigger 21
If ($z_bot <> TRUE) or ($getsettings = TRUE)
	KillAllTriggers
	KillTrigger 4
	SetArray $gamesettings 0
	SetVar $x 0
	SetVar $attop FALSE
	SetTextLineTrigger getsettings :GETSETTINGS ""
	SetVar $getsettings FALSE
	Send #42 & "*"
	Pause
:GETSETTINGS
	KillTrigger getsettings
	If (CURRENTLINE = "Game Stats:")
		SetVar $attop TRUE
		SetTextTrigger 4 :T4 "Enter your choice:"
	End
	If ($attop = TRUE)
		SetVar $x ($x + 1)
		SetVar $gamesettings[$x] CURRENTLINE
		If ($gamesettings[$x] = "End Stats.")
			Goto :GOTSETTINGS
		End
	End
	SetTextLineTrigger getsettings :GETSETTINGS ""
	Pause
:GOTSETTINGS
	KillTrigger getsettings
	SetVar $gamesettings $x
	SetVar $x 1
	Delete GAMENAME & "_GAMESETTINGS-last.txt"
	FileExists $fileexist GAMENAME & "_GAMESETTINGS.txt"
	If ($fileexist = TRUE)
		GetTime $timestamp "yyyymmddhhnnss"
		Delete GAMENAME & "_GAMESETTINGS-backup-" & $timestamp & ".txt"
		Rename GAMENAME & "_GAMESETTINGS.txt" GAMENAME & "_GAMESETTINGS-backup-" & $timestamp & ".txt"
		Rename GAMENAME & "_GAMESETTINGS.txt" GAMENAME & "_GAMESETTINGS-last.txt"
	End
	GetTime $settingstime "c"
	Write GAMENAME & "_GAMESETTINGS.txt" "GAMESETTINGS for " & GAMENAME & " at " & $settingstime
	Write GAMENAME & "_GAMESETTINGS.txt" " "
	While ($x <= $gamesettings)
		If ($gamesettings[$x] <> "End Stats.") and ($gamesettings[$x] <> "") and ($gamesettings[$x] <> " ")
			GetWordPos $gamesettings[$x] $pos "="
			If ($pos > 0)
				CutText $gamesettings[$x] $label 1 $pos
				If ($label = "Steal Factor=")
					GetText $gamesettings[$x] $steal_factor "Steal Factor=" "%"
				ElseIf ($label = "Rob Factor=")
					GetText $gamesettings[$x] $rob_factor "Rob Factor=" "%"
				ElseIf ($label = "Clear Bust Days=")
					GetText $gamesettings[$x] $bustclear "Clear Bust Days=" "Days"
				ElseIf ($label = "Last Bust Clear Day=")
					CutText $gamesettings[$x] $lastbustclear 21 999
				ElseIf ($label = "Defined Start Day=")
					CutText $gamesettings[$x] $definedstart 19 999 
				ElseIf ($label = "Trade Percent=")
					CutText $gamesettings[$x] $ptradesetting 15 999
				ElseIf ($label = "MBBS Compatibility=")
					CutText $gamesettings[$x] $temp 20 999
				ElseIf ($label = "Production Rate=")
					CutText $gamesettings[$x] $portproduction 17 999
				ElseIf ($label = "Interactive Sub-prompts=")
					CutText $gamesettings[$x] $subprompts 25 999
				ElseIf ($label = "Colonist Regen Rate=")
					CutText $gamesettings[$x] $colonist_regen 21 999
				ElseIf ($label = "Ether Probe=")
					GetText $gamesettings[$x] $probecost "Ether Probe=" "cr"
				ElseIf ($label = "Photon Missile Duration=")
					GetText $gamesettings[$x] $photonduration "Duration=" "Sec"
				ElseIf ($label = "Allow MBBS MegaRob Bug=")
					CutText $gamesettings[$x] $megabug 24 999
				ElseIf ($label = "Turn Base=")
					CutText $gamesettings[$x] $turnbase 11 999
				ElseIf ($label = "Turn Accumulation Days=")
					CutText $gamesettings[$x] $turnbank 24 999
				ElseIf ($label = "Time Online=")
					CutText $gamesettings[$x] $timelimit 13 999
				ElseIf ($label = "Max Bank Credits=")
					GetText $gamesettings[$x] $z_bankmax "Max Bank Credits=" "cr"
				ElseIf ($label = "Multiple Photons=")
					CutText $gamesettings[$x] $z_phmulti 18 999
					UpperCase $z_phmulti
				ElseIf ($label = "Max Corp Members=")
					CutText $gamesettings[$x] $z_maxcorp 18 999
				ElseIf ($label = "Max Terra Colonists=")
					CutText $gamesettings[$x] $z_maxcols 21 999
				ElseIf ($label = "Port Production Max=")
					CutText $gamesettings[$x] $productionmax 21 999
				ElseIf ($label = "Limpet Removal=")
					GetText $gamesettings[$x] $LIMPET_REMOVAL_COST "Limpet Removal=" "cr"
				ElseIf ($label = "Armid Mine=")
					GetText $gamesettings[$x] $ARMID_COST "Armid Mine=" "cr"
				ElseIf ($label = "Limpet Mine=")
					GetText $gamesettings[$x] $LIMPET_COST "Limpet Mine=" "cr"
				End
			End
			Write GAMENAME & "_GAMESETTINGS.txt" $gamesettings[$x]
		End
		SetVar $x ($x + 1)
	End
	StripText $temp " "
	If ($temp = "True")
		SetVar $mbbs "TRUE"
	Else
		SetVar $mbbs "FALSE"
	End
	SaveVar $mbbs
	StripText $megabug " "
	If ($megabug = "True")
		SetVar $megabug "TRUE"
	Else
		SetVar $megabug "FALSE"
	End
	SaveVar $megabug
	StripText $steal_factor " "
	StripText $rob_factor " "
	StripText $bustclear " "
	StripText $lastbustclear " "
	StripText $definedstart " "
	StripText $ptradesetting " "
	StripText $ptradesetting "%"
	StripText $portproduction " "
	StripText $subprompts " "
	StripText $colonist_regen " "
	StripText $probecost ","
	StripText $probecost " "
	StripText $photonduration " "
	StripText $turnbase " "
	StripText $turnbase "Turns"
	StripText $turnbank " "
	StripText $timelimit " "
	StripText $z_maxcorp " "
	StripText $productionmax " "
	StripText $LIMPET_REMOVAL_COST " "
	StripText $LIMPET_REMOVAL_COST ","
	StripText $LIMPET_COST " "
	StripText $LIMPET_COST ","
	StripText $ARMID_COST " "
	StripText $ARMID_COST ","
	SaveVar $ARMID_COST
	SaveVar $LIMPET_COST
	SaveVar $LIMPET_REMOVAL_COST
	SaveVar $steal_factor
	SaveVar $rob_factor
	SaveVar $bustclear
	SaveVar $lastbustclear
	SaveVar $definedstart
	SaveVar $ptradesetting
	SaveVar $portproduction
	SaveVar $colonist_regen
	SaveVar $probecost
	SaveVar $photonduration
	SaveVar $turnbase
	SaveVar $turnbank
	SaveVar $timelimit
	SaveVar $z_bankmax
	SaveVar $z_phmulti
	SaveVar $z_maxcorp
	SaveVar $z_maxcols
	SaveVar $productionmax
	If ($subprompts = "True")
		SetVar $subprompts TRUE
	Else
		SetVar $subprompts FALSE
	End
	SaveVar $subprompts
	SetVar $_ck_ptradesetting $ptradesetting
	SaveVar $_ck_ptradesetting
	SetVar $Z_Logs~logentry $scripttitle & ": Game settings retrieved."
	Gosub :Z_Logs~ENTERLOG
	SetVar $z_bot TRUE
	SaveVar $z_bot
	If ($steal_factor <> "0")
		SetPrecision 2
		SetVar $temp ($steal_factor / 100)
		SetVar $steal_divisor (30 * $temp)
		Round $steal_divisor 0
		SetPrecision 0
		SaveVar $steal_divisor
	End
	If ($rob_factor <> "0")
		SetPrecision 2
		SetVar $temp ((3 / $rob_factor) * 100)
		SetVar $rob_multiplier $temp
		Round $rob_multiplier 0
		SetPrecision 0
		SaveVar $rob_multiplier
	End
	Gosub :SETEXITTRIGGERS
	KillTrigger 4
End
Send "t*"
Goto :WAIT
:T5
Send "*"
Goto :WAIT
:T6
Send PASSWORD & "*"
SetTextTrigger 6 :T6 "Password?"
Goto :WAIT
:T7
Send "y"
Goto :WAIT
:T10
Send $z_shipname & "*"
If ($isnewgame = FALSE)
	SetVar $wasdead TRUE
End
Goto :WAIT
:T11
Send "y"
SetTextTrigger 11 :T11 "is what you want?"
Goto :WAIT
:T15
KillAllTriggers
Goto :EXITDONE
:T16
KillAllTriggers
SetVar $onplanet TRUE
SetTextLineTrigger pl1 :PL1 "Planet #"
SetTextLineTrigger pl2 :PL2 "Planet has a level"
SetTextLineTrigger pl3 :PL3 "Planet command (?="
SetDelayTrigger pl4 :PL3 3000
Send "*"
Pause
:PL1
GetWord CURRENTLINE $planetnumber 2
StripText $planetnumber "#"
Pause
:PL2
SetVar $hasacitadel TRUE
:PL3
KillAllTriggers
Goto :EXITDONE
:T17
SetVar $loop ($loop + 1)
If ($loop > 20)
	Goto :EXITDONE2
End
Send "za999987654321*za999987654321*za999987654321*za999987654321*za999987654321*za999987654321*"
Goto :WAIT
:T18
Send "*"
Goto :WAIT
:T19
KillTrigger timeout
Goto :WAIT
:T20
Send "n"
Goto :WAIT
:T23
Send "   "
Goto :WAIT
:SETEXITTRIGGERS
KillAllTriggers
SetDelayTrigger timeout :TIMEOUT 20000
SetTextTrigger 1 :T1 "Please enter your name (ENTER for none):"
SetTextTrigger 2 :T2 "Game Server"
SetTextTrigger 3 :T3 "[Pause]"
SetTextTrigger 4 :T4 "Enter your choice:"
SetTextTrigger 5 :T5 "Show today's log? (Y/N) [N]"
SetTextTrigger 6 :T6 "Password?"
SetTextTrigger 7 :T7 "Delete messages? (Y/N) [N]"
SetTextTrigger 10 :T10 "What do you want to name your ship? (30 letters)"
SetTextTrigger 11 :T11 "is what you want?"
SetTextTrigger 15 :T15 "Command [TL="
SetTextTrigger 16 :T16 "Planet command (?=help) [D]"
SetTextTrigger 17 :T17 "You have to destroy"
SetTextTrigger 18 :T18 "Do you wish to clear some avoids? (Y/N) [N]"
SetTextTrigger 19 :T19 "Searching for messages received since your last time on:"
SetTextTrigger 20 :T20 "Mined Sector: Do you wish to Avoid this sector in the future? (Y/N)"
SetTextTrigger 21 :T4 "Game Stats:"
SetTextTrigger 23 :T23 "Who's Playing"
SetTextTrigger 24 :T23 "Trade Wars 2002 Win32 module now loading."
SetTextTrigger 25 :T17 "Option? (A,D,I,R,S,?):?"
Return
:EXITDONE
KillAllTriggers
If ($atprompt = "Citadel") or ($atprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
:EXITDONE2
SetVar $reset TRUE
Return
# SCAN 
:INTCOM_HOLO
:INTCOM_SCAN
KillTrigger pulse
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $prompt1 1 7
If ($prompt1 = "Citadel") or ($prompt1 = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSCAN
End
UpperCase $PARM1
UpperCase $PARM2
If ($PARM1 = "/D") or ($PARM2 = "/D")
	SetVar $densityonly TRUE
Else
	SetVar $densityonly FALSE
End
Gosub :GETSTATS
SetVar $ssmsg $dashedline
If ($scanner = 2) and ($densityonly = FALSE)
	SetVar $ssmsg ($ssmsg & "HOLOGRAPHIC SCAN for Sector: " & CURRENTSECTOR & "*" & $dashedline)
	SetVar $linect 0
	Send #145
	WaitFor #145 & #8
	SetTextTrigger hscdone :HSCDONE "Command [TL="
	SetTextLineTrigger getahscanline :GETHSCANLINE
	Send "sh"
	Pause
:GETHSCANLINE
	SetVar $linect ($linect + 1)
	SetVar $scanlines[$linect] CURRENTLINE
	GetWord $scanlines[$linect] $word 1
	If ($word = "Command")
:HSCDONE
		KillTrigger getahscanline
		KillTrigger hscdone
		Goto :HSCANDONE
	End
	SetTextLineTrigger getahscanline :GETHSCANLINE
	Pause
:HSCANDONE
	SetVar $i 1
	SetVar $firstblank FALSE
	While ($i <= $linect)
		StripText $scanlines[$i] #13
		StripText $scanlines[$i] #8
		If ($scanlines[$i] = "")
			If ($firstblank <> TRUE)
				SetVar $scanlines[$i] ".."
				SetVar $firstblank TRUE
			Else
				SetVar $scanlines[$i] "."
			End
		End
		GetWord $scanlines[$i] $word 1
		If ($word <> "Long") and ($word <> "Select") and ($word <> "Comman") and ($word <> "Command") and ($scanlines[$i] <> "..")
			If ($scanlines[$i] = ".")
				SetVar $ssmsg ($ssmsg & $dashedline)
			Else
				SetVar $ssmsg ($ssmsg & $scanlines[$i] & "*")
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetArray $scanlines 0
	Goto :DENSITYSCAN
ElseIf ($scanner > 0)
:DENSITYSCAN
	SetVar $ssmsg ($ssmsg & "DENSITY SCAN for Sector: " & CURRENTSECTOR & "*" & $dashedline)
	SetVar $linect 0
	Send #145
	WaitFor #145 & #8
	SetTextTrigger dscdone :DSCDONE "Command [TL="
	SetTextLineTrigger getadscanline :GETDSCANLINE
	If ($scanner = 2)
		Send "sd" & #145
	Else
		Send "s" & #145
	End
	Pause
:GETDSCANLINE
	SetVar $linect ($linect + 1)
	SetVar $scanlines[$linect] CURRENTLINE
	GetWord $scanlines[$linect] $word 1
	If ($word = "Command")
:DSCDONE
		KillTrigger getadscanline
		KillTrigger dscdone
		Goto :DSCANDONE
	End
	SetTextLineTrigger getadscanline :GETDSCANLINE
	Pause
:DSCANDONE
	SetVar $i 1
	While ($i <= $linect)
		StripText $scanlines[$i] #13
		StripText $scanlines[$i] #8
		If ($scanlines[$i] <> "")
			GetWord $scanlines[$i] $word 1
			If ($word <> "Long") and ($word <> "Select") and ($word <> "Comman") and ($word <> "Command") and ($word <> "Relative") and ($word <> "-----------------------------------------------------------------------------")
				StripText $scanlines[$i] ":"
				GetWord $scanlines[$i] $word 2
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 5
				SetVar $Z_Strings~unpadded $word
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & "Sector: " & $Z_Strings~padded)
				GetWord $scanlines[$i] $word 4
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 13
				SetVar $Z_Strings~unpadded $word
				SetVar $Z_Strings~rpad FALSE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & " => " & $Z_Strings~padded)
				GetWord $scanlines[$i] $word 6
				SetVar $ssmsg ($ssmsg & " Warps: " & $word)
				GetWord $scanlines[$i] $word 8
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 4
				SetVar $Z_Strings~unpadded $word
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & "  NavHaz: " & $Z_Strings~padded)
				GetWord $scanlines[$i] $word 10
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 3
				SetVar $Z_Strings~unpadded $word
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & "  Anom: " & $Z_Strings~padded & "*")
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
Else
	SetVar $Z_Lib~message "I don't have a scanner...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSCAN
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
UpperCase $PARM1
If ($PARM1 = "FED") and ($p = TRUE)
	SetVar $Z_Lib~messagemode "F"
ElseIf ($messagemode = "E")
	SetVar $Z_Lib~messagemode "S"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
If ($prompt1 = "Citadel") or ($prompt1 = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
Gosub :MSGBRIDGE
:NOSCAN
SetArray $scanlines 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
Gosub :SETPULSETRIGGER
Return
# PAGE 
:INTCOM_PAGE
Gosub :Z_Strings~LINE
SetVar $Z_Lib~message "Paging " & $z_botname & "...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
SetVar $pagemsg "!!! ATTENTION YOU ARE BEING PAGED !!!"
SetVar $i 1
While ($i <= 3)
	Echo "*" & $Z_Strings~line 
	Echo "**" & $blinkon & $boldwhite & $pagemsg & $boldgreen & "  " & $pagemsg & "*" & $blinkoff
	Echo "**" & $blinkon & $boldred & $pagemsg & $boldyellow & "  " & $pagemsg & "*"  & $blinkoff
	Echo "**" & $blinkon & $boldcyan & $pagemsg & $boldmagenta & "  " & $pagemsg & "*"  & $blinkoff
	Echo "*" & $Z_Strings~line 
	If ($z_usesound = TRUE)
		Sound z_page
	End
	SetVar $i ($i + 1)
End
SetVar $Z_Lib~message $z_botname & " has been paged.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# AUTOSS 
:INTCOM_AUTOSS
If ($PARM1 = "on")
	Gosub :SETAUTOSSON
ElseIf ($PARM1 = "off")
	Gosub :SETAUTOSSOFF
End
Return
# STATUS 
:INTCOM_STATUS
ListActiveScripts $scripts
SetDelayTrigger waitstatus :WAITSTATUS 1000
Pause
:WAITSTATUS
SetVar $line CURRENTLINE
GetWord $line $prompt 1
Gosub :GETSTATS
SetVar $ssmsg ($dashedline & $scripttitle & " - Status Report             Active Scripts*" & $dashedline)
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $mode
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Mode        : " & $Z_Strings~padded & " ")
If ($scripts >= 1)
	SetVar $ssmsg ($ssmsg & $scripts[1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $prompt
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Prompt      : " & $Z_Strings~padded & " ")
If ($scripts >= 2)
	SetVar $ssmsg ($ssmsg & $scripts[2] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded CURRENTSECTOR
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Sector      : " & $Z_Strings~padded & " ")
If ($scripts >= 3)
	SetVar $ssmsg ($ssmsg & $scripts[3] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $shipid
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Ship ID     : " & $Z_Strings~padded & " ")
If ($scripts >= 4)
	SetVar $ssmsg ($ssmsg & $scripts[4] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $credits
Gosub :Z_Strings~COMMA
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $Z_Strings~commas
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Credits     : " & $Z_Strings~padded & " ")
If ($scripts >= 5)
	SetVar $ssmsg ($ssmsg & $scripts[5] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_base
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Base Sector : " & $Z_Strings~padded & " ")
If ($scripts >= 6)
	SetVar $ssmsg ($ssmsg & $scripts[6] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_safesector
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Safe Sector : " & $Z_Strings~padded & " ")
If ($scripts >= 7)
	SetVar $ssmsg ($ssmsg & $scripts[7] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_safeship
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Safe Ship   : " & $Z_Strings~padded & " ")
If ($scripts >= 8)
	SetVar $ssmsg ($ssmsg & $scripts[8] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($z_planet <> "0") and ($z_planet <> "")
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 19
	SetVar $Z_Strings~unpadded $z_planet
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & "Main Planet : " & $Z_Strings~padded & " ")
Else
	SetVar $ssmsg ($ssmsg & "Main Planet : Not Set             ")
End
If ($scripts >= 9)
	SetVar $ssmsg ($ssmsg & $scripts[9] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($z_autoss = TRUE)
	SetVar $ssmsg ($ssmsg & "AutoSS      : ON                  ")
Else
	SetVar $ssmsg ($ssmsg & "AutoSS      : OFF                 ")
End
If ($scripts >= 10)
	SetVar $ssmsg ($ssmsg & $scripts[10] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_seed
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "AutoSS Seed : " & $Z_Strings~padded & " ")
If ($scripts >= 11)
	SetVar $ssmsg ($ssmsg & $scripts[11] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End

If ($pulsecheck = TRUE)
	SetVar $ssmsg ($ssmsg & "Pulse Check : ON                  ")
Else
	SetVar $ssmsg ($ssmsg & "Pulse Check : OFF                 ")
End
If ($scripts >= 12)
	SetVar $ssmsg ($ssmsg & $scripts[12] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_Lib~subspacechannel
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "SS Channel  : " & $Z_Strings~padded & " ")
If ($scripts >= 13)
	SetVar $ssmsg ($ssmsg & $scripts[13] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($z_safetynet = TRUE)
	If ($z_volley <> "0")
		SetVar $ssmsg ($ssmsg & "SafetyNet   : ON+                 ")
	Else
		SetVar $ssmsg ($ssmsg & "SafetyNet   : ON                  ")
	End
Else
	SetVar $ssmsg ($ssmsg & "SafetyNet   : OFF                 ")
End
If ($scripts >= 14)
	SetVar $ssmsg ($ssmsg & $scripts[14] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($Z_Lib~silentmode = TRUE)
	SetVar $ssmsg ($ssmsg & "Silent Mode : ON                  ")
Else
	SetVar $ssmsg ($ssmsg & "Silent Mode : OFF                 ")
End
If ($scripts >= 15)
	SetVar $ssmsg ($ssmsg & $scripts[15] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_furbshipletter
UpperCase $Z_Strings~unpadded
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Furb Ship   : " & $Z_Strings~padded & " ")
If ($scripts >= 16)
	SetVar $ssmsg ($ssmsg & $scripts[16] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 19
SetVar $Z_Strings~unpadded $z_furbholds
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & "Furb Holds  : " & $Z_Strings~padded & " ")
If ($scripts >= 17)
	SetVar $ssmsg ($ssmsg & $scripts[17] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($watch = TRUE)
	SetVar $ssmsg ($ssmsg & "OnlineWatch : ACTIVE              ")
Else
	SetVar $ssmsg ($ssmsg & "OnlineWatch : OFF                 ")
End
If ($scripts >= 18)
	SetVar $ssmsg ($ssmsg & $scripts[18] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($z_team = "") or ($z_team = "0")
	SetVar $ssmsg ($ssmsg & "Team Name   : None                ")
Else
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 19
	SetVar $Z_Strings~unpadded $z_team
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & "Team Name   : " & $Z_Strings~padded & " ")
End
If ($scripts >= 19)
	SetVar $ssmsg ($ssmsg & $scripts[19] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($fedwatch = TRUE)
	SetVar $ssmsg ($ssmsg & "FedWatch    : ACTIVE")
Else
	SetVar $ssmsg ($ssmsg & "FedWatch    : OFF")
End
If ($scripts >= 20)
	SetVar $ssmsg ($ssmsg & $scripts[20] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
If ($jumplistok = TRUE) and ($z_nextsector > 0) and ($z_nextsector <= SECTORS)
	SetPrecision 4
	SetVar $jpct ((100 / $jumplist) * $jumplistptr)
	SetPrecision 0
	SetVar $jpct ($jpct * 1)
	If ($jumplistptr = 1)
		SetVar $ssmsg ($ssmsg & "Next Jump   : " & $z_nextsector & " - Top")
	Else
		SetVar $ssmsg ($ssmsg & "Next Jump   : " & $z_nextsector & " - Progress: " & $jpct & "%")
	End
Else
	SetVar $ssmsg ($ssmsg & "Next Jump   : Not Set - No " & GAMENAME & "_JUMPLIST.txt file.")
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_autostatus = TRUE)
	If ($z_autotype = 1)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - 12 hourly - " & $z_autotrigger)
	ElseIf ($z_autotype = 2)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - 24 hourly - " & $z_autotrigger)
	ElseIf ($z_autotype = 3)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - Text Line")
	ElseIf ($z_autotype = 4)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - Text")
	ElseIf ($z_autotype = 5)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - Hourly - " & $z_autotrigger)
	ElseIf ($z_autotype = 6)
		SetVar $ssmsg ($ssmsg & "Automate    : ON - Top Of The Hour")
	End
Else
	SetVar $ssmsg ($ssmsg & "Automate    : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_autoexec = TRUE)
	SetVar $ssmsg ($ssmsg & "Autoexec    : ON - [ " & $z_autoexeccom & " ]")
Else
	SetVar $ssmsg ($ssmsg & "Autoexec    : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($bbop = TRUE)
	SetVar $ssmsg ($ssmsg & "Bbop        : ACTIVE")
Else
	SetVar $ssmsg ($ssmsg & "Bbop        : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($autofurb = TRUE)
	SetVar $ssmsg ($ssmsg & "Autofurb    : ACTIVE")
Else
	SetVar $ssmsg ($ssmsg & "Autofurb    : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($autorefurb = TRUE)
	SetVar $ssmsg ($ssmsg & "Auto Refurb : ACTIVE")
Else
	SetVar $ssmsg ($ssmsg & "Auto Refurb : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_doublecheckdock = "TRUE")
	SetVar $ssmsg ($ssmsg & "Dock Safer  : ON")
Else
	SetVar $ssmsg ($ssmsg & "Dock Safer  : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_figherald = TRUE)
	SetVar $ssmsg ($ssmsg & "Fig Herald  : ON")
Else
	SetVar $ssmsg ($ssmsg & "Fig Herald  : OFF")
End
SetVar $ssmsg ($ssmsg & "*")
LoadVar $lastrobsteal
If ($lastrobsteal = "0") or ($lastrobsteal = "")
	SetVar $ssmsg ($ssmsg & "LastRobSteal: None")
Else
	SetVar $ssmsg ($ssmsg & "LastRobSteal: " & $lastrobsteal)
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_botpw <> "0") and ($z_botpw <> "")
	SetVar $ssmsg ($ssmsg & "Use Bot PW  : ON                  ")
Else
	SetVar $ssmsg ($ssmsg & "Use Bot PW  : OFF                 ")
End
SetVar $ssmsg ($ssmsg & "*")
If ($z_rescueavailable = TRUE)
	SetVar $ssmsg ($ssmsg & "RescueStatus: Reportedly Available")
Else
	SetVar $ssmsg ($ssmsg & "RescueStatus: None at present     ")
End
SetVar $ssmsg ($ssmsg & "*")
If ($p = TRUE)
	If ($z_sr = "KILL")
		SetVar $ssmsg ($ssmsg & "Sect Respond: ON - KILL mode      ")
	ElseIf ($z_sr = "CAP")
		SetVar $ssmsg ($ssmsg & "Sect Respond: ON - CAP mode       ")
	Else
		SetVar $ssmsg ($ssmsg & "Sect Respond: OFF                 ")
	End
	SetVar $ssmsg ($ssmsg & "*")
	If ($z_pr = "TRUE")
		If ($prtarget <> "0")
			SetVar $ssmsg ($ssmsg & "Ph Responder: " & $prtarget & "   Photons: " & $photons)
		Else
			SetVar $ssmsg ($ssmsg & "Ph Responder: ON   Photons: " & $photons)
		End
	Else
		SetVar $ssmsg ($ssmsg & "Ph Responder: OFF  Photons: " & $photons)
	End
	SetVar $ssmsg ($ssmsg & "*")
	If ($z_figger = TRUE)
		SetVar $ssmsg ($ssmsg & "Figger Mode : ON                  ")
	Else
		SetVar $ssmsg ($ssmsg & "Figger Mode : OFF                 ")
	End
	SetVar $ssmsg ($ssmsg & "*")
	If ($targetsystemok <> TRUE)
		SetVar $ssmsg ($ssmsg & "Targeting   : NOT READY! - Use [" & $z_selfbotkeyd & "] INIT to Initialise.")
	Else
		SetVar $ssmsg ($ssmsg & "Targeting   : READY. Last Initialised: " & $lastinitialised)
	End
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# CORPY 
:INTCOM_CORPY
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
SetVar $Z_Lib~heraldss FALSE
If ($prompt = "ERROR")
	Goto :NOCANDOCORPY
End
SetVar $i 1
While ($i <= $z_maxcorp)
	SetVar $z_corpy[$i] ""
	SaveVar $z_corpy[$i]
	SetVar $i ($i + 1)
End
SetArray $z_corpy 0
SetVar $z_corpies "0"
If ($prompt = "Command")
	Send "ta"
Else
	Send "xa"
End
WaitOn "--------------------------"
:PARSECORPIES
SetTextLineTrigger corpies :CORPIES ""
Pause
:CORPIES
GetWord CURRENTLINE $corpy_prompt 1
If ($corpy_prompt = "Corporate") or ($corpy_prompt = "0") or ($corpy_prompt = "P")
	Gosub :Z_Lib~SYNC
   Goto :DONEWITHCORPIES
End
SetVar $z_corpies ($z_corpies + 1)
CutText CURRENTLINE $z_corpy[$z_corpies] 1 39
SetVar $pos 38
:STRIPCORPIES
CutText $z_corpy[$z_corpies] $blank $pos 1
If ($blank = " ")
  CutText $z_corpy[$z_corpies] $z_corpy[$z_corpies] 1 $pos
  SetVar $pos ($pos - 1)
  Goto :STRIPCORPIES
Else
  CutText $z_corpy[$z_corpies] $z_corpy[$z_corpies] 1 $pos
  LowerCase $z_corpy[$z_corpies]
  Goto :PARSECORPIES
End
:DONEWITHCORPIES
Echo "***" & ANSI_14 & " Corpies" & ANSI_12 & " --> " & ANSI_10 & $z_corpies
Echo "*" & ANSI_12 & "----------------"
SetVar $count 1
While ($count <= $z_corpies)
	GetLength $z_corpy[$count] $len
	If ($len > 6)
		CutText $z_corpy[$count] $z_corpy[$count] 1 6
		SetVar $Z_Strings~trimstring $z_corpy[$count]
		Gosub :Z_Strings~RTRIM
		SetVar $z_corpy[$count] $Z_Strings~trimstring
	End
   Echo "*" & ANSI_15 & " " & $z_corpy[$count]
   SaveVar $z_corpy[$count]
   SetVar $count ($count + 1)
End
Echo "*" & ANSI_12 & "----------------"
SaveVar $z_corpies
Echo "**" & ANSI_0
WaitFor "elp)"
Send "q"
WaitFor "elp)"
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message "Corpy List updated..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCANDOCORPY
Return
# CHARGE 
:INTCOM_C
:INTCOM_CHARGE
KillAllTriggers
SetVar $mowmode "CHARGE"
Gosub :BOTMOVE
SetVar $reset TRUE
Return
# MOW 
:INTCOM_M
:INTCOM_MOW
KillAllTriggers
SetVar $mowmode "MOW"
Gosub :BOTMOVE
SetVar $reset TRUE
Return
# TWARP 
:INTCOM_T
:INTCOM_TWARP
KillAllTriggers
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($Z_Lib~prompt = "ERROR")
   Goto :NOTWARP3
End
SetVar $prompt $Z_Lib~prompt
Gosub :GETSTATS
SetVar $mowmode "TWARP"
Gosub :BOTMOVE
:NOTWARP3
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# BOTMOVE 
:BOTMOVE
SetVar $choice $user_command_line
#StripText $choice " "
LoadVar $z_base
Gosub :GETBACKDOORS
LoadVar $z_safesector
SetVar $stardockok FALSE
If (STARDOCK > 0) and (STARDOCK <= SECTORS)
	SetVar $stardockok TRUE
End	
SetVar $rylosok FALSE
If (RYLOS > 0) and (RYLOS <= SECTORS)
	SetVar $rylosok TRUE
End
SetVar $alphaok FALSE
If (ALPHACENTAURI > 0) and (ALPHACENTAURI <= SECTORS)
	SetVar $alphaok TRUE
End
SetVar $baseok FALSE
If ($z_base > 0) and ($z_base <= SECTORS)
	SetVar $baseok TRUE
End
SetVar $safeok FALSE
If ($z_safesector > 0) and ($z_safesector <= SECTORS)
	SetVar $safeok TRUE
End
If ($z_sdbackdoor > 0) and ($z_sdbackdoor <= SECTORS)
		SetVar $sdbdok TRUE
End
If ($z_acbackdoor > 0) and ($z_acbackdoor <= SECTORS)
		SetVar $acbdok TRUE
End
If ($z_rybackdoor > 0) and ($z_rybackdoor <= SECTORS)
		SetVar $rybdok TRUE
End
If ($z_tebackdoor > 0) and ($z_tebackdoor <= SECTORS)
		SetVar $tebdok TRUE
End
SetVar $lastok FALSE
If ($previoussector > 0) and ($previoussector <= SECTORS)
	SetVar $lastok TRUE
End
SetVar $jumpok FALSE
If ($z_nextsector > 0) and ($z_nextsector <= SECTORS)
	SetVar $jumpok TRUE
End
Gosub :BOTMOWCHARGE
If ($target < 1) or ($target > SECTORS)
	Gosub :DOOPTIONS
	Goto :NOBOTMOVE
End
If ($mowmode = "TWARP")
	Gosub :TWARPING
Else
	Gosub :MOVE
End
SetVar $previoussector $current_sector
Gosub :GETSTATS
If ($target <> "-1")
	If ($current_sector = $target)
		If ($current_sector <> STARDOCK) and ($current_sector > 10) and ($z_mowfigs > 0)
			Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*d"
		End
		SetVar $Z_Lib~message "Arrived at sector: [" & $current_sector & "]*"
		If ($jumping = TRUE) or ($target = $z_nextsector)
			SetVar $thisj $jumplistptr
			SetVar $jumplistptr ($jumplistptr + 1)
			If ($jumplistptr > $jumplist)
				SetVar $jumplistptr $jumplist
			End
			GetWord $jumplist[$jumplistptr] $z_nextsector 1
			SaveVar $z_nextsector
			SetPrecision 4
			SetVar $jlp ((100 / $jumplist) * $thisj)
			SetPrecision 0
			SetVar $jlp ($jlp * 1)
			SetVar $Z_Lib~message ($Z_Lib~message & "Jumplist Progress: " & $jlp & "% (" & $thisj & "/" & $jumplist & ")*")
			SetVar $jumping FALSE
		End
	Else
		SetVar $Z_Lib~message "DID NOT arrive at sector: [" & $target & "]. I am at sector " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOBOTMOVE
Return
# FIGS 
:INTCOM_FIGS
Gosub :Z_Lib~CURRENTPLANET
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOFIGS
End
Gosub :Z_Lib~COMMSOFF
LoadVar $z_lastfigrefresh
If ($z_lastfigrefresh = "0")
   SetVar $z_lastfigrefresh "None"
End
GetSectorParameter 2 "FIG_COUNT" $z_lastfigcount
If ($z_lastfigcount = "")
   SetVar $z_lastfigcount "0"
End
SetVar $z_figcount "0"
SetVar $Z_Lib~extra ANSI_10 & "- Counting Current Figs In Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $current "0"
SetVar $count "1"
While ($count <= SECTORS)
    GetSectorParameter $count "FIGSEC" $isfigged
    If ($isfigged = TRUE)
       SetVar $current ($current + 1)
    End
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Clearing Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $count "1"
While ($count <= SECTORS)
    SetSectorParameter $count "FIGSEC" FALSE
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Refreshing Figs..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $trigger2u "Deployed  Fighter  Scan"
#Gosub :Z_Lib~ANSI_OFF
SetTextLineTrigger 2u :FIGS $trigger2u
Send "g"
Pause
:FIGS
SetTextLineTrigger figscan1 :STARTFIGSCAN "===================="
SetTextLineTrigger figsnone :ENDFIGSCAN "No fighters deployed"
SetTextLineTrigger figscan2 :ENDFIGSCAN "Total"
Pause
:STARTFIGSCAN
KillTrigger figscan1
KillTrigger figscan2
KillTrigger figscan3
KillTrigger figsnone
SetTextLineTrigger figscan3 :SCANLINEFIGS
Pause
:SCANLINEFIGS
SetVar $line CURRENTLINE
GetWordPos $line $pos "Total"
GetWordPos $line $pos2 "No fighters deployed"
If ($pos > 0)
	GetWord $line $z_deployed 1
	ReplaceText $z_deployed "T" ",000"
	ReplaceText $z_deployed "M" ",000,000"
	Goto :ENDFIGSCAN
ElseIf ($pos2 > 0)
   Goto :ENDFIGSCAN
Else
   GetWord $line $sectnum 1
   IsNumber $isnum $sectnum
   If ($isnum = TRUE)
      SetSectorParameter $sectnum "FIGSEC" TRUE
      SetVar $z_figcount ($z_figcount + 1)
   End
End
Goto :STARTFIGSCAN
:ENDFIGSCAN
KillTrigger figscan1
KillTrigger figscan2
KillTrigger figscan3
KillTrigger figsnone
#Gosub :Z_Lib~ANSI_ON
Waitfor "] (?=Help)? :"
SetPrecision 2
If ($z_lastfigcount > 0)
   SetVar $z_lastpercent (($z_lastfigcount * 100) / SECTORS)
Else
   SetVar $z_lastpercent "0"
End
If ($z_figcount > 0)
   SetVar $z_grid (($z_figcount * 100) / SECTORS)
Else
   SetVar $z_grid "0.00"
End
SetPrecision 0
SetVar $z_diff ($z_figcount - $z_lastfigcount)
SetPrecision 2
If ($z_diff <> 0)
   Setvar $z_diffperc (($z_diff * 100) / SECTORS)
Else
   Setvar $z_diffperc "0.00"
End
SetPrecision 0
Gosub :Z_Lib~RETURNTOPLANET
Gosub :Z_Lib~SYNC
If ($nodisplay <> TRUE)
	SetVar $ssmsg $dashedline
	SetVar $ssmsg ($ssmsg & "Zed's Fighter Refresh v" & $Version & "*")
	SetVar $ssmsg ($ssmsg & "------------------------------*")
	SetVar $ssmsg ($ssmsg & "Database Check : " & $current & "*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Last Refresh   : " & $z_lastfigrefresh & "*")
	SetVar $ssmsg ($ssmsg & "Last Count     : " & $z_lastfigcount & "*")
	SetVar $ssmsg ($ssmsg & "Grid Percent   : " & $z_lastpercent & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Current Count  : " & $z_figcount & "*")
	SetVar $ssmsg ($ssmsg & "Current Grid   : " & $z_grid & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Difference     : " & $z_diff & "*")
	SetVar $ssmsg ($ssmsg & "Percentage     : " & $z_diffperc & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Total Deployed : " & $z_deployed & "*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $Z_Lib~message $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
SetVar $Z_Lib~extra ANSI_10 & "- Done !"
Gosub :Z_Lib~HEADER
Echo  "*"
Echo ANSI_10 & "Database Check : " & ANSI_3 & $current & "*"
Echo "*"
Echo ANSI_10 & "Last Refresh   : " & ANSI_7 & $z_lastfigrefresh & "*"
Echo ANSI_10 & "Last Count     : " & ANSI_7 & $z_lastfigcount & "*"
Echo ANSI_10 & "Grid Percent   : " & ANSI_7 & $z_lastpercent & "%*"
Echo  "*"
Echo ANSI_10 & "Current Count  : " & ANSI_15 & $z_figcount & "*"
Echo ANSI_10 & "Current Grid   : " & ANSI_15 & $z_grid & "%*"
Echo  "*"
Echo ANSI_10 & "Difference     : " & ANSI_14 & $z_diff & "*"
Echo ANSI_10 & "Percentage     : " & ANSI_14 & $z_diffperc & "%*"
Echo "*"
Echo ANSI_10 & "Total Deployed : " & ANSI_7 & $z_deployed
Gosub :Z_Lib~REDLINE
Echo  "*"
SetSectorParameter 2 "FIG_COUNT" $z_figcount
SetVar $z_lastfigrefresh (DATE & " - " & TIME)
SaveVar $z_lastfigrefresh
Gosub :Z_Lib~COMMSON
:NOFIGS
Return
# MINES 
:INTCOM_MINES
Gosub :Z_Lib~CURRENTPLANET
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOMINES
End
Gosub :Z_Lib~COMMSOFF
LoadVar $z_lastminerefresh
If ($z_lastminerefresh = "0")
   SetVar $z_lastminerefresh "None"
End
GetSectorParameter 2 "MINE_COUNT" $z_lastminecount
If ($z_lastminecount = "")
   SetVar $z_lastminecount "0"
End
SetVar $z_minecount "0"
SetVar $Z_Lib~extra ANSI_10 & "- Counting Current Mines In Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $current "0"
SetVar $count "1"
While ($count <= SECTORS)
    GetSectorParameter $count "MINESEC" $ismined
    If ($ismined = TRUE)
       SetVar $current ($current + 1)
    End
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Clearing Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $count "1"
While ($count <= SECTORS)
    SetSectorParameter $count "MINESEC" FALSE
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Refreshing Mines..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $trigger2u "Deployed  Mine  Scan"
#Gosub :Z_Lib~ANSI_OFF
SetTextLineTrigger 2u :MINES $trigger2u
Send "k1"
Pause
:MINES
SetTextLineTrigger minescan1 :STARTMINESCAN "===================="
SetTextLineTrigger minenone :ENDMINESCAN "No mines deployed"
SetTextLineTrigger minescan2 :ENDMINESCAN "Total"
Pause
:STARTMINESCAN
KillTrigger minescan1
KillTrigger minescan2
KillTrigger minescan3
KillTrigger minenone
SetTextLineTrigger minescan3 :SCANLINEMINES
Pause
:SCANLINEMINES
SetVar $line CURRENTLINE
GetWordPos $line $pos "Total"
GetWordPos $line $pos2 "No mines deployed"
If ($pos > 0)
	GetWord $line $z_deployed 1
	ReplaceText $z_deployed "T" ",000"
	ReplaceText $z_deployed "M" ",000,000"
	Goto :ENDMINESCAN
ElseIf ($pos2 > 0)
   Goto :ENDMINESCAN
Else
   GetWord $line $sectnum 1
   IsNumber $isnum $sectnum
   If ($isnum = TRUE)
      SetSectorParameter $sectnum "MINESEC" TRUE
      SetVar $z_minecount ($z_minecount + 1)
   End
End
Goto :STARTMINESCAN
:ENDMINESCAN
KillTrigger minescan1
KillTrigger minescan2
KillTrigger minescan3
KillTrigger minenone
#Gosub :Z_Lib~ANSI_ON
Waitfor "] (?=Help)? :"
SetPrecision 2
If ($z_lastminecount > 0)
   SetVar $z_lastpercent (($z_lastminecount * 100) / SECTORS)
Else
   SetVar $z_lastpercent "0"
End
If ($z_minecount > 0)
   SetVar $z_grid (($z_minecount * 100) / SECTORS)
Else
   SetVar $z_grid "0.00"
End
SetPrecision 0
SetVar $z_diff ($z_minecount - $z_lastminecount)
SetPrecision 2
If ($z_diff <> 0)
   Setvar $z_diffperc (($z_diff * 100) / SECTORS)
Else
   Setvar $z_diffperc "0.00"
End
SetPrecision 0
Gosub :Z_Lib~RETURNTOPLANET
Gosub :Z_Lib~SYNC
If ($nodisplay <> TRUE)
	SetVar $ssmsg $dashedline
	SetVar $ssmsg ($ssmsg & "Zed's Mine Refresh v" & $Version & "*")
	SetVar $ssmsg ($ssmsg & "---------------------------*")
	SetVar $ssmsg ($ssmsg & "Database Check : " & $current & "*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Last Refresh   : " & $z_lastminerefresh & "*")
	SetVar $ssmsg ($ssmsg & "Last Count     : " & $z_lastminecount & "*")
	SetVar $ssmsg ($ssmsg & "Last Percent   : " & $z_lastpercent & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Current Count  : " & $z_minecount & "*")
	SetVar $ssmsg ($ssmsg & "Current Mine%  : " & $z_grid & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Difference     : " & $z_diff & "*")
	SetVar $ssmsg ($ssmsg & "Percentage     : " & $z_diffperc & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Total Deployed : " & $z_deployed & "*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $Z_Lib~message $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
SetVar $Z_Lib~extra ANSI_10 & "- Done !"
Gosub :Z_Lib~HEADER
Echo  "*"
Echo ANSI_10 & "Database Check : " & ANSI_3 & $current & "*"
Echo "*"
Echo ANSI_10 & "Last Refresh   : " & ANSI_7 & $z_lastminerefresh & "*"
Echo ANSI_10 & "Last Count     : " & ANSI_7 & $z_lastminecount & "*"
Echo ANSI_10 & "Last Percent   : " & ANSI_7 & $z_lastpercent & "%*"
Echo  "*"
Echo ANSI_10 & "Current Count  : " & ANSI_15 & $z_minecount & "*"
Echo ANSI_10 & "Current Mine%  : " & ANSI_15 & $z_grid & "%*"
Echo  "*"
Echo ANSI_10 & "Difference     : " & ANSI_14 & $z_diff & "*"
Echo ANSI_10 & "Percentage     : " & ANSI_14 & $z_diffperc & "%*"
Echo "*"
Echo ANSI_10 & "Total Deployed : " & ANSI_7 & $z_deployed & "*"
Gosub :Z_Lib~REDLINE
Echo  "*"
SetSectorParameter 2 "MINE_COUNT" $z_minecount
SetVar $z_lastminerefresh (DATE & " - " & TIME)
SaveVar $z_lastminerefresh
Gosub :Z_Lib~COMMSON
:NOMINES
Return
# LIMPS 
:INTCOM_LIMPS
Gosub :Z_Lib~CURRENTPLANET
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOLIMPS
End
Gosub :Z_Lib~COMMSOFF
LoadVar $z_lastlimprefresh
If ($z_lastlimprefresh = "0")
   SetVar $z_lastlimprefresh "None"
End
GetSectorParameter 2 "LIMP_COUNT" $z_lastlimpcount
If ($z_lastlimpcount = "")
   SetVar $z_lastlimpcount "0"
End
SetVar $z_limpcount "0"
SetVar $Z_Lib~extra ANSI_10 & "- Counting Current Limps In Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $current "0"
SetVar $count "1"
While ($count <= SECTORS)
    GetSectorParameter $count "LIMPSEC" $islimped
    If ($islimped = TRUE)
       SetVar $current ($current + 1)
    End
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Clearing Database..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $count "1"
While ($count <= SECTORS)
    SetSectorParameter $count "LIMPSEC" FALSE
    SetVar $count ($count + 1)
End
SetVar $Z_Lib~extra ANSI_10 & "- Refreshing Limpets..."
Gosub :Z_Lib~HEADER
Echo  "*"
SetVar $trigger2u "Deployed  Limpet  Scan"
#Gosub :Z_Lib~ANSI_OFF
SetTextLineTrigger 2u :LIMPS $trigger2u
Send "k2"
Pause
:LIMPS
SetTextLineTrigger limpscan1 :STARTLIMPSCAN "===================="
SetTextLineTrigger limpnone :ENDLIMPSCAN "No Limpet mines deployed"
SetTextLineTrigger limpscan2 :ENDLIMPSCAN "Total"
Pause
:STARTLIMPSCAN
Killtrigger limpscan1
Killtrigger limpscan2
Killtrigger limpscan3
Killtrigger limpnone
SetTextLineTrigger limpscan3 :SCANLINELIMPS
Pause
:SCANLINELIMPS
SetVar $line CURRENTLINE
GetWordPos $line $pos "Total"
GetWordPos $line $pos2 "No Limpet mines deployed"
If ($pos > 0)
	GetWord $line $z_deployed 1
	ReplaceText $z_deployed "T" ",000"
	ReplaceText $z_deployed "M" ",000,000"
	Goto :ENDLIMPSCAN
ElseIf ($pos2 > 0)
   Goto :ENDLIMPSCAN
Else
   GetWord $line $sectnum 1
   IsNumber $isnum $sectnum
   If ($isnum = TRUE)
      SetSectorParameter $sectnum "LIMPSEC" TRUE
      SetVar $z_limpcount ($z_limpcount + 1)
   End
End
Goto :STARTLIMPSCAN
:ENDLIMPSCAN
Killtrigger limpscan1
Killtrigger limpscan2
Killtrigger limpscan3
Killtrigger limpnone
#Gosub :Z_Lib~ANSI_ON
Waitfor "] (?=Help)? :"
SetPrecision 2
If ($z_lastlimpcount > 0)
   SetVar $z_lastpercent (($z_lastlimpcount * 100) / SECTORS)
Else
   SetVar $z_lastpercent "0"
End
If ($z_limpcount > 0)
   SetVar $z_grid (($z_limpcount * 100) / SECTORS)
Else
   SetVar $z_grid "0.00"
End
SetPrecision 0
SetVar $z_diff ($z_limpcount - $z_lastlimpcount)
SetPrecision 2
If ($z_diff <> 0)
   Setvar $z_diffperc (($z_diff * 100) / SECTORS)
Else
   Setvar $z_diffperc "0.00"
End
SetPrecision 0
Gosub :Z_Lib~RETURNTOPLANET
Gosub :Z_Lib~SYNC
If ($nodisplay <> TRUE)
	SetVar $ssmsg $dashedline
	SetVar $ssmsg ($ssmsg & "Zed's Limpet Mine Refresh v" & $Version & "*")
	SetVar $ssmsg ($ssmsg & "----------------------------------*")
	SetVar $ssmsg ($ssmsg & "Database Check : " & $current & "*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Last Refresh   : " & $z_lastlimprefresh & "*")
	SetVar $ssmsg ($ssmsg & "Last Count     : " & $z_lastlimpcount & "*")
	SetVar $ssmsg ($ssmsg & "Last Percent   : " & $z_lastpercent & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Current Count  : " & $z_limpcount & "*")
	SetVar $ssmsg ($ssmsg & "Current Limp%  : " & $z_grid & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Difference     : " & $z_diff & "*")
	SetVar $ssmsg ($ssmsg & "Percentage     : " & $z_diffperc & "%*")
	SetVar $ssmsg ($ssmsg & "-*")
	SetVar $ssmsg ($ssmsg & "Total Deployed : " & $z_deployed & "*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $Z_Lib~message $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
SetVar $Z_Lib~extra ANSI_10 & "- Done !"
Gosub :Z_Lib~HEADER
Echo  "*"
Echo ANSI_10 & "Database Check : " & ANSI_3 & $current & "*"
Echo "*"
Echo ANSI_10 & "Last Refresh   : " & ANSI_7 & $z_lastlimprefresh & "*"
Echo ANSI_10 & "Last Count     : " & ANSI_7 & $z_lastlimpcount & "*"
Echo ANSI_10 & "Last Percent   : " & ANSI_7 & $z_lastpercent & "%*"
Echo  "*"
Echo ANSI_10 & "Current Count  : " & ANSI_15 & $z_limpcount & "*"
Echo ANSI_10 & "Current Limp%  : " & ANSI_15 & $z_grid & "%*"
Echo  "*"
Echo ANSI_10 & "Difference     : " & ANSI_14 & $z_diff & "*"
Echo ANSI_10 & "Percentage     : " & ANSI_14 & $z_diffperc & "%*"
Echo "*"
Echo ANSI_10 & "Total Deployed : " & ANSI_7 & $z_deployed & "*"
Gosub :Z_Lib~REDLINE
Echo  "*"
SetSectorParameter 2 "LIMP_COUNT" $z_limpcount
SetVar $z_lastlimprefresh (DATE & " - " & TIME)
SaveVar $z_lastlimprefresh
Gosub :Z_Lib~COMMSON
:NOLIMPS
Return
# CALL 
:INTCOM_CALL
KillAllTriggers
OpenMenu TWX_STOPALLFAST FALSE
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt <> "Command")
	Goto :NOSAVE
End
Gosub :Z_Lib~COMMSON
Send #145
WaitOn #145 & #8
If ($z_callfast = "TRUE")
	If ($z_rescueavailable = TRUE)
		SetVar $Z_SaveMe~planet $rescueplanet
		Gosub :Z_Saveme~CALLFAST
	Else
		Gosub :Z_Saveme~CALL
	End
Else
	Gosub :Z_Saveme~CALL
End
:NOSAVE
SetVar $reset TRUE
Return
# SURROUND 
:INTCOM_SURROUND
Send "q q q q z 0* q z 0* q z 0*"
Gosub :GETSTATS
SetVar $Z_Surround~surround $current_sector
SetVar $Z_Surround~surroundwave $z_wave
SetVar $Z_Surround~surroundowner $z_figowner
SetVar $Z_Surround~surroundtype $z_figtype
SetVar $Z_Surround~surroundfigs $z_mowfigs
SetVar $Z_Surround~surroundmines $z_mowmines
SetVar $Z_Surround~surroundlimps $z_mowlimps
SetVar $Z_Surround~scanner $Scanner
If ($PARM1 = "force")
	SetVar $Z_Surround~forced TRUE
End
Gosub :Z_Surround~SURROUND
SetVar $Z_Surround~forced FALSE
Return
# OREUP 
:INTCOM_OREUP
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $ouprmpt 1 7
:OREUP2
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOOREUP
End
Gosub :Z_Lib~COMMSOFF
Gosub :GETSTATS
SetVar $Z_TurboOre~credits $credits
SetVar $Z_TurboOre~holds $holds
SetVar $Z_TurboOre~turns $turns
Gosub :Z_Lib~CURRENTPLANET
Send "q"
Gosub :Z_Lib~ISITUNLIMITED
Gosub :Z_Lib~RETURNTOPLANET
If ($Z_Lib~isunlimited = TRUE)
	SetVar $Z_TurboOre~turns 65000
End
Gosub :Z_Lib~HEADER
Echo ANSI_7 "*"
SetVar $Z_Lib~message "Zed's OreUp is ready to roll..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_TurboOre~BUYDOWN
If ($Z_TurboOre~failed = TRUE)
	SetVar $Z_Lib~message "Z-OreUp Failed: " & $Z_TurboOre~failreason & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOOREUP
End
If ($ouprmpt = "Citadel")
	Send "c"
End
Send "/"
SetVar $Z_Lib~message $scripttitle & ": Z-OreUp - Buy down exiting --- *Z-OreUp complete..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($z_usesound = TRUE)
	Sound ding
End
:NOOREUP
Gosub :Z_Lib~COMMSON
SetVar $Z_Lib~heraldss FALSE
Return
# LAND 
:INTCOM_L
:INTCOM_LAND
Send "*"
Gosub :GETSTATS
SetVar $lpns ""
If (SECTOR.PLANETCOUNT[$current_sector] = 0)
	SetVar $Z_Lib~message "No Planets in sector !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOLAND
End
If (($PARM1 = "") or ($PARM1 = "0")) and (SECTOR.PLANETCOUNT[$current_sector] <> "1") and ($z_planet = "0")
	SetVar $Z_Lib~message "Must specify a planet number!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOLAND
End
If (($PARM1 = "") or ($PARM1 = "0")) and ($current_sector <> "1")
	SetVar $PARM1 $z_planet
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Gosub :Z_Lib~PAUSE
	Goto :BADPLANET
End
Send "q q q q * " & #145
WaitFor #145 & #8
SetTextTrigger whichplanet :WHICHPLANET "Registry# and Planet Name"
SetTextTrigger onplanet :ONPLANET "Planet command (?=help)"
SetTextTrigger onterra :ONTERRA "Do you wish to (L)eave or (T)ake Colonists?"
SetTextLineTrigger pnum :LANDPLANET "Planet #"
Send "l"
Pause
:LANDPLANET
KillTrigger pnum
GetText CURRENTLINE $landplanet "Planet #" " in sector"
Pause
:WHICHPLANET
SetTextTrigger lpn :LPN ">"
Pause
:LPN
GetText CURRENTLINE $temp "<" ">"
If ($temp <> "Q to abort")
	StripText $temp " "
	SetVar $lpns ($lpns & $temp & " ")
	SetTextTrigger lpn :LPN ">"
	Pause
End
SetTextTrigger badplanetnum :BADPLANET "That planet is not in this sector."
If ($current_sector = "1")
	Send "1*"
Else
	Send $PARM1 & "*"
End
Pause
:BADPLANET
KillTrigger whichplanet
KillTrigger onplanet
KillTrigger onterra
KillTrigger badplanetnum
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message "Bad planet number " & $PARM1 & " !*"
If ($lpns <> "")
	SetVar $Z_Lib~message ($Z_Lib~message & "Available planets: " & $lpns & "*")
End
SetVar $Z_Lib~message ($Z_Lib~message & "Current prompt: " & CURRENTLINE & "*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOLAND
:ONTERRA
KillTrigger whichplanet
KillTrigger onplanet
KillTrigger badplanetnum
KillTrigger onterra
SetVar $Z_Lib~message "Landed on TERRA..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOLAND
:ONPLANET
KillTrigger whichplanet
KillTrigger onplanet
KillTrigger badplanetnum
KillTrigger onterra
SetTextTrigger incitadel :INCITADEL "Citadel command (?=help)"
SetTextTrigger nocitadel :NOCITADEL "Do you wish to construct one?"
Send "c"
Pause
:INCITADEL
KillTrigger incitadel
KillTrigger nocitadel
SetVar $Z_Lib~message "Landed on planet #" & $landplanet & " and entered the citadel.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOLAND
:NOCITADEL
KillTrigger incitadel
KillTrigger nocitadel
Send "n"
SetVar $Z_Lib~message "Landed on planet #" & $landplanet & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOLAND
Return
# LIFT 
:INTCOM_LIFT
Send "q q *"
SetVar $Z_Lib~message "Lifted off planet..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# MAC 
:INTCOM_MAC
KillAllTriggers
LowerCase $user_command_line
ReplaceText $user_command_line #42 #13
ReplaceText $user_command_line "^m" #42
GetWordPos $user_command_line $pos1 "c"
GetWordPos $user_command_line $pos2 "b"
GetWordPos $user_command_line $pos3 "y"
If ($pos1 > 0) and ($pos2 > $pos1) and ($pos3 > $pos2)
	SetVar $Z_Logs~logentry $scripttitle & ": Anti-Self destruct system ACTIVATED!"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & ": Macro from " & $sender & " contained CBY:"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & " " & $user_command_line
	Gosub :Z_Logs~ENTERLOG
	Echo "**" & $boldred & $blinkon & " !!! Anti-Self destruct system ACTIVATED !!!**" & $blinkoff
Else
	Send $user_command_line
	SetVar $Z_Lib~message "Macro executed...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
SetVar $reset TRUE
Return
# NMAC 
:INTCOM_NMAC
KillAllTriggers
LowerCase $user_command_line
ReplaceText $user_command_line #42 #13
ReplaceText $user_command_line "^m" #42
Isnumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NONMAC
End
If ($PARM1 < 1)
	Goto :NONMAC
End
If ($PARM2 = "0")
	Goto :NONMAC
End
GetLength $PARM1 $len
GetWordPos $user_command_line $pos $PARM1
SetVar $x ($pos + $len + 1)
CutText $user_command_line $mac $x 999
SetVar $user_command_line $mac
GetWordPos $user_command_line $pos1 "c"
GetWordPos $user_command_line $pos2 "b"
GetWordPos $user_command_line $pos3 "y"
If ($pos1 > 0) and ($pos2 > $pos1) and ($pos3 > $pos2)
	SetVar $Z_Logs~logentry $scripttitle & ": Anti-Self destruct system ACTIVATED!"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & ": Macro from " & $sender & " contained CBY:"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & " " & $user_command_line
	Gosub :Z_Logs~ENTERLOG
	Echo "**" & $boldred & $blinkon & " !!! Anti-Self destruct system ACTIVATED !!!**" & $blinkoff
Else
	SetVar $x 1
	While ($x <= $PARM1)
		Send $user_command_line
		SetVar $x ($x + 1)
	End
	SetVar $Z_Lib~message "Macro executed " & $PARM1 & " times...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NONMAC
SetVar $reset TRUE
Return
# ZMAC 
:INTCOM_ZMAC
KillAllTriggers
SetVar $messagemode "R"
SetVar $Z_Lib~messagemode "R"
Gosub :Z_Lib~COMMSON
LowerCase $user_command_line
ReplaceText $user_command_line #42 #13
ReplaceText $user_command_line "^m" #42
Isnumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NOZMAC
End
If ($PARM1 < 1)
	Goto :NOZMAC
End
If ($PARM2 = "0")
	Goto :NOZMAC
End
GetLength $PARM1 $len
GetWordPos $user_command_line $pos $PARM1
SetVar $x ($pos + $len + 1)
CutText $user_command_line $mac $x 999
SetVar $user_command_line $mac
GetWordPos $user_command_line $pos1 "c"
GetWordPos $user_command_line $pos2 "b"
GetWordPos $user_command_line $pos3 "y"
If ($pos1 > 0) and ($pos2 > $pos1) and ($pos3 > $pos2)
	SetVar $Z_Logs~logentry $scripttitle & ": Anti-Self destruct system ACTIVATED!"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & ": Macro from " & $sender & " contained CBY:"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & " " & $user_command_line
	Gosub :Z_Logs~ENTERLOG
	Echo "**" & $boldred & $blinkon & " !!! Anti-Self destruct system ACTIVATED !!!**" & $blinkoff
Else
	SetVar $x 1
	While ($x <= $PARM1)
		SetTextLineTrigger zmacok :ZMACOK "Arrived at sector: ["
		SetTextLineTrigger zmacnotok :ZMACNOTOK "DID NOT arrive at sector: ["
		SetDelayTrigger zmacnotok2 :ZMACNOTOK 600000
		SetTextOutTrigger zmacabort :ZMACABORT #8
		Send $user_command_line
		Pause
:ZMACNOTOK
		KillTrigger zmacok
		KillTrigger zmacnotok
		KillTrigger zmacnotok2
		KillTrigger zmacabort
		Echo "***" & $boldred & $blinkon & "!!! DID NOT MAKE LAST JUMP !!!" & $blinkoff & "***"
		Goto :NOZMAC
:ZMACABORT
		KillTrigger zmacok
		KillTrigger zmacnotok
		KillTrigger zmacnotok2
		KillTrigger zmacabort
		Echo "***" & $boldred & $blinkon & "!!! ABORTED BY USER !!!" & $blinkoff & "***"
		Goto :NOZMAC
:ZMACOK
		KillTrigger zmacok
		KillTrigger zmacnotok
		KillTrigger zmacnotok2
		KillTrigger zmacabort
		SetDelayTrigger zmacok :ZMACOK2 1000
		Pause
:ZMACOK2
		KillTrigger zmacok
		KillTrigger zmacnotok
		KillTrigger zmacnotok2
		KillTrigger zmacabort
		SetVar $x ($x + 1)
	End
	SetVar $Z_Lib~message "Macro executed " & $PARM1 & " times...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOZMAC
SetVar $reset TRUE
Return
# NDMAC 
:INTCOM_NDMAC
KillAllTriggers
Gosub :Z_Lib~COMMSON
LowerCase $user_command_line
ReplaceText $user_command_line #42 #13
ReplaceText $user_command_line "^m" #42
Isnumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NODMAC
End
If ($PARM1 < 1)
	Goto :NODMAC
End
If ($PARM2 = "0")
	Goto :NODMAC
End
If ($PARM3 = "0")
	Goto :NODMAC
End
GetLength ($PARM1 & " " & $PARM2) $len
GetWordPos $user_command_line $pos ($PARM1 & " " & $PARM2)
SetVar $x ($pos + $len + 1)
CutText $user_command_line $mac $x 999
SetVar $user_command_line $mac
GetWordPos $user_command_line $pos1 "c"
GetWordPos $user_command_line $pos2 "b"
GetWordPos $user_command_line $pos3 "y"
If ($pos1 > 0) and ($pos2 > $pos1) and ($pos3 > $pos2)
	SetVar $Z_Logs~logentry $scripttitle & ": Anti-Self destruct system ACTIVATED!"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & ": Macro from " & $sender & " contained CBY:"
	Gosub :Z_Logs~ENTERLOG
	SetVar $Z_Logs~logentry $scripttitle & " " & $user_command_line
	Gosub :Z_Logs~ENTERLOG
	Echo "**" & $boldred & $blinkon & " !!! Anti-Self destruct system ACTIVATED !!!**" & $blinkoff
Else
	SetVar $x 1
	While ($x <= $PARM1)
		SetDelayTrigger dmacok :DMACOK ($PARM2 * 1000)
		SetTextOutTrigger dmacabort :DMACABORT #8
		Send $user_command_line
		Pause
:DMACABORT
KillTrigger dmacok
KillTrigger dmacabort
Echo "***" & $boldred & $blinkon & "!!! ABORTED BY USER !!!" & $blinkoff & "***"
Goto :NODMAC
:DMACOK
		KillTrigger dmacok
		KillTrigger dmacabort
		SetVar $x ($x + 1)
	End
	SetVar $Z_Lib~message "Macro executed " & $PARM1 & " times...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NODMAC
SetVar $reset TRUE
Return
# HELP 
:INTCOM_HELP
SetVar $search ""
LowerCase $PARM1
GetLength $PARM1 $lenparm
If ($selfbot = TRUE)
	SetVar $botaddress $z_selfbotkeyd
Else
	SetVar $botaddress $z_botname
End
SetVar $Z_Help~botaddress $botaddress
GetWordPos $user_command_line $pos1 "["
GetWordPos $user_command_line $pos2 "]"
If ($pos1 <> "0") and ($pos2 <> "0")
	GetText $user_command_line $search "[" "]"
	StripText $search "]"
	StripText $search "["
End
If ($search <> "") and ($search <> "0")
	Goto :SEARCHHELP
ElseIf ($PARM1 = "internal")
	FileExists $fileexist "Z-HelpList.cfg"
	If ($fileexist = TRUE)
		SetVar $ssmsg ""
		ReadToArray "Z-HelpList.cfg" $helplistfile
		SetVar $x 1
		While ($x <= $helplistfile)
			SetVar $ssmsg ($ssmsg & $helplistfile[$x] & "*")
			SetVar $x ($x + 1)
		End
	Else
		SetVar $i 1
		SetVar $commandcount 0
		While ($i <= $internalcommands)
			If ($internalcommand[$i] <> #145)
				SetVar $commandcount ($commandcount + 1)
			End
			SetVar $i ($i + 1)
		End
		If ($helpsorted = TRUE)
			SetVar $ssmsg $dashedline & $scripttitle & " Internal Command List - " & $commandcount & " commands.*" & $dashedline
		Else
			SetVar $ssmsg $dashedline & $scripttitle & " Internal Command List - " & $commandcount & " commands.  -UNSORTED-*" & $dashedline
		End
		SetVar $i 1
		SetVar $k 1
		While ($i <= $internalcommands)
			If ($internalcommand2[$i] <> #145)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 17
				SetVar $Z_Strings~unpadded $internalcommand2[$i]
				SetVar $j 1
				While ($j <= $externalcommands)
					If ($internalcommand2[$i] = $externalcommand2[$j])
						SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
						SetVar $j $externalcommands
					End
					SetVar $j ($j + 1)
				End
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded)
				SetVar $k ($k + 1)
				If ($k > 4)
					SetVar $ssmsg ($ssmsg & "*")
					SetVar $k 1
				End
			End
			SetVar $i ($i + 1)
		End
		If ($k <> 1)
			SetVar $ssmsg ($ssmsg & "*")
		End
		SetVar $ssmsg ($ssmsg & $dashedline)
		SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
		SetVar $ssmsg ($ssmsg & " *")
		SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
	End
ElseIf ($PARM1 = "all")
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand[$i] <> #145)
			SetVar $commandcount ($commandcount + 1)
		End
		SetVar $i ($i + 1)
	End
	If ($helpsorted = TRUE)
		SetVar $ssmsg $dashedline & $scripttitle & " Complete Command List - " & ($commandcount + $externalcommands) & " commands total.*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " Complete Command List - " & ($commandcount + $externalcommands) & " commands total.  -UNSORTED-*" & $dashedline
	End
	SetVar $ssmsg ($ssmsg & " INTERNAL - " & $commandcount & "*" & $dashedline)
	SetVar $i 1
	While ($i <= $internalcommands)
		If ($internalcommand2[$i] <> #145)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 15
			SetVar $Z_Strings~unpadded $internalcommand2[$i]
			SetVar $j 1
			While ($j <= $externalcommands)
				SetVar $override ""
				If ($internalcommand2[$i] = $externalcommand2[$j])
					SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
					SetVar $override $externalfile2[$j]
					SetVar $j $externalcommands
				End
				SetVar $j ($j + 1)
			End
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			UpperCase $Z_Strings~padded
			GetWordPos $Z_Strings~padded $pos #42
			If ($pos <> "0")
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":- OVERRIDE --> " & $override & "*")
			Else
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":-" & $verbose[$i] & "*")
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & " EXTERNAL - " & $externalcommands & "*" & $dashedline)
	SetVar $i 1
	While ($i <= $externalcommands)
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 17
		SetVar $Z_Strings~unpadded $externalcommand2[$i]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		If ($externaldesc2[$i] <> "")
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--- " & $externaldesc2[$i] & "*"
		Else
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--> " & $externalfile2[$i] & "*"
		End
		SetVar $i ($i + 1)
	End
	
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
ElseIf ($lenparm = 1) and ($PARM1 <> "0")
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand[$i] <> #145)
			SetVar $commandcount ($commandcount + 1)
		End
		SetVar $i ($i + 1)
	End
	If ($helpsorted = TRUE)
		SetVar $helpidx $PARM1
		UpperCase $helpidx
		SetVar $ssmsg $dashedline & $scripttitle & " Command List - INDEX: " & $helpidx & "*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " Command List - INDEX: " & $helpidx & "  -UNSORTED-*" & $dashedline
	End
	SetVar $i 1
	LowerCase $PARM1
	SetVar $searchct "0"
	While ($i <= $internalcommands)
		If ($internalcommand2[$i] <> #145)
			CutText $internalcommand2[$i] $ck 1 1
			LowerCase $ck
			If ($ck = $PARM1)
				SetVar $searchct ($searchct + 1)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 15
				SetVar $Z_Strings~unpadded $internalcommand2[$i]
				SetVar $j 1
				While ($j <= $externalcommands)
					SetVar $override ""
					If ($internalcommand2[$i] = $externalcommand2[$j])
						SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
						SetVar $override $externalfile2[$j]
						SetVar $j $externalcommands
					End
					SetVar $j ($j + 1)
				End
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				UpperCase $Z_Strings~padded
				GetWordPos $Z_Strings~padded $pos #42
				If ($pos <> "0")
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":- OVERRIDE --> " & $override & "*")
				Else
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":-" & $verbose[$i] & "*")
				End
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $i 1
	While ($i <= $externalcommands)
		CutText $externalcommand2[$i] $ck 1 1
		LowerCase $ck
		If ($ck = $PARM1)
			SetVar $searchct ($searchct + 1)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 17
			SetVar $Z_Strings~unpadded $externalcommand2[$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			If ($externaldesc2[$i] <> "")
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--- " & $externaldesc2[$i] & "*"
			Else
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--> " & $externalfile2[$i] & "*"
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & " Found " & $searchct & " commands starting with [" & $helpidx & "].*" & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
ElseIf ($PARM1 = "list")
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand[$i] <> #145)
			SetVar $commandcount ($commandcount + 1)
		End
		SetVar $i ($i + 1)
	End
	If ($helpsorted = TRUE)
		SetVar $ssmsg $dashedline & $scripttitle & " Internal Command List - " & $commandcount & " commands.*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " Internal Command List - " & $commandcount & " commands.  -UNSORTED-*" & $dashedline
	End
	SetVar $i 1
	While ($i <= $internalcommands)
		If ($internalcommand2[$i] <> #145)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 15
			SetVar $Z_Strings~unpadded $internalcommand2[$i]
			SetVar $j 1
			While ($j <= $externalcommands)
				SetVar $override ""
				If ($internalcommand2[$i] = $externalcommand2[$j])
					SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
					SetVar $override $externalfile2[$j]
					SetVar $j $externalcommands
				End
				SetVar $j ($j + 1)
			End
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			UpperCase $Z_Strings~padded
			GetWordPos $Z_Strings~padded $pos #42
			If ($pos <> "0")
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":- OVERRIDE --> " & $override & "*")
			Else
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":-" & $verbose[$i] & "*")
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
ElseIf ($PARM1 = "xlist")
	If ($helpsorted = TRUE)
		SetVar $ssmsg $dashedline & $scripttitle & " External Command List - " & $externalcommands & " commands.*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " External Command List - " & $externalcommands & " commands.  -UNSORTED-*" & $dashedline
	End
	SetVar $i 1
	While ($i <= $externalcommands)
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 17
		SetVar $Z_Strings~unpadded $externalcommand2[$i]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		If ($externaldesc2[$i] <> "")
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--- " & $externaldesc2[$i] & "*"
		Else
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--> " & $externalfile2[$i] & "*"
		End
		SetVar $i ($i + 1)
	End
	
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
ElseIf ($PARM1 = "external")
	If ($helpsorted = TRUE)
		SetVar $ssmsg $dashedline & $scripttitle & " External Command List - " & $externalcommands & " commands.*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " External Command List - " & $externalcommands & " commands.  -UNSORTED-*" & $dashedline
	End
	SetVar $i 1
	SetVar $k 1
	While ($i <= $externalcommands)
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 17
		SetVar $Z_Strings~unpadded $externalcommand2[$i]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $ssmsg ($ssmsg & $Z_Strings~padded)
		SetVar $k ($k + 1)
		If ($k > 4)
			SetVar $ssmsg ($ssmsg & "*")
			SetVar $k 1
		End
		SetVar $i ($i + 1)
	End
	If ($k <> 1)
		SetVar $ssmsg ($ssmsg & "*")
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & " Add commands to this list by editing the  Z-Options.cfg  file.*")
ElseIf ($PARM1 = "combat") or ($PARM1 = "cash") or ($PARM1 = "resource") or ($PARM1 = "data") or ($PARM1 = "grid") or ($PARM1 = "utility") or ($PARM1 = "daemon")
	UpperCase $PARM1
	SetVar $commandcount 0
	SetVar $ssmsg "INTERNAL*"
	SetVar $ssmsg ($ssmsg & "--------*")
	SetVar $i 1
	SetVar $k 1
	While ($i <= $internalcommands)
		GetWordPos $internalcategory2[$i] $pos $PARM1
		If ($pos > 0)
			If ($internalcommand2[$i] <> #145)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 17
				SetVar $Z_Strings~unpadded $internalcommand2[$i]
				SetVar $j 1
				While ($j <= $externalcommands)
					If ($internalcommand2[$i] = $externalcommand2[$j])
						SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
						SetVar $j $externalcommands
					End
					SetVar $j ($j + 1)
				End
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded)
				SetVar $commandcount ($commandcount + 1)
				SetVar $k ($k + 1)
				If ($k > 4)
					SetVar $ssmsg ($ssmsg & "*")
					SetVar $k 1
				End
			End
		End
		SetVar $i ($i + 1)
	End
	If ($k <> 1)
		SetVar $ssmsg ($ssmsg & "*")
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "EXTERNAL*")
	SetVar $ssmsg ($ssmsg & "--------*")
	SetVar $i 1
	SetVar $k 1
	While ($i <= $externalcommands)
		GetWordPos $externalmode2[$i] $pos $PARM1
		If ($pos > 0)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 17
			SetVar $Z_Strings~unpadded $externalcommand2[$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded)
			SetVar $commandcount ($commandcount + 1)
			SetVar $k ($k + 1)
			If ($k > 4)
				SetVar $ssmsg ($ssmsg & "*")
				SetVar $k 1
			End
		End
		SetVar $i ($i + 1)
	End
	If ($k <> 1)
		SetVar $ssmsg ($ssmsg & "*")
	End
	If ($helpsorted = TRUE)
		SetVar $ssmsg ($dashedline & $scripttitle & " - " & $PARM1 & " Command List - " & $commandcount & " commands.*" & $dashedline & $ssmsg)
	Else
		SetVar $ssmsg ($dashedline & $scripttitle & " - " & $PARM1 & " Command List - " & $commandcount & " commands.  -UNSORTED-*" & $dashedline & $ssmsg)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "              " & $z_botname & " COMMAND help  or  " & $z_botname & " COMMAND ?*")
ElseIf ($PARM1 = "sort")
	If ($helpsorted <> TRUE)
		Gosub :SORTHELPLIST
		Gosub :SORTXTRALIST
		SetVar $ssmsg $dashedline & $scripttitle & ": Help lists have been alphabetically sorted.*"
		SetVar $helpsorted TRUE
	Else
		SetVar $ssmsg $dashedline & $scripttitle & ": Help lists have already been sorted.*"
	End
ElseIf ($PARM1 = "config")
	SetVar $ssmsg $dashedline & $scripttitle & ": Help - Configuration*" & $dashedline
	SetVar $ssmsg ($ssmsg & "Edit z-options.cfg for the following:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "- Change your Botname.*")
	SetVar $ssmsg ($ssmsg & "- Register various support scripts with Z-Bot.*")
	SetVar $ssmsg ($ssmsg & "- Set whether or not to sort the help list at startup.*")
	SetVar $ssmsg ($ssmsg & "- Add bottable scripts to use with Z-Bot.*")
	SetVar $ssmsg ($ssmsg & "- Replace internal commands with external scripts.*")
	SetVar $ssmsg ($ssmsg & "- Set/change the HOTKEY and the User Defined Hotkey assignments.*")
	SetVar $ssmsg ($ssmsg & "- Add/change banner files displayed with the Banner hotkey.*")
	SetVar $ssmsg ($ssmsg & "- Edit the macros used with the Move system kill/Cap/Wavecap options.*")
	SetVar $ssmsg ($ssmsg & "- Edit the ATTACK HOTKEY macro.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "Edit the .mnu files - to edit the standalone scripts menus.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "Edit z-sectorlist.cfg - to edit the list of selectable filenames.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "Edit z-filelist.cfg - to authorise list files for transfer.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "Edit z-globals.cfg - to change the details used to create a new*")
	SetVar $ssmsg ($ssmsg & "                     character or to change the scripts auto loaded*")
	SetVar $ssmsg ($ssmsg & "                     at login.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "NOTE: All of these files can be found in the TWX root.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "NOTE: Many options can be configured in the Bot Options menu.*")
	SetVar $ssmsg ($ssmsg & "      Use the Bot Options hotkey, default is TAB, to access it.*")
	SetVar $ssmsg ($ssmsg & "      Note that the TAB key will NOT work if the Swath Comms*")
	SetVar $ssmsg ($ssmsg & "      window is open.*")
	SetVar $ssmsg ($ssmsg & $dashedline & "Z-Bot Configuration files found in my TWX Root*" & $dashedline)
	SetArray $cfgfilelist 0
	GetFileList $cfgfilelist "z-*.cfg"
	SetVar $x 1
	While ($x <= $cfgfilelist)
		SetVar $ssmsg ($ssmsg & $cfgfilelist[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetArray $cfgfilelist 0
	GetFileList $cfgfilelist "zp-*.mnu"
	SetVar $x 1
	While ($x <= $cfgfilelist)
		SetVar $ssmsg ($ssmsg & $cfgfilelist[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetArray $cfgfilelist 0
	GetFileList $cfgfilelist GAMENAME & "_z-*.cfg"
	SetVar $x 1
	While ($x <= $cfgfilelist)
		SetVar $ssmsg ($ssmsg & $cfgfilelist[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline & "Z-Bot Log files found in my TWX Root*" & $dashedline)
	SetArray $cfgfilelist 0
	GetFileList $cfgfilelist "z-*.log"
	SetVar $x 1
	While ($x <= $cfgfilelist)
		SetVar $ssmsg ($ssmsg & $cfgfilelist[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetArray $cfgfilelist 0
	GetFileList $cfgfilelist GAMENAME & "_z-*.log"
	SetVar $x 1
	While ($x <= $cfgfilelist)
		SetVar $ssmsg ($ssmsg & $cfgfilelist[$x] & "*")
		SetVar $x ($x + 1)
	End
ElseIf ($PARM1 = "movesys")
	SetVar $ssmsg $dashedline & $scripttitle & ": Help - Movement System*" & $dashedline
	SetVar $ssmsg ($ssmsg & "The Movement System consists of the Mow, Charge, TWarp and*")
	SetVar $ssmsg ($ssmsg & "BlindWarp hotkeys and commands. It also includes short aliases*")
	SetVar $ssmsg ($ssmsg & "for the commands such as T=TWarp M=Mow and C=Charge.*")
	SetVar $ssmsg ($ssmsg & "Note there is no Blindwarp command.*")
	SetVar $ssmsg ($ssmsg & "The Movement System Hotkeys (by default; [=Twarp, ]=Charge,*")
	SetVar $ssmsg ($ssmsg & "{=Mow and }=Blindwarp) lead to a common interface where you*")
	SetVar $ssmsg ($ssmsg & "tell it where you want to go and what you want to do when you*")
	SetVar $ssmsg ($ssmsg & "get there (if anything).*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "There are 3 sections to the display. The first section shows*")
	SetVar $ssmsg ($ssmsg & "you some destination shortcut options (such as [D]-STARDOCK).*")
	SetVar $ssmsg ($ssmsg & "If the key to press is missing (D in this case) it means you*")
	SetVar $ssmsg ($ssmsg & "haven't found the destination yet. If the destination is red*")
	SetVar $ssmsg ($ssmsg & "it means there is no fig in the sector for Twarp, or you are*")
	SetVar $ssmsg ($ssmsg & "not commissioned in the case of a STARDOCK destination.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "The Second section displays the arrival options such as*")
	SetVar $ssmsg ($ssmsg & "[P]-Port which will safely dock you on the port when you get*")
	SetVar $ssmsg ($ssmsg & "there (including STARDOCK). So press the } key and type in*")
	SetVar $ssmsg ($ssmsg & "dp  and press ENTER to TWarp to STARDOCK and dock when you*")
	SetVar $ssmsg ($ssmsg & "get there (STARDOCK prompt). You can use more than 1 arrival*")
	SetVar $ssmsg ($ssmsg & "option at a time such as UW - Surround and then WaveCap.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "There are options missing on the display. The [M]-Macro*")
	SetVar $ssmsg ($ssmsg & "Option. This will run a macro upon arrival. The macro is the*")
	SetVar $ssmsg ($ssmsg & "MACRO: entry in the z-options.cfg.*")
	SetVar $ssmsg ($ssmsg & "The [X]-HoloAttack Option. This will continue an attack in*")
	SetVar $ssmsg ($ssmsg & "an adjacent sector if a target exists.*")
	SetVar $ssmsg ($ssmsg & "[Z]-Buzz throws 40 single fighter waves at the target.*")
	SetVar $ssmsg ($ssmsg & "ANY bottable command can be run by putting it and it's*")
	SetVar $ssmsg ($ssmsg & "parameters between SQUARE brackets []. The command*")
	SetVar $ssmsg ($ssmsg & "will be run after all other options have completed.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "The third section is where you type in the sector number*")
	SetVar $ssmsg ($ssmsg & "(or shortcut from section 1) and the arrival options.*")
	SetVar $ssmsg ($ssmsg & "It also indicates if a fig is in an MSL.*")
	SetVar $ssmsg ($ssmsg & "(Figmon sees Extern has run if there's a fig in an MSL).*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "You can use the move system from most prompts including the*")
	SetVar $ssmsg ($ssmsg & "STARDOCK prompt. It is FAST and has many built in safeties.*")
	SetVar $ssmsg ($ssmsg & "By the way.. MOW means to move fast through the sectors*")
	SetVar $ssmsg ($ssmsg & "dropping fighters (and optionally mines) in each sector*")
	SetVar $ssmsg ($ssmsg & "until you reach your destination. CHARGE means the same but*")
	SetVar $ssmsg ($ssmsg & "is MUCH FASTER as it does NOT drop fighters or mines.*")
	SetVar $ssmsg ($ssmsg & "Mowing and charging will run over most obstacles to get you*")
	SetVar $ssmsg ($ssmsg & "to your destination.*")
ElseIf ($PARM1 = "override")
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand2[$i] <> #145)
			SetVar $j 1
			While ($j <= $externalcommands)
				If ($internalcommand2[$i] = $externalcommand2[$j])
					SetVar $Z_Strings~padchar " "
					SetVar $Z_Strings~padlen 17
					SetVar $Z_Strings~unpadded $internalcommand2[$i]
					SetVar $Z_Strings~rpad TRUE
					Gosub :Z_Strings~PAD
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & $externalfile2[$j] & "*")
					SetVar $commandcount ($commandcount + 1)
				End
				SetVar $j ($j + 1)
			End
		End
		SetVar $i ($i + 1)
	End
	If ($commandcount = 0)
		SetVar $ssmsg "Z-Bot has NO internal command overrides installed.*"
	End
	SetVar $ssmsg ($ssmsg & $dashedline & "NOTE: Overrides are marked on the various lists with an '" & #42 & "'*")
	SetVar $ssmsg ($dashedline & $scripttitle & " - " & " Command Override List - " & $commandcount & " overrides.*" & $dashedline & $ssmsg)
ElseIf ($PARM1 = "0") or ($PARM1 = "help")
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand[$i] <> #145)
			SetVar $commandcount ($commandcount + 1)
		End
		SetVar $i ($i + 1)
	End
	If ($helpsorted = TRUE)
		SetVar $ssmsg $dashedline & $scripttitle & ": Help        " & ($commandcount + $externalcommands) & " commands available        Lists are SORTED*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & ": Help        " & ($commandcount + $externalcommands) & " commands available        Lists are UNSORTED*" & $dashedline
	End
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help list       - for a verbose list of INTERNAL COMMANDS.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help xlist      - for a verbose list of EXTERNAL COMMANDS.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help all        - for a complete list of ALL COMMANDS.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help internal   - for a table of INTERNAL COMMANDS.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help external   - for a table of EXTERNAL COMMANDS.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help A..Z       - for a list of COMMANDS starting with A..Z.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help [CRITERIA] - Search for COMMANDS containing [CRITERIA].*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help sort       - to sort ALL help lists alphabetically.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help movesys    - to view info on the Movement System.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help config     - to view Z-Bot config file information.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help override   - to view Z-Bot internal command overrides.*")
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help ?          - to view conventions used in HELP.*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "Type " & $botaddress & " help [CATEGORY] - for a table of commands by category.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "                       HELP CATEGORIES*")
	SetVar $ssmsg ($ssmsg & "                      -----------------*")
	SetVar $ssmsg ($ssmsg & "    COMBAT - CASH - RESOURCE - DATA - GRID - UTILITY - DAEMON*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & "The BOT OWNER can press ["& $z_hotmenukeyd & "] for a list of HOTKEYS.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "DOUBLE TAP the [" & $z_actkeyd & "] key for the STANDALONE SCRIPT MENU.*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "Turn the BOT on remotely with:    " & $z_botname & " bot on*")
	SetVar $ssmsg ($ssmsg & "If that doesn't work try with:    " & $z_botname & " zbot on*")
	SetVar $ssmsg ($ssmsg & "If that doesn't work try with:    " & $z_botname & " final_protocol*")
Else
	SetVar $search $user_command_line
	StripText $search " 0"
	SetVar $Z_Strings~trimstring $search
	Gosub :Z_Strings~RTRIM
	SetVar $search $Z_Strings~trimstring
:SEARCHHELP
	SetVar $searchct 0
	SetVar $i 1
	SetVar $commandcount 0
	While ($i <= $internalcommands)
		If ($internalcommand[$i] <> #145)
			SetVar $commandcount ($commandcount + 1)
		End
		SetVar $i ($i + 1)
	End
	If ($helpsorted = TRUE)
		SetVar $helpidx $PARM1
		UpperCase $helpidx
		SetVar $ssmsg $dashedline & $scripttitle & " Command List - SEARCH RESULTS:  [" & $search & "]*" & $dashedline
	Else
		SetVar $ssmsg $dashedline & $scripttitle & " Command List - SEARCH RESULTS:  [" & $search & "]  -UNSORTED-*" & $dashedline
	End
	SetVar $i 1
	LowerCase $search
	While ($i <= $internalcommands)
		If ($internalcommand2[$i] <> #145)
			SetVar $temp $internalcommand2[$i]
			LowerCase $temp
			GetWordPos  $temp $pos1 $search
			SetVar $temp $verbose[$i]
			LowerCase $temp
			GetWordPos  $temp $pos2 $search
			SetVar $temp $keywords[$i]
			LowerCase $temp
			GetWordPos  $temp $pos3 $search
			If ($pos1 <> "0") or ($pos2 <> "0") or ($pos3 <> "0")
				SetVar $searchct ($searchct + 1)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 15
				SetVar $Z_Strings~unpadded $internalcommand2[$i]
				SetVar $j 1
				While ($j <= $externalcommands)
					SetVar $override ""
					If ($internalcommand2[$i] = $externalcommand2[$j])
						SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
						SetVar $override $externalfile2[$j]
						SetVar $j $externalcommands
					End
					SetVar $j ($j + 1)
				End
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				UpperCase $Z_Strings~padded
				GetWordPos $Z_Strings~padded $pos #42
				If ($pos <> "0")
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":- OVERRIDE --> " & $override & "*")
				Else
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":-" & $verbose[$i] & "*")
				End
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $i 1
	While ($i <= $externalcommands)
		SetVar $temp $externalcommand2[$i]
		LowerCase $temp
		GetWordPos  $temp $pos1 $search
		SetVar $temp $externalfile2[$i]
		LowerCase $temp
		GetWordPos  $temp $pos2 $search
		SetVar $temp $externaldesc2[$i]
		LowerCase $temp
		GetWordPos  $temp $pos3 $search
		If ($pos1 <> "0") or ($pos2 <> "0") or ($pos3 <> "0")
			SetVar $searchct ($searchct + 1)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 17
			SetVar $Z_Strings~unpadded $externalcommand2[$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			If ($externaldesc2[$i] <> "")
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--- " & $externaldesc2[$i] & "*"
			Else
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded) & "--> " & $externalfile2[$i] & "*"
			End
		End
		SetVar $i ($i + 1)
	End
	
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $ssmsg ($ssmsg & " Found " & $searchct & " commands matching the search criteria.*" & $dashedline)
	SetVar $ssmsg ($ssmsg & "Help for individual commands can be obtained using the form:*")
	SetVar $ssmsg ($ssmsg & " *")
	SetVar $ssmsg ($ssmsg & "            " & $botaddress & " [COMMAND] help   or   " & $botaddress & " [COMMAND] ?*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
If ($selfbot = TRUE)
	SetVar $Z_Lib~messagemode "E"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# PDROP 
:INTCOM_PDROP
KillAllTriggers
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPDROP
End
SetTextLineTrigger pdropfuel :PDROPFUEL "Fuel Ore"
Send "q*c"
Pause
:PDROPFUEL
GetWord CURRENTLINE $pdropfuel 6
StripText $pdropfuel ","
Gosub :GETSHIPDATA
Gosub :GETSTATS
SetVar $pdropalert FALSE
UpperCase $user_command_line
SetVar $pdropreturnsector $current_sector
If ($PARM1 = "on")
	GetWordPos $user_command_line $pos "RETURN"
	GetWordPos $user_command_line $pos2 "CAP"
	GetWordPos $user_command_line $pos3 "KILL"
	GetWordPos $user_command_line $pos4 "ALERT"
	If ($pos > 0)
		SetVar $pdropreturn TRUE
		SetVar $pdropreturnd "[RETURN]"  & " - Delay: " & $pdropreturndelay & " secs"
	Else 
		SetVar $pdropreturn FALSE
		SetVar $pdropreturnd ""
	End
	If ($pos2 > 0)
		SetVar $pdropcitkill TRUE
		SetVar $pdropcitkilld "[CITCAP]"
		SetVar $attackmode "CAP"
		Gosub :Z_Lib~CURRENTPLANET
	ElseIf ($pos3 > 0)
		SetVar $pdropcitkill TRUE
		SetVar $pdropcitkilld "[CITKILL]"
		SetVar $attackmode "KILL"
		Gosub :Z_Lib~CURRENTPLANET
	Else
		SetVar $pdropcitkill FALSE
		SetVar $pdropcitkilld ""
	End
	If ($pos4 > 0)
		SetVar $pdropalert TRUE
	End
	If ($pdropcitkill = TRUE)
		SetVar $nomessage TRUE
		SetVar $PARM1 "0"
		Gosub :INTCOM_REFILL
	End
	Gosub :Z_Lib~COMMSON
Else
	Goto :NOPDROP
End
SetVar $messagemode "R"
SetVar $ssmsg ($scripttitle & ": PDROP ON - " & $pdropcitkilld & " " & $pdropreturnd & "*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Gosub :Z_Lib~SYNC
SetVar $pdropison TRUE
:PDROPWAIT
Echo "**" & $boldwhite & $scripttitle & " - [" & $blinkon & $boldgreen & "PDROP ON" & $blinkoff & $boldwhite & "] " & $boldyellow & $pdropcitkilld & " " & $pdropreturnd
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel PDROP : " & $black
:PDROPWAIT2
SetVar $messagemode "R"
Gosub :PLOCKTRIGGERKILLS
Gosub :SETPULSETRIGGER
SetTextLineTrigger pdropstatus :PDROPSTATUS $z_botname & " status"
SetTextLineTrigger pdropreset :PDROPRESET $z_botname & " reset"
SetTextLineTrigger pdropmode :PDROPMODE $z_botname & " mode"
SetTextLineTrigger pdropmode2 :PDROPMODE $z_team & " mode"
SetTextLineTrigger pdropfighit :PDROPFIGHIT "Deployed Fighters"
SetTextLineTrigger pdropminehit1 :PDROPMINEHIT "Limpet mine in"
SetTextOutTrigger pdropstop :PDROPSTOP "~"
SetTextOutTrigger pdropstop3 :PDROPSTOP #8
SetTextLineTrigger pdropstop2 :PDROPSTOP ($z_botname & " pdrop off")
SetTextTrigger leftprmpt1 :LEFTPROMPT "Planet command (?=help)"
SetTextTrigger leftprmpt2 :LEFTPROMPT "Computer command [TL="
SetTextTrigger leftprmpt3 :LEFTPROMPT "Transfer To or From the Treasury (T/F)"
SetTextTrigger leftprmpt4 :LEFTPROMPT "What sector do you want to warp this planet to?"
SetTextTrigger leftprmpt5 :LEFTPROMPT "Qcannon Control Type :"
SetTextTrigger leftprmpt6 :LEFTPROMPT "What level do you want (0-100) ?"
SetTextTrigger leftprmpt7 :LEFTPROMPT "Corporate command [TL="
SetTextTrigger leftprmpt8 :LEFTPROMPT "[Pause]"
SetTextTrigger leftprmpt9 :LEFTPROMPT "Are you sure you want to force the other ships to blast off?"
SetTextTrigger leftprmpt10 :LEFTPROMPT "Transfer To or From the Planetary Shield System (T/F) [T]?"
SetTextTrigger leftprmpt11 :LEFTPROMPT "Beam to what sector? (U=Upgrade Q=Quit)"
SetTextTrigger leftprmpt12 :LEFTPROMPT "Do you want to change this setting? (Y/N)"
SetTextTrigger leftprmpt13 :LEFTPROMPT "Exchange ships:"
Pause
:PLOCKTRIGGERKILLS
KillTrigger pulse
KillTrigger t47
KillTrigger t48
KillTrigger t49
KillTrigger t49a
KillTrigger t49b
KillTrigger pdropfighit
KillTrigger pdropminehit1
#KillTrigger pdropminehit2
KillTrigger pdropstop
KillTrigger pdropstop2
KillTrigger pdropstop3
KillTrigger pdropstatus
KillTrigger pdropreset
KillTrigger leftprmpt1
KillTrigger leftprmpt2
KillTrigger leftprmpt3
KillTrigger leftprmpt4
KillTrigger leftprmpt5
KillTrigger leftprmpt6
KillTrigger leftprmpt7
KillTrigger leftprmpt8
KillTrigger leftprmpt9
KillTrigger leftprmpt10
KillTrigger leftprmpt11
KillTrigger leftprmpt12
KillTrigger leftprmpt13
KillTrigger pdropmode
KillTrigger pdropmode2
Return
:PDROPMODE
Gosub :PLOCKTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :PDROPWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :PDROPWAIT
End
Gosub :INTCOM_MODE
Goto :PDROPWAIT
:PDROPSTATUS
Gosub :PLOCKTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :PDROPWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :PDROPWAIT
End
Gosub :INTCOM_STATUS
Goto :PDROPWAIT
:PDROPRESET
Gosub :PLOCKTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :PDROPWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :PDROPWAIT
End
Gosub :INTCOM_RESET
Goto :NOPDROP
:LEFTPROMPT
Gosub :PLOCKTRIGGERKILLS
SetTextTrigger atprompt :PDROPPAUSEMODE "Citadel command (?=help)"
SetTextOutTrigger pdropstop :PDROPSTOP "~"
SetTextOutTrigger pdropstop3 :PDROPSTOP #8
SetTextLineTrigger pdropstop2 :PDROPSTOP2 ($z_botname & " pdrop off")
:DISPLAYPDROPPAUSED
KillTrigger pdroppaused
Echo "**" & $boldyellow & $scripttitle & " - PDROP is in " & $blinkon & $boldmagenta & "PAUSE MODE" & $blinkoff & $boldyellow &". Return to the Citadel to UNPAUSE."
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel PDROP : "
#Send "*"
#Send #145
#WaitFor #145 & #8
SetTextTrigger pdroppaused :DISPLAYPDROPPAUSED "elp"
Pause
:PDROPPAUSEMODE
Killtrigger atprompt
KillTrigger pdropstop
KillTrigger pdropstop2
KillTrigger pdroppaused
KillTrigger pdropfighit
Goto :PDROPWAIT
:PDROPSTOP
KillTrigger pdroppaused
Gosub :PLOCKTRIGGERKILLS
SetVar $Z_Lib~message $scripttitle & ": PDROP - Standing down...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": PDROP - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOPDROP
:PDROPSTOP2
KillTrigger pdroppaused
Gosub :PLOCKTRIGGERKILLS
GetWord CURRENTLINE $ck 1
GetWord CURRENTLINE $sender 2
GetLength $sender $len
If ($len > 6)
	CutText $sender $sender 1 6
End
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "P")
	Goto :PDROPWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :PDROPWAIT
End
SetVar $Z_Lib~message $scripttitle & ": PDROP - Standing down...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": PDROP - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOPDROP
:PDROPMINEHIT
KillTrigger pdropreturndelay
Gosub :PLOCKTRIGGERKILLS
GetWord CURRENTLINE $pdropsector 4
Goto :PDROPIN
:PDROPFIGHIT
KillTrigger pdropreturndelay
Gosub :PLOCKTRIGGERKILLS
GetWord CURRENTLINE $pdropsector 5
SetVar $ansiline CURRENTANSILINE
GetWord $ansiline $ansiword 6
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :PDROPWAIT
End
:PDROPIN
StripText $pdropsector ":"
SetVar $pdropfuelcost 0
Gosub :GETSTATS
If ($pdropsector = $current_sector) and ($pdropcitkill = TRUE)
	Gosub :SHIPCAP
	If ($pdropalert = TRUE)
		Sound pdropalert
	End
	Goto :PDROPWAIT
End
:PDROPADJACENT
KillTrigger pulse
KillTrigger pdropfighit
KillTrigger alreadythere
SetTextTrigger gethops :GETHOPS "hops away from here."
SetTextTrigger plock :PLOCK "All Systems Ready, shall we engage?"
SetTextTrigger noplock :NOPLOCK "Blind Jump"
SetTextTrigger alreadythere :GOTTHERE "You are already in that sector!"
SetTextOutTrigger pdropstop :PDROPSTOP "~"
SetTextOutTrigger pdropstop3 :PDROPSTOP #8
SetTextLineTrigger pdropstop2 :PDROPSTOP $z_botname & "pdrop off"
Send "p" & $pdropsector & "*"
Pause
:GETHOPS
GetText CURRENTLINE $pdrophops "is " " hops"
SetVar $pdropfuelcost ($pdrophops * 400)
If (($pdropfuelcost * 3) > $pdropfuel)
	Echo "**" & $boldred " Not enough fuel.. aborting.**"
	Goto :PDROPWAIT
End
Pause
:PLOCK
KillTrigger gethops
KillTrigger plock
KillTrigger noplock
Gosub :PLOCKTRIGGERKILLS
SetTextTrigger gotthere :GOTTHERE "Planet is now in sector"
Send "y"
Pause
:GOTTHERE
KillTrigger gotthere
KillTrigger gethops
KillTrigger plock
KillTrigger noplock
Gosub :PLOCKTRIGGERKILLS
SetVar $pdropfuel ($pdropfuel - $pdropfuelcost)
If ($pdropcitkill = TRUE)
	Gosub :GETSTATS
	Gosub :SHIPCAP
End
If ($pdropalert = TRUE)
	Sound pdropalert
End
Send #145
WaitOn #145 & #8
If ($pdropreturn = TRUE)
	KillTrigger pdropreturndelay
	SetDelayTrigger pdropreturndelay :PDROPRETURNDELAY ($pdropreturndelay * 1000)
	SetTextLineTrigger pdropfighit :PDROPFIGHIT "Deployed Fighters"
	Pause
:PDROPRETURNDELAY
	KillTrigger pdropreturndelay
	Send "p" & $pdropreturnsector & "*y*"
	KillTrigger pdropfighit
	Goto :PDROPWAIT
End
Goto :PDROPWAIT
:NOPLOCK
KillTrigger gethops
KillTrigger plock
KillTrigger noplock
Gosub :PLOCKTRIGGERKILLS
SetTextLineTrigger pdropfighit :PDROPFIGHIT "Deployed Fighters"
SetVar $i 1
SetVar $foundone FALSE
SetVar $pdropmaxwarps 0
SetVar $pdropwarps SECTOR.WARPCOUNT[$pdropsector]
While ($i <= $pdropwarps)
	SetVar $pdropadj SECTOR.WARPS[$pdropsector][$i]
	IsNumber $isnum $pdropadj
	If ($isnum = TRUE) 
		If ($pdropadj > 10) and ($pdropadj <= SECTORS)
			GetSectorParameter $pdropadj "FIGSEC" $pdropfigged
			If ($pdropfigged = TRUE)
				SetVar $foundone TRUE
				If (SECTOR.WARPCOUNT[$pdropadj] > $pdropmaxwarps)
					SetVar $pdropmaxwarps SECTOR.WARPCOUNT[$pdropadj]
					SetVar $pdropsector $pdropadj
				End
			End
		End
	End
	SetVar $i ($i + 1)
End
If ($foundone = TRUE)
	Goto :PDROPADJACENT
End
KillTrigger pdropfighit
Goto :PDROPWAIT
:NOPDROP
KillAllTriggers
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $pdropison FALSE
Return
# CITKILL 
:INTCOM_CITKILL
SetVar $attackmode "KILL"
Gosub :CITATTACK
KillAllTriggers
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $citkillison FALSE
Return
# EVAC 
:INTCOM_EVAC
KillAllTriggers
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOEVAC
End
If ($PARM1 <> "on")
	Goto :NOEVAC
End
SetVar $evacison TRUE
Gosub :GETEVACPOINT
Gosub :Z_Lib~COMMSON
If ($evacpoint = 0)
	Goto :NOEVAC
End
Gosub :Z_Lib~CURRENTPLANET
SetVar $messagemode "R"
SetVar $ssmsg ($scripttitle & ": EVAC ON - Emergency Planet Evacuation Contingency.*PLANET: " & $Z_Lib~planetnum & " - Ready.*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Gosub :Z_Lib~SYNC
:EVACWAIT
Echo "**" & $boldwhite & $scripttitle & " - [" & $blinkon & $boldgreen & "EVAC ON" & $blinkoff & $boldwhite & "]"
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel EVAC : " & $black
:EVACWAIT2
SetVar $messagemode "R"
Gosub :EVACTRIGGERKILLS
Gosub :SETPULSETRIGGER
SetTextLineTrigger evacfighit :EVACFIGHIT "Deployed Fighters Report Sector"
SetTextOutTrigger evacstop :EVACSTOP "~"
SetTextOutTrigger evacstop3 :EVACSTOP #8
SetTextLineTrigger evacstop2 :EVACSTOP ($z_botname & " evac off")
SetTextLineTrigger evacstatus :EVACSTATUS $z_botname & " status"
SetTextLineTrigger evacmode :EVACMODE $z_botname & " mode"
SetTextLineTrigger evacmode2 :EVACMODE $z_team & " mode"
SetTextLineTrigger evacreset :EVACRESET $z_botname & " reset"
SetTextTrigger eleftprmpt1 :ELEFTPROMPT "Planet command (?=help)"
SetTextTrigger eleftprmpt2 :ELEFTPROMPT "Computer command [TL="
SetTextTrigger eleftprmpt3 :ELEFTPROMPT "Transfer To or From the Treasury (T/F)"
SetTextTrigger eleftprmpt4 :ELEFTPROMPT "What sector do you want to warp this planet to?"
SetTextTrigger eleftprmpt5 :ELEFTPROMPT "Qcannon Control Type :"
SetTextTrigger eleftprmpt6 :ELEFTPROMPT "What level do you want (0-100) ?"
SetTextTrigger eleftprmpt7 :ELEFTPROMPT "Corporate command [TL="
SetTextTrigger eleftprmpt8 :ELEFTPROMPT "[Pause]"
SetTextTrigger eleftprmpt9 :ELEFTPROMPT "Are you sure you want to force the other ships to blast off?"
SetTextTrigger eleftprmpt10 :ELEFTPROMPT "Transfer To or From the Planetary Shield System (T/F) [T]?"
SetTextTrigger eleftprmpt11 :ELEFTPROMPT "Beam to what sector? (U=Upgrade Q=Quit)"
SetTextTrigger eleftprmpt12 :ELEFTPROMPT "Do you want to change this setting? (Y/N)"
SetTextTrigger eleftprmpt13 :ELEFTPROMPT "Exchange ships:"
Pause
:EVACTRIGGERKILLS
KillTrigger pulse
KillTrigger evacfighit
KillTrigger evacstop
KillTrigger evacstop2
KillTrigger evacstop3
KillTrigger evacstatus
KillTrigger evacreset
KillTrigger eleftprmpt1
KillTrigger eleftprmpt2
KillTrigger eleftprmpt3
KillTrigger eleftprmpt4
KillTrigger eleftprmpt5
KillTrigger eleftprmpt6
KillTrigger eleftprmpt7
KillTrigger eleftprmpt8
KillTrigger eleftprmpt9
KillTrigger eleftprmpt10
KillTrigger eleftprmpt11
KillTrigger eleftprmpt12
KillTrigger eleftprmpt13
KillTrigger evacmode
KillTrigger evacmode2
Return
:EVACMODE
Gosub :EVACTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :EVACWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :EVACWAIT
End
Gosub :INTCOM_MODE
Goto :EVACWAIT
:EVACSTATUS
Gosub :EVACTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :EVACWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :EVACWAIT
End
Gosub :INTCOM_STATUS
Goto :EVACWAIT
:EVACRESET
Gosub :EVACTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :EVACWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :EVACWAIT
End
Gosub :INTCOM_RESET
Goto :NOEVAC
:ELEFTPROMPT
Gosub :EVACTRIGGERKILLS
SetTextTrigger atprompt :EVACPAUSEMODE "Citadel command (?=help)"
SetTextOutTrigger evacstop :EVACSTOP "~"
SetTextOutTrigger evacstop3 :EVACSTOP #8
SetTextLineTrigger evacstop2 :EVACSTOP2 ($z_botname & " evac off")
:DISPLAYEVACPAUSED
KillTrigger evacpaused
Echo "**" & $boldyellow & $scripttitle & " - EVAC is in " & $blinkon & $boldmagenta & "PAUSE MODE" & $blinkoff & $boldyellow &". Return to the Citadel to UNPAUSE."
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel EVAC : "
#Send "*"
#Send #145
#WaitFor #145 & #8
SetTextTrigger evacpaused :DISPLAYEVACPAUSED "elp"
Pause
:EVACPAUSEMODE
Killtrigger atprompt
KillTrigger evacstop
KillTrigger evacstop2
KillTrigger evacstop3
KillTrigger evacpaused
KillTrigger evacfighit
Goto :EVACWAIT
:EVACSTOP
KillTrigger evacpaused
Gosub :EVACTRIGGERKILLS
SetVar $Z_Lib~message $scripttitle & ": EVAC - Standing down on Planet " & $Z_Lib~planetnum & "...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": EVAC - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOEVAC
:EVACSTOP2
KillTrigger evacpaused
Gosub :EVACTRIGGERKILLS
GetWord CURRENTLINE $ck 1
GetWord CURRENTLINE $sender 2
GetLength $sender $len
If ($len > 6)
	CutText $sender $sender 1 6
End
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "P")
	Goto :EVACWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :EVACWAIT
End
SetVar $Z_Lib~message $scripttitle & ": EVAC - Standing down on Planet " & $Z_Lib~planetnum & "...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": EVAC - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOEVAC
:EVACFIGHIT
KillTrigger evacpaused
Gosub :EVACTRIGGERKILLS
GetWord CURRENTLINE $evachitsector 5
SetVar $ansiline CURRENTANSILINE
StripText $evachitsector ":"
If ($evachitsector = $evacpoint)
	Gosub :GETEVACPOINT
	Goto :EVACWAIT
End
GetWord $ansiline $ansiword 6
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :EVACWAIT
End
SetVar $evacuate FALSE
If ($evachitsector = $current_sector)
	SetVar $evacuate TRUE
else
	SetVar $i 1
	SetVar $warps SECTOR.WARPINCOUNT[$current_sector]
	While ($i <= $warps)
		If ($evachitsector = SECTOR.WARPSIN[$current_sector][$i])
			SetVar $evacuate TRUE
			SetVar $i $warps
		End
		SetVar $i ($i + 1)
	End
End
If ($evacuate = TRUE)
	Echo "**" & $blinkon & $boldred & $scripttitle & ": EVAC - EVACUATING " & $boldyellow & $current_sector & $boldred " to " & $boldyellow & $evacpoint & $boldred & " !!!**" & $blinkoff
	Send "p" & $evacpoint & "*y"
	SetVar $Z_Logs~logentry $scripttitle & ": EVAC - Activated ! Planet moved to: " & $evacpoint
	Gosub :Z_Logs~ENTERLOG
	Gosub :GETEVACPOINT
End
Goto :EVACWAIT
:GETEVACPOINT
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
SetTextLineTrigger evacgetfuel :EVACGETFUEL "Fuel Ore"
Send "q*c"
Pause
:EVACGETFUEL
GetWord CURRENTLINE $evacfuel 6
StripText $evacfuel ","
If ($evacfuel < 1600)
	Echo "**" & $blinkon & $boldred & $scripttitle & ": EVAC - NOT ENOUGH FUEL ON PLANET !!!**" & $blinkoff
	SetVar $Z_Lib~message $scripttitle & ": EVAC - NOT ENOUGH FUEL ON PLANET !!!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOEVACPOINTFOUND
Else
	SetVar $evacmaxhops ($evacfuel / 400)
End
GetNearestWarps $nearwarps $current_sector
SetVar $i 1
SetVar $foundone FALSE
SetVar $evacpoint 0
While ($i <= $nearwarps)
	GetDistance $distance $current_sector $nearwarps[$i]
	If ($distance >= 4) and ($distance <= $evacmaxhops)
		SetVar $candidate $nearwarps[$i]
		GetSectorParameter $candidate "FIGSEC" $isfigged
		If ($isfigged = TRUE)
			If ($foundone = FALSE)
				SetVar $foundone TRUE
				SetVar $evaclastresort $candidate
			End
			SetVar $warps SECTOR.WARPINCOUNT[$candidate]
			SetVar $k 1
			While ($k <= $warps)
				SetVar $adj SECTOR.WARPSIN[$candidate][$k]
				GetSectorParameter $adj "FIGSEC" $isfigged
				If ($isfigged = FALSE)
					SetVar $k $warps
				End
				SetVar $k ($k + 1)
			End
			If ($isfigged = TRUE)
				SetVar $evacpoint $candidate
				SetVar $i $nearwarps
			End
		End
	End
	SetVar $i ($i + 1)
End
If ($evacpoint = 0)
	If ($foundone = FALSE)
		Echo "**" & $blinkon & $boldred & $scripttitle & ": EVAC - NO EVACUATION SECTOR FOUND !!!**" & $blinkoff
		SetVar $Z_Lib~message $scripttitle & ": EVAC - NO EVACUATION SECTOR FOUND !!!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOEVACPOINTFOUND
	Else
		SetVar $evacpoint $evaclastresort
	End
End
:NOEVACPOINTFOUND
Return
:NOEVAC
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $evacison FALSE
Return
# QSET 
:INTCOM_QSET
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOQSET
End
If ($PARM1 = "0") or ($PARM1 = "")
	Goto :NOQSET
End
UpperCase $PARM1
UpperCase $PARM2
SetTextLineTrigger qsetfuel :QSETFUEL "Fuel Ore"
Send "q*c"
Pause
:QSETFUEL
GetWord CURRENTLINE $qsetfuel 6
StripText $qsetfuel ","
If ($qsetfuel > 1)
	If ($PARM2 = 0) or ($PARM2 = "")
		SetVar $PARM2 $PARM1
	End
	If ($PARM2 = "OFF")
		SetVar $PARM2 0
		SetVar $qsetsector 0
	Else
		SetVar $Z_Lib~number $PARM2
		Gosub :Z_Lib~TKM
		SetVar $PARM2 $Z_Lib~number
		IsNumber $isnum $PARM2
		If ($isnum = TRUE)
			If ($PARM2 > 0)
				SetPrecision 4
				SetVar $qsetsector ((($PARM2 * 3)/ $qsetfuel) * 100)
				Round $qsetsector 0
				SetPrecision 0
				If ($qsetsector > 100)
					SetVar $qsetsector 100
				ElseIf ($qsetsector < 1)
					SetVar $qsetsector 1
				End
			End
		End
	End
	If ($PARM1 = "OFF")
		SetVar $qsetatmos 0
	Else
		SetVar $Z_Lib~number $PARM1
		Gosub :Z_Lib~TKM
		SetVar $PARM1 $Z_Lib~number
		IsNumber $isnum $PARM1
		If ($isnum = TRUE)
			If ($PARM1 > 0)
				SetVar $qsetfuel ($qsetfuel - ($PARM2 * 3))
				If ($qsetfuel > 0)
					SetPrecision 4
					If ($mbbs = "TRUE") or ($mbbs = TRUE)
						SetVar $qsetatmos ((($PARM1 / 2) / $qsetfuel) * 100)
					Else
						SetVar $qsetatmos ((($PARM1 * 2) / $qsetfuel) * 100)
					End
					Round $qsetatmos 0
					SetPrecision 0
				Else
					SetVar $qsetatmos 100
				End
				If ($qsetatmos > 100)
					SetVar $qsetatmos 100
				ElseIf ($qsetatmos < 1)
					SetVar $qsetatmos 1
				End
			End
		End
	End
Else
	SetVar $qsetsector 100
	SetVar $qsetatmos 100
End
Send "la" & $qsetatmos & "*"
Send "ls" & $qsetsector & "*"
Echo "**" & $boldwhite & $scripttitle & " - QSET Settings - Atmos: " & $boldcyan & $qsetatmos & "% " & $boldwhite & "Sector: " & $boldcyan & $qsetsector & "%**"
SetVar $Z_Lib~message $scripttitle & " - QSET Settings - Atmos: " & $qsetatmos & "% Sector: " & $qsetsector & "%*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
WaitFor "(?=help)"
Echo "**" & $boldwhite & $scripttitle & " - QSET Settings - Atmos: " & $boldcyan & $qsetatmos & "% " & $boldwhite & "Sector: " & $boldcyan & $qsetsector & "%**"
:NOQSET
Return
# PE 
:INTCOM_PE
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
If ($isnum = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	Goto :NOPE
End
Gosub :GETSTATS
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*"
Else
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*  "
End
Goto :NOPE
Return
# PEL 
:INTCOM_PEL
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM2 = "0") or ($PARM2 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
IsNumber $isnum2 $PARM2
If ($isnum = FALSE) or ($isnum2 = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM1 > SECTORS) or ($PARM2 < 1)
	Goto :NOPE
End
Gosub :GETSTATS
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*lj" & #8 & $PARM2 & "*"
Else
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*  lj" & #8 & $PARM2 & "*"
End
Goto :NOPE
Return
# PELK 
:INTCOM_PELK
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM2 = "0") or ($PARM2 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
IsNumber $isnum2 $PARM2
If ($isnum = FALSE) or ($isnum2 = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM1 > SECTORS) or ($PARM2 < 1)
	Goto :NOPE
End
Gosub :GETSTATS
Gosub :GETSHIPDATA
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($figs < $z_wave)
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*lj" & #8 & $PARM2 & "* a z " & $z_wave & "*"
Else
	Send "c p y " & $PARM1 & "* q m " & $PARM1 & "*  lj" & #8 & $PARM2 & "* a z " & $z_wave & "*"
End
Goto :NOPE
Return
# PXE 
:INTCOM_PXE
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM2 = "0") or ($PARM2 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
If ($isnum = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM2 < 1) or ($PARM2 > SECTORS)
	Goto :NOPE
End
Gosub :GETSTATS
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*" 
Else
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*  " 
End
Goto :NOPE
Return
# PXEL 
:INTCOM_PXEL
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM2 = "0") or ($PARM2 = "") or ($PARM3 = "0") or ($PARM3 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
If ($isnum = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM2 < 1) or ($PARM2 > SECTORS) or ($PARM3 < 1)
	Goto :NOPE
End
Gosub :GETSTATS
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*lj" & #8 & $PARM3 & "*" 
Else
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*  lj" & #8 & $PARM3 & "*" 
End
Goto :NOPE
Return
# PXELK 
:INTCOM_PXELK
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPE
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM2 = "0") or ($PARM2 = "") or ($PARM3 = "0") or ($PARM3 = "")
	Goto :NOPE
End
IsNumber $isnum $PARM1
If ($isnum = FALSE)
	Goto :NOPE
End
If ($PARM1 < 1) or ($PARM2 < 1) or ($PARM2 > SECTORS) or ($PARM3 < 1)
	Goto :NOPE
End
Gosub :GETSTATS
Gosub :GETSHIPDATA
If ($photons < 1)
	Echo "**" & $blinkon & $boldred & "NO PHOTONS AVAILABLE!**" & $blinkoff
	Goto :NOPE
End
If ($figs < $z_wave)
	Goto :NOPE
End
If ($damage = TRUE)
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*lj" & #8 & $PARM3 & "* a z " & $z_wave & "*" 
Else
	Send "c p y " & $PARM2 & "* q x  " & $PARM1 & "* q m" & $PARM2 & "*  lj" & #8 & $PARM3 & "* a z " & $z_wave & "*" 
End
Goto :NOPE
Return
# CHANGESS 
:INTCOM_CHANGESS
If ($PARM1 = "0") or ($PARM1 = "")
	If ($z_autoss = TRUE)
		SetVar $lasthours "-1"
		Gosub :XAUTOSS
	End
	Goto :NOCHANGESS
End
IsNumber $isnum $PARM1
If ($isnum = FALSE)
	Goto :NOCHANGESS
End
If ($PARM1 > 60000)
	Goto :NOCHANGESS
End
SetVar $newchannel $PARM1
SetVar $sschanged FALSE
Echo "**" ANSI_15 & "Attempting to change the subspace channel. Standby...**"
SetDelayTrigger csswait :CSSWAIT 300
Pause
Send "*"
:CSSWAIT
Gosub :Z_Lib~CHECKIFBUSY
If ($Z_Lib~busy = FALSE)
	SetVar $z_autoss FALSE
	SaveVar $z_autoss
	Send "cn"
	WaitFor "<Set ANSI and misc settings>"
	Send "4"
	SetTextTrigger sschk :CSSCHK "Ok, you will send and receive sub-space messages on channel"
	SetDelayTrigger badss :CBADSS 3000
	Send $newchannel & "*qq"
	Pause
:CSSCHK
	KillTrigger badss
	KillTrigger sschk
	SetVar $line CURRENTLINE
	GetText $line $ssch "channel " " now."
	WaitFor "(?="
	If ($ssch = $newchannel)
		SetVar $sschanged TRUE
		Echo "**" & ANSI_10 & "New subspace channel successfully set to [" & ANSI_15 & $newchannel & ANSI_10 & "].**"
		SetVar $Z_Lib~message "I have ARRIVED ! AutoSS is now OFF.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		SetVar $Z_Logs~logentry $scripttitle & ": ChangeSS - Subspace channel set to: " & $newchannel & "."
		Gosub :Z_Logs~ENTERLOG
		Send "*"
		SetVar $Z_Lib~subspacechannel $newchannel
		Goto :NOCHANGESS
	End
:CBADSS
	KillTrigger badss
	KillTrigger sschk
	Send #145
	WaitFor #145 & #8
	Goto :NOCHANGESS
End
If ($sschanged = FALSE)
	Echo "**" & ANSI_12 & "FAILED to change SS channel - Must be at the Command or Citadel prompt.*"
End
:NOCHANGESS
Return
# CLASS0 
:INTCOM_CLASS0
SetVar $ssmsg $dashedline & $scripttitle & " - CLASS 0 PORT LOCATIONS AND BACKDOORS*" & $dashedline
SetVar $j 1
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $j
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $jd $Z_Strings~padded
SetVar $k SECTOR.BACKDOORCOUNT[$j]
If ($k > 0)
	SetVar $ssmsg ($ssmsg & "Terra: " & $jd & "  <-- ")
	SetVar $i 1
	While ($i <= $k)
		SetVar $Z_Strings~padchar "-"
		SetVar $Z_Strings~padlen 5
		SetVar $Z_Strings~unpadded SECTOR.BACKDOORS[$j][$i]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " ")
		SetVar $i ($i + 1)
	End
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $j STARDOCK
If ($j > 0) and ($j <= SECTORS)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $j
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $jd $Z_Strings~padded
	SetVar $k SECTOR.BACKDOORCOUNT[$j]
	SetVar $ssmsg ($ssmsg & "Dock : " & $jd & "  <-- ")
	If ($k > 0)
		SetVar $i 1
		While ($i <= $k)
			SetVar $Z_Strings~padchar "-"
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded SECTOR.BACKDOORS[$j][$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " ")
			SetVar $i ($i + 1)
		End
	End
	SetVar $ssmsg ($ssmsg & "*")
Else
	SetVar $ssmsg ($ssmsg & "Dock : -----*")
End
SetVar $j ALPHACENTAURI
If ($j > 0) and ($j <= SECTORS)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $j
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $jd $Z_Strings~padded
	SetVar $k SECTOR.BACKDOORCOUNT[$j]
	SetVar $ssmsg ($ssmsg & "Alpha: " & $jd & "  <-- ")
	If ($k > 0)
		
		SetVar $i 1
		While ($i <= $k)
			SetVar $Z_Strings~padchar "-"
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded SECTOR.BACKDOORS[$j][$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " ")
			SetVar $i ($i + 1)
		End
	End
	SetVar $ssmsg ($ssmsg & "*")
Else
	SetVar $ssmsg ($ssmsg & "Alpha: -----*")
End
SetVar $j RYLOS
If ($j > 0) and ($j <= SECTORS)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $j
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $jd $Z_Strings~padded
	SetVar $k SECTOR.BACKDOORCOUNT[$j]
	SetVar $ssmsg ($ssmsg & "Rylos: " & $jd & "  <-- ")
	If ($k > 0)
		SetVar $i 1
		While ($i <= $k)
			SetVar $Z_Strings~padchar "-"
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded SECTOR.BACKDOORS[$j][$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " ")
			SetVar $i ($i + 1)
		End
	End
	SetVar $ssmsg ($ssmsg & "*")
Else
	SetVar $ssmsg ($ssmsg & "Rylos: -----*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# TOW 
:INTCOM_TOW
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOTOW
End
SetVar $towany FALSE
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $towany TRUE
Else
	IsNumber $isnum $PARM1
	If ($isnum <> TRUE)
		SetVar $towany TRUE
	End
End
:TOWANY
SetVar $towdone FALSE
SetTextLineTrigger tow1 :TOW1 "--<  Available Ships in Sector >--"
SetTextLineTrigger tow4 :TOW4 "You shut off your Tractor Beam."
Send "w*"
Pause
:TOW4
KillTrigger tow1
KillTrigger tow4
SetVar $Z_Lib~message "Tractor beam disengaged!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTOW
:TOW1
KillTrigger tow1
KillTrigger tow4
SetTextLineTrigger tow2 :TOW2 "----------------------------------"
Pause
:TOW2
SetTextLineTrigger tow3 :TOW3
Pause
:TOW3
GetWord CURRENTLINE $word 1
If ($word = "0") or ($word = "")
	Send "q*"
	SetVar $Z_Lib~message "Ship NOT FOUND!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $towdone TRUE
	Goto :NOTOW
ElseIf ($word = "Choose")
	Send "q*"
	SetVar $Z_Lib~message "Ship NOT FOUND!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $towdone TRUE
	Goto :NOTOW
ElseIf ($word = "You")
	SetVar $Z_Lib~message "No Ships to tow in Sector!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $towdone TRUE
	Goto :NOTOW
Else
	If ($towany = TRUE)
		Send $word & "*"
	ElseIf ($word = $PARM1)
		Send $word & "*"
	Else
		Goto :TOW2
	End
End
SetVar $Z_Lib~message "Hooked tow onto ship #" & $word & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOTOW
SetVar $Z_Lib~heraldss FALSE
Return
# VER 
:INTCOM_VER
SetVar $Z_Lib~message $scripttitle & " v" & $version & "*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
PROCESSIN 1 "[Z]VERSION[Z]"
Return
# TOPOFF 
:INTCOM_TOPOFF
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOTOPOFF
End
SetVar $figtype $z_figtype
SetTextTrigger getfigtype1 :TGETFIGTYPE1 "[Defensive]"
SetTextTrigger getfigtype2 :TGETFIGTYPE2 "[Offensive]"
SetTextTrigger getfigtype3 :TGETFIGTYPE3 "[Toll]"
SetTextTrigger getfigtype4 :TGETFIGTYPE4 "Warps to Sector(s)"
Send "*"
Pause
:TGETFIGTYPE1
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "d"
Goto :TGOTFIGTYPE
:TGETFIGTYPE2
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "o"
Goto :TGOTFIGTYPE
:TGETFIGTYPE3
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "t"
Goto :TGOTFIGTYPE
:TGETFIGTYPE4
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
Goto :TGOTFIGTYPE
:TGOTFIGTYPE
SetTextLineTrigger toff1 :TOFF1 "These fighters are not under your control."
SetTextLineTrigger toff2 :TOFF2 "Fighters, leaving"
Send "f"
Pause
:TOFF1
KillTrigger toff1
KillTrigger toff2
SetVar $Z_Lib~message $scripttitle & ": Fighters are not ours...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTOPOFF
:TOFF2
KillTrigger toff1
KillTrigger toff2
GetWord CURRENTLINE $word 10
StripText $word ","
If ($word < 1)
	SetVar $word 1
End
Send $word & "*z" & $z_figowner & $figtype & "*"
SetVar $Z_Lib~message $scripttitle & ": Topoff complete.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOTOPOFF
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# IG 
:INTCOM_IG
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :ENDIG
End
UpperCase $PARM1
If ($PARM1 <> "ON") and ($PARM1 <> "OFF")
	Goto :ENDIG
End
SetTextTrigger ig :IG "Your Interdictor generator is now"
SetTextTrigger ig2 :ENDIG "is not equipped with an Interdictor Generator!"
Send "b"
Pause
:IG
KillTrigger ig
KillTrigger ig2
GetWord CURRENTLINE $word 6
If ($word <> $PARM1)
	Send "y"
	SetVar $Z_Lib~message $scripttitle & ": IG is now set to " & $PARM1 & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	Send "n"
	SetVar $Z_Lib~message $scripttitle & ": IG is already " & $PARM1 & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:ENDIG
KillTrigger ig
KillTrigger ig2
SetVar $Z_Lib~heraldss FALSE
Return
# DC 
:INTCOM_DC
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODC
End
SetVar $Z_Lib~number $PARM1
Gosub :Z_Lib~TKM
SetVar $PARM1 $Z_Lib~number
Gosub :GETSTATS
IsNumber $isnum $PARM1
If ($isnum = TRUE)
	If ($PARM1 = 0)
		SetVar $amt ($credits - 100001)
	Else
		SetVar $amt ($credits - $PARM1)
	End
	If ($amt > 0)
		Send "tt" & $amt & "*"
		SetVar $Z_Strings~number $amt
		Gosub :Z_Strings~COMMA
		SetVar $Z_Lib~message "I deposited " & $Z_Strings~commas & " credits into the Citadel.*"
		SetVar $Z_Lib~messageto $sender
		If ($messagemode = "E")
			SetVar $Z_Lib~messagemode "S"
		Else
			SetVar $Z_Lib~messagemode $messagemode
		End
		Gosub :MSGBRIDGE
	End
End
:NODC
SetVar $Z_Lib~heraldss FALSE
Return
# WC 
:INTCOM_WC
KillAllTriggers
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOWC
End
SetVar $Z_Lib~number $PARM1
Gosub :Z_Lib~TKM
SetVar $PARM1 $Z_Lib~number
IsNumber $isnum $PARM1
If ($isnum = TRUE)
	Gosub :GETSTATS
	 If ($PARM1 = 0)
		SetVar $PARM1 999999999
	 End
	If (($credits + $PARM1) > 999999999)
		SetVar $PARM1 (999999999 - $credits)
	End
	SetTextTrigger wc1 :WC1 "and the Treasury has"
	Send "tf"
	Pause
	:WC1
	GetWord CURRENTLINE $treasury 9
	StripText $treasury ","
	If ($PARM1 > $treasury)
		SetVar $PARM1 $treasury
	End
	Send $PARM1 & "*"
	SetVar $Z_Strings~number $PARM1
	Gosub :Z_Strings~COMMA
	SetVar $Z_Lib~message "I withdrew " & $Z_Strings~commas & " credits from the Citadel.*"
	SetVar $Z_Lib~messageto $sender
	If ($messagemode = "E")
		SetVar $Z_Lib~messagemode "S"
	Else
		SetVar $Z_Lib~messagemode $messagemode
	End
	Gosub :MSGBRIDGE
End
:NOWC
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# PLIMP 
:INTCOM_PLIMP
	SetVar $one TRUE
# PLIMPS 
:INTCOM_PLIMPS
If ($messagemode = "E")
	SetVar $messagemode "R"
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $startprompt ""
	Goto :NOPLIMP
End
Gosub :GETSTATS
Send "*"
Send #145
WaitOn #145 & #8
If ($current_sector > 10) and ($current_sector <> STARDOCK)
	If ($limps > 0) or ((SECTOR.LIMPETS.QUANTITY[$current_sector] > 0) and ((SECTOR.LIMPETS.OWNER[$current_sector] = "yours") or (SECTOR.LIMPETS.OWNER[$current_sector] = "belong to your Corp")))
		SetVar $totallimps (SECTOR.LIMPETS.QUANTITY[$current_sector] + $limps)
		If ($one = TRUE)
			SetVar $one FALSE
			SetVar $droplimps 1
		Else
			If ($totallimps > 250)
				SetVar $droplimps 250
			Else
				SetVar $droplimps $totallimps
			End
		End
		SetTextTrigger notmylimps :NOTMYLIMPS "These mines are not under your control."
		SetTextTrigger donelimps :DONELIMPS "Done. You have"
		SetTextTrigger toomanylimps :TOOMANYLIMPS "Too many mines on your ship!  You are limited to 255"
		Send "h2z" & $droplimps & "*pz 0 * z 0 * z 0 * "
		Pause
:NOTMYLIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Limpets NOT under our control! Sector may be compromised!*"
		Goto :LIMPMSG
:TOOMANYLIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Did not drop personal limpet mine!*"
		Goto :LIMPMSG
:DONELIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Personal limpet mines dropped!*"
	Else
		SetVar $Z_Lib~message "I have no limpets!*"
	End
Else
	SetVar $Z_Lib~message "Cannot drop limpets in this sector!*"
End
:LIMPMSG
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOPLIMP
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
SetVar $Z_Lib~heraldss FALSE
Return
# CLIMP 
:INTCOM_CLIMP
SetVar $one TRUE
# CLIMPS 
:INTCOM_CLIMPS
If ($messagemode = "E")
	SetVar $messagemode "R"
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCLIMP
End
Gosub :GETSTATS
Send "*"
Send #145
WaitOn #145 & #8
If ($current_sector > 10) and ($current_sector <> STARDOCK)
	If ($limps > 0) or ((SECTOR.LIMPETS.QUANTITY[$current_sector] > 0) and ((SECTOR.LIMPETS.OWNER[$current_sector] = "yours") or (SECTOR.LIMPETS.OWNER[$current_sector] = "belong to your Corp")))
		SetVar $totallimps (SECTOR.LIMPETS.QUANTITY[$current_sector] + $limps)
		If ($one = TRUE)
			SetVar $droplimps 1
		Else
			If ($totallimps > 250)
				SetVar $droplimps 250
			Else
				SetVar $droplimps $totallimps
			End
		End
		SetTextTrigger notmylimps :NOTMYCLIMPS "These mines are not under your control."
		SetTextTrigger donelimps :DONECLIMPS "Done. You have"
		SetTextTrigger toomanylimps :TOOMANYCLIMPS "Too many mines on your ship!  You are limited to 255"
		Send "h2z" & $droplimps & "*cz 0 * z 0 * z 0 * "
		Pause
:NOTMYCLIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Limpets NOT under our control! Sector may be compromised!*"
		Goto :CLIMPMSG
:TOOMANYCLIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Did not drop corporate limpet mine!*"
		Goto :CLIMPMSG
:DONECLIMPS
		KillTrigger notmylimps
		KillTrigger donelimps
		KillTrigger toomanylimps
		SetVar $Z_Lib~message "Corporate limpet mines dropped!*"
	Else
		SetVar $Z_Lib~message "I have no limpets!*"
	End
Else
	SetVar $Z_Lib~message "Cannot drop limpets in this sector!*"
End
:CLIMPMSG
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCLIMP
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
SetVar $Z_Lib~heraldss FALSE
Return
# FIND 
:INTCOM_FIND
Gosub :GETSTATS
GetNearestWarps $nearwarps $current_sector
SetVar $i 1
SetVar $j 0
SetArray $fuelport 6
SetArray $porthops 6
While ($i <= $nearwarps)
	If (PORT.BUYFUEL[$nearwarps[$i]] = FALSE) and (PORT.CLASS[$nearwarps[$i]] <> 0) and (PORT.EXISTS[$nearwarps[$i]] = TRUE)
		If ($nearwarps[$i] <> STARDOCK) or ($sdsellfuel = TRUE)
			SetVar $j ($j + 1)
			SetVar $fuelport[$j] $nearwarps[$i]
			If ($nearwarps[$i] = $current_sector)
				SetVar $porthops[$j] 0
			Else
				GetDistance $porthops[$j] $current_sector $nearwarps[$i]
				If ($porthops[$j] = "-1")
					SetVar $porthops[$j] "Unknown"
				End
			End
			If ($j >= 6)
				SetVar $i $nearwarps
			End
		End
	End
	SetVar $i ($i + 1)
End
SetVar $ssmsg $dashedline & $scripttitle & " - FIND - 6 Nearest FUEL PORTS From Sector " & $current_sector & "*" & $dashedline
SetVar $j 1
While ($j <= 6)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $fuelport[$j]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & $porthops[$j] & " hops*")
	SetVar $j ($j + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetArray $nearwarps 0
SetArray $fuelport 0
SetArray $porthops 0
Return
# STOPALL 
:INTCOM_STOPALL
OpenMenu TWX_STOPALLFAST FALSE
SetVar $mode "GENERAL"
SetVar $Z_Lib~message $scripttitle & " - All non-system scripts stopped.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# CN9 
:INTCOM_CN9
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCN9
End
Gosub :Z_Lib~CN9CHECK
If ($Z_Lib~cn9 = TRUE)
	SetVar $Z_Lib~message "CN9 check complete - Now set to SPACE...*"
Else
	SetVar $Z_Lib~message "CN9 check complete - Appears to be set correctly...*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCN9
SetVar $Z_Lib~heraldss FALSE
Return
# DEPLOY 
:INTCOM_DEPLOY
KillAllTriggers
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODEPLOY
End
Gosub :Z_Lib~CURRENTPLANET
SetTextLineTrigger getpfigs :GETPFIGS "Fighters        N/A"
Send "*"
Pause
:GETPFIGS
GetWord CURRENTLINE $dplanetfigs 5
StripText $dplanetfigs ","
StripText $PARM1 " "
SetVar $Z_Lib~number $PARM1
Gosub :Z_Lib~TKM
SetVar $PARM1 $Z_Lib~number
If ($PARM1 = "0")
	SetVar $deployfigs $dplanetfigs
Else
	Isnumber $isnum $PARM1
	If ($isnum <> TRUE)
		Goto :NODEPLOY
	End
	If ($PARM1 > $dplanetfigs)
		SetVar $deployfigs $dplanetfigs
	Else
		SetVar $deployfigs $PARM1
	End
End
Send "m * * * "
Gosub :GETSTATS
If ($figs = 0)
	Goto :NODEPLOY
End
SetVar $trips ($deployfigs / $figs)
SetVar $lasttrip ($deployfigs - ($trips * $figs))
If ($lasttrip > 0)
	SetVar $trips ($trips + 1)
End
SetVar $figtype $z_figtype
SetTextTrigger getfigtype1 :GETFIGTYPE1 "[Defensive]"
SetTextTrigger getfigtype2 :GETFIGTYPE2 "[Offensive]"
SetTextTrigger getfigtype3 :GETFIGTYPE3 "[Toll]"
SetTextTrigger getfigtype4 :GETFIGTYPE4 "Warps to Sector(s)"
Send "q *"
Pause
:GETFIGTYPE1
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "d"
Goto :GOTFIGTYPE
:GETFIGTYPE2
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "o"
Goto :GOTFIGTYPE
:GETFIGTYPE3
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "t"
Goto :GOTFIGTYPE
:GETFIGTYPE4
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
Goto :GOTFIGTYPE
:GOTFIGTYPE
Gosub :Z_Lib~RETURNTOPLANET
SetVar $i 1
While ($i <= $trips)
	SetVar $nodeploy FALSE
	SetTextTrigger figsinsect :FIGSINSECT "fighters available."
	SetTextTrigger nofigsinsect :NOFIGSINSECT "These fighters are not under your control."
	Send "q f"
	Pause
:NOFIGSINSECT
	KillAllTriggers
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $Z_Lib~message $scripttitle & " - Fighters in sector are not ours!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
	SetVar $i $trips
	SetVar $nodeploy TRUE
	Goto :ENDDEPLOY
:FIGSINSECT
	KillAllTriggers
	GetText CURRENTLINE $figstoleave "have " " fighters"
	StripText $figstoleave ","
	Send $figstoleave & "*" & $z_figowner & $figtype
	Gosub :Z_Lib~RETURNTOPLANET
	Send "m * * * "
:ENDDEPLOY
	SetVar $i ($i + 1)
End
If ($nodeploy = TRUE)
	Goto :NODEPLOY
End
Gosub :INTCOM_TOPOFF
Send #145
WaitOn #145 & #8
Gosub :Z_Lib~RETURNTOPLANET
SetVar $Z_Lib~message $scripttitle & " - Fighter Deployment Complete*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
:NODEPLOY
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# CLEARALLBUSTS 
:INTCOM_CLEARALLBUSTS
SetVar $Z_Lib~message $scripttitle & " - Clearing all busts...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $i 1
While ($i <= SECTORS)
	SetSectorParameter $i "BUSTED" ""
	SetVar $i ($i + 1)
End
Delete GAMENAME & "_busts.txt"
Delete "MOM_" & GAMENAME & "_Busts.txt"
SetVar $Z_Lib~message $scripttitle & " - All busts cleared...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# BUSTUP 
:INTCOM_BUSTUP
KillAllTriggers
Send #145
WaitFor #145 & #8
GetWord CURRENTLINE $prompt 1
If ($prompt <> "<StarDock>")
	SetVar $Z_Lib~message $scripttitle & " - Bustup must start at the <StarDock> prompt...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBUSTUP
End
IsNumber $isnum $PARM1
If ($PARM1 = "0") or ($PARM1 = "") or ($isnum = FALSE)
	SetVar $Z_Lib~message $scripttitle & " - You must specify the experience level to bust up to...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBUSTUP
End
If ($PARM1 <= $experience)
	SetVar $Z_Lib~message $scripttitle & " - You are already at " & $experience & " experience...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBUSTUP
End
Gosub :GETSTATS
If ($align > 0)
	SetVar $Z_Lib~message $scripttitle & " - Alignment must be zero or less...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBUSTUP
End
SetTextTrigger busttorpcost :BUSTTORPCOST "Aldus Genesis Torpedo."
SetTextTrigger busttorpmax :BUSTTORPMAX "(Max"
Send "h t"
Pause
:BUSTTORPCOST
GetText CURRENTLINE $torpcost "cost " " credits"
Pause
:BUSTTORPMAX
GetText CURRENTLINE $torpmax "(Max " ")"
StripText $torpcost ","
If ($torpmax = 0) and ($torps = 0) and ($credits >= $torpcost)
	SetVar $Z_Lib~message $scripttitle & " - This ship does not carry torps...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Send "0* q"
	Goto :NOBUSTUP
End
SetTextTrigger bustdetcost :BUSTDETCOST "We sell them for"
SetTextTrigger bustdetmax :BUSTDETMAX "(Max"
Send "0* a"
Pause
:BUSTDETCOST
GetText CURRENTLINE $detcost "for " " credits"
Pause
:BUSTDETMAX
GetText CURRENTLINE $detmax "(Max " ")"
StripText $detcost ","
If ($detmax = 0) and ($dets = 0) and ($credits >= $detcost)
	SetVar $Z_Lib~message $scripttitle & " - This ship does not carry dets...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Send "0* q"
	Goto :NOBUSTUP
End
Send "0* q"
	SetVar $Z_Lib~message $scripttitle & " - Busting up to " & $PARM1 & ". Please wait...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
:STARTBUSTLOOP
Gosub :GETSTATS
If ($experience >= $PARM1)
	SetVar $Z_Lib~message $scripttitle & " - Bustup complete...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBUSTUP
End
If ($credits >= ($detcost + $torpcost)) and (($dets = 0) or ($torps = 0))
	Send "h "
	If ($dets = 0)
		Send "a 1* "
	End
	If ($torps = 0)
		Send "t 1* "
	End
	Send "q "
End
Gosub :GETSTATS
If ($dets > 0) and ($torps > 0)
	GetRnd $planetname 100000 99999999
	Send "q u y " & $planetname & "* p"
	SetTextTrigger bustplanets :BUSTPLANETS "> " & $planetname
	SetTextTrigger bust1planet :BUST1PLANET "Planet #"
	Send "l"
	Pause
:BUSTPLANETS
	KillAllTriggers
	GetText CURRENTLINE $bustplanetnum "<" ">"
	StripText $bustplanetnum " "
	Send $bustplanetnum & "* "
:BUST1PLANET
	KillAllTriggers
	Send "z d y  p s "
	
	If ($turns > $z_minturns) or ($Z_Lib~isunlimited = TRUE) or ($turnbase = "Unlimited")
		Goto :STARTBUSTLOOP
	Else
		SetVar $Z_Lib~message $scripttitle & " - Low on turns...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOBUSTUP
	End
End
:NOBUSTUP
SetVar $reset TRUE
Return
# AVOIDS 
:INTCOM_AVOIDS
SetVar $ssmsg $dashedline & $scripttitle & " - AVOIDS LIST*" & $dashedline
SetVar $haveavoids FALSE
SetVar $i 1
While ($i <= SECTORS)
	If ($avoidarray[$i] = TRUE)
		SetVar $haveavoids TRUE
		SetVar $ssmsg ($ssmsg & $i & "*")
	End
	SetVar $i ($i + 1)
End
If ($haveavoids = FALSE)
	SetVar $ssmsg ($ssmsg & "No Avoids set.*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# XPORT 
:INTCOM_X
:INTCOM_XPORT
KillAllTriggers
If ($PARM1 = "0") or ($PARM1 = "")
	Goto :NOXPORT
End
SetVar $xport FALSE
UpperCase $PARM1
GetWordPos $PARM1 $pos "P"
GetWordPos $PARM1 $pos2 "L"
GetWordPos $PARM1 $pos3 "N"
If ($pos > 0) or ($pos2 > 0) or ($pos3 > 0)
	StripText $PARM1 "P"
	StripText $PARM1 "L"
	StripText $PARM1 "N"
	SetVar $xport TRUE
	Send #145
	WaitOn #145 & #8
	SetVar $line CURRENTLINE
	CutText $line $prompt2 1 7
	SetVar $xport TRUE
	If ($prompt2 = "Citadel") or ($prompt2 = "Planet ")
		Gosub :Z_Lib~CURRENTPLANET
	End
End
UpperCase $PARM2
If ($PARM2 = "P") or ($PARM2 = "L") or ($PARM2 = "N")
	Send #145
	WaitOn #145 & #8
	SetVar $line CURRENTLINE
	CutText $line $prompt2 1 7
	SetVar $xport TRUE
	If ($prompt2 = "Citadel") or ($prompt2 = "Planet ")
		Gosub :Z_Lib~CURRENTPLANET
	End
End
Isnumber $isnum $PARM1
If ($isnum <> TRUE) and ($xport <> TRUE)
	Goto :NOXPORT
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOXPORT
End
#-----------------------------------------
If ($isnum = TRUE)
	Send "x * x " & $PARM1 & " * * "
	Send #145
	WaitFor #145 & #8
Else
	Send "x**"
	Goto :EXPORTOK
End
Gosub :GETSTATS
If ($shipid = $PARM1) or (($PARM1 = "") and ($xport = TRUE))
	Goto :EXPORTOK
Else
	Goto :EXPORTNOTOK
End

#--------------------------------------------
#:XPORT1
#KillAllTriggers
#SetTextTrigger epaused :EPAUSED "[Pause]"
#SetTextTrigger eready :EREADY "--<  Available Ship Scan  >--"
#Send "x" 
#Pause
#:EPAUSED
#Send "*"
#Pause
#Goto :XPORT1
#:EREADY
#KillAllTriggers
#SetTextTrigger xportok :EXPORTOK "Security code accepted, engaging transporter control."
#SetTextTrigger xportnotok :EXPORTNOTOK "That is not an available ship."
#SetTextTrigger xportnotok2 :EXPORTNOTOK "only has a transport range of"
#SetTextTrigger xportnotok3 :XPORTNOTOK "You do not own any other ships!"
#If ($isnum = TRUE)
#	Send $PARM1 & "*q"
#	Pause
#Else
#	Send "q"
#	Goto :EXPORTOK
#End 
#-------------------------------------------------
:EXPORTNOTOK
KillAllTriggers
If ($xport = TRUE)
	If ($current_sector = STARDOCK)
		Send "p sg yg q"
	ElseIf ($prompt2 = "Citadel") or ($prompt2 = "Planet ")
		Gosub :Z_Lib~RETURNTOPLANET
		Send "x q "
	Else
		Send "p * "
	End
End
SetVar $Z_Lib~message $scripttitle & " - FAILED to xport into ship# " & $PARM1 & "*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOXPORT
:EXPORTOK
KillAllTriggers
Gosub :GETSTATS
If ($xport = TRUE)
	If ($current_sector = STARDOCK)
		Send "p sg yg q"
	ElseIf ($prompt2 = "Citadel") or ($prompt2 = "Planet ")
		Gosub :Z_Lib~RETURNTOPLANET
		Send "x q "
	Else
		Send "p * "
	End
Else
	If ($z_updateship = "TRUE")
		Gosub :GETSHIPDATA
	End
	If ($z_autoigon = "TRUE")
		Gosub :CHECKIGON
	End
End
If ($htx <> TRUE)
	If ($PARM1 <> "")
		SetVar $Z_Lib~message $scripttitle & " - Xported into ship# " & $PARM1 & "*"
	Else
		SetVar $Z_Lib~message $scripttitle & " - No xport ship specified.*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOXPORT
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# DISR 
:INTCOM_DISR
KillAllTriggers
Gosub :GETSTATS
If ($disruptors = 0) or ($scanner <> 2)
	SetVar $Z_Lib~message $scripttitle & " You need mine disruptors and a holo scanner!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODISR
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODISR
End
SetVar $targetsectors 0
SetTextTrigger disr1 :DISR1 "Sector  :"
SetTextLineTrigger disr2 :DISR2 "(Type 1 Armid)"
SetTextTrigger disr3 :DISR3 "Command [TL="
Send "sh"
Pause
:DISR1
GetWord CURRENTLINE $disrsector 3
SetTextTrigger disr1 :DISR1 "Sector  :"
Pause
:DISR2
GetWordPos CURRENTLINE $pos "your"
If ($pos = 0)
	SetVar $targetsectors ($targetsectors + 1)
	SetVar $disruptsector[$targetsectors] $disrsector
End
SetTextLineTrigger disr2 :DISR2 "(Type 1 Armid)"
Pause
:DISR3
KillAllTriggers
If ($targetsectors = 0)
	SetVar $Z_Lib~message $scripttitle & " - No enemy armid mines in adjacents!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODISR
End
SetVar $i 1
While ($i <= $targetsectors)
:STARTDISR
	Gosub :GETSTATS
	If ($disruptors < 1)
		SetVar $i $targetsectors
		SetVar $Z_Lib~message $scripttitle & " - We are out of disruptors!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NODISR
	End
	SetTextTrigger disr4 :DISR4 " remain)"
	SetTextTrigger disr5 :DISR5 "You destroyed all "
	Send "c w y " & $disruptsector[$i] & "*q "
	Pause
:DISR4
	KillAllTriggers
	Goto :STARTDISR
:DISR5
	KillAllTriggers
	SetVar $i ($i + 1)
End
SetVar $Z_Lib~message $scripttitle & " - All enemy armid mines destroyed!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NODISR
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# PLIST 
:INTCOM_PLIST
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPLIST
End
Send "*"
Gosub :Z_Lib~SYNC
WaitFor "elp)? :"
If (SECTOR.PLANETCOUNT[CURRENTSECTOR] > 1)
	SetArray $planetlist 0
	SetVar $Planetcount 0
	SetTextLineTrigger getplist :GETPLIST
	Send "lq*"
	Pause
:GETPLIST
	GetWord CURRENTLINE $word 1
	If ($word = "Land")
		SetVar $i 1
		SetVar $ssmsg $dashedline & $scripttitle & " - PLANET LIST for SECTOR: " & CURRENTSECTOR & "*" & $dashedline
		While ($i <= $planetcount)
			StripText $planetlist[$i] #13
			If ($planetlist[$i] <> "")
				CutText $planetlist[$i] $planetlist[$i] 1 53
				SetVar $ssmsg ($ssmsg & $planetlist[$i] & "*")
			End
			SetVar $i ($i + 1)
		End
		SetVar $ssmsg ($ssmsg & $dashedline)
		SetVar $Z_Lib~message $ssmsg
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	Else
		If ($word <> "<Preparing") and ($word <> "<Atmospheric")
			SetVar $planetcount ($planetcount + 1)
			SetVar $planetlist[$planetcount] CURRENTLINE
		End
		SetTextLineTrigger getplist :GETPLIST
		Pause
	End
Else
	SetVar $Z_Lib~message $scripttitle & " - Less than 2 Planets in Sector!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOPLIST
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $ssmsg ""
Return
# MSLS 
:INTCOM_MSLS
KillAllTriggers
If ($z_msllist = "0")
	SetVar $Z_Lib~message $scripttitle & " - No MSL List created yet!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMSLS
End
SetVar $Z_Lib~message $scripttitle & " - Creating MSL list... *"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg $dashedline & $scripttitle & " - MSLs LIST*" & $dashedline
SetVar $temp $z_msllist & " !!!"
SetVar $i 1
SetVar $keepgoing TRUE
SetArray $amtrakmsls SECTORS
SetVar $count 0
While ($keepgoing = TRUE)
	GetWord $temp $word $i
	If ($word = "!!!")
		SetVar $keepgoing FALSE
	ElseIf ($word <> STARDOCK)
		SetVar $amtrakmsls[$word] TRUE
		If ($count > 10)
			SetVar $count 0
			SetVar $ssmsg ($ssmsg & "*")
		End
		SetVar $ssmsg ($ssmsg & " " & $word)
		SetVar $count ($count + 1)
	End
	SetVar $i ($i + 1)
End
SetVar $ssmsg ($ssmsg & "*" & $dashedline)
Fileexists $fileexists GAMENAME & "_MSLS.txt"
If ($fileexists = TRUE)
	Delete GAMENAME & "_MSLS.txt"
End
SetVar $i 11
While ($i <= SECTORS)
	If ($amtrakmsls[$i] = TRUE)
		Write GAMENAME & "_MSLS.txt" $i
	End
	SetVar $i ($i + 1)
End
SetArray $amtrakmsls 0
SetVar $ssmsg ($ssmsg & " - MSL list written to " & GAMENAME & "_MSLS.txt*" & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOMSLS
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# AMTRAK 
:INTCOM_AMTRAK
KillAllTriggers
If ($z_msllist = "0")
	SetVar $Z_Lib~message $scripttitle & " - No MSL List created yet!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOAMTRAK
End
SetVar $Z_Lib~message $scripttitle & " - Creating AMTRAK list... *"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $temp $z_msllist & " !!!"
SetVar $i 1
SetVar $keepgoing TRUE
SetArray $amtrak SECTORS
SetArray $amtrakmsls SECTORS
While ($keepgoing = TRUE)
	GetWord $temp $word $i
	If ($word = "!!!")
		SetVar $keepgoing FALSE
	Else
		SetVar $amtrakmsls[$word] TRUE
	End
	SetVar $i ($i + 1)
End
SetVar $amtrakmsls[STARDOCK] TRUE
SetVar $amtrakmsls[RYLOS] TRUE
SetVar $amtrakmsls[ALPHACENTAURI] TRUE
SetVar $i 1
While ($i <= 10)
	SetVar $amtrakmsls[$i] TRUE
	SetVar $i ($i + 1)
End
SetVar $i 1
While ($i <= SECTORS)
	If ($amtrakmsls[$i] = TRUE)
		SetVar $j 1
		SetVar $temp SECTOR.WARPCOUNT[$i]
		While ($j <= $temp)
			SetVar $temp1 SECTOR.WARPS[$i][$j]
			SetVar $amtrak[$temp1] TRUE
			SetVar $j ($j + 1)
		End
	End
	SetVar $i ($i + 1)
End
SetVar $amtrak[STARDOCK] FALSE
SetVar $i 1
While ($i <= 10)
	SetVar $amtrak[$i] FALSE
	SetVar $i ($i + 1)
End
SetVar $i 11
While ($i <= SECTORS)
	If ($amtrakmsls[$i] = TRUE)
		SetVar $amtrak[$i] FALSE
	End
	SetVar $i ($i + 1)
End
Fileexists $fileexists GAMENAME & "_AMTRAK.txt"
If ($fileexists = TRUE)
	Delete GAMENAME & "_AMTRAK.txt"
End
SetVar $i 1
SetVar $ssmsg $dashedline & $scripttitle & " - AMTRAK LIST*" & $dashedline
SetVar $count 0
While ($i <= SECTORS)
	If ($amtrak[$i] = TRUE)
		If ($count > 10)
			SetVar $count 0
			SetVar $ssmsg ($ssmsg & "*")
		End
		SetVar $ssmsg ($ssmsg & " " & $i)
		Write GAMENAME & "_AMTRAK.txt" $i
		SetVar $count ($count + 1)
	End
	SetVar $i ($i + 1)
End
SetArray $amtrak 0
SetArray $amtrakmsls 0
SetVar $ssmsg ($ssmsg & "*" & $dashedline & $scripttitle & " - AMTRAK list written to " & GAMENAME & "_AMTRAK.txt*" & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOAMTRAK
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# SAFETYNET 
:INTCOM_SAFETYNET
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "ON")
	SetVar $z_safeshipstatus FALSE
	Gosub :CHECKSAFESHIPSTATUS
	If ($z_safeshipstatus = TRUE)
		SetVar $z_safetynet TRUE
	End
ElseIf ($PARM1 = "OFF")
	SetVar $z_safetynet FALSE
End
If ($z_safetynet = FALSE)
	SetVar $Z_Lib~message "SafetyNet is OFF*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	SetVar $Z_Lib~message "SafetyNet is ON*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
SetVar $reset TRUE
Return
# SAFESHIP 
:INTCOM_SAFESHIP
IsNumber $isnum $PARM1
SetVar $Z_Lib~stripalpha $PARM1
Gosub :Z_Lib~STRIPALPHA
SetVar $PARM1 $Z_Lib~stripalpha
If ($parm1 <> 0) and ($PARM1 <> "")
	SetVar $z_safeship $PARM1
	SaveVar $z_safeship
	SetVar $z_safetynet FALSE
	SetVar $Z_Lib~message "Safeship set to " & $z_safeship & " - SafetyNet is OFF.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
Return
# OVERLOAD 
:INTCOM_OVERLOAD
KillAllTriggers
SetVar $olpersonal FALSE
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOOVERLOAD
End
SetArray $sectorarray 0
SetTextTrigger olplanetsper :OLPLANETSPER "Traders on a Corp:"
Send "v"
Pause
:OLPLANETSPER
KillTrigger olplanetsper
GetText CURRENTLINE $planetsper "sector: " ","
SetArray $sectorarray SECTORS
SetTextLineTrigger startol :STARTOL "==================================="
Send "tlq"
Pause
:STARTOL
KillTrigger startol
SetTextLineTrigger endol :ENDOL  "======   ============  ==== ==== ==== ===== ===== ===== ========== =========="
SetTextLineTrigger endol2 :ENDOL  "No Planets claimed"
SetTextLineTrigger olplanetct :OLPLANETCT " Class "
Pause
:OLPLANETCT
GetWord CURRENTLINE $olsector 1
StripText $olsector " "
SetVar $sectorarray[$olsector] ($sectorarray[$olsector] + 1)
SetTextLineTrigger olplanetct :OLPLANETCT " Class "
Pause
:ENDOL
KillAllTriggers
Gosub :Z_Lib~SYNC
If ($olpersonal <> TRUE)
	SetVar $olpersonal TRUE
	SetTextLineTrigger startol :STARTOL "==================================="
	Send "cyq"
	Pause
End
Echo "**" & $boldwhite & "Checking sectors for planet overloads...**"
SetVar $ssmsg $dashedline & $scripttitle & " - OVERLOADED SECTORS*" & $dashedline
SetVar $i 11
SetVar $foundone FALSE
While ($i <= SECTORS)
	GetSectorParameter $i "MSLSEC" $isanmsl
	If ($isanmsl = TRUE) and ($sectorarray[$i] > 0)
		SetVar $foundone TRUE
		SetVar $ssmsg ($ssmsg & "Sector " & $i & " is an MSL with " & $sectorarray[$i] & " planets.*")
	ElseIf ($sectorarray[$i] > $planetsper)
		SetVar $foundone TRUE
		SetVar $ssmsg ($ssmsg & "Sector " & $i & " has " & $sectorarray[$i] & " planets.*")
#	ElseIf (($sectorarray[$i] > 0) and (SECTOR.PLANETCOUNT[$i] > $planetsper))
#		SetVar $foundone TRUE
#		SetVar $ssmsg ($ssmsg & "Sector " & $i & " has " & SECTOR.PLANETCOUNT[$i] & " planets.*")
	End
	SetVar $i ($i + 1)
End
If ($foundone = FALSE)
	SetVar $ssmsg ($ssmsg & "All Clear - No sectors overloaded...*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOOVERLOAD
SetVar $sectorarray 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# MAX 
:INTCOM_MAX
KillAllTriggers
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOMAX
End
UpperCase $user_command_line
SetVar $user_command_line (" " & $user_command_line & " ")
GetWordPos $user_command_line $pos1 " F "  
GetWordPos $user_command_line $pos2 " O "  
GetWordPos $user_command_line $pos3 " E "  
GetWordPos $user_command_line $pos4 " NOEXP "  
SetVar $upore FALSE
SetVar $uporg FALSE
SetVar $upequ FALSE
SetVar $noexp FALSE
If ($pos1 > 0)
	SetVar $upore TRUE
End
If ($pos2 > 0)
	SetVar $uporg TRUE
End
If ($pos3 > 0)
	SetVar $upequ TRUE
End
If ($pos4 > 0)
	SetVar $noexp TRUE
End
If ($prompt = "Citadel")
	SetVar $PARM1 "20m"
	SaveVar $PARM1
	Gosub :INTCOM_WC
	Gosub :Z_Lib~CURRENTPLANET
	Send "qq*"
	Send #145
	WaitFor #145 & #8
End
Send #145
WaitFor #145 & #8
Gosub :Z_Avoids~AVOIDADJ
SetTextTrigger noupport :NOUPPORT "Initial Construction Costs"
SetTextTrigger upportok :UPPORTOK "Upgrade Starport Production"
SetTextTrigger noupport1 :NOUPPORT "This port is under construction.  Try again later when it's done."
Send "o"
Pause
:NOUPPORT
KillAllTriggers
Send "q*"
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $PARM1 "0"
	SaveVar $PARM1
	Gosub :INTCOM_DC
End
Echo "**" & ANSI_12 & "NO PORT TO UPGRADE !**"
SetVar $Z_Lib~message "NO PORT TO UPGRADE !*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOMAX
:UPPORTOK
KillAllTriggers
SetVar $maxed FALSE
If ($upore = TRUE)
	SetTextTrigger upit :UPIT1 "max, 0 to quit)"
	Send "1"
	pause
:UPIT1
	KillAllTriggers
	SetVar $line CURRENTLINE	
	GetText $line $upamt "? (" " max"
	If ($upamt > 9)
		If ($noexp = TRUE)
			SetVar $trips ($upamt / 9)
			SetVar $i 1
			Send "9*"
			While ($i < $trips)
				Send "19*"
				SetVar $i ($i + 1)
			End
		Else
			Send $upamt & "*"
		End
		SetVar $maxed TRUE
	Else
		Send "*o"
	End
End
If ($uporg = TRUE)
	SetTextTrigger upit :UPIT2 "max, 0 to quit)"
	Send "2"
	pause
:UPIT2
	KillAllTriggers
	SetVar $line CURRENTLINE	
	GetText $line $upamt "? (" " max"
	If ($upamt > 4)
		If ($noexp = TRUE)
			SetVar $trips ($upamt / 4)
			SetVar $i 1
			Send "4*"
			While ($i < $trips)
				Send "24*"
				SetVar $i ($i + 1)
			End
		Else
			Send $upamt & "*"
		End
		SetVar $maxed TRUE
	Else
		Send "*o"
	End
End
If ($upequ = TRUE)
	SetTextTrigger upit :UPIT3 "max, 0 to quit)"
	Send "3"
	pause
:UPIT3
	KillAllTriggers
	SetVar $line CURRENTLINE	
	GetText $line $upamt "? (" " max"
	If ($upamt > 3)
		If ($noexp = TRUE)
			SetVar $trips ($upamt / 3)
			SetVar $i 1
			Send "3*"
			While ($i < $trips)
				Send "33*"
				SetVar $i ($i + 1)
			End
		Else
			Send $upamt & "*"
		End
		SetVar $maxed TRUE
	Else
		Send "*"
	End
End
Send "q*"
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $PARM1 "2m"
	SaveVar $PARM1
	Gosub :INTCOM_DC
End
:NOMAX
Send #145
WaitFor #145 & #8
Gosub :Z_Avoids~UNAVOIDADJ
If ($maxed = TRUE)
	Send "/"
	Echo "**" & ANSI_15 & "PORT UPGRADES COMPLETE !**"
	SetVar $Z_Lib~message "PORT UPGRADES COMPLETE !*"
Else
	Echo "**" & ANSI_15 & "NOTHING TO DO !**"
	SetVar $Z_Lib~message "NOTHING TO DO !*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# CLEAR 
:INTCOM_CLEAR
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCLEAR
End
Gosub :INTCOM_DISR
SetVar $Z_Surround~surroundwave $z_wave
SetVar $Z_Surround~surroundowner $z_figowner
SetVar $Z_Surround~surroundfigs $z_mowfigs
SetVar $Z_Surround~surroundmines $z_mowmines
SetVar $Z_Surround~surroundlimps $z_mowlimps
SetVar $Z_Surround~scanner $Scanner
SetVar $Z_Surround~clear TRUE
Gosub :Z_Surround~SURROUND
SetVar $Z_Surround~clear FALSE
:NOCLEAR
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# BUY 
:INTCOM_BUY
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $prompt 1 7
SetVar $atcitadel FALSE
If ($prompt = "Citadel")
	SetVar $atcitadel TRUE
End
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOBUY
End
SetVar $_CK_BUYDOWN_FUELROUNDS "-1"
SetVar $_CK_BUYDOWN_ORGROUNDS "-1"
SetVar $_CK_BUYDOWN_EQUIPROUNDS "-1"
SetVar $_CK_BUYDOWN_MODE "b"
SetVar $user_command_line (" " & $user_command_line & " ")
UpperCase $user_command_line
GetWordPos $user_command_line $pos1 " F "
GetWordPos $user_command_line $pos2 " O "
GetWordPos $user_command_line $pos3 " E "
GetWordPos $user_command_line $pos4 " B "
GetWordPos $user_command_line $pos5 " W "
GetWordPos $user_command_line $pos6 " S "
SetVar $buying FALSE
If ($pos1 > 0)
	SetVar $_CK_BUYDOWN_FUELROUNDS "max"
	SetVar $buying TRUE
End
If ($pos2 > 0)
	SetVar $_CK_BUYDOWN_ORGROUNDS "max"
	SetVar $buying TRUE
End
If ($pos3 > 0)
	SetVar $_CK_BUYDOWN_EQUIPROUNDS "max"
	SetVar $buying TRUE
End
If ($pos4 > 0)
	SetVar $_CK_BUYDOWN_MODE "b"
End
If ($pos5 > 0)
	SetVar $_CK_BUYDOWN_MODE "w"
End
If ($pos6 > 0)
	SetVar $_CK_BUYDOWN_MODE "s"
End
If ($buying = TRUE)
	If ($_CK_BUYDOWN_FUELROUNDS = "max") and ($_CK_BUYDOWN_MODE = "s") and ($_CK_BUYDOWN_ORGROUNDS <> "max") and ($_CK_BUYDOWN_EQUIPROUNDS <> "max")
		If ($atcitadel = TRUE)
			SetVar $ouprmpt "Citadel"
		Else
			SetVar $ouprmpt "Planet "
		End
		Gosub :GETSTATS
		If ($credits < 3000000)
			SetVar $PARM1 "3m"
			Gosub :INTCOM_WC
		End
		Goto :OREUP2
	End
	SaveVar $_CK_BUYDOWN_FUELROUNDS
	SaveVar $_CK_BUYDOWN_ORGROUNDS
	SaveVar $_CK_BUYDOWN_EQUIPROUNDS
	SaveVar $_CK_BUYDOWN_MODE
	Gosub :Z_Lib~SYNC
	SetTextTrigger buydone :NOBUY "'CK Buydown exiting"
	SetEventTrigger buyscriptdone :NOBUY "SCRIPT STOPPED" "scripts\z_ck_buydown.cts"
	SetEventTrigger buyscriptdone2 :NOBUY "SCRIPT STOPPED" "scripts\z_ck_buydown.ts"
	Send #145
	WaitFor #145 & #8
	Load "z_ck_buydown"
	Pause
End
:NOBUY
KillAllTriggers
If ($atcitadel = TRUE)
	Send "c x q * "
End
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# NEG 
:INTCOM_NEG
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $prompt 1 7
SetVar $atcitadel FALSE
If ($prompt = "Citadel")
	SetVar $atcitadel TRUE
End
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NONEG
End
SetVar $_CK_PNEGO_FUELTOSELL "-1"
SetVar $_CK_PNEGO_ORGTOSELL "-1"
SetVar $_CK_PNEGO_EQUIPTOSELL "-1"
SetVar $user_command_line (" " & $user_command_line & " ")
UpperCase $user_command_line
GetWordPos $user_command_line $pos1 " F "
GetWordPos $user_command_line $pos2 " O "
GetWordPos $user_command_line $pos3 " E "
SetVar $selling FALSE
If ($pos1 > 0)
	SetVar $_CK_PNEGO_FUELTOSELL "max"
	SetVar $selling TRUE
End
If ($pos2 > 0)
	SetVar $_CK_PNEGO_ORGTOSELL "max"
	SetVar $selling TRUE
End
If ($pos3 > 0)
	SetVar $_CK_PNEGO_EQUIPTOSELL "max"
	SetVar $selling TRUE
End
If ($selling = TRUE)
	SaveVar $_CK_PNEGO_FUELTOSELL
	SaveVar $_CK_PNEGO_ORGTOSELL
	SaveVar $_CK_PNEGO_EQUIPTOSELL
	Gosub :Z_Lib~SYNC
	SetTextTrigger buydone :NONEG "'CK Planet Nego exiting"
	SetEventTrigger buyscriptdone :NONEG "SCRIPT STOPPED" "scripts\_ck_planet_nego.cts"
	SetEventTrigger buyscriptdone2 :NONEG "SCRIPT STOPPED" "scripts\_ck_planet_nego.ts"
	Send #145
	WaitFor #145 & #8
	Load "_ck_planet_nego"
	Pause
End
:NONEG
KillAllTriggers
If ($atcitadel = TRUE)
	Send "c x q * "
End
SetVar $_CK_PNEGO_FUELTOSELL "DELETED"
SetVar $_CK_PNEGO_ORGTOSELL "DELETED"
SetVar $_CK_PNEGO_EQUIPTOSELL "DELETED"
SaveVar $_CK_PNEGO_FUELTOSELL
SaveVar $_CK_PNEGO_ORGTOSELL
SaveVar $_CK_PNEGO_EQUIPTOSELL
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# AVOID 
:INTCOM_AVOID
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOAVOID
End
If ($PARM1 = 0) or ($PARM1 = "")
	Goto :NOAVOID
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NOAVOID
End
If ($parm1 < 1) or ($PARM1 > SECTORS)
	Goto :NOAVOID
End
SetVar $line ($user_command_line & " !!!")
SetVar $x 1
SetVar $Z_Lib~message ""
SetVar $word ""
While ($word <> "!!!")
	GetWord $line $word $x
	IsNumber $isnum $word
	If ($isnum <> TRUE)
		Goto :NOAVOID2
	End
	If ($word < 1) or ($word > SECTORS)
		Goto :NOAVOID2
	End
	Send "cv" & $word & "*q"
	SetVar $avoidarray[$word] TRUE
	SetAvoid $word
	SetVar $Z_Lib~message ($Z_Lib~message & "Sector " & $word & " AVOIDED!*")
:NOAVOID2	
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOAVOID
SetVar $Z_Lib~heraldss FALSE
Return
# UNAVOID 
:INTCOM_UNAVOID
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOUNAVOID
End
If ($PARM1 = 0) or ($PARM1 = "")
	Goto :NOUNAVOID
End
UpperCase $PARM1
If ($PARM1 = "ALL")
	Send "cv*yyq"
	SetVar $x 1
	While ($x <= SECTORS)
		SetVar $avoidarray[$x] FALSE
		SetVar $x ($x + 1)
	End
	ClearAllAvoids
Else
	IsNumber $isnum $PARM1
	If ($isnum <> TRUE)
		Goto :NOUNAVOID
	End
	If ($parm1 < 1) or ($PARM1 > SECTORS)
		Goto :NOAVOID
	End
	SetVar $line ($user_command_line & " !!!")
	SetVar $x 1
	SetVar $Z_Lib~message ""
	SetVar $word ""
	While ($word <> "!!!")
		GetWord $line $word $x
		IsNumber $isnum $word
		If ($isnum <> TRUE)
			Goto :NOUNAVOID2
		End
		If ($word < 1) or ($word > SECTORS)
			Goto :NOUNAVOID2
		End
		Send "cv*yn" & $word & "*q"
		ClearAvoid $word
		SetVar $avoidarray[$word] FALSE
		SetVar $Z_Lib~message ($Z_Lib~message & "Sector " & $word & " AVOID CLEARED!*")
:NOUNAVOID2	
		SetVar $x ($x + 1)
	End
End
If ($PARM1 = "ALL")
	SetVar $Z_Lib~message " ALL AVOIDS CLEARED!*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOUNAVOID
SetVar $Z_Lib~heraldss FALSE
Return
# RECALL 
:INTCOM_RECALL
KillAllTriggers
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NORECALL
End
Gosub :Z_Lib~CURRENTPLANET
SetVar $figtype $z_figtype
SetTextTrigger getfigtype1 :RGETFIGTYPE1 "[Defensive]"
SetTextTrigger getfigtype2 :RGETFIGTYPE2 "[Offensive]"
SetTextTrigger getfigtype3 :RGETFIGTYPE3 "[Toll]"
SetTextTrigger getfigtype4 :RGETFIGTYPE4 "Warps to Sector(s)"
Send "q *"
Pause
:RGETFIGTYPE1
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "d"
Goto :RGOTFIGTYPE
:RGETFIGTYPE2
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "o"
Goto :RGOTFIGTYPE
:RGETFIGTYPE3
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "t"
Goto :RGOTFIGTYPE
:RGETFIGTYPE4
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
Goto :RGOTFIGTYPE
:RGOTFIGTYPE
Gosub :Z_Lib~RETURNTOPLANET
:STARTRECALL
KillAllTriggers
SetTextLineTrigger getpfigs :GETPFIGS2 "Fighters        N/A"
Send "*"
Pause
:GETPFIGS2
GetWord CURRENTLINE $dplanetfigs 5
GetWord CURRENTLINE $dplanetmaxfigs 7
StripText $dplanetfigs ","
StripText $dplanetmaxfigs ","
SetVar $dplanetmaximum ($dplanetmaxfigs - $dplanetfigs)
Send "m * l * "
Gosub :GETSTATS
If ($figs <> 0)
	Goto :ENDRECALL
End
SetVar $nodeploy FALSE
SetTextTrigger figsinsect :FIGSINSECT2 "Your ship can support up to"
SetTextTrigger nofigsinsect :NOFIGSINSECT2 "These fighters are not under your control."
Send "q f"
Pause
:NOFIGSINSECT2
KillAllTriggers
Gosub :Z_Lib~RETURNTOPLANET
SetVar $Z_Lib~message $scripttitle & " - Fighters in sector are not ours!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $i $trips
SetVar $nodeploy TRUE
Goto :ENDRECALL
:FIGSINSECT2
KillAllTriggers
GetWord CURRENTLINE $figstoleave 10
StripText $figstoleave ","
If ($figstoleave < 1)
	SetVar $figstoleave 1
End
Send $figstoleave & "*" & $z_figowner & $figtype
Gosub :Z_Lib~RETURNTOPLANET
If ($figstoleave = 1)
	Send "m * * * "
	Goto :ENDRECALL
Else
	Goto :STARTRECALL
End
:ENDRECALL
Send #145
WaitOn #145 & #8
If ($nodeploy = TRUE)
	SetVar $Z_Lib~message $scripttitle & " - Fighter Recall Failed!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NORECALL
End
SetVar $Z_Lib~message $scripttitle & " - Fighter Recall Complete*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NORECALL
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# DROPALL 
:INTCOM_DROPALL
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODROPALL
End
Gosub :GETSTATS
Send "*"
WaitFor "] (?=Help)? :"
If (CURRENTSECTOR < 11) or (CURRENTSECTOR = STARDOCK)
	SetVar $Z_Lib~message $scripttitle & " - I'm in Fedspace - DropAll aborted !!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODROPALL
End
If (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
	GetWordPos SECTOR.FIGS.OWNER[$current_sector] $pos "our"
	If ($pos < 1)
		SetVar $Z_Lib~message $scripttitle & " - Fighters in sector are not ours!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NODROPALL
	End
End
SetVar $droptotal (SECTOR.FIGS.QUANTITY[$current_sector] + $figs)
If ($droptotal > 50000)
	If (SECTOR.PLANETCOUNT[$current_sector] < 1)
		If ($torps >= 1)
			Send "uy..*cq *"
		End
	End
End

SetVar $figtype $z_figtype
SetTextTrigger getfigtype1 :DGETFIGTYPE1 "[Defensive]"
SetTextTrigger getfigtype2 :DGETFIGTYPE2 "[Offensive]"
SetTextTrigger getfigtype3 :DGETFIGTYPE3 "[Toll]"
SetTextTrigger getfigtype4 :DGETFIGTYPE4 "Warps to Sector(s)"
Send "*"
Pause
:DGETFIGTYPE1
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "d"
Goto :DGOTFIGTYPE
:DGETFIGTYPE2
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "o"
Goto :DGOTFIGTYPE
:DGETFIGTYPE3
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "t"
Goto :DGOTFIGTYPE
:DGETFIGTYPE4
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
Goto :DGOTFIGTYPE
:DGOTFIGTYPE
Send "f" & $droptotal & "*" & $z_figowner & $figtype
SetVar $Z_Lib~message $scripttitle & " - Fighters dropped in sector.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NODROPALL
SetVar $ssmsg ""
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# FURB 
:INTCOM_FURB
KillAllTriggers
Gosub :CLEARMOVEOPTIONS
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt <> "<StarDo")
	SetVar $Z_Lib~setprompt "CITCOM"
	SetVar $Z_Lib~heraldss TRUE
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		Goto :NOFURB
	End
Else
	SetVar $prompt $startprompt
End
LoadVar $z_float
If ($z_float = 0)
	SetVar $z_float 300000
End
Gosub :GETSTATS
If ($credits < 250000)
	SetVar $Z_Lib~message $scripttitle & " - Need more cash - 250k+.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
If ($twarp <> 2)
	SetVar $Z_Lib~message $scripttitle & " - Need a level 2 Transwarp drive.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $Z_Lib~message $scripttitle & " - PARM1 must be the delivery sector.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	SetVar $Z_Lib~message $scripttitle & " - PARM1 must be the delivery sector.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
If ($PARM1 > 10) and ($PARM1 <= SECTORS) and ($PARM1 <> STARDOCK)
	SetVar $deliverysector $PARM1
Else
	SetVar $Z_Lib~message $scripttitle & " - PARM1 must be the delivery sector.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
LowerCase $PARM2
If ($PARM2 = "0") or ($PARM2 = "") or ($PARM2 = "/dc")
	LoadVar $Z_furbshipletter
	If ($Z_furbshipletter = "0") or ($Z_furbshipletter = "")
		SetVar $Z_Lib~message $scripttitle & " - PARM2 must be the buy ship letter.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFURB
	End
	SetVar $PARM2 $Z_furbshipletter
	LoadVar $z_furbholds
	SetVar $PARM3 $z_furbholds
Else
	SetVar $z_furbholds $PARM3
	SaveVar $z_furbholds
End
GetLength $PARM2 $len
If ($len > 2)
	SetVar $Z_Lib~message $scripttitle & " - PARM2 must be the buy ship letter.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
SetVar $Z_furbshipletter $PARM2
SaveVar $Z_furbshipletter
UpperCase $USER_COMMAND_LINE
GetWordPos $USER_COMMAND_LINE $pos "/DC"
If ($pos > 0)
	SetVar $furbdecash TRUE
Else
	SetVar $furbdecash FALSE
End
If ($current_sector <> STARDOCK)
	If ($prompt = "Citadel")
		Gosub :Z_Lib~CURRENTPLANET
		Send "qt**1*q**"
		Send #145
		WaitFor #145 & #8
		If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
			Send "f1*cd"
		End
		Gosub :Z_Lib~RETURNTOPLANET
	Else
		Send "*"
		WaitFor "elp)?"
		If ($current_sector > 10) and ($current_sector <> STARDOCK)
			If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0")
				Send "p***"
			End
			If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
				Send "f1*cd"
			End
		End
	End
	If (STARDOCK > 0) and (STARDOCK <= SECTORS)
		SetVar $stardockok TRUE
	Else
		SetVar $Z_Lib~message $scripttitle & " - Where is STARDOCK?*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFURB
	End
	Gosub :CHECKSTARDOCK
	If ($stardockchk <> TRUE)
		SetVar $Z_Lib~message $scripttitle & " - Something is wrong with STARDOCK.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFURB
	End
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_dockport FALSE
	SetVar $target STARDOCK
	SetVar $previoussector $current_sector
	Gosub :TWARPING
#Else
#	Send "p sg yg q"
End
If ($startprompt <> "<StarDo")
	Send "p sg yg q"
End
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
GetWord CURRENTLINE $curprmpt 1
If ($curprmpt <> "<StarDock>")
	SetVar $Z_Lib~message $scripttitle & " - We are NOT at the STARDOCK prompt.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
Send "sbny" & $PARM2 & "ypfurb***"
Gosub :Z_Lib~SYNC
If ($credits > 1000000)
	SetTextTrigger furbfigs :FURBFIGS "How many K-3A fighters do you want to buy"
	Send "p b"
	Pause
:FURBFIGS
	KillTrigger furbfigs
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	If ($amt < 20)
		Send $amt & "* "
	Else
		Send "20* "
	End
	Send "q "
End
SetTextLineTrigger furbshipnum :FURBSHIPNUM "furb"
Send "sq"
Pause
:FURBSHIPNUM
KillTrigger furbshipnum
GetWord CURRENTLINE $furbship 1
SetVar $ship1 $shipid
Send "q"
If ($PARM3 <> "0") and ($PARM3 <> "")
	Isnumber $isnum $PARM3 
	If ($isnum = TRUE)
		If ($PARM3 > 0) and ($PARM3 <= 255)
			Send "qx*" & $furbship & "*qpsspa" & $PARM3 & "*yqqqx*" & $ship1 & "*"
			SetVar $z_furbholds $PARM3
			SaveVar $z_furbholds
		End
	End
End
Send "q*w* z" & #8 & $furbship & "*"
If ($ore < $holds)
	Gosub :GETSTATS
	If (PORT.BUYFUEL[$current_sector] = FALSE) and ($sdsellfuel = TRUE)
		Send "p***"
	End
End
SetVar $prompt2 $prompt
SetVar $prompt "Command"
SetVar $z_dockport FALSE
SetVar $target $deliverysector
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
If ($current_sector <> $target)
	SetVar $Z_Lib~message $scripttitle & " - We didn't make it back.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFURB
End
Send "w * * "
If ($furbdecash = TRUE)
	KillTrigger nofdb
	SetTextTrigger fdb :FDB "Exchange with "
	SetTextLineTrigger nofdb :NOFDB "Your Associate must be in the same sector to conduct transfers!"
	Send "t c"
	Pause
:FDB
	KillTrigger nofdb
	KillTrigger fdb
	KillTrigger fdbamt
	SetTextLineTrigger fdbamt :FDBAMT " credits, and "
	Send "y f"
	Pause
:FDBAMT
	KillTrigger fdbamt
	GetText CURRENTLINE $fdbcash " has " "."
	StripText $fdbcash ","
	SetVar $fdbstrip 0
	If ($fdbcash > $z_float)
		SetVar $fdbstrip ($fdbcash - $z_float)
	End
	Send $fdbstrip & "*"
:NOFDB
	KillTrigger nofdb
	KillTrigger fdb
	Send "q "
End
SetTextTrigger nofurbfigs :NOFURBFIGS "Your Associate must be in the same sector to conduct transfers!"
SetTextTrigger furbfigswith :FURBFIGSWITH "Exchange with "
Send "t f"
Pause
:FURBFIGSWITH
KillTrigger nofurbfigs
KillTrigger furbfigswith
Send "y t 9876543210*"
:NOFURBFIGS
KillTrigger nofurbfigs
KillTrigger furbfigswith
Send "q "
If ($prompt2 = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
Else
	Gosub :INTCOM_GAS
	If ($furbdecash = TRUE)
		Gosub :CHECKSTARDOCK
		If ($stardockchk <> TRUE)
			SetVar $Z_Lib~message $scripttitle & " - Something is wrong with STARDOCK.*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			Goto :NOFURB
		End
		Gosub :CLEARMOVEOPTIONS
		SetVar $z_dockport TRUE
		SetVar $target STARDOCK
		Gosub :TWARPING
	End
End
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message $scripttitle & " - Furb run complete...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOFURB
SetVar $ssmsg ""
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# WATCH 
:INTCOM_WATCH
UpperCase $PARM1
SetVar $ssmsg ""
If ($PARM1 = "0")
	If ($watch = TRUE)
		SetVar $ssmsg " ONLINE WATCH is currently ACTIVE every " & $z_watchtime & " seconds.*"
	Else
		SetVar $ssmsg " ONLINE WATCH is currently OFF.*"
	End
ElseIf ($PARM1 = "ON")
	SetVar $watch TRUE
	If ($z_watchtime = "0")
		SetVar $z_watchtime 10
		SaveVar $z_watchtime
	End
	SetVar $ssmsg " ONLINE WATCH is now ACTIVE every " & $z_watchtime & " seconds.*"
ElseIf ($PARM1 = "OFF")
	SetVar $watch FALSE
	SetVar $ssmsg " ONLINE WATCH is now OFF.*"
End
If ($ssmsg <> "")
	SetVar $Z_Lib~message $scripttitle & $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
Gosub :SETPULSETRIGGER
If ($watch = TRUE)
	Gosub :ONLINEWATCH
End
Send #145
WaitOn #145 & #8
Gosub :Z_Lib~COMMSON
Return
# GAS 
:INTCOM_GAS
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $line CURRENTLINE
CutText $line $word 1 6
If ($word <> "Planet")
	SetVar $Z_Lib~setprompt "CITCOM"
	SetVar $Z_Lib~heraldss TRUE
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		Goto :NOGAS
	End
End
SetVar $Z_Gas~base $z_base
SetVar $Z_Gas~planet $z_planet
Gosub :GETSTATS
If ($scanner = "2") and ($twarp > 0) and ($credits > 5000)
	Gosub :Z_Gas~FINDFUEL
End
:NOGAS
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# SENTRY 
:INTCOM_SENTRY
KillAllTriggers
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSENTRY
End
If ($PARM1 = 0) or ($PARM1 = "")
	SetVar $Z_Lib~message $scripttitle & " No planet number specified.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENTRY
End
SetVar $sentryshields FALSE
UpperCase $PARM2
If ($PARM2 = "S")
	SetVar $sentryshields TRUE
End
Isnumber $isnum $PARM1
If ($isnum <> TRUE)
	SetVar $Z_Lib~message $scripttitle & " No planet number specified.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENTRY
End
SetVar $sentryplanet $PARM1
UpperCase $USER_COMMAND_LINE
GetWordPos $USER_COMMAND_LINE $pos "DUO"
If ($pos > 0) and ($p = TRUE)
	SetVar $sentryduo TRUE
	GetWordPos $USER_COMMAND_LINE $pos "DUO1"
	If ($pos > 0)
		SetVar $sentryinsect TRUE
	Else
		SetVar $sentryinsect FALSE
	End
Else
	SetVar $sentryduo FALSE
End
Gosub :GETSHIPDATA
Gosub :SENTRYRELOAD
If ($sentryinsect = TRUE)
	Send "q *"
End
Gosub :GETSTATS
If ($figs < $z_maxfigs)
	SetVar $Z_Lib~message $scripttitle & " Could NOT fill up on fighters.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENTRY
End
If ($sentryduo = TRUE)
	If ($sentryshields = TRUE)
		SetVar $Z_Lib~message $scripttitle & " SENTRY ON DUTY: Sector " & $current_sector & " - Planet# " & $sentryplanet & ". Fighters & Shields.*"
	Else
		SetVar $Z_Lib~message $scripttitle & " SENTRY ON DUTY: Sector " & $current_sector & " - Planet# " & $sentryplanet & ". Fighters ONLY.*"
	End
Else
	If ($sentryshields = TRUE)
		SetVar $Z_Lib~message $scripttitle & " SENTRY ON DUTY using Planet# " & $sentryplanet & ". Fighters & Shields.*"
	Else
		SetVar $Z_Lib~message $scripttitle & " SENTRY ON DUTY using Planet# " & $sentryplanet & ". Fighters ONLY.*"
	End
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~COMMSON
SetVar $sentryison TRUE
Send #145
WaitFor #145 & #8
Echo "***" & ANSI_10 & $blinkon & "!!! PRESS the [~] key to stand down from SENTRY duty !!!***" & $blinkoff
Send "*"
SetVar $wasautoss $z_autoss
:SENTRYMONITOR
KillAllTriggers
SetVar $messagemode "R"
Gosub :SETPULSETRIGGER
:SENTRYPULSE
If ($sentryduo = FALSE)
	SetTextLineTrigger sentrycheck :SENTRYCHECK "is powering up weapons systems!"
	#SetTextLineTrigger sentrycheck2 :SENTRYCHECK "Shipboard Computers"
	If ($p = TRUE)
		SetTextLineTrigger sentryduoon :SENTRYDUOON "SENTRY ON DUTY: Sector " & $current_sector & " - Planet#"
	End
Else
	If ($z_autoss = TRUE)
		SetVar $wasautoss $z_autoss
		Setvar $z_autoss FALSE
	End
	If ($sentryinsect = TRUE)
		SetTextLineTrigger sentrycheck :SENTRYCHECK "is powering up weapons systems!"
		#SetTextLineTrigger sentrycheck2 :SENTRYCHECK "Shipboard Computers"
	Else
		SetTextLineTrigger sentrycall :SENTRYCALL "SENTRY - Return to Sector !!!"
	End
	SetTextLineTrigger sentrynoduo :SENTRYNODUO "SENTRY standing down in sector " & $current_sector & "..."
End
SetTextLineTrigger sentryabort :SENTRYABORT $z_botname & " sentry off"
SetTextLineTrigger sentryreset :SENTRYRESET $z_botname & " reset"
SetTextLineTrigger sentrystatus :SENTRYSTATUS $z_botname & " status"
SetTextLineTrigger sentrymode :SENTRYMODE $z_botname & " mode"
SetTextLineTrigger sentrymode2 :SENTRYMODE $z_team & " mode" 
SetTextLineTrigger sentrybusy :SENTRYBUSY $z_botname & " busy"
SetTextOutTrigger sentryabort2 :SENTRYABORTSELF "~"
SetTextOutTrigger sentryabort3 :SENTRYABORTSELF #8
SetTextTrigger sentryecho :SENTRYECHO "elp)"
Pause
:SENTRYDUOON
GetWord CURRENTLINE $ck 1
If ($ck <> "R")
	Pause
End
KillAllTriggers
SetDelayTrigger sentryduoonwait :SENTRYDUOONWAIT 1000
Pause
:SENTRYDUOONWAIT
KillAllTriggers
SetVar $sentryduo TRUE
SetVar $sentryinsect TRUE
SetVar $Z_Lib~message $scripttitle & " SENTRY Returning to DUO mode...*"
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
Goto :SENTRYMONITOR
:SENTRYCALL
GetWord CURRENTLINE $ck 1
If ($ck <> "R")
	Pause
End
KillAllTriggers
Send "q *"
SetVar $sentryinsect TRUE
SetVar $Z_Lib~message $scripttitle & " SENTRY Reporting for duty...*"
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
#Send #145
#WaitFor #145 & #8
Goto :SENTRYMONITOR
:SENTRYNODUO
GetWord CURRENTLINE $ck 1
If ($ck <> "R")
	Pause
End
KillAllTriggers
SetVar $sentryduo FALSE
If ($sentryinsect = FALSE)
	Send "q *"
End
SetVar $Z_Lib~message $scripttitle & " SENTRY Returning to solo mode...*"
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
If ($wasautoss = TRUE)
	Setvar $z_autoss TRUE
	Send #145
	WaitOn #145 & #8
	Gosub :SETAUTOSSON
End
Goto :SENTRYMONITOR
:SENTRYBUSY
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SENTRYMONITOR
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SENTRYMONITOR
End
Gosub :INTCOM_BUSY
Goto :SENTRYMONITOR
:SENTRYMODE
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SENTRYMONITOR
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SENTRYMONITOR
End
Gosub :INTCOM_MODE
Goto :SENTRYMONITOR
:SENTRYSTATUS
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SENTRYMONITOR
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SENTRYMONITOR
End
Gosub :INTCOM_STATUS
Goto :SENTRYMONITOR
:SENTRYRESET
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SENTRYMONITOR
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SENTRYMONITOR
End
SetVar $sentryison FALSE
Gosub :INTCOM_RESET
Goto :NOSENTRY
:SENTRYECHO
GetTimer $sentryendtime
SetVar $timelapsed ($sentryendtime - $sentrystarttime)
If ($timelapsed > 3000000000)
	If ($sentryshields = TRUE)
		Echo ANSI_14 & "=[" & ANSI_12 & "SENTRY MODE" & ANSI_14 & "]= " & ANSI_5
	Else
		Echo ANSI_14 & "[" & ANSI_12 & "SENTRY MODE" & ANSI_14 & "] " & ANSI_5
	End
	GetTimer $sentrystarttime
End
SetTextTrigger sentryecho :SENTRYECHO "elp)"
Pause
:SENTRYABORT
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SENTRYMONITOR
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SENTRYMONITOR
End
:SENTRYABORTSELF
KillAllTriggers
If ($wasautoss = TRUE) and ($z_autoss = FALSE)
	Setvar $z_autoss TRUE
	SetVar $Z_Lib~setprompt "CITCOM"
	SetVar $Z_Lib~heraldss FALSE
	Gosub :Z_Lib~PROMPT
	Send #145
	WaitOn #145 & #8
	Gosub :SETAUTOSSON
End
Goto :NOSENTRY
:SENTRYCHECK
KillAllTriggers
If ($sentryduo = TRUE)
	SetVar $sentrywait TRUE
	SetTextLineTrigger sentrywait :SENTRYWAIT " SENTRY Reporting for duty..."
	SetDelayTrigger sentrytimeout :SENTRYTIMEOUT 5000
	SetTextLineTrigger sentryabort :SENTRYABORT $z_botname & " sentry off"
	SetTextLineTrigger sentryreset :SENTRYRESET $z_botname & " reset"
	SetTextLineTrigger sentrystatus :SENTRYSTATUS $z_botname & " status"
	SetTextLineTrigger sentrybusy :SENTRYBUSY $z_botname & " busy"
	SetTextOutTrigger sentryabort2 :SENTRYABORTSELF "~"
	SetTextOutTrigger sentryabort3 :SENTRYABORTSELF #8
	SetVar $Z_Lib~message $scripttitle & " SENTRY - Return to Sector !!!*"
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
#	Send #145
#	WaitFor #145 & #8
	Pause
:SENTRYTIMEOUT
	KillAllTriggers
	SetVar $sentrytimeouts ($sentrytimeouts + 1)
	If ($sentrytimeouts > 2)
		SetVar $sentryduo FALSE
		SetVar $Z_Lib~message $scripttitle & " SENTRY TIMED OUT - Returning to solo mode...*"
		SetVar $Z_Lib~messageto ""
		SetVar $Z_Lib~messagemode "R"
		Gosub :MSGBRIDGE
	End
	Goto :SENTRYCHECK
:SENTRYWAIT
	GetWord CURRENTLINE $ck 1
	If ($ck <> "R")
		Pause
	End
	KillAllTriggers
	SetVar $sentryinsect FALSE
	SetVar $sentrywait FALSE
	SetVar $sentrytimeouts 0
End
Gosub :SENTRYRELOAD
Goto :SENTRYMONITOR
:SENTRYRELOAD
KillAllTriggers
If ($sentryshields = TRUE)
	SetVar $z_getshields ($z_shields / 10)
	Send "l j" & #8 & #8 & $sentryplanet & "* n n m * * * * c g f" & $z_getshields &"* q "
Else
	Send "l j" & #8 & #8 & $sentryplanet & "* n n m * * * * "
End
If ($sentryduo = FALSE)
	Send "q *"
End
Return
:NOSENTRY
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " SENTRY standing down in sector " & $current_sector & "...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $sentryison FALSE
Return
# DENSITY 
:INTCOM_DENSITY
KillAllTriggers
SetVar $mindensity 499
If ($PARM1 <> 0) and ($PARM1 <> "")
	Isnumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $mindensity $PARM1
	End
End
SetVar $Z_Lib~message $scripttitle & " preparing HIGH DENSITY SECTOR REPORT...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $dsector 1
SetVar $ssmsg ($dashedline & "Z-Bot HIGH DENSITY SECTOR REPORT - Density >= " & $mindensity & "*" & $dashedline)
While $dsector <= SECTORS
	SetVar $ddensity SECTOR.DENSITY[$dsector]
	If ($ddensity >= $mindensity)
		GetSectorParameter $dsector "FIGSEC" $isfigged 
		If ($isfigged <> TRUE)
			SetVar $Z_Strings~padchar "-"
			SetVar $Z_Strings~padlen 6
			SetVar $Z_Strings~unpadded $dsector
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar  $dsectord $Z_Strings~padded
			SetVar $ssmsg ($ssmsg & "Sector: " & $dsectord & " Density: " & $ddensity & "*")
		End
	End
	SetVar $dsector ($dsector + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NODENS
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# SENDMAP 
:INTCOM_SENDMAP
KillAllTriggers
Gosub :Z_Lib~COMMSON
SetVar $receivers 0
SetTextTrigger ssok :SSOK "Comm-link open on sub-space band"
SetDelayTrigger ssnotok :SSNOTOK 5000
Send "'*"
Pause
:SSNOTOK
KillAllTriggers
Echo "***" & $boldred & "Cannot open SS channel!***"
Send "**"
Goto :NOSENDMAP
:SSOK
KillAllTriggers
SetTextTrigger readytorec :READYTOREC "Ready to receive warpspec!"
SetDelayTrigger recregdone :RECREGDONE 10000
Send "Ready to send " & SECTORS & " sector warpspec.*"
Send "All receivers register now...**"
Pause
:READYTOREC
SetVar $receivers ($receivers + 1)
SetTextTrigger readytorec :READYTOREC "Ready to receive warpspec!"
Pause
:RECREGDONE
KillAllTriggers
If ($receivers < 1)
	Send "'NO RECEIVERS ! Exiting...*"
	Goto :NOSENDMAP
End
:MAPSENDLOOP
SetVar $x 1
SetVar $sendcount 0
SetTextOutTrigger abortsendmap :ABORTSENDMAP #8
Send "'*"
While ($x <= SECTORS)
	SetVar $warps SECTOR.WARPCOUNT[$x]
	If ($warps > 0)
		SetVar $msg "[++] "
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 6
		SetVar $Z_Strings~unpadded $x
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $msg ($msg & $Z_Strings~padded)
		SetVar $i 1
		While ($i <= $warps)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 6
			SetVar $Z_Strings~unpadded SECTOR.WARPS[$x][$i]
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $msg ($msg & $Z_Strings~padded)
			SetVar $i ($i + 1)
		End
		SetVar $ct 1
		While ($ct <= 5)
			SetVar $msg ($msg & "!!!")
			StripText $msg " !!!"
			StripText $msg "!!!"
			SetVar $ct ($ct + 1)
		End
		SetVar $msg ($msg &  "[--]*")
		Send $msg
		SetVar $sendcount ($sendcount + 1)
		SetDelayTrigger paceit :PACESEND 60
		Pause
:PACESEND
	End
	SetVar $x ($x + 1)
End
Send "SENDMAP Transmission Complete! " & $sendcount & " sent.**"
WaitOn "Sub-space comm-link terminated"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOSENDMAP
:ABORTSENDMAP
KillAllTriggers
Send "**'!!! SENDER ABORTED !!!*"
WaitOn "Message sent on sub-space channel"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOSENDMAP
:NOSENDMAP
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $reset TRUE
Return
# GETMAP 
:INTCOM_GETMAP
KillAllTriggers
Gosub :Z_Lib~COMMSON
SetTextLineTrigger regnow :REGNOW "All receivers register now..."
SetTextTrigger noreg :NOREG "NO RECEIVERS ! Exiting..."
SetDelayTrigger regnosender :NOREG 60000
Send "'Waiting to register for GETMAP...*"
Pause
:NOREG
KillAllTriggers
Send "'NO SENDER! Exiting...*"
Goto :NOGETMAP
:REGNOW
KillAllTriggers
SetVar $mapfilename (GAMENAME & "_warpspec.txt")
FileExists $fileexists $mapfilename
If ($fileexists = TRUE)
	Delete $mapfilename
End
SetVar $sectorcount 0
SetArray $maparray SECTORS
SetTextLineTrigger gotaline :GOTMAPLINE "[--]"
SetTextLineTrigger gotmap :GETMAPDONE "SENDMAP Transmission Complete!"
SetTextTrigger abortmap :ABORTMAP "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETMAP #8
SetDelayTrigger getmapnotdone :GETMAPNOTDONE 60000
Send "'Ready to receive warpspec!*"
Pause
:ABORTMAP
KillALLTriggers
Echo "***" & $boldred & "SENDER ABORTED! Received warp data for " & $sectorcount & " sectors. Exiting.***"
Goto :NOGETMAP
:GOTMAPLINE
KillAllTriggers
SetVar $cline CURRENTLINE
GetText $cline $specline "[++] " "[--]"
SetVar $sectorcount ($sectorcount + 1)
SetVar $maparray[$sectorcount] $specline
SetVar $alive ($alive + 1)
If ($alive > 500)
	SetVar $alive 0
	Send #27
End
SetTextLineTrigger gotaline :GOTMAPLINE "[--]"
SetTextLineTrigger gotmap :GETMAPDONE "SENDMAP Transmission Complete!"
SetTextTrigger abortmap :ABORTMAP "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETMAP #8
SetDelayTrigger getmapnotdone :GETMAPNOTDONE 60000
Pause
:ABORTGETMAP
Echo "***" & $boldred & "USER ABORTED! Received warp data for " & $sectorcount & " sectors. Exiting.***"
Goto :NOGETMAP
:GETMAPNOTDONE
KillAllTriggers
Send "'GETMAP TIMED OUT! Received warp data for " & $sectorcount & " sectors. Exiting.*"
Goto :NOGETMAP
:GETMAPDONE
KillAllTriggers
Send "'WRITING warpspec file...*"
SetVar $x 1
While ($x <= SECTORS)
	Write $mapfilename $maparray[$x]
	SetVar $x ($x + 1)
	If ($x > $sectorcount)
		SetVar $x (SECTORS + 1)
	End
End
Send "'GETMAP Complete! Received warp data for " & $sectorcount & " sectors.*"
Echo "***" & $blinkon & $boldwhite & "File created in the TWX Root: " & $mapfilename & "." & $blinkoff & "***"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOGETMAP
:NOGETMAP
#Send #145
#WaitOn #145 & #8
#Gosub :Z_Lib~COMMSON
SetArray $maparray 0
SetVar $reset TRUE
Return
# ALIENS 
:INTCOM_ALIENS
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " Preparing ALIEN SPACE SECTOR REPORT...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $x 11
SetVar $file (GAMENAME & "_ALIENS.txt")
Delete $file 
SetVar $ssmsg ($dashedline & "Z-Bot ALIEN SPACE SECTOR REPORT*" & $dashedline)
SetVar $count 0
While ($x <= SECTORS)
	SetVar $temp SECTOR.CONSTELLATION[$x]
	GetWordPos $temp $pos "pace"
	If ($pos > 0)
		GetWordPos $temp $pos "ncharted"
		If ($pos = 0)
			SetVar $count ($count + 1)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 6
			SetVar $Z_Strings~unpadded $x
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $aliensector $Z_Strings~padded
			If (SECTOR.PLANETCOUNT[$x] > 0)
				SetVar $temp ("-PLANET- " & $temp)
			Else
				SetVar $temp ("-------- " & $temp)
			End
			SetVar $write $aliensector & $temp
			Write $file $write
			SetVar $ssmsg ($ssmsg & $aliensector & $temp & "*")
		End
	End
	SetVar $x ($x + 1)
End
If ($count <> "0")
	SetVar $ssmsg ($ssmsg & $dashedline & "List file created in TWX Root: " & $file & " - " & $count & " entries.*")
Else
	SetVar $ssmsg ($ssmsg & "No entries found.*" & $dashedline)
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# PFIGS 
:INTCOM_PFIGS
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetVar $changeto "p"
Gosub :FIGOWNER
Return
# CFIGS 
:INTCOM_CFIGS
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetVar $changeto "c"
Gosub :FIGOWNER
Return
# TEAM 
:INTCOM_TEAM
LowerCase $PARM1
If ($PARM1 = "") or ($PARM1 = "0")
	If ($z_team = "") or ($z_team = "0")
		SetVar $Z_Lib~message $scripttitle & " - Team currently NOT set.*"
	Else
		SetVar $Z_Lib~message $scripttitle & " - Team currently set to: " & $z_team & "*"
	End
ElseIf ($PARM1 = "none")
	SetVar $z_team "0"
	SaveVar $z_team
	SetVar $Z_Lib~message $scripttitle & " - Team cleared.*"
Else
	SetVar $z_team $PARM1
	SaveVar $z_team
	SetVar $Z_Lib~message $scripttitle & " - Team now set to: " & $z_team & "*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# SECTOR 
:INTCOM_SECTOR
LowerCase $user_command_line
LowerCase $PARM1
GetWordPos $user_command_line $pos "ss"
If ($pos <> "0")
	SetVar $messagemode "R"
End
GetWordPos $user_command_line $pos "fed"
If ($pos <> "0")
	SetVar $messagemode "F"
End
Send #145
WaitFor #145 & #8
If ($PARM1 = "d")
	SetVar $PARM1 STARDOCK
ElseIf ($PARM1 = "a")
	SetVar $PARM1 ALPHACENTAURI
ElseIf ($PARM1 = "r")
	SetVar $PARM1 RYLOS
ElseIf ($PARM1 = "b")
	SetVar $PARM1 $z_base
ElseIf ($PARM1 = "s")
	SetVar $PARM1 $z_safesector
End
If ($PARM1 = "0") or ($PARM1 = "") or ($PARM1 = "ss") or ($PARM1 = "fed")
	SetVar $PARM1 CURRENTSECTOR
End
IsNumber $isnum $PARM1 
If ($isnum <> TRUE)
	Goto :NOSECTOR
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	Goto :NOSECTOR
End
GetWord CURRENTLINE $word 1
If ($word = "Command")
	Send "*"
ElseIf ($word = "Citadel")
	Send "s"
End
SetVar $temp SECTOR.CONSTELLATION[$PARM1]
StripText $temp #27 & "[34;1m"
GetSectorParameter $PARM1 "MSLSEC" $isamsl
If ($isamsl = TRUE)
	SetVar $isamsld "- MSL"
Else
	SetVar $isamsld ""
End
SetVar $ssmsg ($dashedline & "Z-Bot SECTOR REPORT for SECTOR: " & $PARM1 & $isamsld & " - " & $temp & "*" & $dashedline)
SetVar $ssmsg ($ssmsg & "Last Updated  : " & SECTOR.UPDATED[$PARM1] & "*" & $dashedline)
If (SECTOR.ANOMOLY[$PARM1] = TRUE)
	SetVar $temp "YES"
Else
	SetVar $temp "NO"
End
SetVar $Z_Strings~number SECTOR.DENSITY[$PARM1]
Gosub :Z_Strings~COMMA
SetVar $ssmsg ($ssmsg & "Density Scan  : " & $Z_Strings~commas & "   Navhaz : " & SECTOR.NAVHAZ[$PARM1] & "%   Anomaly : " & $temp & "*" & $dashedline)
If (SECTOR.BEACON[$PARM1] <> "") and (SECTOR.BEACON[$PARM1] <> "0")
	SetVar $ssmsg ($ssmsg & "Beacon        : " & SECTOR.BEACON[$PARM1] & "*" & $dashedline)
End
If (PORT.EXISTS[$PARM1] = TRUE)
	If (PORT.CLASS[$PARM1] = "0")
		SetVar $ssmsg ($ssmsg & "Port          : " & PORT.NAME[$PARM1] & "*" & $dashedline)
	ElseIf (PORT.CLASS[$PARM1] = "9")
		SetVar $ssmsg ($ssmsg & "Port          : STARDOCK*" & $dashedline)
	Else
		SetVar $ssmsg ($ssmsg & "Port          : ")
		If (PORT.BUYFUEL[$PARM1] = TRUE)
			SetVar $ssmsg ($ssmsg & "B")
		Else
			SetVar $ssmsg ($ssmsg & "S")
		End
		If (PORT.BUYORG[$PARM1] = TRUE)
			SetVar $ssmsg ($ssmsg & "B")
		Else
			SetVar $ssmsg ($ssmsg & "S")
		End
		If (PORT.BUYEQUIP[$PARM1] = TRUE)
			SetVar $ssmsg ($ssmsg & "B")
		Else
			SetVar $ssmsg ($ssmsg & "S")
		End
		SetVar $ssmsg ($ssmsg & "*" & $dashedline)
	End
End
If (SECTOR.PLANETCOUNT[$PARM1] > 0)
	SetVar $x 1
	While ($x <= SECTOR.PLANETCOUNT[$PARM1])
		If ($x = 1)
			SetVar $ssmsg ($ssmsg & "Planets       : " & SECTOR.PLANETS[$PARM1][$x] & "*")
		Else
			SetVar $ssmsg ($ssmsg & "              : " & SECTOR.PLANETS[$PARM1][$x] & "*")
		End
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
End
If (SECTOR.TRADERCOUNT[$PARM1] > 0)
	SetVar $x 1
	While ($x <= SECTOR.TRADERCOUNT[$PARM1])
		If ($x = 1)
			SetVar $ssmsg ($ssmsg & "Traders       : " & SECTOR.TRADERS[$PARM1][$x] & "*")
		Else
			SetVar $ssmsg ($ssmsg & "              : " & SECTOR.TRADERS[$PARM1][$x] & "*")
		End
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
End
If (SECTOR.SHIPCOUNT[$PARM1] > 0)
	SetVar $x 1
	While ($x <= SECTOR.SHIPCOUNT[$PARM1])
		If ($x = 1)
			SetVar $ssmsg ($ssmsg & "Ships         : " & SECTOR.SHIPS[$PARM1][$x] & "*")
		Else
			SetVar $ssmsg ($ssmsg & "              : " & SECTOR.SHIPS[$PARM1][$x] & "*")
		End
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & $dashedline)
End
SetVar $flm FALSE
If (SECTOR.FIGS.QUANTITY[$PARM1] > 0)
	SetVar $flm TRUE
	SetVar $Z_Strings~number SECTOR.FIGS.QUANTITY[$PARM1]
	Gosub :Z_Strings~COMMA
	SetVar $ssmsg ($ssmsg & "Fighters      : " & $Z_Strings~commas & " " & SECTOR.FIGS.TYPE[$PARM1] & " " & SECTOR.FIGS.OWNER[$PARM1] & "*")
End
If (SECTOR.MINES.QUANTITY[$PARM1] > 0)
	SetVar $flm TRUE
	SetVar $ssmsg ($ssmsg & "Armid Mines   : " & SECTOR.MINES.QUANTITY[$PARM1] & " " & SECTOR.MINES.OWNER[$PARM1] & "*")
End
If (SECTOR.LIMPETS.QUANTITY[$PARM1] > 0)
	SetVar $flm TRUE
	SetVar $ssmsg ($ssmsg & "Armid Mines   : " & SECTOR.LIMPETS.QUANTITY[$PARM1] & " " & SECTOR.LIMPETS.OWNER[$PARM1] & "*")
End
If ($flm = TRUE)
	SetVar $ssmsg ($ssmsg & $dashedline)
End
If (SECTOR.WARPCOUNT[$PARM1] > 0)
	SetVar $x 1
	SetVar $ssmsg ($ssmsg & "Warps lead to :")
	While ($x <= SECTOR.WARPCOUNT[$PARM1])
		If ($x <> 1)
			SetVar $ssmsg ($ssmsg & ",")
		End
		SetVar $ssmsg ($ssmsg & " " & SECTOR.WARPS[$PARM1][$x])
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & "*" & $dashedline)
End
If (SECTOR.BACKDOORCOUNT[$PARM1] > 0)
	SetVar $x 1
	SetVar $ssmsg ($ssmsg & "Backdoors     :")
	While ($x <= SECTOR.BACKDOORCOUNT[$PARM1])
		If ($x <> 1)
			SetVar $ssmsg ($ssmsg & ",")
		End
		SetVar $ssmsg ($ssmsg & " " & SECTOR.BACKDOORS[$PARM1][$x])
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & "*" & $dashedline)
End
ListSectorParameters $PARM1 $sectorparms
SetVar $x 1
While ($x <= $sectorparms)
	GetSectorParameter $PARM1 $sectorparms[$x] $parameter
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 10
	SetVar $Z_Strings~unpadded $sectorparms[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	If ($x = 1)
		SetVar $ssmsg ($ssmsg & "SectParameters: " & $Z_Strings~padded & " : " & $parameter & "*")
	Else
		SetVar $ssmsg ($ssmsg & "              : " & $Z_Strings~padded & " : " & $parameter & "*")
	End
	SetVar $x ($x + 1)
End
If ($sectorparms > 0)
	SetVar $ssmsg ($ssmsg & $dashedline)
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
:NOSECTOR
Return
# SETPARM 
:INTCOM_SETPARM
If ($PARM1 <> "0") and ($PARM1 <> "")
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 >= 1) and ($PARM1 <= SECTORS)
			If ($PARM2 <> "0") and ($PARM2 <> "")
				UpperCase $PARM2
				SetSectorParameter $PARM1 $PARM2 $PARM3
				SetVar $Z_Lib~message "Sector Parameter " & $PARM2 & " for sector " & $PARM1 & " set to [ " & $PARM3 & " ].*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
			End
		End
	End
End
Return
# CLEARPARM 
:INTCOM_CLEARPARM
If ($PARM1 <> "0") and ($PARM1 <> "")
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 >= 1) and ($PARM1 <= SECTORS)
			If ($PARM2 <> "0") and ($PARM2 <> "")
				UpperCase $PARM2
				SetSectorParameter $PARM1 $PARM2 ""
				SetVar $Z_Lib~message "Sector Parameter " & $PARM2 & " for sector " & $PARM1 & " CLEARED !*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
			End
		End
	End
End
Return
# LISTPARM 
:INTCOM_LISTPARM
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $PARM1 CURRENTSECTOR
End
IsNumber $isnum $PARM1
If ($isnum = TRUE)
	If ($PARM1 >= 1) and ($PARM1 <= SECTORS)
		ListSectorParameters $PARM1 $sectorparameters
		If ($sectorparameters < 1)
			SetVar $Z_Lib~message $scripttitle & " - No Sector Parameters for sector " & $PARM1 & "*"
		Else
			SetVar $Z_Lib~message $dashedline & $scripttitle & " - Sector Parameters for sector " & $PARM1 & ".*"
			SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
			SetVar $x 1
			While ($x <= $sectorparameters)
				GetSectorParameter $PARM1 $sectorparameters[$x] $parm
				SetVar $Z_Lib~message ($Z_Lib~message & $sectorparameters[$x] & ": " & $parm & "*")
				SetVar $x ($x + 1)
			End
			SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
		End
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
Return
# COUNTBUSTS 
:INTCOM_COUNTBUSTS
KillAllTriggers
SetVar $x 1
SetVar $linect 0
SetVar $bustcount 0
SetVar $lastrobsteal 0
SetVar $ssmsg ""
Delete GAMENAME & "_busts.txt"
Echo "**" & $boldcyan & "Counting busted sectors...**"
While ($x <= SECTORS)
	GetSectorParameter $x "BUSTED" $isbusted
	If ($isbusted = TRUE) 
		SetVar $bustcount ($bustcount + 1)
		SetVar $linect ($linect + 1)
		Write GAMENAME & "_busts.txt" $x
		If ($linect >=10)
			SetVar $ssmsg ($ssmsg & $x & "*")
			SetVar $linect 0
		Else
			SetVar $ssmsg ($ssmsg & $x & " ")
		End
	End
	GetSectorParameter $x "LASTRS" $islastrs
	If ($islastrs = TRUE)
		SetVar $lastrobsteal $x
	End
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~message "BUSTED sector count   : " & $bustcount & "*"
If ($ssmsg <> "") and ($ssmsg <> "0")
	SetVar $Z_Lib~message ($Z_Lib~message & "-*" & $ssmsg)
	If ($linect <> 0)
		SetVar $Z_Lib~message ($Z_Lib~message & "*")
	End
	SetVar $Z_Lib~message ($Z_Lib~message & "-*")
End
If ($lastrobsteal <> "0")
	SetVar $Z_Lib~message ($Z_Lib~message & "Last ROB/STEAL sector : " & $lastrobsteal & "*")
Else
	SetVar $Z_Lib~message ($Z_Lib~message & "Last ROB/STEAL sector : None*")
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($z_usesound = TRUE)
	Sound ding
End
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# FIGGER 
:INTCOM_FIGGER
UpperCase $PARM1
If ($PARM1 = "OFF")
	SetVar $z_figger FALSE
	SetVar $Z_Lib~message $scripttitle & ": FIGGER is OFF.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
ElseIf ($PARM1 = "ON")
	Gosub :GETSTATS
	If ($credits < 100000)
		SetVar $Z_Lib~message $scripttitle & ": I need at least 100,000 credits.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	ElseIf ($figs < 1000)
		SetVar $Z_Lib~message $scripttitle & ": I need at least 1,000 fighters.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	ElseIf ($twarp > 0)
		SetVar $z_figger TRUE
		SetVar $Z_Lib~message $scripttitle & ": FIGGER is ON.*"
		SetVar $Z_Lib~message ($Z_Lib~message & "-*")
		SetVar $Z_Lib~message ($Z_Lib~message & "You can now send   xxxxx=figme!   over subspace to call for figs*")
		SetVar $Z_Lib~message ($Z_Lib~message & "where xxxxx is the sector number you are in when you call.*")
		SetVar $Z_Lib~message ($Z_Lib~message & "Please try to be under a fuel port when you call me..*")
		SetVar $Z_Lib~messageto $sender	
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	Else
		SetVar $Z_Lib~message $scripttitle & ": I need a TRANSWARP drive.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
Return
# SETMATRIX 
:INTCOM_SETMATRIX
If ($PARM1 = "0")
	Goto :NOSETMATRIX
End
SetArray $matrix 0
SetVar $x 1
SetVar $filename GAMENAME & "_MATRIX.txt"
Delete $filename
While ($x <= 12)
	GetWord $user_command_line $word $x
	If ($word <> "0")
		IsNumber $isnum $word
		If ($isnum = TRUE)
			If ($word >= 1) and ($word <= SECTORS)
				SetVar $matrix ($matrix + 1)
				SetVar $matrix[$matrix] $word
				Write $filename $matrix[$matrix]
			End
		End
	Else
		SetVar $x 12
	End
	SetVar $x ($x + 1)
End
Gosub :INTCOM_MATRIX
:NOSETMATRIX
Return
# MATRIX 
:INTCOM_MATRIX
SetVar $filename GAMENAME & "_MATRIX.txt"
FileExists $fileexist $filename
If ($fileexist = FALSE)
	SetVar $Z_Lib~message $scripttitle & ": No MATRIX set. Use SETMATRIX to set up your matrix.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMATRIX
End
ReadToArray $filename $matrix
If ($matrix = "0")
	SetVar $Z_Lib~message $scripttitle & ": No MATRIX set. Use SETMATRIX to set up your matrix.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMATRIX
End
SetVar $x 1
SetVar $ssmsg $dashedline & $scripttitle & " - RED CASHING MATRIX*" & $dashedline
While ($x <= $matrix)
	IsNumber $isnum $matrix[$x]
	If ($isnum = TRUE)
		If ($matrix[$x] >= 1) and ($matrix[$x] <= SECTORS)
			GetSectorParameter $matrix[$x] "BUSTED" $matisbusted
			GetSectorParameter $matrix[$x] "LASTRS" $matislastrs
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded $matrix[$x]
			SetVar $Z_Strings~rpad FALSE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ":-")
			If ($matisbusted = TRUE)
				SetVar $ssmsg ($ssmsg & #42 & "BUSTED" & #42 & "-")
			Else
				SetVar $ssmsg ($ssmsg & "---------")
			End
			If ($matislastrs = TRUE)
				SetVar $ssmsg ($ssmsg & "-=> LAST ROB/STEAL ")
			End
			SetVar $ssmsg ($ssmsg & "*")
		End
	End
	SetVar $x ($x + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
:NOMATRIX
Return
# BUSY 
:INTCOM_BUSY
SetDelayTrigger busychk :BUSY 1000
Pause
:BUSY
SetVar $line CURRENTLINE
GetWord $line $prmpt 1
SetVar $busyprmpt $prmpt
If ($prmpt = $busyprmpt)
	SetDelayTrigger busychk :BUSYCHK5 1000
	SetTextLineTrigger busychk2 :BUSYCHK5 ""
	Pause
:BUSYCHK5
	KillTrigger busychk
	KillTrigger busychk2
	SetVar $line CURRENTLINE
	GetWord $line $prmpt 1
	If ($prmpt = $busyprmpt)
		SetDelayTrigger busychk :BUSYCHK4 500
		SetTextLineTrigger busychk2 :BUSYCHK4 ""
		Pause
:BUSYCHK4
		KillTrigger busychk
		KillTrigger busychk2
		SetVar $line CURRENTLINE
		GetWord $line $prmpt 1
		If ($prmpt = $busyprmpt)
			SetDelayTrigger busychk :BUSYCHK3 300
			SetTextLineTrigger busychk2 :BUSYCHK3 ""
			Pause
:BUSYCHK3
			KillTrigger busychk
			KillTrigger busychk2
			SetVar $line CURRENTLINE
			GetWord $line $prmpt 1
			If ($prmpt = $busyprmpt)
				SetDelayTrigger busychk :BUSYCHK2 100
				SetTextLineTrigger busychk2 :BUSYCHK2 ""
				Pause
:BUSYCHK2
				KillTrigger busychk
				KillTrigger busychk2
				SetVar $line CURRENTLINE
				GetWord $line $prmpt 1
				If ($prmpt = $busyprmpt)
					SetDelayTrigger busychk :BUSYCHK1 50
					SetTextLineTrigger busychk2 :BUSYCHK1 ""
					Pause
:BUSYCHK1
					KillTrigger busychk
					KillTrigger busychk2
					SetVar $line CURRENTLINE
					GetWord $line $prmpt 1
					If ($prmpt = $busyprmpt)
						SetDelayTrigger busychk :BUSYCHK 10
						SetTextLineTrigger busychk2 :BUSYCHK ""
						Pause
:BUSYCHK
						KillTrigger busychk
						KillTrigger busychk2
						SetVar $line CURRENTLINE
						GetWord $line $prmpt 1
						If ($prmpt = $busyprmpt)
							SetVar $Z_Lib~message $scripttitle & " - READY to accept commands at the '" & $busyprmpt & "' prompt.*"
							SetVar $Z_Lib~messageto $sender
							SetVar $Z_Lib~messagemode $messagemode
							Gosub :MSGBRIDGE
						End
					End
				End
			End
		End
	End
End
KillTrigger busychk
KillTrigger busychk2
Return
# SENDLIST 
:INTCOM_SENDLIST
KillAllTriggers
Gosub :Z_Lib~COMMSON
SetVar $receivers 0
SetTextTrigger ssok :SLOK "Comm-link open on sub-space band"
SetDelayTrigger ssnotok :SLNOTOK 5000
Send "'*"
Pause
:SLNOTOK
KillAllTriggers
Echo "***" & $boldred & "Cannot open SS channel!***"
Send "**"
Goto :NOSENDLIST
:SLOK
KillAllTriggers
SetTextTrigger readytorec :READYTORECL "Ready to receive jump list!"
SetDelayTrigger recregdone :RECREGDONEL 10000
Send "Ready to send " & $jumplist & " sector jumplist.*"
Send "All receivers register now...**"
Pause
:READYTORECL
SetVar $receivers ($receivers + 1)
SetTextTrigger readytorec :READYTORECL "Ready to receive jump list!"
Pause
:RECREGDONEL
KillAllTriggers
If ($receivers < 1)
	Send "'NO RECEIVERS ! Exiting...*"
	Goto :NOSENDLIST
End
:LISTSENDLOOP
SetVar $x 1
SetVar $sendcount 0
SetTextOutTrigger abortsendlist :ABORTSENDLIST #8
Send "'*"
While ($x <= $jumplist)
	GetWord $jumplist[$x] $temp 1
	If ($temp > 0)
		SetVar $msg "[++]" & $jumplist[$x] & "[--]*"
		Send $msg
		SetVar $sendcount ($sendcount + 1)
		SetDelayTrigger paceit :PACESENDL 70
		Pause
:PACESENDL
	End
	SetVar $x ($x + 1)
End
Send "SENDLIST Transmission Complete! " & $sendcount & " sent.**"
WaitOn "Sub-space comm-link terminated"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOSENDLIST
:ABORTSENDLIST
KillAllTriggers
Send "**'!!! SENDER ABORTED !!!*"
WaitOn "Message sent on sub-space channel"
Goto :NOSENDLIST
:NOSENDLIST
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $reset TRUE
Return
# GETLIST 
:INTCOM_GETLIST
KillAllTriggers
Gosub :Z_Lib~COMMSON
SetTextLineTrigger regnow :REGNOWL "All receivers register now..."
SetTextTrigger noreg :NOREGL "NO RECEIVERS ! Exiting..."
SetDelayTrigger regnosender :NOREGL 60000
Send "'Waiting to register for GETLIST...*"
Pause
:NOREGL
KillAllTriggers
Send "'NO SENDER! Exiting...*"
Goto :NOGETLIST
:REGNOWL
KillAllTriggers
SetVar $jumplistfilename (GAMENAME & "_JUMPLIST.txt")
FileExists $fileexists $jumplistfilename
If ($fileexists = TRUE)
	SetVar $backedup FALSE
	SetVar $x 1
	While ($x <= 999) and ($backedup = FALSE)
		SetVar $tempname (GAMENAME & "_JUMPLIST_" & $x & ".txt")
		Fileexists $fileexist2 $tempname
		If ($fileexist2 <> TRUE)
			SetArray $jumplist 0
			ReadToArray $jumplistfilename $jumplist
			SetVar $i 1
			While ($i <= $jumplist)
				Write $tempname $jumplist[$i]
				SetVar $i ($i + 1)
			End
			SetVar $backedup TRUE
			SetVar $x 999
		End
		SetVar $x ($x + 1)
	End
	Delete $jumplistfilename
	SetVar $jumplistptr 0
	SetVar $z_nextsector 0
	SaveVar $z_nextsector
End
SetArray $jumplist 0
SetVar $sectorcount 0
SetTextLineTrigger gotaline :GOTLISTLINE "[--]"
SetTextLineTrigger gotmap :GETLISTDONE "SENDLIST Transmission Complete!"
SetTextTrigger abortmap :ABORTLIST "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETLIST #8
SetDelayTrigger getmapnotdone :GETLISTNOTDONE 60000
Send "'Ready to receive jump list!*"
Pause
:ABORTLIST
KillALLTriggers
Echo "***" & $boldred & "SENDER ABORTED! Received " & $sectorcount & " sectors. Exiting.***"
Goto :NOGETLIST
:GOTLISTLINE
KillAllTriggers
SetVar $cline CURRENTLINE
GetText $cline $specline "[++]" "[--]"
Write $jumplistfilename $specline
SetVar $sectorcount ($sectorcount + 1)
SetVar $jumplist[$sectorcount] $specline
SetVar $alive ($alive + 1)
If ($alive > 500)
	SetVar $alive 0
	Send #27
End
SetTextLineTrigger gotaline :GOTLISTLINE "[--]"
SetTextLineTrigger gotmap :GETLISTDONE "SENDLIST Transmission Complete!"
SetTextTrigger abortmap :ABORTLIST "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETLIST #8
SetDelayTrigger getmapnotdone :GETLISTNOTDONE 60000
Pause
:ABORTGETLIST
Echo "***" & $boldred & "USER ABORTED! Received " & $sectorcount & " sectors. Exiting.***"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOGETLIST
:GETLISTNOTDONE
KillAllTriggers
Send "'GETLIST TIMED OUT! Received " & $sectorcount & " sectors. Exiting.*"
Goto :NOGETLIST
:GETLISTDONE
KillAllTriggers
Send "'GETLIST Complete! Received " & $sectorcount & " sectors.*"
Echo "***" & $blinkon & $boldwhite & "File created in the TWX Root: " & $jumplistfilename & "." & $blinkoff & "***"
If ($jumplist > 0)
	SetVar $jumplistptr 1
	GetWord $jumplist[1] $z_nextsector 1
	SaveVar $z_nextsector
Else
	SetVar $jumplistptr 0
	SetVar $z_nextsector 0
	SaveVar $z_nextsector
End
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOGETLIST
:NOGETLIST
SetVar $reset TRUE
Return
# SETNEXT 
:INTCOM_SETNEXT
If ($PARM1 <> "0")
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 0) and ($PARM1 <= SECTORS)
			SetVar $x 1
			While ($x <= $jumplist)
				GetWord $jumplist[$x] $temp 1
				If ($temp = $PARM1)
					SetVar $z_nextsector $PARM1
					SaveVar $z_nextsector
					SetVar $jumplistptr $x
					SetVar $x $jumplist
				End
				SetVar $x ($x + 1)
			End
		End
	End
Else
	If ($jumplist > 0)
		GetWord $jumplist[1] $z_nextsector 1
		SaveVar $z_nextsector
		SetVar $jumplistptr 1
	Else
		SetVar $z_nextsector 0
		SaveVar $z_nextsector
		SetVar $jumplistptr 0
	End
End
	SetVar $Z_Lib~message $scripttitle & " - Next Jump Sector set to " & $z_nextsector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Return
# HOOK 
:INTCOM_HOOK
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOHOOKTOW
End
SetVar $htnumfigs 0
SetVar $htdropped FALSE
If ($PARM2 <> "") and ($PARM2 <> "0")
	SetVar $PARM1 ($PARM1 & " " & $PARM2)
	If ($PARM3 <> "") and ($PARM3 <> "0")
		SetVar $PARM1 ($PARM1 & " " & $PARM3)
		If ($PARM4 <> "") and ($PARM4 <> "0")
			SetVar $PARM1 ($PARM1 & " " & $PARM4)
		End
	End
End
If ($PARM1 = "") or ($PARM1 = "0")
	SetTextTrigger htnotrader :HTNOTRADER2 "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger htexchange :HTEXCHANGEWITH "Exchange with "
	Send "tf"
	Pause
:HTEXCHANGEWITH
	KillAllTriggers
	GetText CURRENTLINE $PARM1 "Exchange with " " (Y/N)"
	LowerCase $PARM1
	SetTextTrigger htparmok :HTPARMOK "Corporate command [TL="
	SetTextTrigger htexagain :HTEXAGAIN "Exchange with "
	Send "n"
	Pause
:HTEXAGAIN
	KillAllTriggers
	SetTextTrigger htparmok :HTPARMOK "Corporate command [TL="
	SetTextTrigger htexagain :HTEXAGAIN "Exchange with "
	Send "n"
	Pause
:HTPARMOK
	KillAllTriggers
	Send "q"
End
LowerCase $PARM1
:STARTHOOK
SetTextTrigger htfighters :HTFIGHTERS "Get rid of the fighters before you try to tow."
SetTextTrigger htshutoff :HTSHUTOFF "You shut off your Tractor Beam."
SetTextTrigger htlock :HTLOCK "You lock your Tractor Beam on"
SetTextTrigger htnotrader :HTNOTRADER "That Trader is not in this sector!"
SetTextTrigger htunknowntrader :HTUNKNOWNTRADER "Unknown Trader!"
SetTextTrigger htdoyoumean :HTDOYOUMEAN "Do you mean"
Send "wy" & $PARM1 & "*"
Pause
:HTSHUTOFF
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " - Hook released on previous tow..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHOOKTOW
:HTFIGHTERS
KillAllTriggers
If ($htdropped = TRUE)
	Gosub :INTCOM_TOPOFF
	SetVar $Z_Lib~message $scripttitle & " - Too many fighters, Hook failed..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHOOKTOW
End
SetVar $htdropped TRUE
Gosub :INTCOM_DROPALL
SetTextTrigger htnotrader :HTNOTRADER2 "Your Associate must be in the same sector to conduct transfers!"
SetTextTrigger htexchange :HTEXCHANGE "Exchange with "
Send "tf"
Pause
:HTEXCHANGE
KillAllTriggers
GetText CURRENTLINE $word "Exchange with " " (Y/N)"
LowerCase $word
If ($word = $PARM1)
	SetTextTrigger htnumfigs :HTNUMFIGS " fighters, and "

	Send "yf"
	Pause
:HTNUMFIGS
	KillAllTriggers
	GetText CURRENTLINE $htnumfigs " has " "."
	Send $htnumfigs & "*q"
	Goto :STARTHOOK
Else
	SetTextTrigger htnotrader :HTNOTRADER2 "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger htexchange :HTEXCHANGE "Exchange with "
	SetTextTrigger htnotrader2 :HTNOTRADER2 "Corporate command [TL="
	Send "n"
	Pause
End
:HTNOTRADER2
KillAllTriggers
Send "q"
Gosub :INTCOM_TOPOFF
Goto :HTNOTRADER
:HTLOCK
KillAllTriggers
If ($htnumfigs > 0)
	SetTextTrigger htnotrader :HTNOTRADER3 "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger htexchange :HTEXCHANGE3 "Exchange with "
	Send "tf"
	Pause
:HTEXCHANGE3
	KillAllTriggers
	GetText CURRENTLINE $word "Exchange with " " (Y/N)"
	LowerCase $word
	If ($word = $PARM1)
		SetTextTrigger htnumfigs :HTNUMFIGS3 " fighters, and "

		Send "yt"
		Pause
:HTNUMFIGS3
		KillAllTriggers
		GetText CURRENTLINE $htnumfigs "You have " " fighters,"
		Send $htnumfigs & "*q"
		Goto :HTDONE
	Else
		SetTextTrigger htnotrader :HTNOTRADER3 "Your Associate must be in the same sector to conduct transfers!"
		SetTextTrigger htexchange :HTEXCHANGE3 "Exchange with "
		SetTextTrigger htnotrader2 :HTNOTRADER3 "Corporate command [TL="
		Send "n"
		Pause
	End
:HTNOTRADER3
	KillAllTriggers
	Send "q"
	Gosub :INTCOM_TOPOFF
	Goto :HTNOTRADER
:HTDONE
End
Gosub :INTCOM_TOPOFF
SetVar $Z_Lib~message $scripttitle & " - Successfully hooked a tow on [" & $PARM1 & "].*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHOOKTOW
:HTNOTRADER
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " - Trader " & $PARM1 & " NOT in sector...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHOOKTOW
:HTUNKNOWNTRADER
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " - Unknown Trader " & $PARM1 & "*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHOOKTOW
:HTDOYOUMEAN
Send "y"
Pause
:NOHOOKTOW
KillAllTriggers
SetVar $htdropped FALSE
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# PRETAX 
# UNLOCK 
:INTCOM_PRETAX
:INTCOM_UNLOCK
SetVar $pretax "100001"
SetVar $swap "N"
:TAXTOP
KillAllTriggers
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPRETAX
End                
If (PASSWORD = "")
	ClientMessage "This script REQUIRES you to fill in TWX SetUp DATA"
	Goto :NOPRETAX
End
If ($prompt = "Citadel")
	SetTextTrigger base :TAXBASE "Planet #"
	Send "q*"
	Pause
End
:TAXBASE
KillAllTriggers
GetWord CURRENTLINE $planet 2
StripText $planet "#"
SaveVar $PLANET
Send "c"
WaitOn "Citadel command"
Send "*"
WaitOn "treasury contains"
GetWord CurrentLine $citcash 4
StripText $citcash ","
StripText $citcash ","
StripText $citcash ","
SetTextTrigger check :TAXCHECK #179 & "Figs"
Send "/"
Pause
:TAXCHECK
KillAllTriggers
GetText CurrentLine $cash "Creds " #179 & "Figs"
StripText $cash ","
StripText $cash ","
StripText $cash ","
If ($cash = "100001")
	Goto :TAXEND
End
If ($cash > "100001")
	Subtract $cash $pretax
	Send "t t "& $cash &"*"
	Goto :TAXEND
End
If ($citcash < "100001")
	Subtract $pretax  $cash
	If ($citcash >= $pretax)
		Send "t f "& $pretax  &"*"
		Goto :TAXEND
	Else
		Goto :TAXEND
	End
	Pause
End
If ($cash < $pretax) and ($citcash >= "100001")
	Subtract $pretax  $cash
	Send "t f "& $pretax  &"*"
	Goto :TAXEND
End
:TAXEND
KillAllTriggers
SetTextTrigger retire2 :TAXRETIRE2 "You shut down all ship systems"
SetTextTrigger retire1 :TAXRETIRE1 "allow teammates to trade ships"
Send "r y"
Pause
:TAXRETIRE1
KillTrigger retire2
SetVar $swap "Y"
Send "y"
:TAXRETIRE2
KillAllTriggers
SetTextTrigger Entry1 :TAXENTRY1 "Game Server"
SetTextLineTrigger Entry0 :TAXENTRY1 "Server registered"
SetTextTrigger Entry2 :TAXENTRY2 "Enter your choice:"
Pause
:TAXENTRY1
KillTrigger Entry1
KillTrigger Entry0
If ($shutdowntime = "NOW")
	KillAllTriggers
	Goto :FINISH
Else
	Send GAME
	WaitOn "module now loading."
	Send "***"
End
Pause
:TAXENTRY2
KillAllTriggers
If ($shutdowntime = "NOW")
	KillAllTriggers
	Goto :FINISH
Else
	Send " t * n *"& PASSWORD &"* * * cs* "
End
:TAXDONE
KillAllTriggers
Send #145
WaitOn #145 & #8
If ($swap = "Y")
	SetVar $Z_Lib~message $scripttitle & " - Pretaxed & UNLOCKED !*"
Else
	SetVar $Z_Lib~message $scripttitle & " - Pretaxed but NOT Unlocked !*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:TAXDONE2
Send "/"
:NOPRETAX
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
KillTrigger Entry1
KillTrigger Entry0
KillTrigger Entry2
Return
# DAMAGE 
:INTCOM_DAMAGE
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "ON")
	SetVar $damage TRUE
	SetVar $Z_Lib~message $scripttitle & " - DAMAGE RECORDING ON !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
ElseIf ($PARM1 = "OFF")
	SetVar $damage FALSE
	SetVar $Z_Lib~message $scripttitle & " - DAMAGE RECORDING OFF !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	If ($damage = TRUE)
		If ($damageptr > 0)
			SetVar $x 1
			SetVar $Z_Lib~message ""
			While ($x <= $damageptr)
				SetVar $Z_Lib~message ($Z_Lib~message & $scripttitle & ": DAMAGE REPORT FOR SECTOR " & $damages[$x] & " battle points.*")
				SetVar $x ($x + 1)
			End
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			SetVar $damageptr 0
			SetArray $damages 0
		Else
			SetVar $Z_Lib~message $scripttitle & ": DAMAGE REPORT: Nothing to report.*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
		End
	Else
		SetVar $Z_Lib~message $scripttitle & ": DAMAGE RECORDING is currently OFF.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
:NODAMAGE
SetVar $reset TRUE
Return
# MCIC 
:INTCOM_MCIC
KillAllTriggers
Gosub :GETSTATS
SetVar $minmcic 48
If ($PARM1 <> 0)
	StripText $PARM1 "-"
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $minmcic $PARM1
	End
End
SetVar $x 1
SetVar $mciccount 0
SetVar $linect 0
SetVar $bustcount 0
SetVar $lastrobsteal 0
SetVar $ssmsg ""
Echo "**" & $boldcyan & "Checking port MCICs...**"
Delete GAMENAME & "_MCICS-last.txt"
Fileexists $fileexist GAMENAME & "_MCICS.txt"
If ($fileexist = TRUE)
Rename GAMENAME & "_MCICS.txt" GAMENAME & "_MCICS-last.txt"
End
While ($x <= SECTORS)
	GetSectorParameter $x "MCIC" $mcic
	If ($mcic <> "0") and ($mcic <> "")
		SetVar $temp $mcic
		StripText $temp "-"
		If ($temp >= $minmcic)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded $x
			SetVar $Z_Strings~rpad FALSE
			Gosub :Z_Strings~PAD
			Write GAMENAME & "_MCICS.txt" $Z_Strings~padded & " = " & $mcic
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & ": MCIC = " & $mcic & " ")
			GetSectorParameter $x "FIGSEC" $isfigged
			GetDistance $hops $current_sector $x
			If (PORT.BUYFUEL[$x] = TRUE)
				SetVar $porttype "(B"
			Else
				SetVar $porttype "(S"
			End
			If (PORT.BUYORG[$x] = TRUE)
				SetVar $porttype ($porttype & "B")
			Else
				SetVar $porttype ($porttype & "S")
			End
			If (PORT.BUYEQUIP[$x] = TRUE)
				SetVar $porttype ($porttype & "B)")
			Else
				SetVar $porttype ($porttype & "S)")
			End
			SetVar $warps SECTOR.WARPCOUNT[$x]
			SetVar $ssmsg ($ssmsg & $porttype & " - ")
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 2
			SetVar $Z_Strings~unpadded $hops
			SetVar $Z_Strings~rpad FALSE
			Gosub :Z_Strings~PAD
			SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " hops, ")
			SetVar $ssmsg ($ssmsg & $warps & " warps")
			If ($isfigged = TRUE)
				SetVar $ssmsg ($ssmsg & ", Figged")
			End
			SetVar $ssmsg ($ssmsg & "*")
			SetVar $mciccount ($mciccount + 1)
		End
	End
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~message $dashedline & $scripttitle & " - MCIC Port Report <= -" & $minmcic & "*" & $dashedline
If ($ssmsg <> "") and ($ssmsg <> "0")
	SetVar $Z_Lib~message ($Z_Lib~message & $ssmsg)
	SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
	SetVar $Z_Lib~message ($Z_Lib~message & "This list was written to " & GAMENAME & "_MCICS.txt in the TWX root.*")
Else
	SetVar $Z_Lib~message ($Z_Lib~message & "No Ports to report.*")
	SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# BOT 
:INTCOM_BOT
UpperCase $PARM1
If ($PARM1 = "OFF")
	KillAllTriggers
	SetVar $bot FALSE
	Gosub :Z_Lib~COMMSON
	SetTextOutTrigger t13 :BOTON2 $z_botonoffkey
	SetTextLineTrigger boton :BOTON2 $z_botname & " bot on"
	Echo "**" & $blinkon & $boldred & "<<<=-[BOT IS OFF]-=>>>**" & $blinkoff
	SetVar $Z_Lib~message "Bot is OFF!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Pause
:BOTON2
	KillAllTriggers
	SetVar $bot TRUE
	SetVar $reset TRUE
	Echo "**" & $blinkon & $boldgreen & "<<<=-[BOT IS ON]-=>>>**" & $blinkoff
	SetVar $Z_Lib~message "Bot is ON!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
Return
# DP 
:INTCOM_DP
KillAllTriggers
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetArray $densityscan SECTORS
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODP
End
Gosub :GETSTATS
If ($photons = "0")
	Goto :DPBAD
End
If ($scanner = "0")
	Goto :DPBAD
End
SetVar $densities 0
If ($PARM1 <> "0")
	IsNumber $isnum $PARM1
	If ($isnum = FALSE)
		Goto :DPBADPARM
	End
	If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
		Goto :DPBADPARM
	End
	SetVar $densities[1][1] $PARM1
	SetVar $densities 1
	If ($PARM2 <> "0")
		IsNumber $isnum $PARM2
		If ($isnum = FALSE)
			Goto :DPBADPARM
		End
		If ($PARM2 < 11) or ($PARM2 > SECTORS) or ($PARM2 = STARDOCK)
			Goto :DPBADPARM
		End
		SetVar $densities[2][1] $PARM2
		SetVar $densities 2
		If ($PARM3 <> "0")
			IsNumber $isnum $PARM3
			If ($isnum = FALSE)
				Goto :DPBADPARM
			End
			If ($PARM3 < 11) or ($PARM3 > SECTORS) or ($PARM3 = STARDOCK)
				Goto :DPBADPARM
			End
			SetVar $densities[3][1] $PARM3
			SetVar $densities 3
			If ($PARM4 <> "0")
				IsNumber $isnum $PARM4
				If ($isnum = FALSE)
					Goto :DPBADPARM
				End
				If ($PARM4 < 11) or ($PARM4 > SECTORS) or ($PARM4 = STARDOCK)
					Goto :DPBADPARM
				End
				SetVar $densities[4][1] $PARM4
				SetVar $densities 4
				If ($PARM5 <> "0")
					IsNumber $isnum $PARM5
					If ($isnum = FALSE)
						Goto :DPBADPARM
					End
					If ($PARM5 < 11) or ($PARM5 > SECTORS) or ($PARM5 = STARDOCK)
						Goto :DPBADPARM
					End
					SetVar $densities[5][1] $PARM5
					SetVar $densities 5
				End
			End
		End
	End
Else
	SetVar $densities SECTOR.WARPCOUNT[CURRENTSECTOR]
	SetVar $x 1
	While ($x <= $densities)
		SetVar $densities[$x][1] SECTOR.WARPS[CURRENTSECTOR][$x]
		SetVar $x ($x + 1)
	End
End
SetVar $x 1
SetVar $dpnogood FALSE
While ($x <= $densities)
	SetVar $dpok FALSE
	SetVar $y 1
	While ($y <= SECTOR.WARPCOUNT[CURRENTSECTOR])
		If ($densities[$x][1] = SECTOR.WARPS[CURRENTSECTOR][$y])
			SetVar $dpok TRUE
		End
		SetVar $y ($y + 1)
	End
	If ($dpok = FALSE)
		SetVar $dpnogood TRUE
		SetVar $x $densities
	End
	SetVar $x ($x + 1)
End
If ($dpnogood = TRUE)
	Goto :DPBADPARM
End
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Send "q q*"
End
Gosub :GETDENSITIES
SetVar $x 1
While ($x <= $densities)
	SetVar $zz $densities[$x][1]
	SetVar $densities[$x][2] $densityscan[$zz]
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~COMMSON
SetVar $keepscanning TRUE
SetTextOutTrigger dpstop :DPSTOP "~"
SetTextOutTrigger dpstop2 :DPSTOP #8
SetTextLineTrigger dpoff :DPOFF ($z_botname & " dp off")
SetVar $Z_Lib~message $scripttitle & ": DENSITY PHOTON ACTIVATED in sector " & CURRENTSECTOR & " !!!*"
SetVar $Z_Lib~message ($Z_Lib~message & "HOT SECTORS ARE:")
SetVar $x 1
While ($x <= $densities)
	SetVar $Z_Lib~message ($Z_Lib~message & " " & $densities[$x][1])
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~message ($Z_Lib~message & "*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $dpdone FALSE
While ($keepscanning = TRUE)
	KillTrigger dppause
	SetDelayTrigger dppause :DPPAUSE 100
	Pause
:DPPAUSE
	KillTrigger dppause
	Gosub :GETDENSITIES
	SetVar $x 1
	SetVar $dpfired FALSE
	While ($x <= $densities)
		SetVar $zz $densities[$x][1]
		If (($densities[$x][2] < $densityscan[$zz]) and ($zz > 10) and ($zz <> STARDOCK))
			Send "c p y " & $zz & "* q"
			SetVar $dpfired TRUE
			If ($prompt = "Citadel")
				Gosub :Z_Lib~RETURNTOPLANET
			End
			SetVar $Z_Lib~message $scripttitle & ": Photon fired from " & CURRENTSECTOR & " to " & $zz & " ::*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			SetVar $x $densities
			SetVar $keepscanning FALSE
		Else
			SetVar $densities[$x][2] $densityscan[$zz]
		End
		SetVar $x ($x + 1)
	End
	Goto :DPLOOP
:DPOFF
	KillTrigger dppause
	SetVar $line CURRENTLINE
	CutText $line $ck 1 1
	CutText $line $sender 3 6
	SetVar $Z_Strings~trimstring $sender
	Gosub :Z_Strings~RTRIM
	SetVar $sender $Z_Strings~trimstring
	If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
		Goto :DPLOOP
	End
	Gosub :CHECKCORPY
	If ($isacorpy = FALSE)
		Goto :DPLOOP
	End
:DPSTOP
	KillAllTriggers
	Echo "**" & $boldred & "DENSITY PHOTON CANCELLED !**"
	SetVar $keepscanning FALSE
:DPLOOP
End
If ($dpfired = TRUE)
	Goto :NODP
End
:DPCANCEL
KillAllTriggers
If ($dpdone <> TRUE)
	Send #145
	WaitOn #145 & #8
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
	SetVar $Z_Lib~message $scripttitle & ": DENSITY PHOTON Cancelled.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $dpdone TRUE
End
Goto :NODP
:DPBAD
SetVar $Z_Lib~message $scripttitle & ": You need a Photon and a Density (or Holo) Scanner.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NODP
:DPBADPARM
SetVar $Z_Lib~message $scripttitle & ": Bad Parameter !!! Use  dp ?  for help with this command.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NODP
:NODP
KillAllTriggers
SetArray $densityscan 0
SetArray $densities 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# ROB 
:INTCOM_ROB
KillAllTriggers
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~message $scripttitle & ": Bad prompt. Citadel or Command prompt please.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOROB
End
Gosub :GETSTATS
If ($experience < "4000")
	SetVar $Z_Lib~message $scripttitle & ": Your experience is too low. Better bust up!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOROB
End
If ($align > "-100")
	SetVar $Z_Lib~message $scripttitle & ": Your alignment needs to be at least -100.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOROB
End
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Send "q q *"
End
Send #145
WaitFor #145 & #8
GetSectorParameter CURRENTSECTOR "BUSTED" $isbusted
If ($isbusted = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": Already BUSTED here !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
	Goto :NOROB
End
LoadVar $lastrobsteal
If ($lastrobsteal = CURRENTSECTOR)
	SetVar $Z_Lib~message $scripttitle & ": Last rob/steal sector !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
	Goto :NOROB
End
SetPrecision 6
SetVar $robmult (($rob_multiplier * 111) / 100)
SetVar $robmax ($experience * $robmult)
Round $robmax 0
SetPrecision 0
SetTextTrigger robuc :ROBUNDERCONSTRUCTION "(Under Construction -"
SetTextTrigger robportok :RETRYROB "] ("
Send "*"
Pause
:ROBUNDERCONSTRUCTION
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
End
KillTrigger robuc
KillTrigger robportok
Goto :NOROB
:RETRYROB
KillTrigger robuc
KillTrigger robportok
SetTextTrigger robamount :ROBAMOUNT "The Trade Journals estimate this port has in excess of"
SetTextTrigger robbusted :ROBBUSTED "Suddenly you're Busted!"
Send "p r * r"
Pause
:ROBAMOUNT
KillTrigger robamount
KillTrigger robbusted
GetText CURRENTLINE $robonhand "of " " creds"
StripText $robonhand ","
SetVar $amttorob "0"
SetVar $robbusted FALSE
IsNumber $isnum $robonhand
If ($isnum = TRUE)
	If ($robonhand > 0)
		If ($robonhand > $robmax)
			SetVar $amttorob $robmax
		Else
			SetVar $amttorob $robonhand
		End
		SetTextTrigger robsuccess :ROBSUCCESS "Success!"
		SetTextTrigger robbusted :ROBBUSTED "Suddenly you're Busted!"
		Send $amttorob & "*"
		Pause
	:ROBSUCCESS
		KillTrigger robsuccess
		KillTrigger robbusted
		SetVar $robbed $amttorob
		SetVar $lastrobsteal CURRENTSECTOR
		SaveVar $lastrobsteal
		Goto :ROBBED
	:ROBBUSTED
		KillTrigger robsuccess
		KillTrigger robbusted
		KillTrigger robamount
		SetVar $robbusted TRUE
		SetVar $robbed "0"
		SetVar $lastrobsteal CURRENTSECTOR
		SaveVar $lastrobsteal
		Goto :ROBBED
	Else
		SetVar $robbed "0"
		Send "0*"
	End
Else
	KillTrigger robamount
	KillTrigger robbusted
	SetVar $robbed "0"
	Send "0*"
	Goto :RETRYROB
End
:ROBBED
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $PARM1 "2m"
	SaveVar $PARM1
	Gosub :INTCOM_DC
End
If ($robbusted = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": I was BUSTED ! " & $robonhand & " credits left on port.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Write GAMENAME & "_PortCash.txt" CURRENTSECTOR & " - $" & $robonhand & "."
Else
	SetVar $robleft ($robonhand - $robbed)
	SetVar $Z_Lib~message $scripttitle & ": I robbed " & $robbed & " credits! " & $robleft & " credits left on port.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Write GAMENAME & "_PortCash.txt" CURRENTSECTOR & " - $" & $robleft & "."
End
Goto :NOROB
:NOROB
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": Rob command complete !*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# NAIL 
:INTCOM_NAIL
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~message $scripttitle & ": Bad prompt. Command prompt please.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NONAIL
End
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $Z_Lib~message $scripttitle & ": Please designate a target.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NONAIL
End
SetVar $nailtarget $PARM1
SetVar $naildelaymode FALSE
If ($PARM2 = "pre")
	SetVar $naildelay 2000
	SetVar $naildelaymode TRUE
ElseIf ($PARM2 <> "0")
	SetVar $nailtarget ($nailtarget & " " & $PARM2)
	If ($PARM3 = "pre")
		SetVar $naildelay 2000
		SetVar $naildelaymode TRUE
	End
End
LowerCase $nailtarget
Send "*" & #145
WaitFor #145 & #8
If (CURRENTSECTOR <> STARDOCK)
	SetVar $Z_Lib~message $scripttitle & ": This command should be run from the STARDOCK sector.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NONAIL
End
Gosub :GETSHIPDATA
SetVar $Z_Lib~message $scripttitle & ": NAIL - " & $nailtarget & " is DEADMEAT !*"
If ($naildelaymode = TRUE)
	SetVar $Z_Lib~message ($Z_Lib~message & "Predictive Mode.*")
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send #145
WaitFor #145 & #8
Gosub :Z_Lib~COMMSON
Send #145
WaitFor #145 & #8
SetVar $nailhit FALSE
SetVar $nailtried FALSE
SetVar $nailschedule[9] 1600
SetVar $nailschedule[8] 800
SetVar $nailschedule[7] 400
SetVar $nailschedule[6] 200
SetVar $nailschedule[5] 100
SetVar $nailschedule[4] 50
SetVar $nailschedule[3] 25
SetVar $nailschedule[2] 10
SetVar $nailschedule[1] 5
SetVar $naillastdir ""
SetVar $naildirchanged FALSE
SetVar $nailindex 9
:STARTNAIL
Gosub :GETSTATS
If ($figs < $z_maxfigs)
	Send "p sg yg q s p"
	SetTextTrigger buy :NAILBUY "How many K-3A fighters do you want to buy"
	Send "b"
	Pause
:NAILBUY
	KillAllTriggers
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*"
	Gosub :GETSTATS
	If ($figs < $z_maxfigs)
		SetVar $Z_Lib~message $scripttitle & ": Could not buy figs. Standing down.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NONAIL
	End
	If ($nailtried = TRUE)
		SetVar $nailhit TRUE
		If ($nailindex > 5)
			SetVar $nailindex 5
		End
	Else
		SetVar $nailtried TRUE
	End
	Send "qqq *"
Else
	SetVar $nailhit FALSE
End
:SETTRAP
SetVar $nailships SECTOR.SHIPCOUNT[CURRENTSECTOR]
SetVar $nailtraders SECTOR.TRADERCOUNT[CURRENTSECTOR]
SetVar $nailtotal ($nailships + $nailtraders)
SetVar $nailcount 0
SetVar $nailfed FALSE
SetTextTrigger nailfeds1 :NAILFEDS "Federals:"
SetTextTrigger nailmissed :NAILRECHECK "Warps to Sector(s) :"
Send "*"
Pause
:NAILFEDS
KillAllTriggers
SetVar $nailfed TRUE
:NAILRECHECK
KillAllTriggers
SetVar $nailnocount FALSE
If ($nailtotal = 0) and ($nailfed = FALSE)
	SetVar $nailnocount TRUE
	Goto :NAILNOCOUNT
End
SetTextTrigger nailattack :NAILATTACK "<Attack>"
Send "a"
Pause
:NAILATTACK
KillAllTriggers
SetTextTrigger nailcheck :NAILCHECK ") (Y/N) [N]?"
SetTextTrigger nailmissed :SETTRAP "Command [TL="
Pause
:NAILCHECK
KillAllTriggers
If ($nailfed = TRUE)
	SetVar $nailfed FALSE
	Send "*"
	Goto :NAILATTACK
End
GetWordPos CURRENTLINE $pos "unmanned"
If ($pos > 0)
	While ($nailcount < $nailtotal - 1)
		Send "*"
		SetVar $nailcount ($nailcount + 1)
	End
Else
	If ($nailtotal > 1)
		Send "*"
		Goto :NAILATTACK
	End
End
:NAILNOCOUNT
Send #145
WaitFor #145 & #8
If ($nailhit = TRUE)
	Echo "**" & $boldgreen & $blinkon & "Last Result: " & $boldwhite & $blinkon & "!!! HIT !!!" & $blinkoff
Else
	Echo "*"
End
Echo "*" & $white & $blinkon & "WAITING FOR A LOCK ON " & $nailtarget & " !**" & $blinkoff
:NAILGETLOCK
KillAllTriggers
SetTextTrigger nail2 :NAILLOCK " blasts off from "
SetTextOutTrigger nailabort :NAILABORT "~"
SetTextOutTrigger nailabort2 :NAILABORT #8
SetTextLineTrigger nailoff :NAILOFF $z_botname & " nail off"
SetTextLineTrigger nailstatus :NAILSTATUS $z_botname & " status"
SetTextLineTrigger nailmode :NAILMODE $z_botname & " mode"
SetTextLineTrigger nailmode2 :NAILMODE $z_team & " mode"
SetTextLineTrigger nailreset :NAILRESET $z_botname & " reset"
Pause
:NAILMODE
KillAllTriggers
Send "zn* "
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SETTRAP
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SETTRAP
End
Gosub :INTCOM_MODE
Goto :SETTRAP
:NAILSTATUS
KillAllTriggers
Send "zn* "
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SETTRAP
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SETTRAP
End
Gosub :INTCOM_STATUS
Goto :SETTRAP
:NAILRESET
KillAllTriggers
Send "zn* "
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :SETTRAP
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :SETTRAP
End
Gosub :INTCOM_RESET
Goto :NONAIL
:NAILLOCK
KillAllTriggers
GetWord CURRENTLINE $spf 1
GetWord CURRENTLINE $spf2 2
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NAILGETLOCK
End
LowerCase $spf
LowerCase $spf2
If ($spf2 <> "blasts")
	SetVar $spf ($spf & " " & $spf2)
End
If ($spf <> $nailtarget)
	Goto :NAILGETLOCK
End
If ($nailnocount = TRUE)
	SetTextLineTrigger nailnocount2 :NAILNOCOUNT2 "<Attack>"
	Send "a"
	Pause
:NAILNOCOUNT2
	KillTrigger nailnocount2
	SetTextTrigger nailcheck :NAILCHECK2 ") (Y/N) [N]?"
	SetTextTrigger nailmissed :SETTRAP "Command [TL="
Else
	SetTextTrigger nailcheck :NAILCHECK2 ") (Y/N) [N]?"
	SetTextTrigger nailmissed :SETTRAP "Command [TL="
	Send "*"
End
Pause
:NAILCHECK2
KillAllTriggers
Send #145
WaitFor #145 & #8
GetText CURRENTLINE $nailtarget2 "Attack " "'s"
LowerCase $nailtarget2
If ($nailtarget = $nailtarget2)
	If ($nailhit = TRUE)
		Echo "**" & $boldgreen & $blinkon & "Last Result: " & $boldwhite & $blinkon & "!!! HIT !!!" & $blinkoff
	Else
		Echo "*"
	End
	Echo "*" & $boldgreen & $blinkon & "WE HAVE A LOCK !!!**" & $blinkoff
	Goto :NAILSET
Else
	SetTextTrigger nailcheck :NAILCHECK2 ") (Y/N) [N]?"
	SetTextTrigger nailmissed :SETTRAP "Command [TL="
	Send "*"
	Pause
End
:NAILSET
KillAllTriggers
SetVar $nailtried TRUE
If ($naildelaymode = TRUE)
	SetTextTrigger nail1 :NAILSTARTDELAY "lands on the StarDock."
Else
	SetTextTrigger nail2 :NAILKILL " blasts off from "
End
SetTextOutTrigger nailabort :NAILABORT "~"
SetTextOutTrigger nailabort2 :NAILABORT #8
SetTextLineTrigger nailoff :NAILOFF $z_botname & " nail off"
Send "y" & $z_wave
Pause
:NAILSTARTDELAY
SetTextTrigger naildelayup :NAILDELAYUP "has docked!"
SetTextTrigger naildelaydown :NAILDELAYDOWN "is no longer in this sector!"
SetTextTrigger naildelayhit :NAILDELAYHIT "Command [TL="
SetDelayTrigger nailkill2 :NAILKILL2 $naildelay
Pause
:NAILKILL
KillAllTriggers
GetWord CURRENTLINE $spf 1
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NAILSET
End
LowerCase $spf
LowerCase $spf2
If ($spf2 <> "blasts")
	SetVar $spf ($spf & " " & $spf2)
End
If ($spf <> $nailtarget)
	Goto :NAILSET
End
Send "*"
Goto :STARTNAIL
:NAILKILL2
Send "*"
Pause
:NAILDELAYUP
KillAllTriggers
If ($naillastdir = "DOWN") or ($naildirchanged = TRUE)
	SetVar $naildirchanged TRUE
	SetVar $nailindex ($nailindex - 1)
	If ($nailindex < 1)
		SetVar $nailindex 1
	End
End
SetVar $naildelay ($naildelay + $nailschedule[$nailindex])
SetVar $naillastdir "UP"
Goto :STARTNAIL
:NAILDELAYDOWN
KillAllTriggers
If ($naillastdir = "UP") or ($naildirchanged = TRUE)
	SetVar $naildirchanged TRUE
	SetVar $nailindex ($nailindex - 1)
	If ($nailindex < 1)
		SetVar $nailindex 1
	End
End
SetVar $naildelay ($naildelay - $nailschedule[$nailindex])
If ($naildelay < 0)
	SetVar $naildelay 0
End
SetVar $naillastdir "DOWN"
Goto :STARTNAIL
:NAILDELAYHIT
KillAllTriggers
SetVar $naillastdir ""
Goto :STARTNAIL
:NAILOFF
KillAllTriggers
CutText CURRENTLINE $ck 1 1
If ($ck = "R") or ($ck = "'")
	Goto :NAILABORT
End
Goto :SETTRAP
:NAILABORT
KillAllTriggers
If (CURRENTSECTOR = "1")
	Send "zn* l "
Else
	Send "zn* p sg yg "
End
SetVar $Z_Lib~message $scripttitle & ": Nail command aborted. Standing down.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NONAIL
:NONAIL
KillAllTriggers
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# COMMS 
:INTCOM_COMMS
Gosub :Z_Lib~COMMSON
SetVar $Z_Lib~message $scripttitle & ": COMMS are ON.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# REFILL 
:INTCOM_REFILL
KillAllTriggers
Gosub :GETSTATS
If ($current_sector = STARDOCK) or ($current_sector = ALPHACENTAURI) or ($current_sector = RYLOS) or ($current_sector = "1")
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $refillprompt 1 7
	If ($refillprompt <> "Which i")
		If ($refillprompt = "Command")
			If ($current_sector = STARDOCK) and (PORT.EXISTS[$current_sector] = TRUE)
				Send "p sg yg qs p"
				SetVar $z_limpetalarm FALSE
			ElseIf (PORT.EXISTS[$current_sector] = TRUE) and (PORT.CLASS[$current_sector] = "0")
			   Send "P * y" & #8
			   SetVar $z_limpetalarm FALSE
			End
		ElseIf ($refillprompt = "<StarDo")
			Send "s p"
		ElseIf ($refillprompt = "<Hardwa")
			Send "qs p"
		ElseIf ($refillprompt = "<Shipya")
			Send "p"
		ElseIf ($refillprompt = "<Galact")
			Send "qs p"
		Else
			SetVar $Z_Lib~heraldss FALSE
			SetVar $Z_Lib~noecho TRUE
			SetVar $Z_Lib~setprompt "COMMAND"
			Gosub :Z_Lib~PROMPT
			SetVar $prompt $Z_Lib~prompt
			If ($prompt = "ERROR")
				SetVar $Z_Lib~message $scripttitle & ": Bad prompt.*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				Goto :NOREFILL
			End
			Send "p sg yg qs p"
			SetVar $z_limpetalarm FALSE
		End
	End
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $prompt 1 7
	If ($prompt <> "Which i")
		SetVar $Z_Lib~message $scripttitle & ": REFILL - Could NOT refill at Class 0/9.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOREFILL
	End
	SetTextTrigger getfigs :REFILLGETFIGS "How many K-3A fighters do you want to buy"
	Send "b"
	Pause
:REFILLGETFIGS
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*"
	SetTextTrigger getshlds :REFILLGETSHLDS "How many shield armor points do you want to buy"
	Send "c"
	Pause
:REFILLGETSHLDS
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "* "
	If ($refillprompt = "Command")
		SetVar $Z_Lib~heraldss FALSE
		SetVar $Z_Lib~noecho TRUE
		SetVar $Z_Lib~setprompt "COMMAND"
		Gosub :Z_Lib~PROMPT
		SetVar $prompt $Z_Lib~prompt
	End
	If ($nomessage <> TRUE)
		SetVar $Z_Lib~message $scripttitle & ": REFILL complete.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		SetVar $nomessage FALSE
	End
	Gosub :GETSTATS
	Goto :REFILLDONE
End
If ($PARM1 <> "0")
	IsNumber $isnum $PARM1
	If ($isnum <> TRUE)
		SetVar $Z_Lib~message $scripttitle & ": PARAMETER is NOT a PLANET number.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOREFILL
	End
End
:REFILL2
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $refillprompt 1 7
SetVar $Z_Lib~noecho TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $Z_Lib~setprompt "PLANET"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~heraldss FALSE
	SetVar $Z_Lib~noecho TRUE
	SetVar $Z_Lib~setprompt "COMMAND"
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		SetVar $Z_Lib~message $scripttitle & ": Start at the PLANET or COMMAND prompt.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOREFILL
	End
End
If ($PARM1 = "0") or ($PARM1 = "")
	If ($z_planet <> "") and ($z_planet <> "0")
		SetVar $PARM1 $z_planet
	End
End
SetTextLineTrigger refillshlds :REFILLSHIELDS "Planetary Defense Shielding Power Level ="
SetTextTrigger refill1 :REFILL1 "Planet #"
SetTextTrigger refillcommand :REFILLCOMMAND "Command [TL="
If ($prompt = "Command")
	Send "l j" & #8 & $PARM1 & "*"
Else
	Send "*"
End
Pause
:REFILL1
KillTrigger refill1
SetTextTrigger refillplanet :REFILLPLANET "Planet command (?=help)"
Pause
:REFILLCOMMAND
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": Could NOT land on planet.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOREFILL
:REFILLSHIELDS
KillAllTriggers
GetWord CURRENTLINE $planetshields 8
StripText $planetshields " "
If ($planetshields > 200)
	Send "c "
	Gosub :GETSHIPDATA
	Gosub :GETSTATS
	SetVar $refillgetshields ($z_shields - $shields)
	If ($refillgetshields > 10)
		SetPrecision 1
		SetVar $Z_Lib~invalue ($refillgetshields / 10)
		Gosub :Z_Lib~INT
		SetPrecision 0
		SetVar $refillgetshields $Z_Lib~outvalue
		If ($refillgetshields > $planetshields)
			SetVar $refillgetshields $planetshields
		End
		Send "g f " & $refillgetshields & "*"
	End
	Send "q "
End
:REFILLPLANET
KillAllTriggers
Send "m z * z * z * "
If ($refillprompt = "Citadel")
	Send "c "
End
If ($nomessage <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": REFILL complete.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $nomessage FALSE
End
:NOREFILL
KillAllTriggers
SetVar $Z_Lib~noecho FALSE
SetVar $Z_Lib~heraldss FALSE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
:REFILLDONE
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# GAMESETTINGS 
:INTCOM_GAMESETTINGS
SetVar $getsettings TRUE
Gosub :EXIT
Gosub :Z_Lib~SYNC
SetVar $Z_Lib~heraldss FALSE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOGS
End
SetVar $Z_Lib~unlimcheck FALSE
SaveVar $Z_Lib~unlimcheck
Gosub :Z_Lib~ISITUNLIMITED
Send #145
WaitFor #145 & #8
SetVar $Z_Lib~message $scripttitle & ": Game Settings Reloaded.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOGS
SetVar $reset TRUE
Return
# BASE 
:INTCOM_BASE
If ($PARM1 = 0) or ($PARM1 = "")
	SetVar $Z_Lib~message $scripttitle & ": Current BASE sector is " & $z_base & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 10) and ($PARM1 <= SECTORS) and ($PARM1 <> STARDOCK)
			SetVar $z_base $PARM1
			SaveVar $z_base
			SetVar $Z_Lib~message $scripttitle & ": BASE sector set to " & $z_base & "*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
		End
	End
End
Return
# SAFESECTOR 
:INTCOM_SAFESECTOR
LowerCase $PARM1
If ($PARM1 = "d")
	SetVar $PARM1 STARDOCK
ElseIf ($PARM1 = "a")
	SetVar $PARM1 ALPHACENTAURI
ElseIf ($PARM1 = "r")
	SetVar $PARM1 RYLOS
End
If ($PARM1 = 0) or ($PARM1 = "")
	SetVar $Z_Lib~message $scripttitle & ": Current SAFE sector is " & $z_safesector & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $z_safesector $PARM1
		SaveVar $z_safesector
		SetVar $Z_Lib~message $scripttitle & ": SAFE sector set to " & $z_safesector & "*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
Return
# SCRUB 
:INTCOM_SCRUB
SetVar $scrubzone $z_safesector
If ($z_base = 0) or ($z_base = "")
	SetVar $Z_Lib~message $scripttitle & ": BASE Sector is not set in the bot options.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSCRUB
End
If ($PARM1 <> 0) and ($PARM1 <> "")
	Lowercase $PARM1
	If ($PARM1 = "d")
		SetVar $PARM1 STARDOCK
	ElseIf ($PARM1 = "a")
		SetVar $PARM1 ALPHACENTAURI
	ElseIf ($PARM1 = "r")
		SetVar $PARM1 RYLOS
	ElseIf ($PARM1 = "s")
		SetVar $PARM1 $z_safesector
	ElseIf ($PARM1 = "b")
		SetVar $PARM1 $z_base
	End
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 = 1) or (($PARM1 > 10) and ($PARM1 <= SECTORS))
			SetVar $scrubzone $PARM1
		End
	End
End
If ($scrubzone = 0) or ($scrubzone = "")
	SetVar $Z_Lib~message $scripttitle & ": You need to specify a safe sector.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSCRUB
End
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSCRUB
End
Gosub :GETSTATS
SetVar $z_dockport FALSE
SetVar $z_gas TRUE
SetVar $target $scrubzone
If ($target = STARDOCK) or ($target = RYLOS) or ($target = ALPHACENTAURI) or ($target = 1)
	SetVar $z_dockport TRUE
End
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
If ($current_sector <> $scrubzone)
	SetVar $Z_Lib~message $scripttitle & ": Failed to arrive at " & $scrubzone & ". I am at " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSCRUB
End
Send "q q q q *"
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSCRUB
End
SetVar $z_dockport FALSE
SetVar $z_gas FALSE
SetVar $target $z_base
Gosub :TWARPING
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
If ($current_sector <> $z_base)
	SetVar $Z_Lib~message $scripttitle & ": Failed to arrive at " & $z_base & ". I am at " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSCRUB
End
SetVar $Z_Lib~message $scripttitle & ": I have SCRUBBED at sector " & $scrubzone & " and arrived at sector " & $z_base & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $z_limpetalarm FALSE
:NOSCRUB
SetVar $reset TRUE
Return
# SCRUBZONE 
:INTCOM_SCRUBZONE
SetArray $plsect 0
SetArray $pllimps 0
SetVar $z_limpcount 0
SetVar $pl 0
Gosub :Z_Lib~CURRENTPLANET
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOLPLIMPS
End
Gosub :Z_Lib~COMMSOFF
SetVar $trigger2u "Deployed  Limpet  Scan"
SetTextLineTrigger 2u :LPLIMPS $trigger2u
Send "k2"
Pause
:LPLIMPS
SetTextLineTrigger limpscan1 :STARTLPLIMPSCAN "===================="
SetTextLineTrigger limpnone :ENDLPLIMPSCAN "No Limpet mines deployed"
SetTextLineTrigger limpscan2 :ENDLPLIMPSCAN "Total"
Pause
:STARTLPLIMPSCAN
Killtrigger limpscan1
Killtrigger limpscan2
Killtrigger limpscan3
Killtrigger limpnone
SetTextLineTrigger limpscan3 :SCANLINELPLIMPS
Pause
:SCANLINELPLIMPS
SetVar $line CURRENTLINE
GetWordPos $line $pos "Total"
GetWordPos $line $pos2 "No Limpet mines deployed"
If ($pos > 0)
	Goto :ENDLPLIMPSCAN
ElseIf ($pos2 > 0)
   Goto :ENDLPLIMPSCAN
Else
   GetWord $line $pltype 3
   If ($pltype = "Personal")
		SetVar $pl ($pl + 1)
		GetWord $line $plsect[$pl] 1
		GetWord $line $pllimps[$pl] 2
   End
   SetVar $z_limpcount ($z_limpcount + 1)
End
Goto :STARTLPLIMPSCAN
:ENDLPLIMPSCAN
Killtrigger limpscan1
Killtrigger limpscan2
Killtrigger limpscan3
Killtrigger limpnone
Waitfor "] (?=Help)? :"
Gosub :Z_Lib~RETURNTOPLANET
Gosub :Z_Lib~SYNC
SetVar $ssmsg $dashedline
SetVar $ssmsg ($ssmsg & "Zed's Personal Limpet List for " & LOGINNAME & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
If ($pl > 0)
	SetVar $ssmsg ($ssmsg & "Sector    Limps*")
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $x 1
	While ($x <= $pl)
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 11
		SetVar $Z_Strings~unpadded $plsect[$x]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $ssmsg ($ssmsg & $Z_Strings~padded)
		SetVar $ssmsg ($ssmsg & $pllimps[$x] & "*")
		SetVar $x ($x + 1)
	End
Else
	SetVar $ssmsg ($ssmsg & "No personal limpets found.*")
End
SetVar $plsect $pl
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Gosub :Z_Lib~COMMSON
:NOLPLIMPS
Return
# CCS 
:INTCOM_CCS
If ($PARM1 = 0) or ($PARM1 = "")
	Goto :CCBADPARM
End
SetVar $Z_Lib~number $PARM1
Gosub :Z_Lib~TKM
SetVar $PARM1 $Z_Lib~number
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :CCBADPARM
End
UpperCase $PARM2
SetVar $Z_Lib~setprompt "CITADEL"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOCCS
End
Gosub :Z_Lib~COMMSOFF
Gosub :Z_Lib~CURRENTPLANET
SetVar $ccpower $PARM1
SetVar $ccneeded ($ccpower * 3)
Send "qq*"
Send #145
WaitFor #145 & #8
SetTextLineTrigger landing :CCLANDING "Registry# and Planet Name"
SetTextTrigger noplanets :CCNOPLANETS "Planet command (?="
SetVar $pcount 0
Send "l"
Pause
:CCLANDING
KillTrigger landing
SetTextLineTrigger getpnums :CCGETPNUMS ">"
SetTextTrigger gotpnums :CCGOTPNUMS "Land on which planet"
Pause
:CCNOPLANETS
KillTrigger landing
KillTrigger noplanets
Send "c"
Goto :NOCCS
:CCGETPNUMS
KillTrigger getpnums
SetVar $pcount ($pcount + 1)
GetText CURRENTLINE $planets[$pcount] "   <" ">"
SetTextLineTrigger getpnums :CCGETPNUMS ">"
Pause
:CCGOTPNUMS
KillTrigger getpnums
KillTrigger gotpnums
KillTrigger noplanets
SetVar $x 1
SetVar $cannonct 0
While ($x <= $pcount)
	KillTrigger ccgotfuel
	KillTrigger ccgotcannon
	KillTrigger ccplanetprmpt
	SetVar $cccannon[$x] FALSE
	SetTextLineTrigger ccgotfuel :CCGOTFUEL "Fuel Ore"
	SetTextTrigger ccgotcannon :CCGOTCANNON "SectLvl="
	SetTextTrigger ccplanetprmpt :CCPLANETPRMPT "Planet command (?="
	Send $planets[$x] & "*"
	Pause
:CCGOTFUEL
	KillTrigger ccgotfuel
	GetWord CURRENTLINE $ccfuel[$x] 6
	StripText $ccfuel[$x] ","
	Pause
:CCGOTCANNON
	KillTrigger ccgotcannon
	SetVar $cccannon[$x] TRUE
	SetVar $cannonct ($cannonct + 1)
	Pause
:CCPLANETPRMPT
	KillTrigger ccplanetprmpt
	SetVar $x ($x + 1)
	Send "q * l"
End
SetVar $cclastneed 0
If ($cannonct < 1)
	Send "q *"
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $Z_Lib~message "No cannons to set...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOCCS
End
SetVar $precision 4
SetVar $ccavg ($ccneeded / $cannonct)
SetVar $precision 0
SetVar $Z_Lib~number $ccavg
Gosub :Z_Lib~ROUND
SetVar $ccavg $Z_Lib~round
SetVar $x 1
While ($x <= $pcount)
	SetVar $ccshot[$x] 0
	If ($cccannon[$x] = TRUE)
		If ($ccfuel[$x] >= $ccavg)
			SetVar $ccshot[$x] $ccavg
			SetVar $ccneeded ($ccneeded - $ccavg)
		End
	End
	SetVar $x ($x + 1)
End
:CCSHARE
If ($cclastneed = $ccneeded) and ($ccneeded > 0)
	Send "q * "
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $Z_Lib~message "Could not set cannons...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOCCS
Else
	SetVar $cclastneed $ccneeded
End
If ($ccneeded >= $cannonct)
	SetVar $precision 4
	SetVar $ccavg ($ccneeded / $cannonct)
	SetVar $precision 0
	SetVar $Z_Lib~number $ccavg
	Gosub :Z_Lib~ROUND
	SetVar $ccavg $Z_Lib~roundup
	SetVar $x 1
	While ($x <= $pcount)
		If ($cccannon[$x] = TRUE)
			If ($ccfuel[$x] - $ccshot[$x] >= $ccavg)
				SetVar $ccshot[$x] ($ccshot[$x] + $ccavg)
				SetVar $ccneeded ($ccneeded - $ccavg)
			End
		End
		SetVar $x ($x + 1)
	End
	If ($ccneeded < 1)
		Goto :CCALLOC
	End
	Goto :CCSHARE
ElseIf ($ccneeded >= 0)
	SetVar $x 1
	While ($x <= $pcount)
		If ($cccannon[$x] = TRUE)
			If ($ccfuel[$x] - $ccshot[$x] >= $ccneeded)
				SetVar $ccshot[$x] ($ccshot[$x] + $ccneeded)
				SetVar $ccneeded 0
				SetVar $x $pcount
			End
		End
		SetVar $x ($x + 1)
	End
	If ($ccneeded < 1)
		Goto :CCALLOC
	End
	Goto :CCSHARE
End
:CCALLOC
SetVar $x 1
While ($x <= $pcount)
	SetVar $ccqset[$x] 0
	If ($ccshot[$x] > 0)
		SetPrecision 4
		SetVar $ccqset[$x] (($ccshot[$x] / $ccfuel[$x]) * 100)
		SetPrecision 0
		SetVar $Z_Lib~number $ccqset[$x]
		Gosub :Z_Lib~ROUND
		SetVar $ccqset[$x] $Z_Lib~roundup
		If ($PARM2 <> "NOATMOS")
			If ($PARM2 = "ATMOSOFF")
				SetVar $ccatmos 0
			Else
				SetVar $ccafuel ($ccfuel[$x] - $ccshot[$x])
				If ($mbbs = "TRUE") or ($mbbs = TRUE)
					SetPrecision 4
					SetVar $ccatmos ((($ccpower / 2) / $ccafuel) * 100)
					SetPrecision 0
				Else
					SetPrecision 4
					SetVar $ccatmos ((($ccpower * 2) / $ccafuel) * 100)
					SetPrecision 0
				End
				SetVar $Z_Lib~number $ccatmos
				Gosub :Z_Lib~ROUND
				SetVar $ccatmos $Z_Lib~roundup
			End
		End
		SetPrecision 0
		If ($PARM2 <> "NOATMOS") and ($PARM2 <> "ATMOSOFF")
			If ($ccatmos > 100)
				SetVar $ccatmos 100
			ElseIf ($ccatmos < 1)
				SetVar $ccatmos 1
			End
		End
		If ($ccqset[$x] > 100)
			SetVar $ccqset[$x] 100
		ElseIf ($ccqset[$x] < 1)
			SetVar $ccqset[$x] 1
		End
		If ($PARM2 <> "NOATMOS")
			Send $planets[$x] & "* c l s " & $ccqset[$x] & "* l a " & $ccatmos & "* q q l"
		Else
			Send $planets[$x] & "* c l s " & $ccqset[$x] & "* q q l"
		End
	End
	SetVar $x ($x + 1)
End
Send "q * "
Gosub :Z_Lib~RETURNTOPLANET
SetVar $ssmsg $dashedline
SetVar $ssmsg ($ssmsg & $scripttitle & ": Cascaded Cannon Settings.*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $x 1
SetVar $cctotal 0
While ($x <= $pcount)
	SetVar $ssmsg ($ssmsg & "Planet: " & $planets[$x] & "  " & $ccqset[$x] & "% (" & $ccshot[$x] & " / " & $ccfuel[$x] & ")*")
	SetPrecision 4
	SetVar $cctotal ($cctotal + (($ccfuel[$x] / 100) * $ccqset[$x]))
	SetPrecision 0
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~number $cctotal
Gosub :Z_Lib~ROUND
SetVar $cctotal $Z_Lib~round
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $ssmsg ($ssmsg & "Total potential damage: " & ($cctotal / 3) & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
If ($PARM2 = "NOATMOS")
	SetVar $ssmsg ($ssmsg & "Atmospheric cannons NOT changed.*")
ElseIf ($PARM2 = "ATMOSOFF")
	SetVar $ssmsg ($ssmsg & "Atmospheric cannons TURNED OFF.*")
Else
	SetVar $ssmsg ($ssmsg & "Atmospheric cannons SET.*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Send #145
WaitOn #145 & #8
Gosub :MSGBRIDGE
Goto :NOCCS
:CCBADPARM
SetVar $Z_Lib~message "Bad parameter, must be a number...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCCS
SetVar $ssmsg ""
Gosub :Z_Lib~COMMSON
SetVar $reset TRUE
Return
# TP 
:INTCOM_TP
KillAllTriggers
Gosub :Z_Lib~COMMSOFF
If ($PARM1 = 0) or ($PARM1 = "")
	Goto :TPBADPARM
Else
	IsNumber $isnum $PARM1
	If ($isnum <> TRUE)
		Goto :TPBADPARM
	End
	If ($PARM1 < 1) or ($PARM1 > SECTORS)
		Goto :TPBADPARM
	End
End
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOTP
End
SetVar $prompt $Z_Lib~prompt
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Setvar $tponplanet TRUE
Else
	Setvar $tponplanet FALSE
End
Gosub :GETSTATS
SetVar $returnsector $current_sector
If ($twarp = 0)
	SetVar $Z_Lib~message "You must have a TWARP drive...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTP
End
If ($photons < 1)
	SetVar $Z_Lib~message "You have NO Photons...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTP
End
SetVar $tptarget $PARM1
SetVar $warpsincount SECTOR.WARPINCOUNT[$tptarget]
SetVar $count "1"
SetVar $availablewarps "0"
While ($count <= $warpsincount)
	SetVar $thiswarp SECTOR.WARPSIN[$tptarget][$count]
	GetSectorParameter $thiswarp "FIGSEC" $figged
	If ($figged = TRUE)
		SetVar $availablewarps ($availablewarps + 1)
		SetVar $tpwarpsin[$availablewarps] $thiswarp
	End
	SetVar $count ($count + 1)
End
If ($availablewarps > 0)
	GetRnd $warp 1 $availablewarps
	SetVar $tpjump $tpwarpsin[$warp]
Else
	SetVar $Z_Lib~message "NO figged adjacents...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTP
End
SetVar $z_dockport FALSE
SetVar $z_gas FALSE
SetVar $target $tpjump
Gosub :TWARPING
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
If ($current_sector <> $tpjump)
	SetVar $Z_Lib~message $scripttitle & ": Failed to arrive at " & $tpjump & ". I am at " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTP
End
Send "c p y " & $tptarget & "* * q "
Send #145
WaitFor #145 & #8
UpperCase $user_command_line
SetVar $target "0"
Gosub :CLEARMOVEOPTIONS
GetWordPos $user_command_line $pos "E"
If ($pos > 0)
	SetVar $mowmode "MOW"
	SetVar $target $PARM1
	SetVar $z_dockport FALSE
	Gosub :MOVE
	If ($badpath = TRUE)
		SetVar $Z_Lib~message $scripttitle & ": TP - Could not set a course! Exiting...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOTP
	End
End
Gosub :CLEARMOVEOPTIONS
GetWordPos $user_command_line $pos "U"
If ($pos > 0)
	SetVar $z_surround TRUE
End
GetWordPos $user_command_line $pos "K"
If ($pos > 0)
	SetVar $z_kill TRUE
End
GetWordPos $user_command_line $pos "W"
If ($pos > 0)
	SetVar $z_wavecap TRUE
End
GetWordPos $user_command_line $pos "C"
If ($pos > 0)
	SetVar $z_capture TRUE
End
GetWordPos $user_command_line $pos "V"
If ($pos > 0)
	SetVar $z_callsaveme TRUE
End
GetWordPos $user_command_line $pos "X"
If ($pos > 0)
	SetVar $z_holoattack TRUE
End
Gosub :DOOPTIONS	
GetWordPos $user_command_line $pos "R"
If ($pos = 0) or ($z_callsaveme = TRUE)
	Goto :TPNORETURN
End
Gosub :CLEARMOVEOPTIONS
SetVar $z_dockport FALSE
SetVar $z_gas FALSE
SetVar $target $returnsector
SetVar $prompt "Command"
Gosub :TWARPING
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
If ($current_sector <> $returnsector)
	SetVar $Z_Lib~message $scripttitle & ": Failed to arrive at " & $returnsector & ". I am at " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTP
End
If ($tponplanet = TRUE)
	Gosub :Z_Lib~RETURNTOPLANET
End
:TPNORETURN
Gosub :CLEARMOVEOPTIONS
SetVar $Z_Lib~message "Mission accomplished! Photon fired into sector " & $tptarget & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTP
:TPBADPARM
SetVar $Z_Lib~message "Bad parameter...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOTP
Gosub :Z_Lib~COMMSON
SetVar $reset TRUE
Return
# AUTOMATE
:INTCOM_AUTOMATE
UpperCase $PARM1
SetVar $snapshotloaded FALSE
If ($PARM1 = "OFF")
	SetVar $z_autostatus FALSE
	SaveVar $z_autostatus
ElseIf ($PARM1 = "ON")
	SetVar $z_autostatus TRUE
	SaveVar $z_autostatus
ElseIf ($PARM1 = "SETTYPE")
	UpperCase $PARM2
	If ($PARM2 = "TEXT")
		SetVar $z_autotype 4
	ElseIf ($PARM2 = "TEXTLINE")
		SetVar $z_autotype 3
	ElseIf ($PARM2 = "TIME12")
		SetVar $z_autotype 1
	ElseIf ($PARM2 = "TIME24")
		SetVar $z_autotype 2
	ElseIf ($PARM2 = "HOURLY")
		SetVar $z_autotype 5
	ElseIf ($PARM2 = "TOTH")
		SetVar $z_autotype 6
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETCOMMAND")
	If ($PARM2 <> "") and ($PARM2 <> "0")
		SetVar $z_autocommand $PARM2
		If ($PARM3 <> "") and ($PARM3 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM3)
		End
		If ($PARM4 <> "") and ($PARM4 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM4)
		End
		If ($PARM5 <> "") and ($PARM5 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM5)
		End
		If ($PARM6 <> "") and ($PARM6 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM6)
		End
		If ($PARM7 <> "") and ($PARM7 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM7)
		End
		If ($PARM8 <> "") and ($PARM8 <> "0")
			SetVar $z_autocommand ($z_autocommand & " " & $PARM8)
		End
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETTRIGGER")
	If ($PARM2 <> "") and ($PARM2 <> "0")
		SetVar $z_autotrigger $PARM2
		If ($PARM3 <> "") and ($PARM3 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM3)
		End
		If ($PARM4 <> "") and ($PARM4 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM4)
		End
		If ($PARM5 <> "") and ($PARM5 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM5)
		End
		If ($PARM6 <> "") and ($PARM6 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM6)
		End
		If ($PARM7 <> "") and ($PARM7 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM7)
		End
		If ($PARM8 <> "") and ($PARM8 <> "0")
			SetVar $z_autotrigger ($z_autotrigger & " " & $PARM8)
		End
		SetVar $x 1
		While ($x <= $triggercount)
			If ($triggers[$x] = $z_autotrigger)
				SetVar $z_triggerptr $x
				SetVar $x $triggercount
			End
			SetVar $x ($x + 1)
		End
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETRETURN")
	If ($PARM2 <> "") and ($PARM2 <> "0")
		SetVar $z_autoreturn $PARM2
		If ($PARM3 <> "") and ($PARM3 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM3)
		End
		If ($PARM4 <> "") and ($PARM4 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM4)
		End
		If ($PARM5 <> "") and ($PARM5 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM5)
		End
		If ($PARM6 <> "") and ($PARM6 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM6)
		End
		If ($PARM7 <> "") and ($PARM7 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM7)
		End
		If ($PARM8 <> "") and ($PARM8 <> "0")
			SetVar $z_autoreturn ($z_autoreturn & " " & $PARM8)
		End
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETSTRIP")
	If ($PARM2 <> "") and ($PARM2 <> "0")
		SetVar $z_autostrip $PARM2
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETCONST1")
	GetWordPos $user_command_line $pos "SETCONST1"
	CutText $user_command_line $temp ($pos + 12) 999
	SetVar $z_autovar1 $temp
ElseIf ($PARM1 = "SETCONST2")
	GetWordPos $user_command_line $pos "SETCONST2"
	CutText $user_command_line $temp ($pos + 12) 999
	SetVar $z_autovar2 $temp
ElseIf ($PARM1 = "SETRENAME")
	If ($PARM2 <> "") and ($PARM2 <> "0") and ($PARM3 <> "") and ($PARM3 <> "0")
		SetVar $z_autorename $PARM2 & " " & $PARM3
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "SETPLANET")
	If ($PARM2 <> "") and ($PARM2 <> "0")
		UpperCase $PARM2
		If ($PARM2 = "NONE")
			SetVar $z_autoplanet 0
		Else
			IsNumber $isnum $PARM2
			If ($isnum = TRUE)
				SetVar $z_autoplanet $PARM2
			Else
				SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
				Goto :NOAUTOMATE
			End
		End
	Else
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD PARAMETER !*"
		Goto :NOAUTOMATE
	End
ElseIf ($PARM1 = "LOAD")
	SetVar $filename $PARM2
	Fileexists $fileexist $filename & ".aut"
	If ($fileexist <> TRUE)
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: Snapshot file NOT FOUND!*"
		Goto :NOAUTOMATE
	End
	ReadToArray $filename & ".aut" $autfile
	If ($autfile[1] <> "Z-BOTAUTOMATESNAPSHOT")
		SetVar $Z_Lib~message "Z-Bot AUTOMATE: BAD Snapshot file!*"
		Goto :NOAUTOMATE
	End
	Gosub :LOADSNAPSHOT
	SetVar $snapshotloaded TRUE
End
SetVar $Z_Lib~message $dashedline & "Z-Bot Automate Status*" & $dashedline
If ($snapshotloaded = TRUE)
	SetVar $Z_Lib~message ($Z_Lib~message &     "!!! Automate Snapshot [" & $filename & "] LOADED !!!*")
	SetVar $Z_Lib~message ($Z_Lib~message &     " *")
End
If ($z_autostatus = TRUE)
	SetVar $Z_Lib~message ($Z_Lib~message &     "Automate is  : ON*")
Else
	SetVar $Z_Lib~message ($Z_Lib~message &     "Automate is  : OFF*")
End
SetVar $Z_Lib~message ($Z_Lib~message &     "Command Line : " & $z_autocommand & "*")
If ($z_autotype = "1")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : TIME (12hrs)*")
ElseIf ($z_autotype = "2")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : TIME (24hrs)*")
ElseIf ($z_autotype = "3")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : Text Trigger*")
ElseIf ($z_autotype = "4")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : Text Line Trigger*")
ElseIf ($z_autotype = "5")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : TIME (Hourly)*")
ElseIf ($z_autotype = "6")
	SetVar $Z_Lib~message ($Z_Lib~message & "Type         : TIME (Top of the Hour)*")
End
SetVar $Z_Lib~message ($Z_Lib~message &     "Trigger      : " & $z_autotrigger & "*")
If ($z_autotype = "3")
	SetVar $Z_Lib~message ($Z_Lib~message & "Return Var   : " & $z_autoreturn & "*")
	SetVar $Z_Lib~message ($Z_Lib~message & "Strip Text   : " & $z_autostrip & "*")
Else
	SetVar $Z_Lib~message ($Z_Lib~message & "File Rename  : " & $z_autorename & "*")
End
SetVar $Z_Lib~message ($Z_Lib~message & "Constant 1   : " & $z_autovar1 & "*")
SetVar $Z_Lib~message ($Z_Lib~message & "Constant 2   : " & $z_autovar2 & "*")
If ($z_autoplanet = 0)
	SetVar $Z_Lib~message ($Z_Lib~message & "Start Planet : None*")
Else
	SetVar $Z_Lib~message ($Z_Lib~message & "Start Planet : " & $z_autoplanet & "*")
End
SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
:NOAUTOMATE
Gosub :MSGBRIDGE
Return
# NEAR 
:INTCOM_NEAR
UpperCase $PARM1
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $nearsector $current_sector
ElseIf ($PARM1 = "ALPHA") and (ALPHACENTAURI > 0) and (ALPHACENTAURI <= SECTORS)
	SetVar $nearsector ALPHACENTAURI
ElseIf ($PARM1 = "RYLOS") and (RYLOS > 0) and (RYLOS <= SECTORS)
	SetVar $nearsector RYLOS
ElseIf ($PARM1 = "DOCK") and (STARDOCK > 0) and (STARDOCK <= SECTORS)
	SetVar $nearsector STARDOCK
ElseIf ($PARM1 = "A") and (ALPHACENTAURI > 0) and (ALPHACENTAURI <= SECTORS)
	SetVar $nearsector ALPHACENTAURI
ElseIf ($PARM1 = "R") and (RYLOS > 0) and (RYLOS <= SECTORS)
	SetVar $nearsector RYLOS
ElseIf ($PARM1 = "D") and (STARDOCK > 0) and (STARDOCK <= SECTORS)
	SetVar $nearsector STARDOCK
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $nearsector $PARM1
	Else
		SetVar $nearsector $current_sector
	End
End
Gosub :GETSTATS
GetNearestWarps $nearwarps $nearsector
SetVar $i 1
SetVar $j 0
SetArray $nearfigs 16
SetArray $nearhops 16
While ($i <= $nearwarps)
	If ($nearwarps[$i] > 0) and ($nearwarps[$i] <= SECTORS)
		GetSectorParameter $nearwarps[$i] "FIGSEC" $isfigged
		If ($isfigged = TRUE)
			SetVar $j ($j + 1)
			SetVar $nearfigs[$j] $nearwarps[$i]
			If ($nearwarps[$i] = $nearsector)
				SetVar $nearhops[$j] 0
			Else
				GetDistance $nearhops[$j] $nearsector $nearwarps[$i]
				If ($nearhops[$j] = "-1")
					SetVar $nearhops[$j] "Unknown"
				End
			End
			If ($j >= 16)
				SetVar $i $nearwarps
			End
		End
	End
	SetVar $i ($i + 1)
End
SetVar $ssmsg $dashedline & $scripttitle & " - NEAR - 16 Nearest Figged Sectors to Sector "
If ($PARM1 = "ALPHA") or ($PARM1 = "RYLOS") or ($PARM1 = "DOCK")
	SetVar $ssmsg ($ssmsg & $nearsector & " (" & $PARM1 & ")" & "*" & $dashedline)
Else
	SetVar $ssmsg ($ssmsg & $nearsector & "*" & $dashedline)
End
SetVar $j 1
While ($j <= 16)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $nearfigs[$j]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & $nearhops[$j] & " hops ")
	If ($nearfigs[$j] > 0) and ($nearfigs[$j] <= SECTORS)
		GetCourse $course $nearfigs[$j] $nearsector 
		If ($course > 0)
			SetVar $x 1
			While ($x <= $course + 1)
				SetVar $ssmsg ($ssmsg & "-" & $course[$x])
				SetVar $x ($x + 1)
			End
		End
		SetVar $ssmsg ($ssmsg & "*")
	End
	SetVar $j ($j + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetArray $nearwarps 0
SetArray $nearfigs 0
SetArray $nearhops 0
Return
# FEDWATCH 
:INTCOM_FEDWATCH
UpperCase $PARM1
Gosub :GETSTATS
If ($experience <= 1000) and ($align >= 0)
	SetVar $temp "FEDSAFE."
Else
	SetVar $temp "NOT FEDSAFE !"
End
If ($PARM1 = "") or ($PARM1 = "0")
	If ($fedwatch = TRUE)
		SetVar $ssmsg ($scripttitle & ": FEDWATCH is currently ON. I am " & $temp & "*")
	Else
		SetVar $ssmsg ($scripttitle & ": FEDWATCH is currently OFF. I am " & $temp & "*")
	End
ElseIf ($PARM1 = "ON")
	SetVar $fedwatch TRUE
	SetVar $ssmsg ($scripttitle & ": FEDWATCH is now set to ON. I am " & $temp & "*")
ElseIf ($PARM1 = "OFF")
	SetVar $fedwatch FALSE
	SetVar $ssmsg ($scripttitle & ": FEDWATCH is now set to OFF. I am " & $temp & "*")
Else
	SetVar $ssmsg ($scripttitle & ": FEDWATCH - BAD parameter... get help!*")
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $temp ""
Return
# BBOP 
:INTCOM_BBOP
UpperCase $PARM1
Gosub :GETSTATS
If ($PARM1 = "") or ($PARM1 = "0")
	If ($bbop = TRUE)
		SetVar $ssmsg ($scripttitle & ": BBOP is currently ON.*")
	Else
		SetVar $ssmsg ($scripttitle & ": BBOP is currently OFF.*")
	End
ElseIf ($PARM1 = "ON")
	SetVar $bbop TRUE
	SetVar $ssmsg ($scripttitle & ": BBOP is now set to ON.*")
ElseIf ($PARM1 = "OFF")
	SetVar $bbop FALSE
	SetVar $ssmsg ($scripttitle & ": BBOP is now set to OFF.*")
Else
	SetVar $ssmsg ($scripttitle & ": BBOP - BAD parameter... get help!*")
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# PRICES 
:INTCOM_PRICES
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~noecho FALSE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt <> "ERROR")
	Gosub :UPDATEMARKET
End
SetVar $ssmsg $dashedline & $scripttitle & " - MARKET PRICES*" & $dashedline
FileExists $fileexist GAMENAME & "_Z-Market.txt"
If ($fileexist = TRUE)
	ReadToArray GAMENAME & "_Z-Market.txt" $prices
	SetVar $x 1
	If ($prices = "0")
		SetVar $ssmsg ($ssmsg & "NOTHING TO REPORT.*")
	Else
		While ($x <= $prices)
			StripText $prices[$x] #13
			SetVar $ssmsg ($ssmsg & $prices[$x] & "*")
			SetVar $x ($x + 1)
		End
	End
Else
	SetVar $ssmsg ($ssmsg & "NOTHING TO REPORT.*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# DEFIG 
:INTCOM_DEFIG
KillAllTriggers
Gosub :GETSTATS
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $Z_Lib~message $scripttitle & ": DEFIG - Bad parameter!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODEFIG
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": DEFIG - Bad parameter!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODEFIG
Else
	If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
		SetVar $Z_Lib~message $scripttitle & ": DEFIG - Bad sector Number!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NODEFIG
	End
End
SetVar $wave $z_wave
If ($PARM2 <> "0") and ($PARM2 <> "")
	IsNumber $isnum $PARM2
	If ($isnum = TRUE)
		SetVar $wave $PARM2
	End
End
If ($figs < $wave)
	SetVar $Z_Lib~message $scripttitle & ": DEFIG - Not enough FIGS!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODEFIG
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NODEFIG
End
SetTextLineTrigger defigisadj :DEFIGISADJ $current_sector & " > "
Send "^f" & $current_sector & "*" & $PARM1 & "*q"
Pause
:DEFIGISADJ
KillAllTriggers
GetWord CURRENTLINE $temp 3
If ($temp <> $PARM1)
	SetVar $Z_Lib~message $scripttitle & ": DEFIG - Sector NOT adjacent!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODEFIG
End
SetTextLineTrigger defigisbd :DEFIGISBD $PARM1 & " > "
Send "^f" & $PARM1 & "*" & $current_sector & "*q"
Pause
:DEFIGISBD
KillAllTriggers
GetWord CURRENTLINE $temp 3
If ($temp <> $current_sector)
	SetVar $Z_Lib~message $scripttitle & ": DEFIG - One way detected!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODEFIG
End
Send "m" & $PARM1 & "*a z " & $wave & "* < "
SetVar $Z_Lib~message $scripttitle & ": DEFIG - Sector " & $PARM1 & " defigged!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NODEFIG
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# GLEAN 
:INTCOM_GLEAN
KillAllTriggers
LowerCase $PARM1
If ($PARM1 = "0") or ($PARM1 = "")
	SetVar $gleantime 30
ElseIf ($PARM1 = "off")
	SetVar $Z_Lib~message $scripttitle & ": GLEAN - WAS NOT ON!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOGLEAN
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $gleantime $PARM1
	Else
		SetVar $gleantime 30
	End
End
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOGLEAN
End
Send #145
WaitOn #145 & #8
SetTextTrigger gleanhascit :GLEANHASCIT "Planet has a level"
SetTextTrigger gleanhasnocit :GLEANHASNOCIT "Planet command (?=help)"
Send "*"
Pause
:GLEANHASCIT
KillAllTriggers
SetVar $gleanhascit TRUE
Goto :GLEANGOTCIT
:GLEANHASNOCIT
KillAllTriggers
SetVar $gleanhascit FALSE
:GLEANGOTCIT
SetVar $gleancit FALSE
SetVar $gleansect FALSE
LowerCase $user_command_line
If ($gleanhascit = TRUE)
	GetWordPos $user_command_line $pos "cit"
	If ($pos > 0)
		SetVar $gleancit TRUE
	Else
		SetVar $gleancit FALSE
	End
End
If ($gleancit = FALSE)
	GetWordPos $user_command_line $pos "sect"
	If ($pos > 0)
		SetVar $gleansect TRUE
	Else
		SetVar $gleansect FALSE
	End
End
Gosub :Z_Lib~CURRENTPLANET
SetVar $Z_Lib~message $scripttitle & ": GLEAN - Gleaning figs every " & $gleantime & " secs from planet# " & $z_lib~planetnum & "..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $gleantime ($gleantime * 1000)
Gosub :Z_Lib~COMMSON
:STARTGLEAN
KillAllTriggers
SetTextOutTrigger abortglean :ABORTGLEAN "~"
SetTextOutTrigger abortglean2 :ABORTGLEAN #8
SetTextLineTrigger botglean :BOTGLEAN " " & $z_botname & " "
SetTextLineTrigger botglean2 :BOTGLEAN " " & $z_botname & " "
If ($z_team <> "0") and ($z_team <> "")
	SetTextLineTrigger botglean3 :BOTGLEAN " " & $z_team & " "
End
SetDelayTrigger doglean :DOGLEAN $gleantime
If ($gleancit = TRUE)
	Send "*c "
ElseIf ($gleansect = TRUE)
	Send "*q "
Else
	Send "*"
End
Send #145
WaitOn #145 & #8
Echo $boldred & "[" & $boldwhite & "GLEAN" & $boldred & "]" & $boldcyan & " - " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & "-Abort " & $boldmagenta
Pause
:DOGLEAN
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $gleanbadp FALSE
SetVar $line CURRENTLINE
GetWord $line $word 1
StripText $word #145
StripText $word #8
If ($gleancit = TRUE)
	If ($word <> "Citadel")
		SetVar $Z_Lib~message $scripttitle & ": GLEAN - Left the CITADEL prompt! Exiting..*"
		SetVar $gleanbadp TRUE
	End
ElseIf ($gleansect = TRUE)
	If ($word <> "Command")
		SetVar $Z_Lib~message $scripttitle & ": GLEAN - Left the COMMAND prompt! Exiting..*"
		SetVar $gleanbadp TRUE
	End
Else
	If ($word <> "Planet")
		SetVar $Z_Lib~message $scripttitle & ": GLEAN - Left the PLANET prompt! Exiting..*"
		SetVar $gleanbadp TRUE
	End
End
If ($gleanbadp = TRUE)
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOGLEAN
End
If ($gleancit = TRUE)
	Send "q m * * *"
ElseIf ($gleansect = TRUE)
	Gosub :Z_Lib~RETURNTOPLANET
	Send "m * * *"
Else
	Send "m * * *"
End
Goto :STARTGLEAN
:BOTGLEAN
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 1
If ($ck <> "R") and ($ck <> "P")
	Goto :NOGLEAN
End
GetWord $line $ck 3
If ($ck <> $z_botname) and ($ck <> $z_team)
	Goto :NOGLEAN
End
GetWord $line $word1 4
GetWord $line $word2 5
LowerCase $word1
LowerCase $word2
If ($word1 = "status")
	Gosub :INTCOM_STATUS
ElseIf ($word1 = "qss")
	Gosub :INTCOM_QSS
ElseIf ($word1 = "mode")
	Gosub :INTCOM_MODE
ElseIf ($word1 = "reset")
	Gosub :INTCOM_RESET
	Goto :NOGLEAN
ElseIf ($word1 = "glean") and ($word2 = "off")
	SetVar $Z_Lib~message $scripttitle & ": GLEAN - Aborted!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOGLEAN
End
Goto :STARTGLEAN
:ABORTGLEAN 
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": GLEAN - Aborted!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOGLEAN
:NOGLEAN
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# PLOCK 
:INTCOM_PLOCK
KillAllTriggers
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Bad sector number!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPRELOCK
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Bad sector number!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPRELOCK
End
If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
	SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Bad sector number!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPRELOCK
End
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOPRELOCK
End
If ($messagemode = "E")
	SetVar $messagemode "R"
End
Gosub :GETSTATS
SetVar $pdropreturnsector $current_sector
Gosub :Z_Lib~CURRENTPLANET
Gosub :Z_Lib~COMMSON
:STARTPRELOCK
KillAllTriggers
SetTextTrigger noore :PRENOORE "not have enough Fuel Ore on this planet"
SetTextTrigger nofig :PRENOFIG "Blind Jump"
SetTextTrigger jumpingto :PREJUMPINGTO "All Systems Ready, shall we engage?"
SetTextTrigger alreadythere :PREALREADYTHERE "You are already in that sector!"
Send "p" & $PARM1 & "*"
Pause
:PRENOFIG
KillAllTriggers
Echo ANSI_12 & "*** No fighter in target sector!***"
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - No fighter in target sector!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPRELOCK
:PRENOORE
KillAllTriggers
Echo ANSI_12 & "*** Not enough FUEL ORE!***"
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Not enough FUEL ORE!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPRELOCK
:PREALREADYTHERE
KillAllTriggers
Echo ANSI_12 & "*** ALREADY IN THAT SECTOR!***"
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - ALREADY IN THAT SECTOR!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send "cq"
WaitFor "<Computer deactivated>"
Goto :NOPRELOCK
:PREJUMPINGTO
KillAllTriggers
SetTextLineTrigger targetacquired :PRETARGETACQUIRED "Deployed Fighters Report Sector " & $PARM1
SetTextOutTrigger abortkey :PREABORT "~"
SetTextOutTrigger abortkey2 :PREABORT #8
SetTextTrigger remoteabort :PREABORT2 $z_botname & " prelock off"
SetTextTrigger prereset :PRERESET $z_botname & " reset"
SetTextTrigger preecho :PREECHO "All Systems Ready, shall we engage?"
SetTextTrigger aborted :PREABORT3 "Citadel command (?=help)"
SetVar $Z_Lib~message $scripttitle & ": PRELOCKED on sector " & $PARM1 & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send #145
WaitOn #145 & #8
Pause
:PREABORT3
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Aborted!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPRELOCK
:PREECHO
Send #145
WaitOn #145 & #8
Echo $boldred & "[" & $boldwhite & "PRELOCKED on sector " & $boldgreen & $PARM1 & $boldred & "]" & $boldcyan & " - " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & "-Abort " & $boldmagenta
SetTextTrigger preecho :PREECHO "All Systems Ready, shall we engage?"
Pause
:PRETARGETACQUIRED
KillAllTriggers
Send "y"
Gosub :GETSTATS
If ($current_sector = $PARM1)
	UpperCase $PARM2
	UpperCase $PARM3
	#$pdropreturnsector
	If ($PARM2 = "CAP") or ($PARM3 = "CAP")
		SetVar $attackmode "CAP"
		Gosub :SHIPCAP
	ElseIf ($PARM2 = "KILL") or ($PARM3 = "KILL")
		SetVar $attackmode "KILL"
		Gosub :SHIPCAP
	End
	Send #145
	WaitOn #145 & #8
	If ($PARM2 = "RETURN") or ($PARM3 = "RETURN")
		KillTrigger plockreturndelay
		SetDelayTrigger plockreturndelay :PRELOCKRETURNDELAY ($pdropreturndelay * 1000)
		SetTextOutTrigger plockabortreturn :PRELOCKABORTRETURN "~"
		SetTextOutTrigger plockabortreturn2 :PRELOCKABORTRETURN #8
		Pause
:PRELOCKRETURNDELAY
		KillTrigger plockreturndelay
		Send "p" & $pdropreturnsector & "*y*"
		KillTrigger plockabortreturn
	End
End
Goto :NOPRELOCK
:PRELOCKABORTRETURN
KillAllTriggers
Goto :NOPRELOCK
:PRERESET
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 1
If ($ck = "P") or ($ck = "F")
	Goto :PREJUMPINGTO
End
Send "n"
Gosub :INTCOM_RESET
Goto :NOPRELOCK
:PREABORT
KillAllTriggers
Send "n"
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Aborted!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPRELOCK
:PREABORT2
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 1
If ($ck = "P") or ($ck = "F")
	Goto :PREJUMPINGTO
End
Send "n"
SetVar $Z_Lib~message $scripttitle & ": PRELOCK - Aborted!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPRELOCK
:NOPRELOCK
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# NEWS 
:INTCOM_NEWS
KillAllTriggers
Lowercase $user_command_line
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NONEWS
End
SetArray $newsports 0
SetVar $newsportct 0
SetArray $newspodest 0
SetVar $newspodct 0
SetArray $newscomms 0
SetVar $newscomct 0
SetVar $newspldct 0
SetArray $newsinvade 0
SetVar $newsinvct 0
SetArray $newssdest 0
SetVar $newssdct 0
SetArray $newscap 0
SetVar $newscapct 0
SetArray $newstow 0
SetVar $newstowct 0
SetArray $newsann 0
SetVar $newsannct 0
SetArray $newsphoton 0
SetVar $newsphotct 0
SetVar $newspdestct 0
SetArray $newspdest 0
SetArray $newsportd 0
SetVar $newsportdct 0
SetVar $newsportdestct 0
SetVar $newscollisionct 0
SetArray $newscollisions 0
SetVar $newsrepoct 0
SetArray $newsrepo 0
SetVar $newscbyct 0
SetArray $newscby 0
SetVar $newsnoconct 0
SetArray $newsnocon 0
SetVar $Z_Lib~message $scripttitle & ": NEWS - Reading the daily logs, please wait...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
GetWordPos $user_command_line $pos1 "ss"
GetWordPos $user_command_line $pos2 "fed"
If ($pos1 <> "0")
	SetVar $messagemode "R"
ElseIf ($pos2 <> "0")
	SetVar $messagemode "F"
End
Send #145
WaitOn #145 & #8
SetTextLineTrigger Newsstart :NEWSSTART "Enter the beginning date you wish to read from. Today is"
Send "c d"
Pause
:NEWSSTART
KillAllTriggers
GetWord CURRENTLINE $newsdate 12
KillAllTriggers
SetTextLineTrigger news1 :NEWS1 "construction advanced."
SetTextLineTrigger news2 :NEWS2 "was destroyed by"
SetTextLineTrigger news3 :NEWS3 "was awarded a Federal Commission." 
SetTextLineTrigger news4 :NEWS4 "DESTROYED the planet"
SetTextLineTrigger news4a :NEWS4a "DESTROYED the Star Port"
SetTextLineTrigger news5 :NEWS5 "invaded"
SetTextLineTrigger news6 :NEWS6 "DESTROYED"
SetTextLineTrigger news7 :NEWS7 "captured"
SetTextLineTrigger news8 :NEWS8 "was towed out of FedSpace"
SetTextLineTrigger news9 :NEWS9 "posted this universal"
SetTextLineTrigger news10 :NEWS10 "launched a Photon Missile somewhere!"
SetTextLineTrigger news11 :NEWS11 "An unstable planetary mass was detected in sector"
SetTextLineTrigger news12 :NEWS12 "The Federation Repossessed"
SetTextLineTrigger news13 :NEWS13 " self-destructed!"
SetTextLineTrigger news14 :NEWS14 "construction did not advance."
SetTextTrigger newspause :NEWSPAUSE "[Pause]"
SetTextTrigger newsended :NEWSENDED "Computer command [TL="
WaitFor "Input search date :"
UpperCase $PARM1
If ($PARM1 = "ALL")
	Send "*"
Else
	Send $newsdate & "*"
End
WaitFor "Include time/date stamp? (Y/N) [N]"
Send "y"
Pause
:STARTNEWS
KillAllTriggers
SetTextLineTrigger news1 :NEWS1 "construction advanced."
SetTextLineTrigger news2 :NEWS2 "was destroyed by"
SetTextLineTrigger news3 :NEWS3 "was awarded a Federal Commission." 
SetTextLineTrigger news4 :NEWS4 "DESTROYED the planet"
SetTextLineTrigger news4a :NEWS4a "DESTROYED the Star Port"
SetTextLineTrigger news5 :NEWS5 "invaded"
SetTextLineTrigger news6 :NEWS6 "DESTROYED"
SetTextLineTrigger news7 :NEWS7 "captured"
SetTextLineTrigger news8 :NEWS8 "was towed out of FedSpace"
SetTextLineTrigger news9 :NEWS9 "posted this universal"
SetTextLineTrigger news10 :NEWS10 "launched a Photon Missile somewhere!"
SetTextLineTrigger news11 :NEWS11 "An unstable planetary mass was detected in sector"
SetTextLineTrigger news12 :NEWS12 "The Federation Repossessed"
SetTextLineTrigger news13 :NEWS13 " self-destructed!"
SetTextLineTrigger news14 :NEWS14 "construction did not advance."
SetTextTrigger newspause :NEWSPAUSE "[Pause]"
SetTextTrigger newsended :NEWSENDED "Computer command [TL="
Pause
:NEWS1
KillAllTriggers
SetVar $newsportct ($newsportct + 1)
SetVar $line CURRENTLINE
GetWordPos $line $pos "construction"
CutText $line $newsports[$newsportct] 1 ($pos - 2)
Goto :STARTNEWS
:NEWS2
KillAllTriggers
SetVar $newspodct ($newspodct + 1)
SetVar $newspodest[$newspodct] CURRENTLINE
Goto :STARTNEWS
:NEWS3
KillAllTriggers
SetVar $newscomct ($newscomct + 1)
SetVar $line CURRENTLINE
GetWordPos $line $pos "was awarded"
CutText $line $newscomms[$newscomct] 1 ($pos - 2)
Goto :STARTNEWS
:NEWS4
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $newspldct ($newspldct + 1)
GetText "!!!" & $line $word "!!!" " DESTROYED"
SetVar $x 1
SetVar $newsdestfound FALSE
While ($x <= $newspdestct)
	If ($word = $newspdest[$x][1])
		SetVar $newspdest[$x][2] ($newspdest[$x][2] + 1)
		SetVar $x $newspdestct
		SetVar $newsdestfound TRUE
	End
	SetVar $x ($x + 1)
End
If ($newsdestfound <> TRUE)
	SetVar $newspdestct ($newspdestct + 1)
	SetVar $newspdest[$newspdestct][1] $word
	SetVar $newspdest[$newspdestct][2] 1
End
Goto :STARTNEWS
:NEWS4a
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $newsportdestct ($newsportdestct + 1)
GetText "!!!" & $line $word "!!!" " DESTROYED"
SetVar $x 1
SetVar $newsportdfound FALSE
While ($x <= $newsportdct)
	If ($word = $newsportd[$x][1])
		SetVar $newsportd[$x][2] ($newsportd[$x][2] + 1)
		SetVar $x $newsportdct
		SetVar $newsportdfound TRUE
	End
	SetVar $x ($x + 1)
End
If ($newsportdfound <> TRUE)
	SetVar $newsportdct ($newsportdct + 1)
	SetVar $newsportd[$newsportdct][1] $word
	SetVar $newsportd[$newsportdct][2] 1
End
Goto :STARTNEWS
:NEWS5
KillAllTriggers
SetVar $newsinvct ($newsinvct + 1)
SetVar $newsinvade[$newsinvct] CURRENTLINE
Goto :STARTNEWS
:NEWS6
KillAllTriggers
SetVar $newssdct ($newssdct + 1)
SetVar $newssdest[$newssdct] CURRENTLINE
Goto :STARTNEWS
:NEWS7
KillAllTriggers
SetVar $newscapct ($newscapct + 1)
SetVar $newscap[$newscapct] CURRENTLINE
Goto :STARTNEWS
:NEWS8
KillAllTriggers
SetVar $newstowct ($newstowct + 1)
SetVar $line CURRENTLINE
GetWordPos $line $pos "was towed"
CutText $line $newstow[$newstowct] 1 ($pos - 2)
Goto :STARTNEWS
:NEWS9
KillAllTriggers
SetVar $line CURRENTLINE
GetWordPos $line $pos "posted this universal announcement:"
CutText $line $announcer 1 ($pos - 2)
SetTextLineTrigger newsann :NEWSANN
Pause
:NEWS10
KillAllTriggers
SetTextLineTrigger news10 :NEWS10 "launched a Photon Missile somewhere!"
SetVar $newsphotct ($newsphotct + 1)
SetVar $line CURRENTLINE
GetText "!!!" & $line $newsphoton[$newsphotct] "!!!" " launched"
Goto :STARTNEWS
:NEWS11
KillAllTriggers
SetVar $newscollisionct ($newscollisionct + 1)
GetWord CURRENTLINE $newscollisions[$newscollisionct] 9
Goto :STARTNEWS
:NEWS12
SetVar $newsrepoct ($newsrepoct + 1)
GetText CURRENTLINE $newsrepo[$newsrepoct] "Repossessed " " which"
GetText CURRENTLINE & "!!!" $temp "FedSpace by " "!!!"
SetVar $newsrepo[$newsrepoct] ($newsrepo[$newsrepoct] & " - owned by " & $temp)
Goto :STARTNEWS
:NEWS13
SetVar $newscbyct ($newscbyct + 1)
GetText "!!!" & CURRENTLINE $newscby[$newscbyct] "!!!" " self-destructed!"
Goto :STARTNEWS
:NEWS14
KillAllTriggers
SetVar $newsnoconct ($newsnoconct + 1)
SetVar $line CURRENTLINE
GetText $line $newsnocon[$newsnoconct] "Port " " construction"
Goto :STARTNEWS
:NEWSANN
KillAllTriggers
SetVar $newsannct ($newsannct + 1)
SetVar $newsann[$newsannct] $announcer & ": " & CURRENTLINE
Goto :STARTNEWS
:NEWSPAUSE
KillAllTriggers
Send "*"
Goto :STARTNEWS
:NEWSENDED
KillAllTriggers
SetVar $nonews TRUE
Send "q "
If ($PARM1 = "ALL")
	SetVar $ssmsg $dashedline & $scripttitle & " - NEWS HISTORY as at " & $newsdate & "*" & $dashedline & " *"
Else
	SetVar $ssmsg $dashedline & $scripttitle & " - DAILY NEWS BULLETIN for " & $newsdate & "*" & $dashedline & " *"
End
If ($newscomct > 0) or ($newstowct > 0) or ($newsrepoct > 0) or ($newscbyct > 0)
	SetVar $ssmsg ($ssmsg & "---+++--- Police Blotter ---+++---------------------------------------* *")
End
If ($newscomct > 0)
	SetVar $nonews FALSE
	If ($PARM1 = "ALL")
		SetVar $ssmsg ($ssmsg & "--- " & $newscomct & " Federal Commissions have been granted.* *")
	Else
		SetVar $ssmsg ($ssmsg & "--- " & $newscomct & " Federal Commissions were granted today.* *")
	End
	SetVar $x 1
	While ($x <= $newscomct)
		SetVar $ssmsg ($ssmsg & "      " & $newscomms[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newstowct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & " " & $newstowct & " traders were towed from Fedspace.* *")
	SetVar $x 1
	While ($x <= $newstowct)
		SetVar $ssmsg ($ssmsg & "      " & $newstow[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newsrepoct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & " " & $newsrepoct & " ships were repossessed.* *")
	SetVar $x 1
	While ($x <= $newsrepoct)
		SetVar $ssmsg ($ssmsg & "      " & $newsrepo[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newscbyct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & " " & $newscbyct & " players CBY'ed.* *")
	SetVar $x 1
	While ($x <= $newscbyct)
		SetVar $ssmsg ($ssmsg & "      " & $newscby[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newsportdestct > 0) or ($newsportct > 0) or ($newsnoconct > 0)
	SetVar $ssmsg ($ssmsg & "---+++--- Port Report ---+++------------------------------------------* *")
End
If ($newsportdestct > 0)
	SetVar $nonews FALSE
	If ($PARM1 = "ALL")
		SetVar $ssmsg ($ssmsg & "--- " & $newsportdestct & " ports have been destroyed.* *")
	Else
		SetVar $ssmsg ($ssmsg & "--- " & $newsportdestct & " ports were destroyed today.* *")
	End
	SetVar $x 1
	While ($x <= $newsportdct)
		SetVar $ssmsg ($ssmsg & "      " & $newsportd[$x][1] & ": " & $newsportd[$x][2] & "*")
		SetVar $x ($x + 1)
	End
	If ($newsportdct > 0)
		SetVar $ssmsg ($ssmsg & " *")
	End
End
If ($newsportct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newsportct & " ports advanced their construction.* *")
	SetVar $x 1
	While ($x <= $newsportct)
		SetVar $ssmsg ($ssmsg & "      " & $newsports[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newsnoconct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newsnoconct & " ports did NOT advance their construction.* *")
	SetVar $x 1
	While ($x <= $newsnoconct)
		SetVar $ssmsg ($ssmsg & "      " & $newsnocon[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newspodct > 0) or ($newssdct > 0) or ($newscapct > 0) or ($newsphotct > 0)
	SetVar $ssmsg ($ssmsg & "---+++--- Hostilities Report ---+++-----------------------------------* *")
End
If ($newspodct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newspodct & " traders destroyed/podded.* *")
	SetVar $x 1
	While ($x <= $newspodct)
		SetVar $ssmsg ($ssmsg & $newspodest[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newssdct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newssdct & " ships destroyed.* *")
	SetVar $x 1
	While ($x <= $newssdct)
		SetVar $ssmsg ($ssmsg & $newssdest[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newscapct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newscapct & " ships captured.* *")
	SetVar $x 1
	While ($x <= $newscapct)
		SetVar $ssmsg ($ssmsg & "      " & $newscap[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newsphotct > 0)
	SetVar $nonews FALSE
	SetVar $ssmsg ($ssmsg & "--- " & $newsphotct & " photons launched.* *")
	SetVar $x 1
	While ($x <= $newsphotct)
		SetVar $ssmsg ($ssmsg & "      " & $newsphoton[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newspldct > 0) or ($newsinvct > 0)
	SetVar $ssmsg ($ssmsg & "---+++--- Planetary News ---+++---------------------------------------* *")
End
If ($newspldct > 0)
	SetVar $nonews FALSE
	If ($PARM1 = "ALL")
		SetVar $ssmsg ($ssmsg & "--- " & $newspldct & " planets have been destroyed.* *")
	Else
		SetVar $ssmsg ($ssmsg & "--- " & $newspldct & " planets were destroyed today.* *")
	End
	SetVar $x 1
	While ($x <= $newspdestct)
		SetVar $ssmsg ($ssmsg & "      " & $newspdest[$x][1] & ": " & $newspdest[$x][2] & "*")
		SetVar $x ($x + 1)
	End
	If ($newspdestct > 0)
		SetVar $ssmsg ($ssmsg & " *")
	End
End
If ($newsinvct > 0)
	SetVar $nonews FALSE
	If ($PARM1 = "ALL")
		SetVar $ssmsg ($ssmsg & "--- " & $newsinvct & " planets have been invaded.* *")
	Else
		SetVar $ssmsg ($ssmsg & "--- " & $newsinvct & " planets were invaded today.* *")
	End
	SetVar $x 1
	While ($x <= $newsinvct)
		SetVar $ssmsg ($ssmsg & " " & $newsinvade[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newscollisionct > 0)
	SetVar $nonews FALSE
	If ($PARM1 = "ALL")
		SetVar $ssmsg ($ssmsg & "--- " & $newscollisionct & " planet collisions have been detected.* *")
	Else
		SetVar $ssmsg ($ssmsg & "--- " & $newscollisionct & " planet collisions were detected today.* *")
	End
	SetVar $x 1
	While ($x <= $newscollisionct)
		SetVar $ssmsg ($ssmsg & " in sector: " & $newscollisions[$x] & "*")
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($newsannct > 0)
	SetVar $ssmsg ($ssmsg & "---+++--- Announcements ---+++----------------------------------------* *")
End
If ($newsannct > 0)
	SetVar $nonews FALSE
	SetVar $x 1
	While ($x <= $newsannct)
		If ($newsann[$x] <> "")
			SetVar $ssmsg ($ssmsg & $newsann[$x] & " *")
		End
		SetVar $x ($x + 1)
	End
	SetVar $ssmsg ($ssmsg & " *")
End
If ($nonews = TRUE)
	SetVar $ssmsg ($ssmsg & " Nothing to report.*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
FileExists $fileexists GAMENAME & "_NEWS.txt"
Replacetext $ssmsg #13 #13 & #10
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_NEWS-backup-" & $timestamp & ".txt"
	Rename GAMENAME & "_NEWS.txt" GAMENAME & "_NEWS-backup-" & $timestamp & ".txt"
End
Delete GAMENAME & "_NEWS.txt"
Write GAMENAME & "_NEWS.txt" $ssmsg
SetVar $ssmsg ""
SetArray $newsports 0
SetVar $newsportct 0
SetArray $newspodest 0
SetVar $newspodct 0
SetArray $newscomms 0
SetVar $newscomct 0
SetVar $newspldct 0
SetArray $newsinvade 0
SetVar $newsinvct 0
SetArray $newssdest 0
SetVar $newssdct 0
SetArray $newscap 0
SetVar $newscapct 0
SetArray $newstow 0
SetVar $newstowct 0
SetArray $newsann 0
SetVar $newsannct 0
SetArray $newsphoton 0
SetVar $newsphotct 0
SetVar $newspdestct 0
SetArray $newspdest 0
SetArray $newsportd 0
SetVar $newsportdct 0
SetVar $newsportdestct 0
SetVar $newscollisionct 0
SetArray $newscollisions 0
SetVar $newsrepoct 0
SetArray $newsrepo 0
SetVar $newscbyct 0
SetArray $newscby 0
SetVar $newsnoconct 0
SetArray $newsnocon 0
:NONEWS
If ($z_usesound = TRUE)
	Sound ding
End
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# SHIPS 
:INTCOM_SHIPS
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOSHIPS
End
SetVar $shipscount 0
SetVar $shipsrange 0
SetArray $shipsarray 0
SetArray $shipssector 0
SetArray $shipsok 0
If ($PARM1 <> "0") and ($PARM1 <> "")
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $shipsrange $PARM1
	End
End
SetTextTrigger spaused :SHIPSPAUSED "[Pause]"
SetTextTrigger sready :SHIPSREADY "-----------------------------------------------------------------------------"
Send "x" 
Pause
:SHIPSPAUSED
Send "*"
Pause
:SHIPSREADY
KillAllTriggers
SetTextLineTrigger shipsscan :SHIPSSCAN
Pause
:SHIPSSCAN
GetWord CURRENTLINE $word 1
If ($word = "<I>")
	KillAllTriggers
	Goto :SHIPSDONE
ElseIf ($word = "You")
	KillAllTriggers
	SetVar $Z_Lib~message $scripttitle & ": SHIPS - No other ships available!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSHIPS
ElseIf ($word = "") or ($word = "0")
	SetTextLineTrigger shipsscan :SHIPSSCAN
	Pause
Else
	SetVar $shipscount ($shipscount + 1)
	SetVar $shipsarray[$shipscount] CURRENTLINE
	GetWord $shipsarray[$shipscount] $shipssector[$shipscount] 2
	SetTextLineTrigger shipsscan :SHIPSSCAN
	Pause
End
:SHIPSDONE
Send "q*"
SetVar $Z_Lib~message $scripttitle & " - SHIPS: Processing...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
GetNearestWarps $nearsectors CURRENTSECTOR
SetVar $x 1
While ($x <= $shipscount)
	If ($shipsrange = "0")
		SetVar $shipsok[$x] TRUE
	ElseIf ($shipssector[$x] = CURRENTSECTOR)
		SetVar $shipsok[$x] TRUE
	Else
		SetVar $y 1
		While ($y <= $nearsectors)
			GetDistance $shipsdist CURRENTSECTOR $nearsectors[$y]
			If ($shipsdist > $shipsrange)
				SetVar $y $nearsectors
			Else
				If ($shipssector[$x] = $nearsectors[$y])
					SetVar $shipsok[$x] TRUE
					SetVar $y $nearsectors
				End
			End
			SetVar $y ($y + 1)
		End
	End
	SetVar $x ($x + 1)
End
If ($shipsrange = "0")
	SetVar $ssmsg $dashedline & $scripttitle & ": SHIPS - KNOWN Ships List.*" & $dashedline
Else
	SetVar $ssmsg $dashedline & $scripttitle & " - SHIPS in XPORT RANGE of " & $shipsrange & " sectors from sector " & CURRENTSECTOR & ".*" & $dashedline
End
SetVar $ssmsg ($ssmsg & "Ship  Sect Name                  Fighters Shields Hops Type*" & $dashedline)
SetVar $x 1
SetVar $shipsfound FALSE
While ($x <= $shipscount)
	If ($shipsok[$x] = TRUE)
		GetLength $shipsarray[$x] $len
		If ($len > 70)
			Cuttext $shipsarray[$x] $shipsarray[$x] 1 70
		End
		SetVar $ssmsg ($ssmsg & $shipsarray[$x] & "*")
		SetVar $shipsfound TRUE
	End
	SetVar $x ($x + 1)
End
If ($shipsfound = FALSE)
	SetVar $ssmsg ($ssmsg & "No ships found in range...*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOSHIPS
SetVar $shipscount 0
SetArray $shipsarray 0
SetArray $shipssector 0
SetArray $nearsectors 0
SetArray $shipsok 0
SetVar $ssmsg ""
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
If ($z_usesound = TRUE)
	Sound ding
End
Return
# MODE 
:INTCOM_MODE
UpperCase $PARM1
GetWordPos $PARM $pos "G"
If ($pos > 0)
	SetVar $mode "GENERAL"
	SetVar $Z_Lib~message $scripttitle & " - MODE reset to " & $mode & ".*"
Else
	SetVar $Z_Lib~message $scripttitle & " - Current MODE is " & $mode & ".*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# AUTOFURB 
:INTCOM_AUTOFURB
UpperCase $PARM1
Gosub :GETSTATS
If ($PARM1 = "") or ($PARM1 = "0")
	If ($autofurb = TRUE)
		SetVar $ssmsg ($scripttitle & ": AUTOFURB is currently ON.*")
	Else
		SetVar $ssmsg ($scripttitle & ": AUTOFURB is currently OFF.*")
	End
ElseIf ($PARM1 = "ON")
	SetVar $autofurb TRUE
	SetVar $ssmsg ($scripttitle & ": AUTOFURB is now set to ON.*")
ElseIf ($PARM1 = "OFF")
	SetVar $autofurb FALSE
	SetVar $ssmsg ($scripttitle & ": AUTOFURB is now set to OFF.*")
Else
	SetVar $ssmsg ($scripttitle & ": AUTOFURB - BAD parameter... get help!*")
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# PLOW 
:INTCOM_PLOW
KillAllTriggers
If ($z_rescueavailable <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": PLOW - No RESCUE Service available. Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPLOW
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
If ($z_Lib~prompt = "ERROR")
	Goto :NOPLOW
End
If ($PARM1 = "") or ($PARM1 = "0")
	Goto :PLOWBADPARM
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :PLOWBADPARM
End
If ($PARM1 <= 10) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
	Goto :PLOWBADPARM
End
SetVar $plowplanet 0
LowerCase $user_command_line
LowerCase $PARM2
If ($PARM2 <> "0") and ($PARM2 <> "") and ($PARM2 <> "mow")
	IsNumber $isnum $PARM2
	If ($isnum <> TRUE)
		Goto :PLOWBADPARM
	End
	SetVar $plowplanet $PARM2
End
GetWordPos $user_command_line $pos "mow"
If ($pos > 0)
	SetVar $plowcharge FALSE
	SetVar $Z_Lib~message $scripttitle & ": PLOW - Plowing the lanes (MOW mode)...*"
	SetVar $mowmode "MOW"
Else
	SetVar $plowcharge TRUE
	SetVar $Z_Lib~message $scripttitle & ": PLOW - Plowing the lanes (CHARGE mode)...*"
	SetVar $mowmode "CHARGE"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $plow TRUE
SetVar $target $PARM1
SetVar $z_dockport FALSE
Gosub :GETSTATS
Send #145
WaitOn #145 & #8
SetVar $previoussector $current_sector
Gosub :MOVE
If ($badpath = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": PLOW - Could not set a course! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPLOW
End
If ($plowcharge = TRUE)
	Send "fz1*cqz*d*"
End
Send #145
WaitOn #145 & #8
SetVar $x 0
SetVar $plowsuccess FALSE
If ($plowplanet = 0)
	SetVar $plowmacro "l"
Else
	SetVar $plowmacro "l j" & #8 & $plowplanet & "*"
End
Send #145
WaitOn #145 & #8
While (($x <= 1000) and ($plowsuccess = FALSE))
	KillAllTriggers
	SetTextLineTrigger plow1 :PLOWLANDED "Planet #"
	SetTextTrigger plow2 :PLOWNOTLANDED "Command [TL="
	SetTextTrigger plow3 :PLOWBADPLANET "That planet is not in this sector."
	SetDelayTrigger plow4 :PLOWTOOKTOOLONG 10000
	SetDelayTrigger plowdelay :PLOWDELAY 200
	Send $plowmacro
	Pause
:PLOWDELAY
	Pause
:PLOWNOTLANDED
	KillAllTriggers
	SetVar $x ($x + 1)
	Goto :PLOWLOOP
:PLOWBADPLANET
	KillAllTriggers
	SetVar $x ($x + 1)
	Send "q* "
	Send #145
	WaitOn #145 & #8
	Goto :PLOWLOOP
:PLOWTOOKTOOLONG
	KillAllTriggers
	SetVar $x ($x + 1)
	Send "q* "
	Send #145
	WaitOn #145 & #8
	Goto :PLOWLOOP
:PLOWLANDED
	KillAllTriggers
	GetWord CURRENTLINE $plowplanet2 2
	StripText $plowplanet2 "#"
	SetVar $plowsuccess TRUE
	SetVar $x 21
:PLOWLOOP
End
If ($plowsuccess = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": PLOW - I landed on planet " & $plowplanet2 & "*"
	Send "zqm***cx q s*/"
Else
	Send #145
	WaitOn #145 & #8
	GetWord CURRENTLINE $word 1
	If ($word = "Planet")
		SetTextLineTrigger plow1 :PLOWLANDED2 "Planet #"
		Send "*"
		Pause
:PLOWLANDED2
		KillAllTriggers
		GetWord CURRENTLINE $plowplanet2 2
		StripText $plowplanet2 "#"
		SetVar $plowsuccess TRUE
		SetVar $Z_Lib~message $scripttitle & ": PLOW - I landed on planet " & $plowplanet2 & "*"
		Send "zqm***cx q s*/"
	Else
		SetVar $Z_Lib~message $scripttitle & ": PLOW - FAILED to land on planet!!!*"
		Send "/"
	End
End
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
Goto :NOPLOW
:PLOWBADPARM
SetVar $Z_Lib~message $scripttitle & ": PLOW - Bad parameter! Exiting...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPLOW
:NOPLOW
SetVar $plow FALSE
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# EVACUATE 
:INTCOM_EVACUATE
KillAllTriggers
SetVar $evacuationtarget 0
LowerCase $PARM1
If ($PARM1 = "b")
	SetVar $evacuationtarget $z_base
ElseIf ($PARM1 = "s")
	SetVar $evacuationtarget $z_safesector
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 10) and ($PARM1 <= SECTORS) and ($PARM1 <> STARDOCK)
			SetVar $evacuationtarget $PARM1
		End
	End
End
If ($evacuationtarget < 11) or ($evacuationtarget > SECTORS) or ($evacuationtarget = STARDOCK)
	SetVar $Z_Lib~message $scripttitle & ": EVACUATE - Bad parameter! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOEVACUATE
End
Gosub :GETSTATS
If ($twarp < 1)
	SetVar $Z_Lib~message $scripttitle & ": EVACUATE - You need a TWARP drive! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOEVACUATE
End
SetVar $evacuatecurrent $current_sector
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOEVACUATE
End
If ($prompt = "Citadel")
	Send "q q "
End
Send #145
Waitfor #145 & #8
SetTextLineTrigger landing :EVACUATELANDING "Registry# and Planet Name"
SetTextTrigger noplanets :EVACUATENOPLANETS "Command [TL="
SetTextTrigger oneplanet :EVACUATE1PLANET "Planet command (?="
SetVar $pcount 0
SetArray $planets 0
Send "l"
Pause
:EVACUATELANDING
KillTrigger oneplanet
KillTrigger landing
SetTextLineTrigger getpnums :EVACUATEGETPNUMS ">"
SetTextTrigger gotpnums :EVACUATEGOTPNUMS "Land on which planet"
Pause
:EVACUATENOPLANETS
KillTrigger oneplanet
KillTrigger landing
KillTrigger noplanets
SetVar $Z_Lib~message $scripttitle & ": EVACUATE - No planets in sector! Exiting...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOEVACUATE
:EVACUATE1PLANET
KillAllTriggers
SetVar $pcount 1
Gosub :Z_Lib~CURRENTPLANET
SetVar $planets[$pcount] $Z_Lib~planetnum
Goto :EVACUATEGOTPNUMS
:EVACUATEGETPNUMS
KillTrigger getpnums
SetVar $pcount ($pcount + 1)
GetText CURRENTLINE $planets[$pcount] "   <" ">"
StripText $planets[$pcount] " "
SetTextLineTrigger getpnums :EVACUATEGETPNUMS ">"
Pause
:EVACUATEGOTPNUMS
KillTrigger getpnums
KillTrigger gotpnums
KillTrigger noplanets
KillTrigger oneplanet
Send "q* "
SetVar $x 1
SetVar $evacuateskip 0
SetVar $evacuated 0
SetVar $Z_Lib~message $scripttitle & ": EVACUATE - Commencing EVACUATION to sector " & $evacuationtarget & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
While ($x <= $pcount)
	KillTrigger haswarp
	KillTrigger nowarp
	SetTextTrigger haswarp :EVACUATEHASWARP "TransWarp power ="
	SetTextTrigger nowarp :EVACUATENOWARP "Planet command (?=help)"
	SetTextTrigger noplanet :EVACUATEPLANETGONE "That planet is not in this sector."
	Send "lj" & #8 & #8 & $planets[$x] & "*"
	Pause
:EVACUATEPLANETGONE
	KillTrigger haswarp
	KillTrigger nowarp
	KillTrigger noplanet
	SetVar $evacuateskip ($evacuateskip + 1)
	Goto :EVACUATENEXT
:EVACUATEHASWARP
	KillTrigger haswarp
	KillTrigger nowarp
	KillTrigger noplanet
	SetVar $evacuatewarp TRUE
	Goto :GOTWARPINFO
:EVACUATENOWARP
	KillTrigger haswarp
	KillTrigger nowarp
	KillTrigger noplanet
	SetVar $evacuatewarp FALSE
	Goto :GOTWARPINFO
:GOTWARPINFO		
	If ($evacuatewarp = FALSE)
		SetVar $evacuateskip ($evacuateskip + 1)
		Send "q "
		Goto :EVACUATENEXT
	Else
		SetVar $pjumpsector $evacuationtarget
		Send "c "
		Gosub :JUMPTHEPLANET
		If ($failedtojump = TRUE)
			SetVar $evacuateskip ($evacuateskip + 1)
			Send " q q * "
			Goto :EVACUATENEXT
		Else
			SetVar $evacuated ($evacuated + 1)
			Send "q m * * * t * * 1 * q "
			If ($x < $pcount)
				SetVar $z_dockport FALSE
				SetVar $target $evacuatecurrent
				Gosub :GETSTATS
				Send #145
				WaitFor #145 & #8
				Gosub :TWARPING
				Gosub :GETSTATS
				Send #145
				WaitFor #145 & #8
				If ($evacuatecurrent <> $current_sector)
					SetVar $x $pcount
					SetVar $Z_Lib~message $scripttitle & ": EVACUATE - Could NOT twarp back to evacuation sector! Exiting...*"
					SetVar $Z_Lib~messageto $sender
					SetVar $Z_Lib~messagemode $messagemode
					Gosub :MSGBRIDGE
					Goto :EVACUATENEXT
				End
			End
		End
	End
:EVACUATENEXT	
	SetVar $x ($x + 1)
End
If ($evacuatewarp = FALSE)
	SetVar $z_dockport FALSE
	SetVar $target $evacuationtarget
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	Gosub :TWARPING
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
End
SetVar $Z_Lib~message $scripttitle & ": EVACUATION COMPLETE - " & $evacuated & " evacuated, " & $evacuateskip & " skipped..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($z_usesound = TRUE)
	Sound ding
End
:NOEVACUATE
SetVar $pcount 0
SetArray $planets 0
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# MOVESHIPS 
:INTCOM_MOVESHIPS
KillAllTriggers
LowerCase $PARM1
If ($PARM1 = "b")
	SetVar $moveshiptarget $z_base
ElseIf ($PARM1 = "s")
	SetVar $moveshiptarget $z_safesector
ElseIf ($PARM1 = "d")
	SetVar $moveshiptarget STARDOCK
ElseIf ($PARM1 = "a")
	SetVar $moveshiptarget ALPHACENTAURI
ElseIf ($PARM1 = "r")
	SetVar $moveshiptarget RYLOS
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 0) and ($PARM1 <= SECTORS)
			SetVar $moveshiptarget $PARM1
		End
	End
End
If ($moveshiptarget < 0) or ($moveshiptarget > SECTORS)
	SetVar $Z_Lib~message $scripttitle & ": MOVESHIPS - Bad parameter! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSHIPMOVE
End
Gosub :GETSTATS
If ($twarp <> 2)
	SetVar $Z_Lib~message $scripttitle & ": MOVESHIPS - You need a Type 2 TWARP! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSHIPMOVE
End
SetVar $moveshipcurrent $current_sector
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSHIPMOVE
End
SetVar $towdone FALSE
SetVar $towany TRUE
Gosub :Z_Lib~COMMSOFF
SetVar $Z_Lib~message $scripttitle & ": MOVING SHIPS to sector " & $moveshiptarget & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $x 0
While ($towdone = FALSE)
	Gosub :TOWANY
	If ($towdone = TRUE)
		Goto :SHIPMOVEDONE
	End
	SetVar $z_dockport FALSE
	SetVar $z_gas TRUE
	SetVar $target $moveshiptarget
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	Gosub :TWARPING
	Send "  "
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	If ($moveshiptarget <> $current_sector)
		SetVar $towdone TRUE
		SetVar $Z_Lib~message $scripttitle & ": MOVESHIPS - Could NOT twarp to target sector! Exiting...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :SHIPMOVEDONE
	End
	Send "w  *  *  "
	SetVar $x ($x + 1)
	SetVar $z_dockport FALSE
	SetVar $z_gas TRUE
	SetVar $target $moveshipcurrent
	Gosub :TWARPING
	Send "  "
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	If ($moveshipcurrent <> $current_sector)
		SetVar $towdone TRUE
		SetVar $Z_Lib~message $scripttitle & ": MOVESHIPS - Could NOT twarp back! Exiting...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :SHIPMOVEDONE
	End
:SHIPMOVEDONE
End
SetVar $Z_Lib~message $scripttitle & ": MOVESHIPS - COMPLETE! Moved " & $x & " ships.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($z_usesound = TRUE)
	Sound ding
End
:NOSHIPMOVE
Gosub :Z_Lib~COMMSON
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# PWARP 
:INTCOM_P
:INTCOM_PWARP
KillAllTriggers
LowerCase $PARM1
If ($PARM1 = "b")
	SetVar $pjumpsector $z_base
ElseIf ($PARM1 = "s")
	SetVar $pjumpsector $z_safesector
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 10) and ($PARM1 <= SECTORS) and ($PARM1 <> STARDOCK)
			SetVar $pjumpsector $PARM1
		End
	End
End
If ($pjumpsector < 0) or ($pjumpsector > SECTORS)
	SetVar $Z_Lib~message $scripttitle & ": PWARP - Bad parameter! Exiting...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOPWARP
End
Gosub :Z_Lib~COMMSOFF
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "CITADEL"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPWARP
End
Gosub :JUMPTHEPLANET
If ($failedtojump = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": PWARP - FAILED to reach sector " & $pjumpsector & "...*"
Else
	Send "scr*q"
	SetVar $Z_Lib~message $scripttitle & ": PWARP - The planet is now in sector " & $pjumpsector & "...*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPWARP
:NOPWARP
Gosub :Z_Lib~COMMSON
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# CSHIP 
:INTCOM_CSHIP
KillAllTriggers
If ($messagemode = "E")
	SetVar $messagemode "R"
End
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCSHIP
End
Send "c o* c q "
SetVar $Z_Lib~message $scripttitle & ": CSHIP - Ship set to corporate ownership...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCSHIP
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# TURNS 
:INTCOM_TURNS
KillAllTriggers
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
GetText CURRENTLINE $timeleft "[TL=" "]:["
If ($Z_Lib~isunlimited = TRUE) or ($turnbase = "Unlimited")
	SetVar $Z_Lib~message $scripttitle & ": I have unlimited turns.*"
Else
	SetVar $Z_Lib~progress $turns
	SetVar $Z_Lib~goal ($turnbank * $turnbase)
	Gosub :Z_Lib~PROGRESSBAR 
	SetPrecision 4
	SetVar $percent ((100 / ($turnbank * $turnbase)) * $turns)
	SetPrecision 0
	SetVar $Z_Lib~number $percent
	Gosub :Z_Lib~ROUND 
	SetVar $percent $Z_Lib~roundup
	SetVar $Z_Lib~message $scripttitle & ": I have " & $turns & " turns. " & $Z_Lib~progressbar & "  " & $percent & "%*"
	If ($PARM1 <> "0") and ($PARM1 <> "")
		IsNumber $isnum $PARM1
		If ($isnum = TRUE)
			SetVar $z_minturns $PARM1
			SaveVar $z_minturns
			SetVar $Z_Lib~message ($Z_Lib~message & "Minimum turns changed to: " & $z_minturns & " turns.*")
		Else
			SetVar $Z_Lib~message ($Z_Lib~message & "Minimum turns currently set to: " & $z_minturns & " turns.*")
		End
	Else
		SetVar $Z_Lib~message ($Z_Lib~message & "Minimum turns currently set to: " & $z_minturns & " turns.*")
	End
End
If ($timelimit <> "Unlimited")
	SetVar $Z_Lib~message ($Z_Lib~message & "Time Left: " & $timeleft & "*")
End
SetVar $Z_Lib~messageto $sender
If ($messagemode = "E")
	SetVar $messagemode "S"
End
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
Return
# PINFO 
:INTCOM_PINFO
KillAllTriggers
Send #145
WaitFor #145 & #8
GetWord CURRENTLINE $picit 1
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "PLANET"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPINFO
End
Send #145
WaitOn #145 & #8
SetVar $ct 0
SetArray $lines 0
SetTextLineTrigger pinfoline :PINFOLINE
SetTextTrigger pinfodone :PINFODONE "Planet command (?=help)"
Send "*"
Pause
:PINFOLINE
SetVar $ct ($ct + 1)
SetVar $lines[$ct] CURRENTLINE 
SetTextLineTrigger pinfoline :PINFOLINE
Pause
:PINFODONE
KillAllTriggers
SetVar $ssmsg $dashedline & $scripttitle & " - PLANET INFORMATION.*" & $dashedline
SetVar $x 1
While ($x <= $ct)
	GetWord $lines[$x] $word 1
	GetWordPos $lines[$x] $pos "Planetary Defense Shielding Power Level"
	If ($word = "Item")
		SetVar $lines[$x] "Item  Colonists  Colonists    Daily     Planet      Ship      Planet"
	ElseIf ($word = "(1000s)")
		SetVar $lines[$x] "       (1000s)   2 Build 1   Product    Amount     Amount     Maximum"
	ElseIf ($word = "-------")
		SetVar $lines[$x] "---  ---------  ---------  ---------  ---------  ---------  ---------"
	ElseIf ($word = "Fuel")
		StripText $lines[$x] " Ore"
	ElseIf ($word = "Organics")
		StripText $lines[$x] "Organics"
		SetVar $lines[$x] ("Org " & $lines[$x])
	ElseIf ($word = "Equipment")
		StripText $lines[$x] "Equipment"
		SetVar $lines[$x] ("Equ  " & $lines[$x])
	ElseIf ($word = "Fighters")
		StripText $lines[$x] "hter"
	ElseIf ($lines[$x] = "")
		SetVar $lines[$x] " "
	ElseIf ($pos > 0)
		SetVar $lines[$x] ("    " & $lines[$x])
	End
	StripText $lines[$x] #13
	StripText $lines[$x] #8
	SetVar $ssmsg ($ssmsg & $lines[$x] & "*")
	SetVar $x ($x + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetArray $lines 0
:NOPINFO
If ($picit = "Citadel")
	SetVar $Z_Lib~heraldss TRUE
	SetVar $Z_Lib~setprompt "CITADEL"
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
End
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# DELIMP 
:INTCOM_DELIMP
KillAllTriggers
Gosub :GETSTATS
SetVar $putlimps 0
IsNumber $isnum $PARM1
If ($isnum = TRUE)
	SetVar $putlimps $PARM1
End
If ($putlimps > $limps)
	SetVar $putlimps $limps
End
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODELIMP
End
:DELIMPSTART
SetTextTrigger needsclear :DELIMPNOTCLEAR "These mines are not under your control."
SetTextTrigger isclear :DELIMPISCLEAR "How many Limpet mines do you want defending this sector?"
Send "h 2"
Pause
:DELIMPNOTCLEAR
KillTrigger isclear
KillTrigger needsclear
Gosub :Z_Lib~SYNC
Gosub :EXIT
Goto :DELIMPSTART
:DELIMPISCLEAR
KillTrigger needsclear
KillTrigger isclear
If ($putlimps > 0) and ($limps >= $putlimps)
	Send $putlimps & " * z" & $z_figowner & "* "
	SetSectorParameter $current_sector "LIMPSEC" TRUE
Else
	Send "0 * "
End
SetVar $Z_Lib~message $scripttitle & ": DELIMP - Limps cleared in sector " & $current_sector & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NODELIMP
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# SEED 
:INTCOM_SEED
LowerCase $PARM1
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $Z_Lib~message $scripttitle & ": SEED - AutoSS Seed is currently set to " & $z_seed & ".*"
ElseIf ($PARM1 = "none") or ($PARM1 = "zero") or ($PARM1 = "nil") or ($PARM1 = "clear")
	SetVar $z_seed "0"
	SaveVar $z_seed
	SetVar $Z_Lib~message $scripttitle & ": SEED - AutoSS Seed now set to " & $z_seed & ".*"
Else
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		SetVar $z_seed $PARM1
		SaveVar $z_seed
		SetVar $Z_Lib~message $scripttitle & ": SEED - AutoSS Seed now set to " & $z_seed & ".*"
	Else
		SetVar $Z_Lib~message $scripttitle & ": SEED - Bad Parameter !*"
	End
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Return
# PROMPT 
:INTCOM_PROMPT
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "COMMAND") or ($PARM1 = "CITCOM") or ($PARM1 = "PLANET") or ($PARM1 = "CITADEL") or ($PARM1 = "COM") or ($PARM1 = "CIT") or ($PARM1 = "PLA")
	If ($PARM1 = "CIT")
		SetVar $PARM1 "CITADEL"
	End
	If ($PARM1 = "COM")
		SetVar $PARM1 "COMMAND"
	End
	If ($PARM1 = "PLA")
		SetVar $PARM1 "PLANET"
	End
	SetVar $Z_Lib~heraldss TRUE
	SetVar $Z_Lib~setprompt $PARM1
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		SetVar $Z_Lib~message $scripttitle & ": PROMPT could NOT be set!*"
	Else
		SetVar $Z_Lib~message $scripttitle & ": PROMPT is now set to " & $prompt & " !*"
	End
Else
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $prompt 1 7
	UpperCase $prompt
	SetVar $Z_Lib~message $scripttitle & ": PROMPT is currently set to " & $prompt & " !*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# FS 
:INTCOM_FS
KillAllTriggers
SetVar $fsport FALSE
SetVar $fsland FALSE
LowerCase $user_command_line
GetWordPos $user_command_line $pos "p"
If ($pos > 0)
	SetVar $fsport TRUE
	StripText $PARM1 "p"
	StripText $PARM1 "P"
End
GetWordPos $user_command_line $pos "l"
If ($pos > 0)
	SetVar $fsland TRUE
	StripText $PARM1 "l"
	StripText $PARM1 "L"
End
GetWordPos $user_command_line $pos "n"
If ($pos > 0)
	SetVar $fsland TRUE
	StripText $PARM1 "n"
	StripText $PARM1 "N"
End
Gosub :GETSTATS
If ($current_sector <= 10)
	SetVar $Z_Lib~message $scripttitle & ": FS - I am currently in sector " & $current_sector & " !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFS
End
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOFS
End
If ($align >= 1000)
	GetRnd $jumppoint 1 10
	Goto :FSTWARP
End
SetVar $z SECTOR.WARPCOUNT[$current_sector]
SetVar $x 1
SetVar $fstarget 0
While ($x <= $z)
	If (SECTOR.WARPS[$current_sector][$x] > 0) and (SECTOR.WARPS[$current_sector][$x] < 11)
		SetVar $fstarget SECTOR.WARPS[$current_sector][$x]
		SetVar $x $z
	End
	SetVar $x ($x + 1)
End
If ($fstarget = "0")
	SetArray $fswarps 0
	SetVar $fswarps 0
	SetVar $x 1
	While ($x <= 10)
		SetVar $z SECTOR.WARPINCOUNT[$x]
		SetVar $y 1
		While ($y <= $z)
			If (SECTOR.WARPSIN[$x][$y] > 10) and (SECTOR.WARPSIN[$x][$y] <= SECTORS) and (SECTOR.WARPSIN[$x][$y] <> STARDOCK)
				GetSectorParameter SECTOR.WARPSIN[$x][$y] "FIGSEC" $figged
				If ($figged = TRUE)
					SetVar $fswarps ($fswarps + 1)
					SetVar $fswarps[$fswarps] SECTOR.WARPSIN[$x][$y]
				End
			End
			SetVar $y ($y + 1)
		End
		SetVar $x ($x + 1)
	End
	If ($fswarps = 0)
		SetVar $Z_Lib~message $scripttitle & ": FS - Could not find a jumppoint to FedSpace!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFS
	End
	GetRnd $rnd 1 $fswarps
	SetVar $jumppoint $fswarps[$rnd]
:FSTWARP
	If ($twarp = "0")
		Echo "**" & ANSI_12 & "You need a Transwarp Drive... Exiting.**"
		SetVar $Z_Lib~message "I need a Transwarp Drive... Exiting.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFS
	End
	SetVar $target $jumppoint
	SetVar $previoussector $current_sector
	SetVar $z_gas TRUE
	Gosub :TWARPING
	Gosub :GETSTATS
	If ($current_sector <> $jumppoint)
		SetVar $Z_Lib~message $scripttitle & ": FS - Did NOT reach jumppoint " & $jumppoint &" !*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFS
	End
	If ($current_sector > 10)
		SetVar $fstarget 0
		SetVar $z SECTOR.WARPCOUNT[$current_sector]
		SetVar $x 1
		While ($x <= $z)
			If (SECTOR.WARPS[$current_sector][$x] > 0) and (SECTOR.WARPS[$current_sector][$x] < 11)
				SetVar $fstarget SECTOR.WARPS[$current_sector][$x]
				SetVar $x $z
			End
			SetVar $x ($x + 1)
		End
	End
End
If ($current_sector > 10)
	If ($fstarget > 0) and ($fstarget <= 10)
		Send "m" & $fstarget & "* "
	Else
		SetVar $Z_Lib~message $scripttitle & ": FS - Did NOT reach FedSpace!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFS
	End
End
If ($PARM1 <> "") and ($PARM1 <> "0")
	CutText $PARM1 $d 1 1
	LowerCase $d
	If ($d = "d")
		SetVar $PARM1 STARDOCK
	End
	IsNumber $isnum $PARM1
	If ($isnum = TRUE)
		If ($PARM1 > 0) and ($PARM1 <= SECTORS)
			SetVar $z_dockport FALSE
			SetVar $mowmode "CHARGE"
			SetVar $target $PARM1
			Gosub :MOVE
		End
	End
End
If ($fsport = TRUE)
	SetVar $z_dockport TRUE
	SetVar $target $current_sector
	Gosub :DOOPTIONS
ElseIf ($fsland = TRUE)
	SetVar $z_land TRUE
	SetVar $target $current_sector
	Gosub :DOOPTIONS
End
Gosub :GETSTATS
SetVar $Z_Lib~message $scripttitle & ": FS - Arrived at sector " & $current_sector & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOFS
:NOFS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# CLEARBUST 
:INTCOM_CLEARBUST
If ($PARM1 = "0") or ($PARM1 = "")
	Gosub :GETSTATS
	SetVar $PARM1 $current_sector
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NCBPADPARM
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	Goto :NCBPADPARM
End
SetSectorParameter $PARM1 "BUSTED" ""
SetVar $Z_Lib~message $scripttitle & ": CLEARBUST - Bust flag cleared in sector " & $PARM1 & "..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOCLEARBUST
:NCBPADPARM
SetVar $Z_Lib~message $scripttitle & ": CLEARBUST - BAD SECTOR NUMBER.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOCLEARBUST
Return
# SETBUST 
:INTCOM_SETBUST
If ($PARM1 = "0") or ($PARM1 = "")
	Gosub :GETSTATS
	SetVar $PARM1 $current_sector
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :NSBPADPARM
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	Goto :NSBPADPARM
End
SetSectorParameter $PARM1 "BUSTED" "1"
SetVar $Z_Lib~message $scripttitle & ": SETBUST - Bust flag set in sector " & $PARM1 & "..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOSETBUST
:NSBPADPARM
SetVar $Z_Lib~message $scripttitle & ": SETBUST - BAD SECTOR NUMBER.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOSETBUST
SetVar $reset TRUE
Return
# PORTCHECK 
:INTCOM_PORTCHECK
SetArray $scanlines 0
SetVar $Z_Lib~heraldss TRUE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPORTCHECK
End
Send "c"
WaitFor "Computer command [TL="
SetVar $ssmsg $dashedline
GetSectorParameter CURRENTSECTOR "MCIC" $pcmcic
GetSectorParameter CURRENTSECTOR "FIGSEC" $pcfig
If ($pcmcic <> "") and ($pcmcic <> "0")
	SetVar $ssmsg ($ssmsg & "PORT CHECK for Sector: " & CURRENTSECTOR & "                              MCIC: " & $pcmcic & "*" & $dashedline)
Else
	SetVar $ssmsg ($ssmsg & "PORT CHECK for Sector: " & CURRENTSECTOR & "*" & $dashedline)
End
SetVar $linect 0
Send #145
WaitFor #145 & #8
SetTextTrigger pcdone :PCDONE "Computer command [TL="
SetTextLineTrigger getapscanline :GETPSCANLINE
Send "r*"
Pause
:GETPSCANLINE
SetVar $linect ($linect + 1)
SetVar $scanlines[$linect] CURRENTLINE
GetWord $scanlines[$linect] $word 1
If ($word = "Computer")
:PCDONE
	KillTrigger getapscanline
	KillTrigger pcdone
	Goto :PSCANDONE
End
SetTextLineTrigger getapscanline :GETPSCANLINE
Pause
:PSCANDONE
SetVar $i 1
SetVar $firstblank FALSE
While ($i <= $linect)
	StripText $scanlines[$i] #13
	StripText $scanlines[$i] #8
	If ($scanlines[$i] = "")
		If ($firstblank <> TRUE)
			SetVar $scanlines[$i] ".."
			SetVar $firstblank TRUE
		Else
			SetVar $scanlines[$i] "."
		End
	End
	GetWord $scanlines[$i] $word 1
	If ($word <> "What") and ($word <> "Comput") and ($word <> "Computer") and ($scanlines[$i] <> "..")
		If ($scanlines[$i] = ".")
			SetVar $ssmsg ($ssmsg & $dashedline)
		Else
			SetVar $ssmsg ($ssmsg & $scanlines[$i] & "*")
		End
	End
	SetVar $i ($i + 1)
End
# SetVar $ssmsg ($ssmsg & $dashedline)
If ($pcfig = TRUE)
	SetVar $pcfigged "FIG"
Else
	SetVar $pcfigged ""
End
SetVar $ssmsg ($ssmsg & "Sector Warps: " & SECTOR.WARPCOUNT[CURRENTSECTOR] & "               Backdoors: " & SECTOR.BACKDOORCOUNT[CURRENTSECTOR] & "                      " & $pcfigged & "*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
If ($messagemode = "E")
	SetVar $Z_Lib~messagemode "S"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
Gosub :MSGBRIDGE
Send "q "
:NOPORTCHECK
SetArray $scanlines 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
Gosub :SETPULSETRIGGER	
SetVar $reset TRUE
Return
# SELLSHIPS 
:INTCOM_SELLSHIPS
Send #145
WaitFor #145 & #8
GetWord CURRENTLINE $prompt 1
If ($prompt <> "<StarDock>")
	Gosub :GETSTATS
	If ($current_sector = STARDOCK)
		Send "p sg yg q"
	End
	Send #145
	WaitFor #145 & #8
	GetWord CURRENTLINE $prompt 1
	If ($prompt <> "<StarDock>")
		SetVar $Z_Lib~message $scripttitle & ": SELLSHIPS - Start me at the StarDock prompt.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOSELLSHIPS
	End
End
SetVar $sellcount 0
Send "s "
:SSAGAIN
KillTrigger ssgetline
KillTrigger ssnoships
KillTrigger ssready
SetTextTrigger ssnoships :SSNOSHIPS "You do not own any other ships orbiting the Stardock!"
SetTextTrigger ssready :SSREADY "-----------------------------------------------------------------------------"
Send "s"
Pause
:SSNOSHIPS
KillTrigger ssgetline
KillTrigger ssnoships
KillTrigger ssready
SetVar $Z_Lib~message $scripttitle & ": SELLSHIPS - Done. Sold "& $sellcount & " ships.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send "q"
Goto :NOSELLSHIPS
:SSREADY
KillTrigger ssready
SetTextLineTrigger ssgetline :SSGETLINE
Pause
:SSGETLINE
KillTrigger ssgetline
GetWord CURRENTLINE $word 1
IsNumber $isnum $word
If ($isnum = TRUE) and ($word <> "0")
	Send $word & "*y"
	SetVar $sellcount ($sellcount + 1)
	Goto :SSAGAIN
End
If ($word = "You")
	Goto :SSNOSHIPS
End
Pause
:NOSELLSHIPS
Return
# DISPLAY 
:INTCOM_DISPLAY
KillTrigger pulse
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODISPLAY
End
SetVar $ssmsg $dashedline
GetSectorParameter CURRENTSECTOR "MCIC" $dimcic
If ($dimcic <> "") and ($dimcic <> "0")
	SetVar $ssmsg ($ssmsg & "CURRENT SECTOR INFORMATION for sector: " & CURRENTSECTOR & "               MCIC: " & $dimcic & "*" & $dashedline)
Else
	SetVar $ssmsg ($ssmsg & "CURRENT SECTOR INFORMATION for Sector: " & CURRENTSECTOR & "*" & $dashedline)
End
SetVar $linect 0
Send #145
WaitFor #145 & #8
Send "*"
WaitFor "<Re-Display>"
SetTextTrigger dispdone :DISPDONE "Command [TL="
SetTextLineTrigger getadiscanline :GETDISCANLINE
Pause
:GETDISCANLINE
SetVar $linect ($linect + 1)
SetVar $scanlines[$linect] CURRENTLINE
GetWord $scanlines[$linect] $word 1
If ($word = "Command")
:DISPDONE
	KillTrigger getadiscanline
	KillTrigger dispdone
	Goto :DISPSCANDONE
End
SetTextLineTrigger getadiscanline :GETDISCANLINE
Pause
:DISPSCANDONE
SetVar $i 1
SetVar $firstblank FALSE
While ($i <= $linect)
	StripText $scanlines[$i] #13
	StripText $scanlines[$i] #8
	If ($scanlines[$i] = "")
		If ($firstblank <> TRUE)
			SetVar $scanlines[$i] ".."
			SetVar $firstblank TRUE
		Else
			SetVar $scanlines[$i] "."
		End
	End
	GetWord $scanlines[$i] $word 1
	If ($word <> "Long") and ($word <> "Select") and ($word <> "Comman") and ($word <> "Command") and ($scanlines[$i] <> "..")
		If ($scanlines[$i] = ".")
			SetVar $ssmsg ($ssmsg & $dashedline)
		Else
			SetVar $ssmsg ($ssmsg & $scanlines[$i] & "*")
		End
	End
	SetVar $i ($i + 1)
End
#SetVar $ssmsg ($ssmsg & $dashedline)
SetArray $scanlines 0
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
If ($messagemode = "E")
	SetVar $Z_Lib~messagemode "S"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
Gosub :MSGBRIDGE
:NODISPLAY
SetVar $reset TRUE
SetArray $scanlines 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
Gosub :SETPULSETRIGGER
Return
# MEGA
:INTCOM_MEGA
KillAllTriggers
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $Z_Lib~message $scripttitle & ": Bad prompt. Citadel or Command prompt please.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMEGAROB
End
Gosub :GETSTATS
LoadVar $MBBS
LoadVar $MEGABUG
UpperCase $MBBS
UpperCase $MEGABUG
If (($MBBS <> "TRUE") and ($MBBS <> TRUE)) or (($MEGABUG <> "TRUE") and ($servertype <> "v1"))
	SetVar $Z_Lib~message $scripttitle & ": MEGA Robbing NOT AVAILABLE in this game!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMEGAROB
End
If ($align > "-100")
	SetVar $Z_Lib~message $scripttitle & ": Your alignment needs to be at least -100.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOMEGAROB
End
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Send "q q *"
End
Send #145
WaitFor #145 & #8
GetSectorParameter $current_sector "BUSTED" $isbusted
If ($isbusted = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": Already BUSTED here !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
	Goto :NOMEGAROB
End
LoadVar $lastrobsteal
If ($lastrobsteal = $current_sector)
	SetVar $Z_Lib~message $scripttitle & ": Last rob/steal sector !*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
	Goto :NOMEGAROB
End
SetTextTrigger robuc :MEGAROBUNDERCONSTRUCTION "(Under Construction -"
SetTextTrigger robportok :RETRYMEGAROB "] ("
Send "*"
Pause
:MEGAROBUNDERCONSTRUCTION
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
End
KillTrigger robuc
KillTrigger robportok
Goto :NOMEGAROB
:RETRYMEGAROB
KillTrigger robuc
KillTrigger robportok
SetTextTrigger robamount :MEGAROBAMOUNT "The Trade Journals estimate this port has in excess of"
SetTextTrigger robbusted :MEGAROBBUSTED "Suddenly you're Busted!"
Send "p r * r"
Pause
:MEGAROBAMOUNT
KillTrigger robamount
KillTrigger robbusted
GetText CURRENTLINE $robonhand "of " " creds"
StripText $robonhand ","
SetVar $amttorob "0"
SetVar $robbusted FALSE
IsNumber $isnum $robonhand
If ($isnum = TRUE)
	If ($robonhand > 0)
		SetVar $robmax $robonhand
		SetVar $robmax ($robmax * 100)
		SetVar $robmax ($robmax / 9)
		SetVar $robmax ($robmax / 10)
		If ($robonhand > 2970000)
			If ($robonhand > 5940000)
				SetVar $amttorob 3400000
			Else
				SetVar $amttorob $robmax
			End
		Else
			SetVar $amttorob 0
			Send $amttorob & "*"
			Goto :MEGAROBBED
		End
		SetTextTrigger robsuccess :MEGAROBSUCCESS "Success!"
		SetTextTrigger robbusted :MEGAROBBUSTED "Suddenly you're Busted!"
		Send $amttorob & "*"
		Pause
	:MEGAROBSUCCESS
		KillTrigger robsuccess
		KillTrigger robbusted
		SetVar $robbed $amttorob
		If ($amttorob > 0)
			SetVar $lastrobsteal $current_sector
			SaveVar $lastrobsteal
		End
		Goto :MEGAROBBED
	:MEGAROBBUSTED
		KillTrigger robsuccess
		KillTrigger robbusted
		KillTrigger robamount
		SetVar $robbusted TRUE
		SetVar $robbed "0"
		SetVar $lastrobsteal $current_sector
		SaveVar $lastrobsteal
		Goto :MEGAROBBED
	Else
		SetVar $robbed "0"
		Send "0*"
	End
Else
	KillTrigger robamount
	KillTrigger robbusted
	SetVar $robbed "0"
	Send "0*"
	Goto :MEGARETRYROB
End
:MEGAROBBED
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $PARM1 "2m"
	SaveVar $PARM1
	Gosub :INTCOM_DC
End
If ($robbusted = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": I was BUSTED ! " & $robonhand & " credits left on port.*"
	If ($amttorob = 0)
		SetVar $needed (3000000 - $robonhand)
		If ($needed < 0)
			SetVar $needed 0
		End
		SetVar $Z_Lib~message ($Z_Lib~message & "Port needs " & $needed & " more to be mega robbed..*")
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Write GAMENAME & "_PortCash.txt" $current_sector & " - $" & $robonhand & "."
Else
	SetVar $robleft ($robonhand - $robbed)
	If ($robleft < 0)
		SetVar $robleft 0
	End
	SetVar $Z_Lib~message $scripttitle & ": I robbed " & $robbed & " credits! " & $robleft & " credits left on port.*"
	If ($amttorob = 0)
		SetVar $needed (3000000 - $robonhand)
		If ($needed < 0)
			SetVar $needed 0
		End
		SetVar $Z_Lib~message ($Z_Lib~message & "Port needs " & $needed & " more to be mega robbed..*")
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Write GAMENAME & "_PortCash.txt" $current_sector & " - $" & $robleft & "."
End
Goto :NOMEGAROB
:NOMEGAROB
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": MEGA Rob command complete !*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# BANK 
:INTCOM_BANK
KillAllTriggers
UpperCase $PARM1
SetVar $Z_Lib~number $PARM2
Gosub :Z_Lib~TKM
SetVar $PARM2 $Z_Lib~number
IsNumber $isnum $PARM2
If ($isnum = FALSE) or (($PARM1 <> "W") and ($PARM1 <> "D") and ($PARM1 <> "T") and ($PARM1 <> "0"))
	SetVar $Z_Lib~message $scripttitle & ": BANK - Bad Parameter!.*"
	Goto :NOBANK
End
Gosub :GETSTATS
Send #145
WaitOn #145 & #8
SetVar $cline CURRENTLINE
CutText $cline $prompt2 1 7
If ($current_sector <> STARDOCK)
	SetVar $Z_Lib~message $scripttitle & ": BANK - Balance: " & $z_bankbal & "/"& $z_bankmax & "  - Credits: " & $Credits & ".*"
	SetVar $Z_Lib~message ($Z_Lib~message & "Start me at STARDOCK for Transactions!.*")
	Goto :NOBANK
ElseIf ($prompt2 = "<StarDo") 
	Send "g "
ElseIf ($prompt2 = "<Galact")
	
ElseIf ($prompt2 = "<Hardwa") or ($prompt2 = "<Shipya") or ($prompt2 = "<Underg") or ($prompt2 = "<FedPol")
	Send "qg "
ElseIf ($prompt2 = "Which i")
	Send "q qg "
ElseIf ($prompt2 = "Command")
	Send "p sg yg "
Else
	SetVar $Z_Lib~message $scripttitle & ": BANK - Start me at STARDOCK!!.*"
	Goto :NOBANK
End
Send #145
WaitOn #145 & #8
If ($PARM1 = "0") or ($PARM = "")
	SetTextTrigger bankbal :BANKBAL "credits in your account."
	Send "e"
	Pause
ElseIf ($PARM1 = "D")
	SetTextTrigger bankdep :BANKDEP ")"
	Send "d"
	Pause
ElseIf ($PARM1 = "W")
	SetTextTrigger bankwd :BANKWD ")"
	Send "w"
	Pause
ElseIf ($PARM1 = "T")
	SetTextTrigger bankwho :BANKWHO "Which Trader ? (Full or Partial Name)"
	Send "t"
	Pause
End
SetVar $Z_Lib~message $scripttitle & ": BANK - ERROR!.*"
Goto :NOBANK
:BANKWHO
KillAllTriggers
IsNumber $isnum $PARM2
SetVar $banktx 0
If ($isnum = TRUE)
	SetVar $banktx $PARM2
	GetWordPos $user_command_line $pos $PARM3
	CutText $user_command_line $bankwho $pos 999
	StripText $bankwho " 0"
Else
	Gosub :BANKRETURN
	SetVar $Z_Lib~message $scripttitle & ": BANK - ABORTED - PARM2 must be the AMOUNT.*"
	Goto :NOBANK
End
:BANKRETRY
SetTextTrigger bankvoided :BANKVOIDED "Transfer voided"
SetTextTrigger bankwho2 :BANKWHO2 "Do you mean "
SetTextTrigger banktx :BANKTX "How many credits do you want to transfer? ("
Send $bankwho & "*"
Pause
:BANKVOIDED
KillAllTriggers
Gosub :BANKRETURN
SetVar $Z_Lib~message $scripttitle & ": BANK - Transfer VOIDED.*"
Goto :NOBANK
:BANKWHO2
KillTrigger bankwho2
SetTextTrigger bankwho2 :BANKWHO2 "Do you mean "
Send "n"
Pause
:BANKTX
KillAllTriggers
GetText CURRENTLINE $temp "(" ")"
If ($temp = "")
	SetVar $temp 0
End
StripText $temp ","
If ($banktx = "0") or ($banktx > $temp)
	SetVar $banktx $temp
End
Send $banktx & "*"
SetTextTrigger bankbal4 :BANKBAL4 "credits in your account."
Send "e"
Pause
:BANKBAL4
KillAllTriggers
GetWord CURRENTLINE $z_bankbal 3
Gosub :BANKRETURN
SetVar $Z_Strings~number ($Credits - $banktx)
Gosub :Z_Strings~COMMA
SetVar $creditsd $Z_Strings~commas
SetVar $Z_Strings~number $banktx
Gosub :Z_Strings~COMMA
SetVar $banktxd $Z_Strings~commas
SetVar $Z_Lib~message $scripttitle & ": BANK - Transfer: " & $banktxd & "  - Balance: " & $z_bankbal & "*Credits: " & $creditsd  & ".*"
UpperCase $bankwho
SetVar $Z_Lib~message ($Z_Lib~message & "Successfully transferred funds to " & $bankwho & ".*")
Goto :NOBANK
:BANKWD
KillAllTriggers
GetText CURRENTLINE $bankwd "(" ")"
StripText $bankwd ","
If ($PARM2 <> "0") and ($PARM2 < $bankwd)
	SetVar $bankwd $PARM2
End
Send $bankwd & "*"
SetTextTrigger bankbal3 :BANKBAL3 "credits in your account."
Send "e"
Pause
:BANKBAL3
KillAllTriggers
GetWord CURRENTLINE $z_bankbal 3
Gosub :BANKRETURN
SetVar $Z_Strings~number ($Credits + $bankwd)
Gosub :Z_Strings~COMMA
SetVar $creditsd $Z_Strings~commas
SetVar $Z_Strings~number $bankwd
Gosub :Z_Strings~COMMA
SetVar $bankwdd $Z_Strings~commas
SetVar $Z_Lib~message $scripttitle & ": BANK - Withdrew: " & $bankwdd & "  - Balance: " & $z_bankbal & "*Credits: " & $Creditsd & ".*"
Goto :NOBANK
:BANKDEP
KillAllTriggers
GetText CURRENTLINE $bankdep "(" ")"
StripText $bankdep ","
If ($PARM2 <> "0") and ($PARM2 < $bankdep)
	SetVar $bankdep $PARM2
End
Send $bankdep & "*"
SetTextTrigger bankbal2 :BANKBAL2 "credits in your account."
Send "e"
Pause
:BANKBAL2
KillAllTriggers
GetWord CURRENTLINE $z_bankbal 3
Gosub :BANKRETURN
SetVar $Z_Strings~number ($Credits - $bankdep)
Gosub :Z_Strings~COMMA
SetVar $creditsd $Z_Strings~commas
SetVar $Z_Strings~number $bankdep
Gosub :Z_Strings~COMMA
SetVar $bankdepd $Z_Strings~commas
SetVar $Z_Lib~message $scripttitle & ": BANK - Deposited: " & $bankdepd & "  - Balance: " & $z_bankbal & "*Credits: " & $creditsd & ".*"
Goto :NOBANK
:BANKBAL
KillAllTriggers
GetWord CURRENTLINE $z_bankbal 3
SetVar $Z_Strings~number $Credits
Gosub :Z_Strings~COMMA
SetVar $creditsd $Z_Strings~commas
SetVar $Z_Lib~message $scripttitle & ": BANK - Balance: " & $z_bankbal & " / "& $z_bankmax & "*Credits: " & $creditsd & ".*"
Goto :NOBANK
:BANKRETURN
If ($prompt2 = "<StarDo") 
	Send "q"
ElseIf ($prompt2 = "<Hardwa")
	Send "qh "
ElseIf ($prompt2 = "<Shipya")
	Send "qs "
ElseIf ($prompt2 = "Which i")
	Send "qs p "
ElseIf ($prompt2 = "Command")
	Send "qq "
End
Return
:NOBANK
SaveVar $z_bankbal
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $prompt 1 7
StripText $prompt "<"
SetVar $Z_Lib~message ($Z_Lib~message & "Current prompt: [" & $prompt & "]*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
Return
# LEAVE 
:INTCOM_LEAVE
IsNumber $isnum $PARM1
If ($PARM1 = 0) or ($PARM1 = "") or ($isnum <> TRUE)
	SetVar $leave 10
Else
	SetVar $leave $PARM1
End
SetVar $commandline ""
GetText $user_command_line $commandline "[" "]"
SetVar $getsettings FALSE
SetVar $Z_Lib~message $scripttitle & ": LEAVING for " & $leave & " seconds.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
Send #145
WaitFor #145 & #8
Gosub :EXIT
Gosub :Z_Lib~SYNC
SetVar $Z_Lib~heraldss FALSE
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOLEAVE
End
Send #145
WaitFor #145 & #8
SetVar $Z_Lib~message $scripttitle & ": I am back from leave.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
Send #145
WaitOn #145 & #8
If ($commandline <> "")
	KillAllTriggers
	SetVar $Z_Lib~message $scripttitle & ": Executing command: [" & $commandline & "].*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	SetVar $z_movement TRUE
	LowerCase $commandline
	GoSub :AUTOBOT
	SetVar $z_movement FALSE
End
:NOLEAVE
SetVar $reset TRUE
Return
# DELIVER 
:INTCOM_DELIVER
KillAllTriggers
Gosub :GETSTATS
UpperCase $PARM1
If ($PARM1 ="B")
	SetVar $PARM1 $z_base
ElseIf ($PARM1 ="S")
	SetVar $PARM1 $z_safesector
ElseIf ($PARM1 =".")
	SetVar $PARM1 $current_sector
ElseIf ($PARM1 ="D")
	SetVar $PARM1 STARDOCK
ElseIf ($PARM1 ="A")
	SetVar $PARM1 ALPHACENTAURI
ElseIf ($PARM1 ="R")
	SetVar $PARM1 RYLOS
End
UpperCase $PARM3
If ($PARM3 ="B")
	SetVar $PARM3 $z_base
ElseIf ($PARM3 ="S")
	SetVar $PARM3 $z_safesector
ElseIf ($PARM3 =".")
	SetVar $PARM3 $current_sector
ElseIf ($PARM3 ="D")
	SetVar $PARM3 STARDOCK
ElseIf ($PARM3 ="A")
	SetVar $PARM3 ALPHACENTAURI
ElseIf ($PARM3 ="R")
	SetVar $PARM3 RYLOS
End
SetVar $delparms "DELIVER FROM: " & $PARM1 & "  SHIP: " & $PARM2 & "  TO: " & $PARM3

IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :DELIVERBADPARM
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	Goto :DELIVERBADPARM
End
IsNumber $isnum $PARM2
If ($isnum <> TRUE)
	Goto :DELIVERBADPARM
End
IsNumber $isnum $PARM3
If ($isnum <> TRUE)
	Goto :DELIVERBADPARM
End
If ($PARM3 < 1) or ($PARM3 > SECTORS)
	Goto :DELIVERBADPARM
End
If ($twarp <> 2)
	SetVar $Z_Lib~message $scripttitle & " DELIVER - Need a level 2 Transwarp drive.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODELIVER
End
If ($credits < 30000)
	SetVar $Z_Lib~message $scripttitle & " DELIVER - Need at least 30k credits.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODELIVER
End
Gosub :CLEARMOVEOPTIONS
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NODELIVER
End
If ($current_sector <> $PARM1)
	If ($prompt = "Citadel")
		Gosub :Z_Lib~CURRENTPLANET
		Send "qt**1*q**"
		Send #145
		WaitFor #145 & #8
		If ($current_sector > 10) and ($current_sector <> STARDOCK)
			If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
				Send "f1*cd"
			End
		End
		Gosub :Z_Lib~RETURNTOPLANET
	Else
		Send "*"
		WaitFor "elp)?"
		If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0")
			If ($current_sector = STARDOCK)
				If ($sdsellfuel = TRUE)
					Send "p***"
				End
			Else
				Send "p***"
			End
		End
		If ($current_sector > 10) and ($current_sector <> STARDOCK)
			If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
				Send "f1*cd"
			End
		End
	End
	SetVar $z_dockport FALSE
	SetVar $target $PARM1
	SetVar $previoussector $current_sector
	Gosub :TWARPING
	Gosub :GETSTATS
	If ($current_sector <> $PARM1)
		SetVar $Z_Lib~message $scripttitle & " - We are NOT at the PICKUP sector.*Current sector is " & $current_sector & ".*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NODELIVER
	End
End
Send "w* z" & #8 & $PARM2 & "*"
If ($ore < $holds)
	If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0")
		If ($current_sector = STARDOCK)
			If ($sdsellfuel = TRUE)
				Send "p***"
			End
		Else
			Send "p***"
		End
	End
	Gosub :GETSTATS
End
SetVar $prompt2 $prompt
SetVar $prompt "Command"
Gosub :CLEARMOVEOPTIONS
SetVar $target $PARM3
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
If ($current_sector <> $PARM3)
	SetVar $Z_Lib~message $scripttitle & " - We are NOT at the DELIVERY sector.*Current sector is " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NODELIVER
End
Send "w * * "
SetVar $Z_Lib~message $scripttitle & " - DELIVERY Complete.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NODELIVER
:DELIVERBADPARM
SetVar $Z_Lib~message $scripttitle & ": DELIVER - BAD PARAMETER !*"
SetVar $Z_Lib~message ($Z_Lib~message & $delparms & "*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NODELIVER
:NODELIVER
Gosub :CLEARMOVEOPTIONS
SetVar $reset TRUE
Return
# PR 
:INTCOM_PR 
UpperCase $PARM1
Gosub :GETSTATS
SetVar $ssmsg ""
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
IsNumber $isnum $PARM1
If ($PARM1 = "0")
	If ($z_pr = "TRUE")
		If ($prtarget <> "0")
			SetVar $ssmsg " PHOTON RESPONSE is currently ACTIVE - Target: " & $prtarget & ".*"
		Else
			SetVar $ssmsg " PHOTON RESPONSE is currently ACTIVE.*"
		End
	Else
		SetVar $ssmsg " PHOTON RESPONSE is currently OFF.*"
	End
ElseIf ($PARM1 = "ON") or ($isnum = TRUE)
	If ($isnum = TRUE)
		If ($PARM1 > 0) and ($PARM1 <= SECTORS)
			SetVar $prtarget $PARM1
		Else
			SetVar $ssmsg " PHOTON RESPONSE - BAD Parameter !!*"
			Goto :PRDONE
		End
	Else
		SetVar $prtarget 0
	End
	SetVar $z_pr "TRUE"
	If ($prtarget <> "0")
		SetVar $ssmsg " PHOTON RESPONSE is now ACTIVE - Targeting: " & $prtarget & ".*"
	Else
		SetVar $ssmsg " PHOTON RESPONSE is now ACTIVE.*"
	End
	If ($prompt = "Citadel")
		Gosub :Z_Lib~CURRENTPLANET
		Send "q q"
	End
	If ($scanner = "1")
		Send "s"
	ElseIf ($scanner = "2")
		Send "s d"
	End
	WaitOn "] (?=Help)?"
	Gosub :RECORDDENSITIES
	If ($prompt = "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
	End
ElseIf ($PARM1 = "OFF")
	SetVar $z_pr "FALSE"
	SetVar $ssmsg " PHOTON RESPONSE is now OFF.*"
End
:PRDONE
If ($ssmsg <> "")
	If ($photons < 1)
		SetVar $ssmsg ($ssmsg & "       !!! NO PHOTONS AVAILABLE !!!*")
	Else
		SetVar $ssmsg ($ssmsg & "       PHOTONS AVAILABLE: " & $photons & "*")
	End
	SetVar $Z_Lib~message $scripttitle & ": PR - " &$ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
Return
# PLANET 
:INTCOM_PLANET
KillAllTriggers
IsNumber $isnum $PARM1
SetVar $Z_Lib~stripalpha $PARM1
Gosub :Z_Lib~STRIPALPHA
SetVar $PARM1 $Z_Lib~stripalpha
If ($parm1 <> 0) and ($PARM1 <> "") and ($isnum = TRUE)
	SetVar $z_planet $PARM1
	SaveVar $z_planet
	SetVar $Z_Lib~message $scripttitle & ": PLANET - Main Planet NOW set to " & $z_planet & ".*"
Else
	SetVar $Z_Lib~message $scripttitle & ": PLANET - Main Planet is currently set to " & $z_planet & ".*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
Return
# HERALDTURNS 
:INTCOM_HERALDTURNS
KillAllTriggers
UpperCase $PARM1
SetVar $ssmsg ""
If ($PARM1 = "0")
	If ($z_heraldturns = TRUE)
		SetVar $ssmsg " HERALD TURNS is currently ACTIVE.*"
	Else
		SetVar $ssmsg " HERALD TURNS is currently OFF.*"
	End
ElseIf ($PARM1 = "ON")
	SetVar $z_heraldturns TRUE
	SaveVar $z_heraldturns
	SetVar $ssmsg " HERALD TURNS is now ACTIVE.*"
ElseIf ($PARM1 = "OFF")
	SetVar $z_heraldturns FALSE
	SetVar $ssmsg " HERALD TURNS is now OFF.*"
	SaveVar $z_heraldturns
End
If ($ssmsg <> "")
	SetVar $Z_Lib~message $scripttitle & $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
End
Gosub :Z_Lib~COMMSON
SetVar $reset TRUE
Return
# FP 
:INTCOM_FP
Uppercase $PARM1
SetVar $fproll FALSE
If ($PARM1 <> "ON") and ($PARM1 <> "FAST") and ($PARM1 <> "TWARP") and ($PARM1 <> "ARMS") and ($PARM1 <> "NOBUY")
	SetVar $Z_Lib~message $scripttitle & ": FP - BAD PARAMETER! Standing down..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFP
End
Uppercase $user_command_line
SetVar $arms FALSE
GetWordPos $user_command_line $pos "ARMS"
If ($pos <> "0")
	SetVar $arms TRUE
End
SetVar $prnorefill FALSE
GetWordPos $user_command_line $pos "NOBUY"
If ($pos <> "0")
	SetVar $prnorefill TRUE
End
SetVar $pp TRUE
GetWordPos $user_command_line $pos "TWARP"
If ($pos <> "0")
	SetVar $pp FALSE
End
If ($pp = TRUE)
	SetVar $Z_Lib~setprompt "CITADEL"
Else
	SetVar $Z_Lib~setprompt "CITCOM"
End
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOFP
End
Gosub :GETSTATS
SetVar $fpprompt $prompt
If ($fpprompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Setvar $fponplanet TRUE
Else
	Setvar $fponplanet FALSE
End
SetVar $returnsector $current_sector
If ($twarp = 0) and ($pp = FALSE)
	SetVar $Z_Lib~message $scripttitle & ": FP - You must have a TWARP drive...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFP
End
If ($targetsystemok <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FP - Initialising the TARGETING SYSTEM...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Gosub :TARGETARRAY
End
SetVar $Z_Lib~message $scripttitle & ": FP - The TARGETING SYSTEM is ready. FP is ACTIVE.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~COMMSON
Gosub :GETSTATS
If ($ore < $holds)
	Gosub :INTCOM_GAS
	Gosub :GETSTATS
End
:STARTFP
Gosub :CLEARMOVEOPTIONS
Gosub :GETSTATS
If ($twarp <> 0)
	If ($holds >= 200)
		SetVar $minore ($holds * 0.75)
	Else
		SetVar $minore $holds
	End
	If ($ore < $minore)
		Gosub :INTCOM_GAS
		Gosub :GETSTATS
	End
	If ($ore < $minore)
		SetVar $Z_Lib~message $scripttitle & ": FP - LOW ON GAS! Standing down...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFP
	End
	If ($Z_Lib~isunlimited = FALSE) and ($turns < $z_minturns)
		SetVar $Z_Lib~message $scripttitle & ": FP - LOW ON TURNS! Standing down...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFP
	End
End
If ($photons < 1) and ($prnorefill <> TRUE)
	If ($twarp <> 0)
		SetVar $returnsector $current_sector
		If ($current_sector <> STARDOCK)
			SetVar $z_dockport FALSE
			SetVar $target STARDOCK
			Gosub :TWARPING
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector <> STARDOCK)
				SetVar $Z_Lib~message $scripttitle & ": FP - Failed to arrive at STARDOCK..*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				If ($current_sector <> $returnsector)
					If ($z_rescueavailable = TRUE)
						Gosub :INTCOM_CALL
					End
				End
				Goto :NOFP
			End
		End
		Send "p sg yg qh "
		KillAllTriggers
		SetTextTrigger buy :FPBUY "How many Photon Missiles do you want"
		SetTextTrigger nobuy :FPNOBUY "Sorry, your ship is not equipped to handle Photon Missiles!"
		Send "p"
		Pause
:FPBUY
		KillAllTriggers
		GetText CURRENTLINE $amt "(Max " ")"
		StripText $amt ","
		Send $amt & "* qq "
:FPNOBUY
		KillAllTriggers
		Gosub :GETSTATS
		If ($current_sector <> $returnsector)
			Gosub :CLEARMOVEOPTIONS
			SetVar $target $returnsector
			SetVar $prompt "Command"
			Gosub :TWARPING
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector <> $returnsector)
				SetVar $Z_Lib~message $scripttitle & ": FP - Failed to arrive at " & $returnsector & "..*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				If ($current_sector <> STARDOCK)
					If ($z_rescueavailable = TRUE)
						Gosub :INTCOM_CALL
					End
				End
				Goto :NOFP
			End
			If ($fponplanet = TRUE)
				Send "l j" & #8 & #8 & $Z_Lib~planetnum & "* t * * 1 * m * * * c "
				Send #145
				WaitOn #145 & #8
			ElseIf ($ore < $minore)
				Gosub :INTCOM_GAS
			End
			Gosub :GETSTATS
			If ($ore < $minore)
				SetVar $Z_Lib~message $scripttitle & ": FP - LOW ON GAS! Standing down...*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				Goto :NOFP
			End
		End
	End
End
If ($photons < 1)
	SetVar $Z_Lib~message $scripttitle & ": FP - You have NO Photons...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFP
End
KillAllTriggers
If ($fproll <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FP - Ready to roll...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	SetVar $fproll TRUE
End
Send #145
Waiton #145 & #8
SetTextLineTrigger targetacquired :FPACQUIRED1 "Deployed Fighters Report Sector"
SetTextLineTrigger targetacquired2 :FPACQUIRED2 "Limpet mine in"
SetTextLineTrigger targetacquired3 :FPACQUIRED3 "Your mines in "
SettextOutTrigger fpabort :FPABORTKEYPRESSED "~"
SettextOutTrigger fpabort2 :FPABORTKEYPRESSED #8
SetTextLineTrigger fpreset :FPRESET $z_botname & " reset"
SetTextLineTrigger fpoff :FPOFF $z_botname & " fp off"
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
SetTextLineTrigger fpstatus :FPSTATUS $z_botname & " status"
SetTextLineTrigger fpmode :FPMODE $z_botname & " mode"
SetTextLineTrigger fpmode2 :FPMODE $z_team & " mode" 
SetTextLineTrigger fpbusy :FPBUSY $z_botname & " busy"
SetTextTrigger fpecho :FPECHO "elp)"
Send #145
Waiton #145 & #8
Pause
:FPBUSY
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :STARTFP
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :STARTFP
End
Gosub :INTCOM_BUSY
Goto :STARTFP
:FPMODE
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :STARTFP
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :STARTFP
End
Gosub :INTCOM_MODE
Goto :STARTFP
:FPSTATUS
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :STARTFP
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :STARTFP
End
Gosub :INTCOM_STATUS
Goto :STARTFP
:FPRESET
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :STARTFP
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FPSTART
End
Gosub :INTCOM_RESET
Goto :NOFP
:FPECHO
GetTimer $fpendtime
SetVar $fptimelapsed ($fpendtime - $fpstarttime)
If ($fptimelapsed > 3000000000)
	If ($pp = TRUE)
		Echo $boldred & "[" & $boldwhite & "FAST PHOTON" & $boldred & "] - " & $boldgreen & $photons & $boldwhite & " "
	Else
		Echo $boldred & "[" & $boldyellow & "FAST PHOTON" & $boldred & "] - " & $boldgreen & $photons & $boldwhite & " "
	End
	GetTimer $fpstarttime
End
SetTextTrigger fpecho :FPECHO "elp)"
Pause
:FPOFF
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :STARTFP
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :STARTFP
End
SetVar $Z_Lib~message $scripttitle & ": FP - ABORTED! Standing down..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOFP
:FPABORTKEYPRESSED
SetVar $Z_Lib~message $scripttitle & ": FP - ABORTED! Standing down..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOFP
:FPACQUIRED2
KillAllTriggers
SetVar $line CURRENTLINE
UpperCase $line
GetWord $line $fptarget 4
If ($fptarget <> "0")
	SetVar $i 1
	SetVar $found FALSE
	While ($i <= 8)
		If ($targetarray[$fptarget][$i] <> "0")
			GetSectorParameter $targetarray[$fptarget][$i] "FIGSEC" $fig
			If ($fig <> TRUE)
				SetVar $targetarray[$fptarget][$i] "0"
			Else
				SetVar $found TRUE
				SetVar $targetindex $i
				SetVar $i 8
			End
		End
		SetVar $i ($i + 1)
	End
End
If ($found = TRUE)
	GetDistance $distance $current_sector $targetarray[$fptarget][$targetindex]
Else
	Goto :STARTFP
End
If (($distance * 3) <= $ore)
	Gosub :FPTWARP
	Gosub :FPATTACK
End
Goto :STARTFP
:FPACQUIRED3
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $ansiline CURRENTANSILINE
GetWord $ansiline $ansiword 9
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :STARTFP
End
UpperCase $line
GetWord $line $fptarget 4
If ($fptarget <> "0")
	SetVar $i 1
	SetVar $found FALSE
	While ($i <= 8)
		If ($targetarray[$fptarget][$i] <> "0")
			GetSectorParameter $targetarray[$fptarget][$i] "FIGSEC" $fig
			If ($fig <> TRUE)
				SetVar $targetarray[$fptarget][$i] "0"
			Else
				SetVar $found TRUE
				SetVar $targetindex $i
				SetVar $i 8
			End
		End
		SetVar $i ($i + 1)
	End
End
If ($found = TRUE)
	GetDistance $distance $current_sector $targetarray[$fptarget][$targetindex]
Else
	Goto :STARTFP
End
If (($distance * 3) <= $ore)
	Gosub :FPTWARP
	Gosub :FPATTACK
End
Goto :STARTFP
:FPACQUIRED1
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $ansiline CURRENTANSILINE
GetWord $ansiline $ansiword 6
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :STARTFP
End
UpperCase $line
GetWord $line $fptarget 5
StripText $fptarget ":"
If ($fptarget <> "0")
	SetVar $i 1
	SetVar $found FALSE
	While ($i <= 8)
		If ($targetarray[$fptarget][$i] <> "0")
			GetSectorParameter $targetarray[$fptarget][$i] "FIGSEC" $fig
			If ($fig <> TRUE)
				SetVar $targetarray[$fptarget][$i] "0"
			Else
				SetVar $found TRUE
				SetVar $targetindex $i
				SetVar $i 8
			End
		End
		SetVar $i ($i + 1)
	End
End
If ($found = TRUE)
	GetDistance $distance $current_sector $targetarray[$fptarget][$targetindex]
Else
	Goto :STARTFP
End
If (($distance * 3) <= $ore)
	Gosub :FPTWARP
	Gosub :FPATTACK
End
Goto :STARTFP
:FPTWARP
KillAllTriggers
If ($pp = TRUE)
	Send "p " & $targetarray[$fptarget][$targetindex] & "* y "
Else
	SetTextTrigger fpouch :NOFP "Your ship was hit by a Photon and has been disabled."
	GetWordPos $user_command_line $pos "FAST"
	If ($pos <> "0")
		If ($fponplanet = TRUE)
			Send "q q "
		End
		Send "m " & $targetarray[$fptarget][$targetindex] & "* y y za" & $z_wave & "* *  "
	Else
		KillAllTriggers
		If ($fponplanet = TRUE)
			Send "q q "
		End
		SetTextTrigger fpouch :NOFP "Your ship was hit by a Photon and has been disabled."
		SetTextTrigger fpnobeam :FPNOBEAM "No locating beam found"
		SetTextTrigger fptwok :FPTWARPOK "Locating beam pinpointed"
		Send "m " & $targetarray[$fptarget][$targetindex] & "* y"
		Pause
:FPNOBEAM
		KillAllTriggers
		Send "n"
		If ($fponplanet = TRUE)
			Send "l j" & #8 & #8 & $Z_Lib~planetnum & "* c"
			Send #145
			WaitOn #145 & #8
		End
		Goto :NOFPATTACK
:FPTWARPOK	
		KillAllTriggers
		SetTextTrigger fpouch :FPGOTPHOTONED "Your ship was hit by a Photon and has been disabled."
		Send "y za" & $z_wave & "* *  "
		SetVar $fproll FALSE
	End
End
:NOFPATTACK
Return
:FPGOTPHOTONED
KillAllTriggers
If ($z_rescueavailable = TRUE)
	Gosub :INTCOM_CALL
End
Goto :NOFP
:FPATTACK
Send "c p y " & $fptarget & "* * q s d"
Send #145
WaitFor #145 & #8
Gosub :GETSTATS
If ($arms = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FP - ! CALL TO ARMS ! {" & $current_sector & "} [" & $fptarget & "]*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
End
If ($current_sector <> $returnsector)
	If ($pp = TRUE)
		Send "p " & $returnsector & "* y "
		Gosub :GETSTATS
		Send #145
		WaitFor #145 & #8
		If ($current_sector <> $returnsector)
			SetVar $Z_Lib~message $scripttitle & ": FP - Failed to arrive at " & $returnsector & "..*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			Goto :NOFP
		End
	Else
		GetDistance $distance $current_sector $returnsector
		If (($distance * 3) <= $ore)
			If ($ore < $holds)
				Gosub :INTCOM_GAS
			End
			Gosub :GETSTATS
			If ($ore < $holds)
				SetVar $Z_Lib~message $scripttitle & ": FP - LOW ON GAS! Standing down...*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				If ($z_rescueavailable = TRUE)
					Gosub :INTCOM_CALL
				End
				Goto :NOFP
			End
		End
		Gosub :CLEARMOVEOPTIONS
		SetVar $target $returnsector
		Gosub :TWARPING
		Gosub :GETSTATS
		Send #145
		WaitFor #145 & #8
		If ($current_sector <> $returnsector)
			SetVar $Z_Lib~message $scripttitle & ": FP - Failed to arrive at " & $returnsector & "..*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			If ($z_rescueavailable = TRUE)
				Gosub :INTCOM_CALL
			End
			Goto :NOFP
		End
		If ($fponplanet = TRUE)
			Send "l j" & #8 & #8 & $Z_Lib~planetnum & "* t * * 1 * m * * * c "
			Send #145
			WaitOn #145 & #8
		End
	End
End
Return
:NOFP
SetVar $fproll FALSE
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# INIT
:INTCOM_INIT
KillAllTriggers
LowerCase $PARM1
If ($PARM1 = "quick") or ($PARM1 = "q")
	SetVar $Z_Lib~message ($scripttitle & ": INIT - Processing quick. Please wait...*")
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :QUICKINIT
End
SetVar $nodisplay TRUE
SetVar $messagemode "R"
SetVar $Z_Lib~message $scripttitle & ": INIT - Initialising the TARGETING SYSTEM...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $Z_Lib~message $scripttitle & ": INIT - Processing figs...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :INTCOM_FIGS
SetVar $Z_Lib~message $scripttitle & ": INIT - Processing mines...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :INTCOM_MINES
SetVar $Z_Lib~message $scripttitle & ": INIT - Processing limps...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :INTCOM_SCRUBZONE
SetPrecision 4
SetVar $figgrid (($z_figcount / (SECTORS - 11)) * 100)
SetVar $minegrid (($z_minecount / (SECTORS - 11)) * 100)
SetVar $limpgrid (($z_limpcount / (SECTORS - 11)) * 100)
#SetVar $figgrid ((100 / (SECTORS - 11)) * $z_figcount)
#SetVar $minegrid ((100 / (SECTORS - 11)) * $z_minecount)
#SetVar $limpgrid ((100 / (SECTORS - 11)) * $z_limpcount)
SetPrecision 2
SetVar $figgrid ($figgrid * 1.00)
SetVar $minegrid ($minegrid * 1.00)
SetVar $limpgrid ($limpgrid * 1.00)
SetPrecision 0
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $z_figcount
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $z_figcount $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $z_minecount
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $z_minecount $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $z_limpcount
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $z_limpcount $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $figgrid
SetVar $Z_Strings~rpad FALSE
Gosub :Z_Strings~PAD
SetVar $figgrid $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $minegrid
SetVar $Z_Strings~rpad FALSE
Gosub :Z_Strings~PAD
SetVar $minegrid $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $limpgrid
SetVar $Z_Strings~rpad FALSE
Gosub :Z_Strings~PAD
SetVar $limpgrid $Z_Strings~padded
SetVar $Z_Lib~message $dashedline & $scripttitle & ": INIT - Fighter Grid: " & $z_figcount & " - " & $figgrid & "%*"
SetVar $Z_Lib~message ($Z_Lib~message & "              Armid Grid  : " & $z_minecount & " - " & $minegrid & "%*")
SetVar $Z_Lib~message ($Z_Lib~message & "              Limpet Grid : " & $z_limpcount & " - " & $limpgrid & "%*")
SetVar $Z_Lib~message ($Z_Lib~message & $dashedline)
SetVar $Z_Lib~message ($Z_Lib~message & $scripttitle & ": INIT - Processing. Please wait...*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:QUICKINIT
Gosub :TARGETARRAY
SetVar $Z_Lib~message $scripttitle & ":- The TARGETING SYSTEM is ready.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
SetVar $nodisplay FALSE
If ($z_usesound = TRUE)
	Sound ding
End
Return
# RADAR 
:INTCOM_RADAR
KillAllTriggers
Gosub :Z_Lib~COMMSON
UpperCase $PARM1
If ($PARM1 <> "ON")
	SetVar $radaron FALSE
	SetVar $Z_Lib~message $scripttitle & ": RADAR - BAD PARAMETER!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	Goto :NORADAR
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NORADAR
End
SetVar $radaron  TRUE
SetVar $radarreport ""
SetVar $radardelay 10000
SetVar $Z_Lib~message $scripttitle & ": RADAR - Limpet tracking system ACTIVE!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
While ($radaron = TRUE)
	Echo "*"
	Send #145
	WaitOn #145 & #8
	SetVar $ssmsg $dashedline & $scripttitle & ": LIMPET TRACKING RADAR REPORT*" & $dashedline
	KillAllTriggers
	SetTextLineTrigger radarstart :RADARSTART "Activated  Limpet  Scan"
	SetTextOutTrigger radarabort :RADARABORT "~"
	SetTextOutTrigger radarabort2 :RADARABORT #8
	SetTextTrigger radarabortremote :RADARREMOTE $z_botname & " "
	Send "k2"
	Pause
:RADARSTART
	KillTrigger radarstart
	SetTextLineTrigger radarstart2 :RADARSTART2 "========="
	Pause
:RADARSTART2
	KillTrigger radarstart2
	SetTextLineTrigger radarscan :RADARSCAN
	Pause
:RADARSCAN
	KillTrigger radarscan
	SetVar $line CURRENTLINE
	GetWord $line $word1 1
	GetWord $line $word2 2
	If ($word2 <> "Total")
		SetVar $ssmsg ($ssmsg & " Sector: [" & $word1 & "] - " & $word2 & "*")
		If ($word1 <> $lastword1)
			GetTime $radartime "h:nn:ss - d/m/yyyy"
			SetVar $radarreport ($radarreport & $word1 & " :- " & $radartime & #13 & #10)
			SetVar $lastword1 $word1
		End
	Else
		If ($word1 = "0")
			SetVar $ssmsg ($ssmsg & " ALL IS CLEAR ON THE RADAR.*")
		End
		SetVar $ssmsg ($ssmsg & $dashedline & "TOTAL: " & $word1 & "*" & $dashedline)
		KillAllTriggers
		Goto :RADARJUMP
	End
	SetTextLineTrigger radarscan :RADARSCAN
	Pause
:RADARJUMP
	KillAllTriggers
	If ($word1 <> "0")
		SetVar $Z_Lib~message $ssmsg
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode "R"
		Gosub :MSGBRIDGE
		Write GAMENAME & "_RADARREPORT.txt" $radarreport
		SetVar $radardelay 1000
		Send #145
		WaitOn #145 & #8
		Echo $boldred & " [" & $boldyellow & $blinkon & "RADAR TRACKING" & $blinkoff & $boldred & "] " & $boldcyan & "[~]-Abort " & $boldwhite	
	Else
		SetVar $radardelay 10000
		Send #145
		WaitOn #145 & #8
		Echo $boldred & " [" & $boldwhite & "RADAR ACTIVE" & $boldred & "] " & $boldcyan & "[~]-Abort " & $boldwhite	
	End
	
	SetTextOutTrigger radarabort :RADARABORT "~"
	SetTextOutTrigger radarabort2 :RADARABORT #8
	SetTextTrigger radarabortremote :RADARREMOTE $z_botname & " "
	SetDelayTrigger radarwait :RADARWAIT $radardelay
	Pause
:RADARWAIT
#KillAllTriggers
Goto :RADAREND
:RADARABORT
KillAllTriggers
SetVar $radaron FALSE
SetVar $Z_Lib~message $scripttitle & ": RADAR - ABORTED...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
Goto :RADAREND
:RADARREMOTE
KillTrigger radarremote
SetVar $line CURRENTLINE
CutText $line $ck 1 1
If ($ck = "R")
	GetWord $line $word 3 
	LowerCase $word
	If ($word = "off")
		KillAllTriggers
		SetVar $radaron FALSE
		SetVar $Z_Lib~message $scripttitle & ": RADAR - ABORTED...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode "R"
		Gosub :MSGBRIDGE
		Goto :RADAREND
	ElseIf ($word = "reset")
		KillAllTriggers
		SetVar $radaron FALSE
		Gosub :INT_RESET
		Goto :RADAREND
	End
End
SetTextTrigger radarabortremote :RADARREMOTE $z_botname & " "
Pause
:RADAREND
End
:NORADAR
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# CLEAN 
:INTCOM_CLEAN
If ($messagemode = "E")
	SetVar $Z_Lib~messagemode "R"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
Gosub :GETSTATS
If ($scanner <> "2") 
	SetVar $Z_Lib~message $scripttitle & ": CLEAN - I need a Holo Scanner. Exiting..*"
	SetVar $Z_Lib~messageto $sender
	Gosub :MSGBRIDGE
	Goto :NOCLEAN
End
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCLEAN
End
If ($prompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	Send "q m n t * q "
	WaitOn "(?=Help)? :"
End
KillAllTriggers
SetTextTrigger shielded :SHIELDED ">>>> (Shielded)"
SetTextTrigger allgood :NOSHIELDED "Sector  : " & $current_sector & " "
If ($prompt = "Citadel")
	Send "sz h* l j" & #8 & #8 & $z_lib~planetnum & "*  j c * "
Else
	Send "sz h* "
End
Pause
:NOSHIELDED
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": CLEAN - Cleaning figs around sector " & $current_sector & ".*"
SetVar $Z_Lib~messageto $sender
Gosub :MSGBRIDGE
SetVar $loop 0
SetVar $send ""
If ($prompt = "Citadel")
	Send "q q "
End
:LOOPN
if ($loop < SECTOR.WARPCOUNT[$current_sector])
	SetVar $loop ($loop + 1)
	GetDistance $dist SECTOR.WARPS[$current_sector][$loop] $current_sector
	If ($dist = 1) AND (SECTOR.WARPS[$current_sector][$loop] <> STARDOCK) AND (SECTOR.WARPS[$current_sector][$loop] > 10)
		SetVar $send ($send & "m" & SECTOR.WARPS[$current_sector][$loop] & "* Za" & $z_wave & "* *  < za" & $z_wave & "**  ")
	End
	Goto :LOOPN
End
Send $send
If ($prompt = "Citadel")
	Gosub :Z_Lib~RETURNTOPLANET
	Send "q m 0* * * * j c s*"
End
SetVar $Z_Lib~message $scripttitle & ": CLEAN - Sector " & $current_sector & " adjacents cleaned of figs.*"
SetVar $Z_Lib~messageto $sender
Gosub :MSGBRIDGE
Gosub :GETSTATS
Goto :NOCLEAN
:SHIELDED
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": CLEAN - Sector " & $current_sector & " adjacent has a <<SHIELDED PLANET>>*"
SetVar $Z_Lib~messageto $sender
Gosub :MSGBRIDGE
Gosub :GETSTATS
Goto :NOCLEAN
:NOCLEAN
SetVar $reset TRUE
Return
# COMPILE 
:INTCOM_COMPILE
KillAllTriggers
SetVar $compileminimum 0
IsNumber $isnum $PARM1
If ($isnum = TRUE) and ($PARM1 <> "0")
	SetVar $compileminimum $PARM1
Else
	SetVar $compileminimum 5000
End
SetVar $Z_Lib~message $scripttitle & ": COMPILE: - Doing a CIM Port Report. Please wait..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
KillAllTriggers
SetTextTrigger compile1 :COMPILE1 "ENDINTERROG"
Send "^rq"
Pause
:COMPILE1
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message $scripttitle & ": COMPILE: - Creating a list of UPGRADED ports.*"
SetVar $Z_Lib~message ($Z_Lib~message & "                  Minimum capacity : " & $compileminimum & ". Please wait...*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
FileExists $fileexists GAMENAME & "_UPGRADED.txt"
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_UPGRADED-backup-" & $timestamp & ".txt"
	Rename GAMENAME & "_UPGRADED.txt" GAMENAME & "_UPGRADED-backup-" & $timestamp & ".txt"
End
SetArray $jumplist 0
SetVar $jumplistptr 0
SetVar $z_nextsector 0
SaveVar $z_nextsector
SetVar $compilecount 0
SetVar $x 1
Send #145
WaitOn #145 & #8
#Echo "**" & $boldwhite & "COMPILE: - Processing. Please wait...**" & $boldgreen & $savecursor
Gosub :Z_Lib~SETDIAL
While ($x <= SECTORS)
#	SetVar $Z_Lib~progress $x
#	SetVar $Z_Lib~goal SECTORS
#	Gosub :Z_Lib~PROGRESSBAR 
#	SetPrecision 4
#	SetVar $percent ((100 / SECTORS) * $x)
#	SetPrecision 0
#	SetVar $Z_Lib~number $percent
#	Gosub :Z_Lib~ROUND
#	SetVar $percent $Z_Lib~round
#	Echo $restorecursor & $boldgreen & $Z_Lib~progressbar & $boldyellow & " " & $percent & "%"
	Gosub :Z_Lib~UPDATEDIAL
	SetVar $compileupgraded FALSE
	SetVar $compilefuel FALSE
	SetVar $compileorg FALSE
	SetVar $compileequ FALSE
	If (PORT.EXISTS[$x] = TRUE)
		If (PORT.FUEL[$x] > 0) and (PORT.PERCENTFUEL[$x] > 0)
			If (((PORT.FUEL[$x] / PORT.PERCENTFUEL[$x]) * 100) >= $compileminimum)
				SetVar $compileupgraded TRUE
				SetVar $compilefuel TRUE
			End
		End
		If (PORT.ORG[$x] > 0) and (PORT.PERCENTORG[$x] > 0)
			If (((PORT.ORG[$x] / PORT.PERCENTORG[$x]) * 100) >= $compileminimum)
				SetVar $compileupgraded TRUE
				SetVar $compileorg TRUE
			End
		End
		If (PORT.EQUIP[$x] > 0) and (PORT.PERCENTEQUIP[$x] > 0)
			If (((PORT.EQUIP[$x] / PORT.PERCENTEQUIP[$x]) * 100) >= $compileminimum)
				SetVar $compileupgraded TRUE
				SetVar $compileequ TRUE
			End
		End
		If ($compileupgraded = TRUE)
			SetVar $Z_Strings~padchar " "
			SetVar $Z_Strings~padlen 8
			SetVar $Z_Strings~unpadded $x
			SetVar $Z_Strings~rpad TRUE
			Gosub :Z_Strings~PAD
			SetVar $compileline $Z_Strings~padded
			If (PORT.BUYFUEL[$x] = TRUE)
				If ($compilefuel = TRUE)
					SetVar $compileline ($compileline & "B")
				Else
					SetVar $compileline ($compileline & "b")
				End
			Else
				If ($compilefuel = TRUE)
					SetVar $compileline ($compileline & "S")
				Else
					SetVar $compileline ($compileline & "s")
				End
			End
			If (PORT.BUYORG[$x] = TRUE)
				If ($compileorg = TRUE)
					SetVar $compileline ($compileline & "B")
				Else
					SetVar $compileline ($compileline & "b")
				End
			Else
				If ($compileorg = TRUE)
					SetVar $compileline ($compileline & "S")
				Else
					SetVar $compileline ($compileline & "s")
				End
			End
			If (PORT.BUYEQUIP[$x] = TRUE)
				If ($compileequ = TRUE)
					SetVar $compileline ($compileline & "B")
				Else
					SetVar $compileline ($compileline & "b")
				End
			Else
				If ($compileequ = TRUE)
					SetVar $compileline ($compileline & "S")
				Else
					SetVar $compileline ($compileline & "s")
				End
			End
			SetVar $compileline ($compileline & " ")
			If (PORT.FUEL[$x] > 0) and (PORT.PERCENTFUEL[$x] > 0)
				SetVar $value ((PORT.FUEL[$x] / PORT.PERCENTFUEL[$x]) * 100)
				If ($value > $productionmax)
					SetVar $value $productionmax
				End
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 7
				SetVar $Z_Strings~unpadded $value
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $compileline ($compileline & $Z_Strings~padded)
			Else
				SetVar $compileline ($compileline & "-----  ")
			End
			If (PORT.ORG[$x] > 0) and (PORT.PERCENTORG[$x] > 0)
				SetVar $value ((PORT.ORG[$x] / PORT.PERCENTORG[$x]) * 100)
				If ($value > $productionmax)
					SetVar $value $productionmax
				End
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 7
				SetVar $Z_Strings~unpadded $value
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $compileline ($compileline & $Z_Strings~padded)
			Else
				SetVar $compileline ($compileline & "-----  ")
			End
			
			If (PORT.EQUIP[$x] > 0) and (PORT.PERCENTEQUIP[$x] > 0)
				SetVar $value ((PORT.EQUIP[$x] / PORT.PERCENTEQUIP[$x]) * 100)
				If ($value > $productionmax)
					SetVar $value $productionmax
				End
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 7
				SetVar $Z_Strings~unpadded $value
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $compileline ($compileline & $Z_Strings~padded)
			Else
				SetVar $compileline ($compileline & "-----  ")
			End
			Write GAMENAME & "_UPGRADED.txt" $compileline
			SetVar $compilecount ($compilecount + 1)
		End
	End
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~ENDDIAL
Echo "*"
If ($compilecount > 0)
	SetVar $Z_Lib~message $scripttitle & ": COMPILE: - " & GAMENAME & "_UPGRADED.txt created with " & $compilecount & " entries.*"
Else
	SetVar $Z_Lib~message $scripttitle & ": COMPILE: - NO UPGRADED PORTS to report.*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
If ($z_usesound = TRUE)
	Sound ding
End
Return
# SPG 
:INTCOM_SPG
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "FORKS") or ($PARM1 = "BRANCHES")
	Gosub :SPGETFORKS
	SetVar $Z_Lib~message $scripttitle & ": SPG: - Current branches: " & $spgptr & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSPG2
End
If ($PARM1 <> "ON") and ($PARM1 <> "HUNT") and ($PARM1 <> "RETURN") and ($PARM1 <> "SCRUB") and ($PARM1 <> "SR")  and ($PARM1 <> "RABID")
	SetVar $Z_Lib~message $scripttitle & ": SPG: - BAD PARAMETER! Exiting..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSPG
End
If ($messagemode = "E")
	SetVar $messagemode "R"
	SetVar $Z_Lib~messagemode "R"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
SetVar $attacked FALSE
Gosub :GETSTATS
If ($twarp = "0")
	SetVar $spgreason "I need a Transwarp Drive.*"
	Goto :NOSPG
End
If ($scanner <> "2")
	SetVar $spgreason "I need a Holo Scanner.*"
	Goto :NOSPG
End
If ($photons <> "0")
	SetVar $spgreason "NO PHOTONS ALLOWED.*"
	SetVar $Z_Lib~messageto $sender
	Gosub :MSGBRIDGE
	Goto :NOSPG
End
IsNumber $isnum $PARM2
If ($isnum = TRUE) and ($PARM2 <> "0")
	SetVar $spgminturns $PARM2
Else
	SetVar $spgminturns $z_minturns
End
If ($turns <= $spgminturns) and ($z_lib~isunlimited <> TRUE)
	SetVar $spgreason "Not enough TURNS.*"
	Goto :NOSPG
End
If ($figs <= $z_minfigs)
	SetVar $spgreason "Not enough FIGHTERS.*"
	Goto :NOSPG
End
SetVar $spgcounter 0
SetVar $spghunted 0
SetVar $spghunt FALSE
SetVar $spgrabid FALSE
LowerCase $user_command_line
If ($p = TRUE)
	GetWordPos $user_command_line $pos "hunt"
	If ($pos > 0)
		SetVar $spghunt TRUE
	End
	GetWordPos $user_command_line $pos "sr"
	If ($pos > 0)
		SetVar $spgusesr TRUE
		If ($z_sr <> "KILL") and ($z_sr <> "CAP")
			SetVar $z_sr "KILL"
		End
	End
	GetWordPos $user_command_line $pos "rabid"
	If ($pos > 0)
		SetVar $spgrabid TRUE
	End
End
SetVar $spgbroadcast 500
GetWordPos $user_command_line $pos "ss="
GetWordPos $user_command_line $pos2 "ss=off"
If ($pos2 <> "0")
	SetVar $spgbroadcast 0
ElseIf ($pos > 0)
	CutText $user_command_line $temp $pos 999
	StripText $temp "ss="
	GetWord $temp $value 1
	IsNumber $isnum $value
	If ($isnum = TRUE)
		SetVar $spgbroadcast $value
	End
End
SetVar $spgrefill FALSE
GetWordPos $user_command_line $pos "refill"
If ($pos > 0)
	SetVar $spgrefill TRUE
End
SetVar $spgreturn FALSE
GetWordPos $user_command_line $pos "return"
If ($pos > 0) and ($z_base <> "") and ($z_base <> "0")
	SetVar $spgreturn TRUE
End
SetVar $spgscrub FALSE
GetWordPos $user_command_line $pos "scrub"
If ($pos > 0)
	If ($z_base <> "") and ($z_base <> "0") and ($z_safesector <> "0") and ($z_safesector <> "")
		SetVar $spgscrub TRUE
	Else
		SetVar $spgreason "Set BASE and SAFESECTOR first.*"
		Goto :NOSPG
	End
End
Gosub :Z_Lib~COMMSON
SetVar $spgcall FALSE
GetWordPos $user_command_line $pos "call"
If ($pos > 0)
	Gosub :CHECKRESCUE
	If ($z_rescueavailable = TRUE)
		SetVar $spgcall TRUE
	Else
		SetVar $spgreason "RESCUE NOT AVAILABLE.*"
		Goto :NOSPG
	End
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $spgcall FALSE
	SetVar $spgreason "Bad Prompt.*"
	Goto :NOSPG
End
Gosub :SPGETFORKS
SetVar $spglastsector $current_sector
If ($current_sector <> STARDOCK) and ($current_sector > 10)
	If ($z_figtype = "d")
		Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*d"
	Else
		Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*" & $z_figtype & "q * "
	End
	SetSectorParameter $current_sector "FIGSEC" TRUE	
	GetSectorParameter $current_sector "BUSTED" $busted
	If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0") and ($busted <> TRUE)
	   Send "q q q q z 0* q z 0* q z 0* p * * * z 0* z 0* "
	End
End
If ($spgrabid = TRUE)
	SetVar $spgmsg "GRID MODE: Rabid!*"
ElseIf ($spghunt = TRUE)
	SetVar $spgmsg "GRID MODE: Hunting*"
Else
	SetVar $spgmsg "GRID MODE: Passive*"
End
If ($z_Lib~isunlimited = TRUE)
	SetVar $spgmsg ($spgmsg & "MIN TURNS: Unlimited*")
Else
	SetVar $spgmsg ($spgmsg & "MIN TURNS: " & $spgminturns & "*")
End
If ($spgbroadcast = "0")
	SetVar $spgmsg ($spgmsg & "REPORTING: No*")
Else
	SetVar $spgmsg ($spgmsg & "REPORTING: Densities >= " & $spgbroadcast & "*")
End
If ($spgrefill = TRUE)
	SetVar $spgmsg ($spgmsg & "REFILL   : ON*")
Else
	SetVar $spgmsg ($spgmsg & "REFILL   : OFF*")
End
If ($spgcall = TRUE)
	SetVar $spgmsg ($spgmsg & "CALL SAVE: ON*")
Else
	SetVar $spgmsg ($spgmsg & "CALL SAVE: OFF*")
End
If ($spgusesr = TRUE)
	SetVar $spgmsg ($spgmsg & "RESPONDER: " & $z_sr & "*")
Else
	SetVar $spgmsg ($spgmsg & "RESPONDER: OFF*")
End
If ($spgscrub = TRUE)
	SetVar $spgmsg ($spgmsg & "RETURN TO BASE: YES - SCRUB*")
ElseIf ($spgreturn = TRUE)
	SetVar $spgmsg ($spgmsg & "RETURN TO BASE: YES*")
Else
	SetVar $spgmsg ($spgmsg & "RETURN TO BASE: NO*")
End
SetVar $Z_Lib~message $scripttitle & ": SPG - Smart Passive Gridder* *" & $spgmsg
SetVar $Z_Lib~messageto $sender
Gosub :MSGBRIDGE
SetVar $spgmsg ""
Gosub :GETSTATS
SetVar $z_quiet TRUE
If ($z_lib~isunlimited <> TRUE)
	SetVar $startturns $turns
End
:SPGSTART
KillAllTriggers
SetTextOutTrigger spgabort :SPGABORT "~"
SetTextOutTrigger spgabort2 :SPGABORT #8
SetTextTrigger spgremote :SPGREMOTE $z_botname & " spg off"
SetTextTrigger t64 :STANDDOWN $z_code & "[Z]STANDDOWN[Z]" & $z_code
SetTextTrigger spgbadnews1 :SPGBADNEWS "launched a P-Missile in sector"
If ($spgusesr = TRUE) and ($p = TRUE) 
	Gosub :SETSRTRIGGERS
Else
	SetTextTrigger spgbadnews2 :SPGBADNEWS "is powering up weapons systems!"
End
SetDelayTrigger spgpause :SPGPAUSE 200
Pause
:SPGBADNEWS
KillAllTriggers
SetVar $attacked TRUE
SetVar $spgreason "We were attacked."
Goto :NOSPG
:SPGABORT
KillAllTriggers
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $spgcall FALSE
	SetVar $spgreason "Bad prompt.*"
	Goto :NOSPG
End
SetVar $spgreason "SPG ABORTED.*"
GoSub :SAVESPG
Goto :NOSPG
:SPGREMOTE
KillAllTriggers
CutText CURRENTLINE $ck 1 1
If ($ck = "R")
	SetVar $Z_Lib~setprompt "COMMAND"
	SetVar $Z_Lib~heraldss TRUE
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		SetVar $spgcall FALSE
		SetVar $spgreason "Bad prompt.*"
		Goto :NOSPG
	End
	SetVar $spgreason "SPG ABORTED.*"
	GoSub :SAVESPG
	Goto :NOSPG
Else
	Goto :SPGSTART
End
:SPGPAUSE
KillTrigger spgpause
KillTrigger spgabort
KillTrigger spgremote
If ($turns <= $spgminturns) and ($z_lib~isunlimited <> TRUE)
	SetVar $spgreason "Not enough TURNS.*"
	GoSub :SAVESPG
	Goto :NOSPG
End
If ($spgrefill = TRUE)
	If ($credits < 100000)
		SetVar $spgreason "Low on cash.*"
		GoSub :SAVESPG
		Goto :NOSPG
	End
	If ($figs < $z_minfigs) or ($mines < $z_mowmines) or ($limps < $z_mowlimps)
		Gosub :BUYUP
		Send #145
		WaitOn #145 & #8
		Gosub :GETSTATS
		If ($current_sector <> $returnsector)
			SetVar $spgreason "Did NOT return from STARDOCK.*"
			GoSub :SAVESPG
			Goto :NOSPG
		End
	End
End
If ($figs < $z_minfigs)
	SetVar $spgreason "Not enough FIGHTERS.*"
	GoSub :SAVESPG
	Goto :NOSPG
End
Send "sd"
WaitOn "?=Help)?"
Gosub :GETSTATS
SetArray $warpscore 0
SetVar $warps SECTOR.WARPCOUNT[$current_sector]
SetVar $spgneedscan FALSE
SetVar $spgwhosonline FALSE
SetArray $warpscore $warps
SetVar $spgnext "0"
SetVar $x 1
While ($x <= $warps)
	SetVar $warpscore[$x] 1
	SetVar $adj SECTOR.WARPS[$current_sector][$x]
	If ($spgbroadcast <> "0")
		SetVar $temp SECTOR.CONSTELLATION[$adj]
		GetWordPos $temp $pos "pace"
		If ($pos > 0)
			GetWordPos $temp $pos "ncharted"
			If ($pos = 0)
				SetVar $Z_Lib~message $scripttitle & ": SPG: - ALIEN SPACE DETECTED: [" & $adj & "] - " & SECTOR.CONSTELLATION[$adj] & "*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
			End
		End
	End
	If ($adj < 11) or ($adj = STARDOCK)
		SetVar $warpscore[$x] 0
	ElseIf (SECTOR.DENSITY[$adj] > 499)
		GetSectorParameter $adj "FIGSEC" $figged
		If ($figged = TRUE)
			SetVar $warpscore[$x] 0
		Else
			SetVar $warpscore[$x] "-2"
			SetVar $spgneedscan TRUE
			If (SECTOR.DENSITY[$adj] >= $spgbroadcast) and ($spgbroadcast <> "0")
				If (SECTOR.PLANETCOUNT[$adj] > 0)
					SetVar $Z_Lib~message $scripttitle & ": SPG: - HIGH DENSITY SECTOR: [" & $adj & "] - " & SECTOR.DENSITY[$adj] & " - !! PLANET !!*"
					Write GAMENAME & "_Z-SPG_HIGH_DENSITY_REPORT.txt" $adj & " " & SECTOR.DENSITY[$adj] & " - !! PLANET !!*"
				Else
					SetVar $Z_Lib~message $scripttitle & ": SPG: - HIGH DENSITY SECTOR: [" & $adj & "] - " & SECTOR.DENSITY[$adj] & "*"
					Write GAMENAME & "_Z-SPG_HIGH_DENSITY_REPORT.txt" $adj & " " & SECTOR.DENSITY[$adj] & "*"
				End
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
			End
		End
	ElseIf (SECTOR.NAVHAZ[$adj] > 0) and ($spghunt <> TRUE) and ($spgrabid <> TRUE)
		SetVar $warpscore[$x] 0
	ElseIf ((SECTOR.NAVHAZ[$adj] * 100) > $shields)
		SetVar $warpscore[$x] 0
	ElseIf ($adj = $spglastsector)
		SetVar $warpscore[$x] 0
	ElseIf (SECTOR.DENSITY[$adj] > 0)
		GetSectorParameter $adj "FIGSEC" $figged
		If ($figged = TRUE)
			SetVar $warpscore[$x] 0
		Else
			SetVar $spgneedscan TRUE
		End
	ElseIf (SECTOR.ANOMOLY[$adj] = TRUE)
		SetVar $warpscore[$x] 0
	End
	SetVar $x ($x + 1)
End
If ($spgneedscan = TRUE)
	SetVar $spgsect 0
	SetTextTrigger spg1 :SPGNEXT "Sector  :"
	SetTextTrigger spg2 :SPGSHIELD ">>>> (Shielded)"
	SetTextTrigger spg3 :SPGNOSH "Traders :"
	SetTextTrigger spg4 :SPGNOSH "Ships   :"
	SetTextTrigger spg5 :SPGNOSH "Warps to Sector(s) :"
	SetTextTrigger spg6 :SPGDONE "Command [TL="
	Send "sz h*"
	Pause
:SPGNEXT
	KillTrigger spg1
	GetText CURRENTLINE $spgsect "Sector  : " " in"
	SetTextTrigger spg1 :SPGNEXT "Sector  :"
	Pause
:SPGSHIELD
	KillTrigger spg2
	SetVar $adjs ($adjs & "[" & $spgsect & "]")
	SetTextTrigger spg2 :SPGSHIELD ">>>> (Shielded)"
	Pause
:SPGNOSH
	KillTrigger spg3
	KillTrigger spg4
	KillTrigger spg5
	SetVar $spgsect 0
	SetTextTrigger spg3 :SPGNOSH "Traders :"
	SetTextTrigger spg4 :SPGNOSH "Ships   :"
	SetTextTrigger spg5 :SPGNOSH "Warps to Sector(s) :"
	Pause
:SPGDONE
	KillTrigger spg1
	KillTrigger spg2
	KillTrigger spg3
	KillTrigger spg4
	KillTrigger spg5
	KillTrigger spg6
	SetVar $x 1
	SetVar $adjs ""
	While ($x <= $warps)
		SetVar $adj SECTOR.WARPS[$current_sector][$x]
		GetWordPos $adjs $pos "[" & $adj & "]"
		If ($pos > 0)
			SetVar $warpscore[$x] 0
			If ($spgbroadcast <> "0")
				SetVar $Z_Lib~message $scripttitle & ": SPG: - HIGH DENSITY SECTOR: [" & $adj & "] - " & SECTOR.DENSITY[$adj] & " - !! SHIELDED PLANET !!*"
				Write GAMENAME & "_SPG-HIGH_DENSITY_REPORT.txt" $adj & " " & SECTOR.DENSITY[$adj] & " - !! SHIELDED PLANET !!*"
			End
		ElseIf ($warpscore[$x] = "-2")
			SetVar $warpscore[$x] "-1"
		End
		SetVar $x ($x + 1)
	End
	Gosub :GETSTATS
	SetVar $x 1
	While ($x <= $warps)
		SetVar $adj SECTOR.WARPS[$current_sector][$x]
		If ($warpscore[$x] > 0)
			If (SECTOR.FIGS.QUANTITY[$adj] > 0)
				If (($spghunt = TRUE) or ($spgrabid = TRUE)) and (SECTOR.FIGS.QUANTITY[$adj] <= 100)
					SetVar $warpscore[$x] "-1"
					SetVar $spgwhosonline TRUE
				Else
					SetVar $warpscore[$x] 0
				End
			End
			If (SECTOR.MINES.QUANTITY[$adj] > 0)
				SetVar $warpscore[$x] 0
			ElseIf (SECTOR.LIMPETS.QUANTITY[$adj] > 0)
				SetVar $warpscore[$x] 0
			ElseIf (SECTOR.TRADERCOUNT[$adj] > 0)
				SetVar $warpscore[$x] 0
			End
		End
		SetVar $x ($x + 1)
	End
	If ($spgwhosonline = TRUE)
		If ($spgrabid <> TRUE)
			Gosub :Z_GetPlayers~GETPLAYERS
			SetVar $x 1
			SetVar $spgwho ""
			While ($x <= $Z_GetPlayers~menu_count)
				If ($Z_GetPlayers~menu_corp[$x] <> "0")
					SetVar $spgwho ($spgwho & " [" & $Z_GetPlayers~menu_corp[$x] & "] ")
				End
				SetVar $x ($x + 1)
			End
		Else
			SetVar $spgwho ""
		End
		SetVar $x 1
		While ($x <= $warps)
			SetVar $warpowner ""
			SetVar $adj SECTOR.WARPS[$current_sector][$x]
			If ($warpscore[$x] = "-1")
				GetWordPos SECTOR.FIGS.OWNER[$adj] $pos "Corp#"
				If ($pos = "0")
					SetVar $i 1
					SetVar $found FALSE
					SetVar $temp SECTOR.FIGS.OWNER[$adj]
					StripText $temp "belong to "
					LowerCase $temp
					While ($i <= $Z_GetPlayers~menu_count)
						If ($Z_GetPlayers~menu_name[$i] = $temp)
							SetVar $found TRUE
							SetVar $i $Z_GetPlayers~menu_count
						End
						SetVar $i ($i + 1)
					End
					If ($found = TRUE) and ($spgrabid <> TRUE)
						SetVar $warpscore[$x] "0"
					Else
						SetVar $warpscore[$x] "2"
					End
				Else
					GetText SECTOR.FIGS.OWNER[$adj] $warpowner "Corp#" ","
					GetWordPos $spgwho $pos "[" & $warpowner & "]" 
					If ($pos <> "0") and ($spgrabid <> TRUE)
						SetVar $warpscore[$x] "0"
					Else
						SetVar $warpscore[$x] "2"
					End
				End
			End
			SetVar $x ($x + 1)
		End
	End
End
SetVar $x 1
SetVar $warpchoice1 0
SetVar $warpchoice2 0
SetVar $warpchoices1 ""
SetVar $warpchoices2 ""
SetVar $spgnext "0"
SetVar $hunt FALSE
While ($x <= $warps)
	SetVar $adj SECTOR.WARPS[$current_sector][$x]
	If ($warpscore[$x] = 1)
		SetVar $warpchoice1 ($warpchoice1 + 1)
		SetVar $warpchoices1 ($warpchoices1 & " " & $adj)
	ElseIf ($warpscore[$x] = 2)
		SetVar $hunt TRUE
		SetVar $warpchoice2 ($warpchoice2 + 1)
		SetVar $warpchoices2 ($warpchoices2 & " " & $adj)
	End
	SetVar $x ($x + 1)
End
If (($warpchoice1 + $warpchoice2) > 1)
	SetVar $spgptr ($spgptr + 1)
	SetVar $spgforks[$spgptr] $current_sector
	Write GAMENAME & "_SPGFORKS.txt" $current_sector
End
If ($warpchoice2 > 0)
	GetRnd $rnd 1 $warpchoice2
	Getword $warpchoices2 $spgnext $rnd
ElseIf ($warpchoice1 > 0)
	GetRnd $rnd 1 $warpchoice1
	Getword $warpchoices1 $spgnext $rnd
End
If ($spgnext <> "0")
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_gas TRUE
	SetVar $target $spgnext
	SetVar $spglastsector $current_sector
	SetVar $mowmode "MOW"
	Gosub :MOVE
	Send #145
	WaitFor #145 & #8
	Gosub :GETSTATS
	If ($current_sector <> $spgnext)
		SetVar $spgreason "Something is wrong!*"
		GoSub :SAVESPG
		Goto :NOSPG
	End
	Gosub :HERALDFIG
	If ($hunt = TRUE)
		SetVar $spghunted ($spghunted + 1)
		SetVar $hunt FALSE
	End
	SetVar $spgcounter ($spgcounter + 1)
ElseIf ($spgptr > 0)
:SPGCHECK
	GetSectorParameter $spgforks[$spgptr] "FIGSEC" $figged
	If ($figged <> TRUE)
		SetVar $spgforks[$spgptr] 0
		SetVar $spgptr ($spgptr - 1)
		If ($spgptr < 1)
			SetVar $spgreason "Out of BRANCHES in " & $current_sector & ".*"
			Delete GAMENAME & "_SPGFORKS.txt"
			Goto :NOSPG
		End
		Goto :SPGCHECK
	End
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_gas TRUE
	SetVar $spgnext $spgforks[$spgptr]
	SetVar $spgforks[$spgptr] 0
	SetVar $spgptr ($spgptr - 1)
	Gosub :SAVESPG
	SetVar $target $spgnext
	SetVar $spglastsector $current_sector
	Gosub :TWARPING
	Send #145
	WaitFor #145 & #8
	Gosub :GETSTATS
	If ($credits < 5000)
		SetVar $spgreason "Low on cash.*"
		GoSub :SAVESPG
		Goto :NOSPG
	End
	If ($current_sector <> $spgnext)
		If ($ore < $holds)
			Gosub :INTCOM_GAS
		End
		Gosub :GETSTATS
		If ($ore < $holds)
			SetVar $spgreason "Low on GAS!*"
			GoSub :SAVESPG
			Goto :NOSPG
		Else
			Gosub :CLEARMOVEOPTIONS
			SetVar $z_gas TRUE
			SetVar $target $spgnext
			Gosub :TWARPING
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector <> $spgnext)
				SetVar $spgreason "Something is wrong.*"
				GoSub :SAVESPG
				Goto :NOSPG
			End
		End
	End
Else
	SetVar $spgreason "Out of BRANCHES in " & $current_sector & ".*"
	Delete GAMENAME & "_SPGFORKS.txt"
	Goto :NOSPG
End
#Gosub :GETSTATS
Goto :SPGSTART
:SAVESPG
SetVar $i 1
Delete GAMENAME & "_SPGFORKS.txt"
While ($i <= $spgptr)
	Write GAMENAME & "_SPGFORKS.txt" $spgforks[$i]
	SetVar $i ($i + 1)
End
Return
:SPGETFORKS
SetArray $spgforks 0
SetVar $spgptr 0
FileExists $fileexists GAMENAME & "_SPGFORKS.txt"
If ($fileexists = TRUE)
	ReadToArray GAMENAME & "_SPGFORKS.txt" $spgtemp
	SetVar $x 1
	While ($x <= $spgtemp)
		IsNumber $isnum $spgtemp[$x]
		If ($isnum = TRUE)
			If ($spgtemp[$x] > 0) and ($spgtemp[$x] <= SECTORS)
				SetVar $spgptr ($spgptr + 1)
				SetVar $spgforks[$spgptr] $spgtemp[$x]
			End
		End
		SetVar $x ($x + 1)
	End
	SetArray $spgtemp 0
End
Return
:NOSPG
KillAllTriggers
If ($spgcall = TRUE)
	Gosub :GETSTATS
	If ($z_callfast = "TRUE")
		SetVar $Z_SaveMe~planet $rescueplanet
		Gosub :Z_SaveMe~CALLFAST
	Else
		Gosub :Z_SaveMe~CALL
	End
End
Send #145
WaitOn #145 & #8
If ($spgscrub = TRUE)
	SetVar $PARM1 "0"
	Gosub :INTCOM_SCRUB
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
ElseIf ($spgreturn = TRUE)
	Gosub :CLEARMOVEOPTIONS
	If ($z_planet <> "") and ($z_planet <> "0")
		SetVar $z_land TRUE
	End
	SetVar $target $z_base
	Gosub :TWARPING
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
End
If ($attacked = TRUE)
	SetVar $spgreason "We were attacked!*"
	GoSub :SAVESPG
End
SetVar $Z_Lib~message $scripttitle & ": SPG: - Done.*"
SetVar $Z_Lib~message ($Z_Lib~message & "Total Gridded  : " & $spgcounter & "*")
If ($spghunt = TRUE) or ($spgrabid = TRUE)
	SetVar $Z_Lib~message ($Z_Lib~message & "Sectors Stolen : " & $spghunted & "*")
End
If ($z_lib~isunlimited <> TRUE)
	If ($spgcounter <> "0")
		SetVar $Z_Lib~message ($Z_Lib~message & "Turns Used     : " & ($startturns - $turns) & "*")
		SetPrecision 2
		SetVar $efficiency (($spgcounter / ($startturns - $turns)) * 100)
		SetPrecision 0
		SetVar $Z_Lib~message ($Z_Lib~message & "Efficiency     : " & $efficiency & "%*")
	End
End
SetVar $Z_Lib~message ($Z_Lib~message & "Branches Left  : " & $spgptr & "*")
SetVar $Z_Lib~message ($Z_Lib~message & "Exit Reason    : " & $spgreason & "*")
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send #145
WaitOn #145 & #8
:NOSPG2
SetArray $spgforks 0
SetVar $spgptr 0
SetVar $z_quiet FALSE
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
SetVar $attacked FALSE
If ($z_usesound = TRUE)
	Sound ding
End
Return
# LIST 
:INTCOM_LIST
KillAllTriggers
If ($messagemode = "E")
	SetVar $Z_Lib~messagemode "R"
Else
	SetVar $Z_Lib~messagemode $messagemode
End
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	Gosub :CREATEFILELISTHEADER
End
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": LIST: - Cannot find or create z-filelist.cfg.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOLIST
End
ReadToArray "z-filelist.cfg" $filelist
SetVar $ssmsg $dashedline & $scripttitle & ": Approved File Transfer List*" & $dashedline
SetVar $found FALSE
SetVar $x 1
While ($x <= $filelist)
	GetLength $filelist[$x] $len
	If ($len > 0)
		CutText $filelist[$x] $ck 1 1
		If ($ck <> "#")
			GetWord $filelist[$x] $word 1
			If ($word <> "0")
				SetVar $found TRUE
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 16
				SetVar $Z_Strings~unpadded $word
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				FileExists $fileexist GAMENAME & "_" & $word & ".txt"
				If ($fileexist = TRUE)
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & GAMENAME & "_" & $word & ".txt*")
				Else
					SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & GAMENAME & "_" & $word & ".txt  <--- File NOT FOUND.*")
				End
			End
		End
	End
	SetVar $x ($x + 1)
End
If ($found <> TRUE)
	SetVar $ssmsg ($ssmsg & "NO FILES TRANSFER APPROVED. Edit z-filelist.cfg in the TWX Root.*")
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOLIST
KillAllTriggers
SetArray $filelist 0
SetVar $reset TRUE
Return
# SENDFILE 
:INTCOM_SENDFILE
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $Z_Lib~message $scripttitle & ": SENDFILE: - BAD PARAMETER! Exiting.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENDFILE
End
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": SENDFILE: - Cannot find z-filelist.cfg.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENDFILE
End
ReadToArray "z-filelist.cfg" $filelist
SetVar $found FALSE
SetVar $x 1
While ($x <= $filelist)
	GetLength $filelist[$x] $len
	If ($len > 0)
		CutText $filelist[$x] $ck 1 1
		If ($ck <> "#")
			GetWord $filelist[$x] $word 1
			UpperCase $word
			If ($word = $PARM1)
				SetVar $found TRUE
				FileExists $fileexist GAMENAME & "_" & $word & ".txt"
				If ($fileexist = TRUE)
					SetVar $fileok TRUE
				Else
					SetVar $fileok FALSE
				End
				SetVar $x $filelist
			End
		End
	End
	SetVar $x ($x + 1)
End
SetArray $filelist 0
If ($found <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": SENDFILE: - " & $PARM1 & " NOT AVAILABLE.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENDFILE
ElseIf ($fileok <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": SENDFILE: - " & GAMENAME & "_" & $PARM1 & ".txt NOT FOUND.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENDFILE
End
SetVar $filename GAMENAME & "_" & $PARM1 & ".txt"
ReadToArray $filename $file
Gosub :Z_Lib~COMMSON
SetVar $receivers 0
SetTextTrigger ssok :SFOK "Comm-link open on sub-space band"
SetDelayTrigger ssnotok :SFNOTOK 5000
Send "'*"
Pause
:SFNOTOK
KillAllTriggers
Echo "***" & $boldred & "Cannot open SS channel!***"
Send "**"
Goto :NOSENDFILE
:SFOK
KillAllTriggers
SetTextTrigger readytorec :READYTORECF "Ready to receive file " & $PARM1 & "!"
SetDelayTrigger recregdone :RECREGDONEF 10000
Send "Ready to send " & $PARM1 & " file.*"
Send "All receivers of " & $PARM1 & " register now...**"
Pause
:READYTORECF
SetVar $receivers ($receivers + 1)
SetTextTrigger readytorec :READYTORECF "Ready to receive file " & $PARM1 & "!"
Pause
:RECREGDONEF
KillAllTriggers
If ($receivers < 1)
	Send "'NO RECEIVERS ! Exiting...*"
	Goto :NOSENDFILE
End
:FILESENDLOOP
SetVar $x 1
SetVar $sendcount 0
SetTextOutTrigger abortsendlist :ABORTSENDFILE #8
Send "'*"
While ($x <= $file)
	GetWord $file[$x] $temp 1
	If ($temp <> "")
		SetVar $msg "[++]" & $file[$x] & "[--]*"
		Send $msg
		SetVar $sendcount ($sendcount + 1)
		SetDelayTrigger paceit :PACESENDF 70
		Pause
:PACESENDF
	End
	SetVar $x ($x + 1)
End
Send "SENDFILE Transmission Complete! " & $sendcount & " lines sent.**"
WaitOn "Sub-space comm-link terminated"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOSENDFILE
:ABORTSENDFILE
KillAllTriggers
Send "**'!!! SENDER ABORTED !!!*"
WaitOn "Message sent on sub-space channel"
If ($z_usesound = TRUE)
	sound ding
End
Goto :NOSENDFILE
:NOSENDFILE
KillAllTriggers
Send #145
WaitOn #145 & #8
SetArray $file 0
SetVar $reset TRUE
Return
# GETFILE 
:INTCOM_GETFILE
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $Z_Lib~message $scripttitle & ": GETFILE: - BAD PARAMETER! Exiting.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOGETFILE
End
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": GETFILE: - Cannot find z-filelist.cfg.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOGETFILE
End
ReadToArray "z-filelist.cfg" $filelist
SetVar $found FALSE
SetVar $x 1
While ($x <= $filelist)
	GetLength $filelist[$x] $len
	If ($len > 0)
		CutText $filelist[$x] $ck 1 1
		If ($ck <> "#")
			GetWord $filelist[$x] $word 1
			UpperCase $word
			If ($word = $PARM1)
				SetVar $found TRUE
				FileExists $fileexist GAMENAME & "_" & $word & ".txt"
				If ($fileexist = TRUE)
					SetVar $fileok TRUE
				Else
					SetVar $fileok FALSE
				End
				SetVar $x $filelist
			End
		End
	End
	SetVar $x ($x + 1)
End
SetArray $filelist 0
SetVar $filename GAMENAME & "_" & $PARM1 & ".txt"
If ($found <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": GETFILE: - " & $PARM1 & " NOT APPROVED.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSENDFILE
ElseIf ($fileok = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_" & $PARM1 & "-backup-" & $timestamp & ".txt"
	Rename $filename GAMENAME & "_" & $PARM1 & "-backup-" & $timestamp & ".txt"
	Delete $filename
End
Gosub :Z_Lib~COMMSON
SetTextLineTrigger regnow :REGNOWF "All receivers of " & $PARM1 & " register now..."
SetTextTrigger noreg :NOREGF "NO RECEIVERS ! Exiting..."
SetDelayTrigger regnosender :NOREGF 60000
Send "'Waiting to register for GETFILE...*"
Pause
:NOREGF
KillAllTriggers
Send "'NO SENDER! Exiting...*"
Goto :NOGETLIST
:REGNOWF
KillAllTriggers
SetArray $jumplist 0
SetVar $sectorcount 0
SetTextLineTrigger gotaline :GOTFILELINE "[--]"
SetTextLineTrigger gotmap :GETFILEDONE "SENDFILE Transmission Complete!"
SetTextTrigger abortmap :ABORTFILE "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETFILE #8
SetDelayTrigger getmapnotdone :GETFILENOTDONE 60000
Send "'Ready to receive file " & $PARM1 & "!*"
Pause
:ABORTFILE
KillALLTriggers
Echo "***" & $boldred & "SENDER ABORTED! Received " & $sectorcount & " lines. Exiting.***"
Goto :NOGETLIST
:GOTFILELINE
KillAllTriggers
SetVar $cline CURRENTLINE
GetText $cline $specline "[++]" "[--]"
Write $filename $specline
SetVar $sectorcount ($sectorcount + 1)
SetVar $alive ($alive + 1)
If ($alive > 500)
	SetVar $alive 0
	Send #27
End
SetTextLineTrigger gotaline :GOTFILELINE "[--]"
SetTextLineTrigger gotmap :GETFILEDONE "SENDFILE Transmission Complete!"
SetTextTrigger abortmap :ABORTFILE "!!! SENDER ABORTED !!!"
SetTextOutTrigger abortgetmap :ABORTGETFILE #8
SetDelayTrigger getmapnotdone :GETFILENOTDONE 60000
Pause
:ABORTGETFILE
Echo "***" & $boldred & "USER ABORTED! Received " & $sectorcount & " lines. Exiting.***"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOGETFILE
:GETFILENOTDONE
KillAllTriggers
Send "'GETFILE TIMED OUT! Received " & $sectorcount & " lines. Exiting.*"
Goto :NOGETFILE
:GETFILEDONE
KillAllTriggers
Send "'GETFILE Complete! Received " & $sectorcount & " lines.*"
Echo "***" & $blinkon & $boldwhite & "File created in the TWX Root: " & $filename & "." & $blinkoff & "***"
If ($z_usesound = TRUE)
	Sound ding
End
Goto :NOGETFILE
:NOGETFILE
KillAllTriggers
SetArray $file 0
SetVar $reset TRUE
Return
# ASSETS 
:INTCOM_ASSETS
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOASSETS
End
Gosub :Z_Lib~COMMSOFF
Gosub :GETSTATS
Gosub :INTCOM_CORPY
Send #145
WaitOn #145 & #8
SetTextLineTrigger ass1 :ASSETS1 "planets exist in the universe"
SetTextLineTrigger ass2 :ASSETS2 "are in use throughout the Universe."
SetTextLineTrigger ass3 :ASSETS3 "Corporations are in business."
SetTextTrigger ass4 :ASSETS4 "Command [TL="
Send "v"
Pause
:ASSETS1
KillTrigger ass1
GetWord CURRENTLINE $asstotalplanets 1
GetWord CURRENTLINE $assperctotalplanets 7
Pause
:ASSETS2
KillTrigger ass2
GetWord CURRENTLINE $asstotalfighters 1
GetWord CURRENTLINE $asstotalmines 4
Pause
:ASSETS3
KillTrigger ass3
GetWord CURRENTLINE $asstotalcorps 1
Pause
:ASSETS4
KillTrigger ass1
KillTrigger ass2
KillTrigger ass3
KillTrigger ass4
StripText $asstotalplanets ","
Send #145
WaitOn #145 & #8
SetTextLineTrigger ass5 :ASSETS5 "---- -- --------------------------------- --------------------------------"
SetTextTrigger ass6 :ASSETS6 "Command [TL="
Send "t d rq "
Pause
:ASSETS5
KillTrigger ass5
SetTextLineTrigger ass7 :ASSETS7
Pause
:ASSETS6
KillAllTriggers
Goto :ASS9
:ASSETS7
KillTrigger ass7
SetVar $line CURRENTLINE
GetWord $line $word1 1
GetWord $line $word2 2
GetWord $line $word3 4
If ($word1 = "Corporate") and ($word2 = "Experience:")
	GetWord $line $word4 3
	GetWord $line $word5 6
	StripText $word4 ","
	StripText $word5 ","
	If ($z_corp = $asscurrentcorp)
		SetVar $asscorpexp $word4
		SetVar $asscorpalign $word5
	End
	SetVar $asstotalexp ($asstotalexp + $word4)
	SetVar $asstotalalign ($asstotalalign + $word5)
	SetTextLineTrigger ass5 :ASSETS5 "---- -- --------------------------------- --------------------------------"
	Pause
Else
	IsNumber $isnum1 $word1
	IsNumber $isnum2 $word2
	If ($isnum1 = TRUE) and ($isnum2 = TRUE) and ($word1 <> "0") and ($word2 <> "0")
		SetVar $asscurrentcorp $word2
		If ($z_corp = $asscurrentcorp)
			SetVar $asscorprank $word1
			CutText $line $word3 43 999
			SetVar $Z_Strings~trimstring $word3
			Gosub :Z_Strings~RTRIM
			SetVar $asscorpceo $Z_Strings~trimstring
			CutText $line $word4 9 999
			CutText $word4 $word4 1 33
			SetVar $Z_Strings~trimstring $word4
			Gosub :Z_Strings~RTRIM
			SetVar $asscorp $Z_Strings~trimstring
		End
	End
End
SetTextLineTrigger ass7 :ASSETS7
Pause
:ASS9
SetVar $nodisplay TRUE
Send #145
WaitOn #145 & #8
Gosub :INTCOM_FIGS
SetVar $assfiggrid $z_figcount
SetVar $assfiggridperc $z_grid
SetVar $asscorpfigs $z_deployed
Send #145
WaitOn #145 & #8
Gosub :INTCOM_MINES
SetVar $assminegrid $z_minecount
SetVar $assminegridperc $z_grid
SetVar $asscorpmines $z_deployed
Send #145
WaitOn #145 & #8
Gosub :INTCOM_LIMPS
SetVar $asslimpgrid $z_limpcount
SetVar $asslimpgridperc $z_grid
SetVar $asscorplimps $z_deployed
SetVar $nodisplay FALSE
SetArray $asslines 0
SetVar $assctr 0
SetVar $asscorpplanets 0
SetArray $asscpa 0
SetVar $asscptypes 0
SetArray $asscitlevels 0
Send #145
WaitOn #145 & #8
SetTextLineTrigger ass10 :ASSETS10 "=============================================================================="
Send "t lq "
Pause
:ASSETS10
KillTrigger ass10
SetTextLineTrigger ass11 :ASSETS11
SetTextTrigger ass12 :ASSETS12 "Command [TL="
Pause
:ASSETS11
KillTrigger ass11
SetVar $assctr ($assctr + 1)
SetVar $asslines[$assctr] CURRENTLINE
SetTextLineTrigger ass11 :ASSETS11
Pause
:ASSETS12
KillAllTriggers
SetVar $x 1
While ($x <= $assctr)
	GetWord $asslines[$x] $word1 1
	If ($word1 = "======")
		GetWord $asslines[($x + 1)] $asscorppshields 1
		If ($asscorppshields = "---")
			SetVar $asscorppshields 0
		End
		GetWord $asslines[($x + 1)] $asscorpcols 2
		StripText $asscorpcols "("
		StripText $asscorpcols ")"
		GetWord $asslines[($x + 1)] $asscorporeprod 3
		GetWord $asslines[($x + 1)] $asscorporgprod 4
		GetWord $asslines[($x + 1)] $asscorpequprod 5
		GetWord $asslines[($x + 1)] $asscorpore 6
		GetWord $asslines[($x + 1)] $asscorporg 7
		GetWord $asslines[($x + 1)] $asscorpequ 8
		GetWord $asslines[($x + 1)] $asscorppfigs 9
		GetWord $asslines[($x + 1)] $asscorppcash 10
		If ($asscorppcash = "---")
			SetVar $asscorppcash "0"
		End
	Else
		GetWordPos $asslines[$x] $pos "Class "
		If ($pos >= 1)
			SetVar $asscorpplanets ($asscorpplanets + 1)
			CutText $asslines[$x] $temp 41 999
			GetText $temp $temp2 "Class " "No Citadel"
			SetVar $Z_Strings~trimstring $temp2
			Gosub :Z_Strings~RTRIM
			SetVar $temp2 $Z_Strings~trimstring
			If ($temp2 = "")
				GetText $temp $temp2 "Class " "Level "
				SetVar $Z_Strings~trimstring $temp2
				Gosub :Z_Strings~RTRIM
				SetVar $temp2 $Z_Strings~trimstring
			End
			SetVar $assfound FALSE
			SetVar $y 1
			While ($y <= $asscptypes)
				If ($asscpa[$y][1] = $temp2)
					SetVar $asscpa[$y][2] ($asscpa[$y][2] + 1)
					SetVar $assfound TRUE
				End
				SetVar $y ($y + 1)
			End
			If ($assfound <> TRUE)
				SetVar $asscptypes ($asscptypes + 1)
				SetVar $asscpa[$asscptypes][1] $temp2
				SetVar $asscpa[$asscptypes][2] 1
			End
			GetWordPos $temp $pos "No Citadel"
			If ($pos <> "0")
				SetVar $asscitlevels[7] ($asscitlevels[7] + 1)
			Else
				GetText ($temp & "!!!") $word "Level " "!!!"
				StripText $word " "
				SetVar $asscitlevels[$word] ($asscitlevels[$word] + 1)
			End
		End
	End
	SetVar $x ($x + 1)
End
SetVar $x 1
While ($x <= 6)
	SetVar $asscorpcits ($asscorpcits + $asscitlevels[$x])
	SetVar $x ($x + 1)
End
SetVar $assplayerfigs 0
SetVar $assplayershlds 0
SetVar $assplayerminess 0
SetVar $assplayercash 0
SetVar $assctr 0
SetArray $asslines 0
Send #145
WaitOn #145 & #8
SetTextLineTrigger ass13 :ASSETS13 "------------------------------------------------------------------------------"
Send "t aq "
Pause
:ASSETS13
KillTrigger ass13
SetTextLineTrigger ass14 :ASSETS14
SetTextTrigger ass15 :ASSETS15 "Corporate command [TL="
Pause
:ASSETS14
KillTrigger ass14
SetVar $assctr ($assctr + 1)
SetVar $asslines[$assctr] CURRENTLINE
GetWordPos $asslines[$assctr] $pos "Corporate command [TL="
If ($pos ="0")
	SetTextLineTrigger ass14 :ASSETS14
Else
	KillAllTriggers
	SetVar $assctr ($assctr - 1)
	Goto :ASSETS15
End
Pause
:ASSETS15
KillAllTriggers
SetVar $x 1
While ($x <= $assctr)
	If ($asslines[$x] <> "") and ($asslines[$x] <> "P indicates Trader is on a planet in that sector")
		CutText $asslines[$x] $temp 47 999
		GetWord $temp $word 1
		SetVar $assplayerfigs ($assplayerfigs + $word)
		GetWord $temp $word 2
		SetVar $assplayershlds ($assplayershlds + $word)
		GetWord $temp $word 3
		SetVar $assplayermines ($assplayermines + $word)
		GetWord $temp $word 4
		SetVar $Z_Lib~number $word
		Gosub :Z_Lib~TKM
		SetVar $assplayercash ($assplayercash + $Z_Lib~number)
	End
	SetVar $x ($x + 1)
End
SetVar $assctr 0
SetArray $asslines 0
SetVar $assshipfigs 0
SetVar $assshipshlds 0
SetArray $asscorpshiptypes 0
SetVar $assctr2 0
SetTextTrigger ass16 :ASSETS16 "[Pause]"
SetTextLineTrigger ass17 :ASSETS17 "-----------------------------------------------------------------------------"
Send "xq " 
Pause
:ASSETS16
Send "*"
Pause
:ASSETS17
KillAllTriggers
SetTextLineTrigger ass18 :ASSETS18
Pause
:ASSETS18
GetWord CURRENTLINE $word 1
If ($word = "<I>")
	KillAllTriggers
	Goto :ASSETS19
ElseIf ($word = "You")
	KillAllTriggers
	Send "* "
	Goto :ASSETS19
ElseIf ($word = "") or ($word = "0")
	SetTextLineTrigger ass18 :ASSETS18
	Pause
Else
	SetVar $assctr ($assctr + 1)
	SetVar $asslines[$assctr] CURRENTLINE
	SetTextLineTrigger ass18 :ASSETS18
	Pause
End
:ASSETS19
KillAllTriggers
SetVar $x 1
SetVar $asscorpships 0
While ($x <= $assctr)
	CutText $asslines[$x] $temp 34 15
	CutText $asslines[$x] $temp2 55 999
	SetVar $asscorpships ($asscorpships + 1)
	GetWord $temp $word 1
	SetVar $Z_Lib~number $word
	Gosub :Z_Lib~TKM
	SetVar $assshipfigs ($assshipfigs + $Z_Lib~number)
	GetWord $temp $word 2
	SetVar $Z_Lib~number $word
	Gosub :Z_Lib~TKM
	SetVar $assshipshlds ($assshipshlds + $Z_Lib~number)
	SetVar $Z_Strings~trimstring $temp2
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring
	SetVar $y 1
	SetVar $assfound FALSE
	While ($y <= $assctr2)
		If ($word = $asscorpshiptypes[$y][1])
			SetVar $asscorpshiptypes[$y][2] ($asscorpshiptypes[$y][2] + 1)
			SetVar $assfound TRUE
			SetVar $y $assctr2
		End
		SetVar $y ($y + 1)
	End
	If ($assfound <> TRUE) and ($word <> "0")
		SetVar $assctr2 ($assctr2 + 1)
		SetVar $asscorpshiptypes[$assctr2][1] $word
		SetVar $asscorpshiptypes[$assctr2][2] 1
	End
	SetVar $x ($x + 1)
End
SetVar $asscorpshiptypes $assctr2
StripText $asstotalfighters ","
StripText $asstotalmines ","
StripText $asscorpfigs ","
StripText $asscorpmines ","
StripText $asscorplimps ","
StripText $assperctotalplanets "%"
SetVar $Z_Lib~number $asscorppshields
Gosub :Z_Lib~TKM
SetVar $asscorppshields $Z_Lib~number
SetVar $Z_Lib~number $asscorpcols
Gosub :Z_Lib~TKM
SetVar $asscorpcols $Z_Lib~number
SetVar $Z_Lib~number $asscorporeprod
Gosub :Z_Lib~TKM
SetVar $asscorporeprod $Z_Lib~number
SetVar $Z_Lib~number $asscorporgprod
Gosub :Z_Lib~TKM
SetVar $asscorporgprod $Z_Lib~number
SetVar $Z_Lib~number $asscorpequprod
Gosub :Z_Lib~TKM
SetVar $asscorpequprod $Z_Lib~number
SetVar $Z_Lib~number $asscorpore
Gosub :Z_Lib~TKM
SetVar $asscorpore $Z_Lib~number
SetVar $Z_Lib~number $asscorporg
Gosub :Z_Lib~TKM
SetVar $asscorporg $Z_Lib~number
SetVar $Z_Lib~number $asscorpequ
Gosub :Z_Lib~TKM
SetVar $asscorpequ $Z_Lib~number
SetVar $Z_Lib~number $asscorpfigs
Gosub :Z_Lib~TKM
SetVar $asscorpfigs $Z_Lib~number
SetVar $Z_Lib~number $asscorpcash
Gosub :Z_Lib~TKM
SetVar $asscorpcash $Z_Lib~number
SetVar $Z_Lib~number $assshipfigs
Gosub :Z_Lib~TKM
SetVar $assshipfigs $Z_Lib~number
SetVar $Z_Lib~number $assshipshlds
Gosub :Z_Lib~TKM
SetVar $assshipshlds $Z_Lib~number
SetVar $Z_Lib~number $asscorppfigs
Gosub :Z_Lib~TKM
SetVar $asscorppfigs $Z_Lib~number
SetVar $Z_Lib~number $asscorppcash
Gosub :Z_Lib~TKM
SetVar $asscorppcash $Z_Lib~number
GetTime $asstime "dd/mm/yyyy hh:nn am/pm"
SetVar $ssmsg $dashedline & " " & $scripttitle & ": ASSETS - Corporate Situation Report - " & $asstime & "*" & $dashedline
SetVar $ssmsg ($ssmsg & " Corporation: " & $asscorp & "      CEO: " & $asscorpceo & "     Members: " & $z_corpies & "/" & $z_maxcorp & "*")
SetVar $ssmsg ($ssmsg & " *")
SetVar $ssmsg ($ssmsg & " Rank: " & $asscorprank & "      Experience: " & $asscorpexp & "      Alignment: " & $asscorpalign & "*")
SetVar $ssmsg ($ssmsg & " *")
SetVar $asssumfigs ($asscorpfigs + $asscorppfigs + $assplayerfigs + $assshipfigs)
SetPrecision 4
If ($asssumfigs = "0") or ($asstotalfighters = "0")
	SetVar $asssumfigperc "0"
Else
	SetVar $asssumfigperc (($asssumfigs * 100) / $asstotalfighters)
End
If ($asscorpfigs = "0") or ($asstotalfighters = "0")
	SetVar $asspercfigs "0"
Else
	SetVar $asspercfigs (($asscorpfigs * 100) / $asstotalfighters)
End
If ($asscorpfigs = "0") or ($asssumfigs = "0")
	SetVar $asspercgfigs "0"
Else
	SetVar $asspercgfigs (($asscorpfigs * 100) / $asssumfigs)
End
SetPrecision 0
SetVar $Z_Lib~number $asssumfigperc
Gosub :Z_Lib~ROUND
SetVar $asssumfigperc $Z_Lib~round
SetVar $Z_Lib~number $asspercfigs
Gosub :Z_Lib~ROUND
SetVar $asspercfigs $Z_Lib~round
SetVar $Z_Lib~number $asspercgfigs
Gosub :Z_Lib~ROUND
SetVar $asspercgfigs $Z_Lib~round
SetVar $Z_Strings~number $asssumfigs
Gosub :Z_Strings~COMMA
SetVar $asssumfigs $Z_Strings~commas
SetVar $Z_Strings~number $asstotalfighters
Gosub :Z_Strings~COMMA
SetVar $ssmsg ($ssmsg & " Corp Fighters   : " & $asssumfigs & " / " & $Z_Strings~commas & "  (" & $asssumfigperc & "%)*")
SetVar $asssumshlds (($asscorppshields * 10) + $assplayershlds + $assshipshlds)
SetVar $Z_Strings~number $asssumshlds
Gosub :Z_Strings~COMMA
SetVar $asssumshlds $Z_Strings~commas
SetVar $ssmsg ($ssmsg & " Corp Shields    : " & $asssumshlds & " (expressed in ship units)*")
SetVar $ssmsg ($ssmsg & " *")
SetVar $asssumplanets ($asscitlevels[4] + $asscitlevels[5] + $asscitlevels[6])
SetVar $Z_Strings~number $asssumplanets
Gosub :Z_Strings~COMMA
SetVar $asssumplanets $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $asssumplanets
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Movable Planets : " & $Z_Strings~padded)
SetVar $asssumcash ($asscorppcash + $assplayercash)
SetVar $Z_Strings~number $asssumcash
Gosub :Z_Strings~COMMA
SetVar $asssumcash $Z_Strings~commas
SetVar $ssmsg ($ssmsg & " Corporate Funds : $" & $asssumcash & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $ssmsg ($ssmsg & " -=PLANETS=-      Total: " & $asscorpplanets & "/" & $asstotalplanets & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Strings~number $asscorppcash
Gosub :Z_Strings~COMMA
SetVar $asscorppcash $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorppcash
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Cit Cash  : " & $Z_Strings~padded)
If ($asscptypes >= 1)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[1][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[1][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorpcols
Gosub :Z_Strings~COMMA
SetVar $asscorpcols $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorpcols
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Colonists : " & $Z_Strings~padded)
If ($asscptypes >= 2)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[2][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[2][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorppfigs
Gosub :Z_Strings~COMMA
SetVar $asscorppfigs $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorppfigs
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Fighters  : " & $Z_Strings~padded)
If ($asscptypes >= 3)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[3][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[3][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorppshields
Gosub :Z_Strings~COMMA
SetVar $asscorppshields $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorppshields
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Shields   : " & $Z_Strings~padded)
If ($asscptypes >= 4)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[4][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[4][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorpore
Gosub :Z_Strings~COMMA
SetVar $asscorpore $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorpore
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Fuel Ore  : " & $Z_Strings~padded)
If ($asscptypes >= 5)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[5][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[5][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorporg
Gosub :Z_Strings~COMMA
SetVar $asscorporg $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorporg
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Organics  : " & $Z_Strings~padded)
If ($asscptypes >= 6)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[6][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[6][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorpequ
Gosub :Z_Strings~COMMA
SetVar $asscorpequ $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorpequ
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Equipment : " & $Z_Strings~padded)
If ($asscptypes >= 7)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[7][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[7][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorporeprod
Gosub :Z_Strings~COMMA
SetVar $asscorporeprod $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorporeprod
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Fuel Prod : " & $Z_Strings~padded)
If ($asscptypes >= 8)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[8][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[8][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorporgprod
Gosub :Z_Strings~COMMA
SetVar $asscorporgprod $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorporgprod
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Org Prod  : " & $Z_Strings~padded)
If ($asscptypes >= 9)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[9][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[9][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number $asscorpequprod
Gosub :Z_Strings~COMMA
SetVar $asscorpequprod $Z_Strings~commas
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 27
SetVar $Z_Strings~unpadded $asscorpequprod
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Equ Prod  : " & $Z_Strings~padded)
If ($asscptypes >= 10)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[10][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscpa[10][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $x 11
While ($x <= $asscptypes)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscpa[$x][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & "                                        " & $Z_Strings~padded & " x " & $asscpa[$x][1] & "*")
	SetVar $x ($x + 1)
End
SetVar $x 1
While ($x <= 6)
	If ($asscitlevels[$x] = "0")
		SetVar $asscitlevels[$x] " "
	End
	SetVar $x ($x + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetPrecision 4
If ($asstotalplanets = "0") or ($assperctotalplanets = "0")
	SetVar $asstotalcits "0"
Else
	SetVar $asstotalcits (($asstotalplanets / 100) * $assperctotalplanets)
End
SetPrecision 0
SetVar $Z_Lib~number $asstotalcits
Gosub :Z_Lib~ROUND
SetVar $asstotalcits $Z_Lib~round
SetVar $ssmsg ($ssmsg & " -=CITADELS=-     Total: " & $asscorpcits & "/" & $asstotalcits & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $ssmsg ($ssmsg & "   Level 1:  " & $asscitlevels[1] & "           Level 3:  " & $asscitlevels[3] & "           Level 5:  " & $asscitlevels[5] & "*")
SetVar $ssmsg ($ssmsg & "   Level 2:  " & $asscitlevels[2] & "           Level 4:  " & $asscitlevels[4] & "           Level 6:  " & $asscitlevels[6] & "*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $ssmsg ($ssmsg & " -=SHIPS=-     Total Ships:  " & $asscorpships & "     + " & $z_corpies & " player occupied.*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Strings~number ($assplayerfigs + $assshipfigs)
Gosub :Z_Strings~COMMA
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 22
SetVar $Z_Strings~unpadded $Z_Strings~commas
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Fighters  : " & $Z_Strings~padded)
If ($asscorpshiptypes >= 1)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscorpshiptypes[1][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscorpshiptypes[1][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number ($assplayershlds + $assshipshlds)
Gosub :Z_Strings~COMMA
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 22
SetVar $Z_Strings~unpadded $Z_Strings~commas
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Shields   : " & $Z_Strings~padded)
If ($asscorpshiptypes >= 2)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscorpshiptypes[2][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscorpshiptypes[2][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number ($assplayermines)
Gosub :Z_Strings~COMMA
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 22
SetVar $Z_Strings~unpadded $Z_Strings~commas
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Armids    : " & $Z_Strings~padded)
If ($asscorpshiptypes >= 3)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscorpshiptypes[3][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscorpshiptypes[3][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $Z_Strings~number ($assplayercash)
Gosub :Z_Strings~COMMA
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 22
SetVar $Z_Strings~unpadded $Z_Strings~commas
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $ssmsg ($ssmsg & " Cash      : " & $Z_Strings~padded)
If ($asscorpshiptypes >= 4)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscorpshiptypes[4][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " x " & $asscorpshiptypes[4][1] & "*")
Else
	SetVar $ssmsg ($ssmsg & "*")
End
SetVar $x 5
While ($x <= $asscorpshiptypes)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $asscorpshiptypes[$x][2]
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar $ssmsg ($ssmsg & "                                   " & $Z_Strings~padded & " x " & $asscorpshiptypes[$x][1] & "*")
	SetVar $x ($x + 1)
End
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Strings~number $asscorpfigs
Gosub :Z_Strings~COMMA
SetVar $asscorpfigs $Z_Strings~commas
SetVar $Z_Lib~number $assminegridperc
Gosub :Z_Lib~ROUND 
SetVar $assminegridperc $Z_Lib~round
SetVar $Z_Lib~number $asslimpgridperc
Gosub :Z_Lib~ROUND 
SetVar $asslimpgridperc $Z_Lib~round
SetVar $ssmsg ($ssmsg & " -=GRID=-      Total:   " & $asscorpfigs & " deployed" & "  (" & $asspercgfigs & "%)*")
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $ssmsg ($ssmsg & " Fighters  : " & $assfiggrid & " sectors  (" & $assfiggridperc & "%)*")
SetVar $ssmsg ($ssmsg & " Armids    : " & $assminegrid & " sectors  (" & $assminegridperc & "%) - " & $asscorpmines & " deployed*")
SetVar $ssmsg ($ssmsg & " Limpets   : " & $asslimpgrid & " sectors  (" & $asslimpgridperc & "%) - " & $asscorplimps & " deployed*")
SetVar $ssmsg ($ssmsg & $dashedline)
If ($z_motto <> "") and ($z_motto <> "0")
	SetVar $Z_Strings~string $z_motto
	Gosub :Z_Strings~CENTRE
	SetVar $ssmsg ($ssmsg & $Z_Strings~centre & "*")
	SetVar $ssmsg ($ssmsg & $dashedline)
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender

GetWordPos $user_command_line $pos1 "ss"
GetWordPos $user_command_line $pos2 "fed"
If ($pos1 <> "0")
	SetVar $messagemode "R"
ElseIf ($pos2 <> "0")
	SetVar $messagemode "F"
End

SetVar $Z_Lib~messagemode $messagemode
Send #145
WaitOn #145 & #8
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	SetVar $z_lib~planet TRUE
	If ($startprompt = "Citadel")
		SetVar $z_lib~citadel TRUE
	End
	Gosub :Z_Lib~RETURNTOPLANET
End
Send #145
WaitOn #145 & #8
Gosub :Z_Lib~CLEARSCREEN
Gosub :MSGBRIDGE
FileExists $fileexists GAMENAME & "_ASSETS.txt"
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_ASSETS-backup-" & $timestamp & ".txt"
	Rename GAMENAME & "_ASSETS.txt" GAMENAME & "_ASSETS-backup-" & $timestamp & ".txt"
End
ReplaceText $ssmsg #13 #13 & #10
Write GAMENAME & "_ASSETS.txt" $ssmsg
:NOASSETS
SetVar $asscorp ""
SetVar $asstotalplanets 0
SetVar $assperctotalplanets 0
SetVar $asstotalfighters 0
SetVar $asstotalmines 0
SetVar $asstotalcorps 0
SetVar $asscorpceo 0
SetVar $asscorprank 0
SetVar $asscorpexp 0
SetVar $asscorpalign 0
SetVar $asstotalexp 0
SetVar $asstotalalign 0
SetVar $assfiggrid 0
SetVar $assfiggridperc 0
SetVar $asscorpfigs 0
SetVar $assminegrid 0
SetVar $assminegridperc 0
SetVar $asscorpmines 0
SetVar $asslimpgrid 0
SetVar $asslimpgridperc 0
SetVar $asscorplimps 0
SetVar $asscorpplanets 0
SetVar $asscorpcits 0
SetVar $asscptypes 0
SetVar $asscorppshields 0
SetVar $asscorpcols 0
SetVar $asscorporeprod 0
SetVar $asscorporgprod 0
SetVar $asscorpequprod 0
SetVar $asscorpore 0
SetVar $asscorporg 0
SetVar $asscorpequ 0
SetVar $asscorppfigs 0
SetVar $asscorppcash 0
SetVar $assplayerfigs 0
SetVar $assplayershlds 0
SetVar $assplayermines 0
SetVar $assplayercash 0
SetVar $asscorpships 0
SetVar $assshipfigs 0
SetVar $assshipshlds 0
SetVar $asssumfigs 0
SetVar $asssumplanets ""
SetVar $asssumshlds ""
SetVar $asssumcash ""
SetArray $asslines 0
SetArray $asscpa 0
SetArray $asscitlevels 0
SetArray $asscorpshiptypes 0
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# CITCAP 
:INTCOM_CITCAP
SetVar $attackmode "CAP"
Gosub :CITATTACK
KillAllTriggers
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
SetVar $citkillison FALSE
Return
# HERALDHITS
:INTCOM_HERALDHITS
KillAllTriggers
UpperCase $PARM1
If ($PARM1 = "ON")
	If ($targetsystemok <> TRUE)
		Gosub :INTCOM_INIT
	End
	SetVar $z_heraldhit "R"
	SetVar $z_heraldhitd "SS"
	SetVar $Z_Lib~message $scripttitle & ": HERALDHITS - Now set to ON.*"
ElseIf ($PARM1 = "OFF")
	SetVar $z_heraldhit FALSE
	SetVar $Z_Lib~message $scripttitle & ": HERALDHITS - Now set to OFF.*"
ElseIf ($z_heraldhit = FALSE)
	SetVar $Z_Lib~message $scripttitle & ": HERALDHITS - is currently OFF.*"
Else
	If ($z_heraldhit = "R")
		SetVar $temp "SS"
	Else
		SetVar $temp "ECHO"
	End
	SetVar $Z_Lib~message $scripttitle & ": HERALDHITS - is currently in " & $temp & " mode...*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# CAP 
:INTCOM_CAP
KillAllTriggers
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCAP
End
Gosub :Z_Lib~COMMSOFF
Gosub :GETSTATS
SetVar $attackmode "CALL"
Gosub :SHIPCAP
:NOCAP
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# SHIPPRICES 
:INTCOM_SHIPPRICES
KillAllTriggers
SetArray $array 0
FileExists $fileexists GAMENAME & "_SHIPPRICES.txt"
If ($fileexists = TRUE)
	ReadToArray GAMENAME & "_SHIPPRICES.txt" $array
	SetVar $x 1
	SetVar $ssmsg ""
	While ($x <= $array)
		StripText $array[$x] #13
		StripText $array[$x] #8
		SetVar $ssmsg ($ssmsg & $array[$x] & "*")
		SetVar $x ($x + 1)
	End
Else
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $startprompt 1 7
	If ($startprompt = "<StarDo")
		Send "s b n y"
		WaitOn "Which ship are you interested in (?=List)"
		SetVar $line 0
		SetArray $line 0
		SetVar $nextpage FALSE
		SetVar $nextpage2 FALSE
		SetVar $sprices 0
		:SPRICES1
		KillAllTriggers
		SetTextLineTrigger sprices2 :SPRICES2 ">"
		Send "?"
		Pause
		:SPRICES2
		KillAllTriggers
		SetVar $line ($line + 1)
		SetVar $line[$line] CURRENTLINE
		GetWord $line[$line] $word 1
		If ($word <> "<+>") and ($word <> "<Q>") and ($word <> "") and ($word <> "0")
			SetVar $sprices ($sprices + 1)
			SetVar $array[$sprices]  $line[$line]
		End
		If ($word = "<R>")
			SetVar $nextpage2 TRUE
		End
		If ($word = "<+>") and ($nextpage2 = TRUE)
			WaitOn "<Q>"
			SetVar $nextpage TRUE
			SetVar $nextpage2 FALSE
			Send "+ "
			SetVar $sprices ($sprices + 1)
			SetVar $array[$sprices]  "----------------------------------------------------------------------"
			Goto :SPRICES1
		ElseIf ($word <> "<Q>")
			SetTextLineTrigger sprices2 :SPRICES2 ">"
			Pause
		End
		KillAllTriggers
		Send "q q"
		SetVar $x 1
		Delete GAMENAME & "_SHIPPRICES.txt"
		While ($x <= $sprices)
			ReplaceText $array[$x] "*" #42
			Write GAMENAME & "_SHIPPRICES.txt" $array[$x]
			SetVar $x ($x + 1)
		End
		SetVar $ssmsg "Ship prices written to " & GAMENAME & "_SHIPPRICES.txt.*"
	Else
		SetVar $ssmsg "Ship prices not yet collected.*Start this command from the STARDOCK prompt to collect them.*"
	End
End
SetVar $ssmsg ($dashedline & " " & $scripttitle & ": SHIP PRICES*" & $dashedline & $ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetArray $array 0
SetArray $line 0
SetVar $reset TRUE
Return
# ENEMYFIGS
:INTCOM_ENEMYFIGS
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": ENEMYFIGS - Processing...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
FileExists $fileexists GAMENAME & "_ENEMYFIGS.txt"
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_ENEMYFIGS-backup-" & $timestamp & ".txt"
	Rename GAMENAME & "_ENEMYFIGS.txt" GAMENAME & "_ENEMYFIGS-backup-" & $timestamp & ".txt"
End
Send #145
WaitOn #145 & #8
SetVar $x 11
Echo "**" & $boldwhite & "ENEMYFIGS: - Processing. Please wait...**" & $boldgreen & $savecursor
SetVar $efcount 0
Gosub :Z_Lib~SETDIAL
While ($x <= SECTORS)
	Gosub :Z_Lib~UPDATEDIAL
	If (SECTOR.FIGS.QUANTITY[$x] > 0)
		GetWordPos SECTOR.FIGS.OWNER[$x] $pos "elong to you"
		If ($pos = "0")
			GetText (SECTOR.FIGS.OWNER[$x] & "!!!") $owner "elong to " "!!!"
			If ($owner <> "")
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 6
				SetVar $Z_Strings~unpadded $x
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				SetVar $ssmsg ($ssmsg & $Z_Strings~padded & " - " & $owner & "*")
				Write GAMENAME & "_ENEMYFIGS.txt" $Z_Strings~padded & " - " & $owner
				SetVar $efcount ($efcount + 1)
			End
		End
	End
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~ENDDIAL
Echo "*"
If ($ssmsg = "")
	SetVar $ssmsg "No Enemy figs found.*"
Else
	SetVar $ssmsg ($ssmsg & $dashedline & $efcount & " entries written to file - " & GAMENAME & "_ENEMYFIGS.txt*")
End
SetVar $Z_Lib~message $dashedline & $scripttitle & ": ENEMYFIGS - " & $efcount & " enemy figged sectors found.*" & $dashedline & $ssmsg & $dashedline
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# RETIRE 
:INTCOM_RETIRE
KillAllTriggers
If ($messagemode = "E")
	SetVar $messagemode "R"
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Command")
	Gosub :INTCOM_LAND
End
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NORETIRE
End
SetVar $Z_Lib~message $scripttitle & ": RETIRING in Citadel..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $PARM1 "0"
Gosub :INTCOM_DC
Send "ryy"
WaitOn "Enter your choice:"
Goto :FINISH2
:NORETIRE
SetVar $ssmsg ""
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# PA 
:INTCOM_PA
KillAllTriggers
If ($PARM1 = 0)
	Goto :PABADPARM
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :PABADPARM
End
If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
	Goto :PABADPARM
End
Send #145
WaitOn #145 & #8
SetVar $patarget $PARM1
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPA
End
Send "cpy" & $patarget & "*q"
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message $scripttitle & ": PA - Photoned sector " & $patarget & ".*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPA
:PABADPARM
SetVar $Z_Lib~message $scripttitle & ": PA - Bad Parameter !*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOPA
:NOPA
SetVar $reset TRUE
Return
# EMPTY 
:INTCOM_EMPTY
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
SetVar $Z_Lib~setprompt "PLANET"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOEMPTY
End
SetVar $emptfigs 0
SetVar $emptyagain FALSE
Gosub :GETSTATS
:EMPTYAGAIN
SetTextTrigger emppfigs :EMPPFIGS  "Fighters on this planet."
Send "m*"
Pause
:EMPPFIGS
KillAllTriggers
GetText CURRENTLINE $emppfigs "currently " " Fighters"
If ($emptfigs > 0)
	SetVar $empdropfigs (($emptfigs - $emppfigs) - 1)
Else
	SetVar $empdropfigs ($figs - 99)
End
If ($empdropfigs <= 0)
	SetVar $empdropfigs 0
	SetVar $Z_Lib~message $scripttitle & ": EMPTY - Nothing to do.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOEMPTY
End
SetTextTrigger empallgood :EMPALLGOOD "Done!"
SetTextTrigger emptoomany :EMPTOOMANY " fighters on this planet!"
Send "l" & $empdropfigs & "*"
Pause
:EMPTOOMANY
KillAllTriggers
GetText CURRENTLINE $emptfigs " than " " fighters"
If ($emptyagain = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": EMPTY - Nothing dropped.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOEMPTY
Else
	SetVar $emptyagain TRUE
	Goto :EMPTYAGAIN
End
:EMPALLGOOD
KillAllTriggers
If ($startprompt = "Citadel")
	Send "c"
End
SetVar $Z_Lib~message $scripttitle & ": EMPTY - Dropped " & $empdropfigs & " onto planet.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOEMPTY
SetVar $reset TRUE
Return
# SWITCHBOT 
:INTCOM_SWITCHBOT
KillAllTriggers
If ($PARM1 = "0") or ($PARM1 = "") 
  SetVar $Z_Lib~message $scripttitle & ": SWITCHBOT - Switching to next bot.*"
  SetVar $Z_Lib~messageto $sender
  SetVar $Z_Lib~messagemode $messagemode
  Gosub :MSGBRIDGE
  
  switchbot $PARM1
else  
  SetVar $Z_Lib~message $scripttitle & ": SWITCHBOT - Switching to [ " & $PARM1 & " ].*"
  SetVar $Z_Lib~messageto $sender
  SetVar $Z_Lib~messagemode $messagemode
  Gosub :MSGBRIDGE

  switchbot $PARM1
end

Echo "**" & $boldred & $blinkon & "Z-Bot has powered down !**" & $blinkoff
HALT

# XFER - COMMAND
:INTCOM_XFER
KillAllTriggers
SetVar $xfercorpynum "0"
SetVar $xferdir "0"
SetVar $xferwhat "0"
LowerCase $user_command_line
GetText $user_command_line $temp "[" "]"
If ($temp <> "")
	StripText $user_command_line "[" & $temp & "]"
End
GetLength $temp $len
If ($len > 6)
	CutText $temp $temp 1 6
End
SetVar $Z_Strings~trimstring $temp
Gosub :Z_Strings~RTRIM
SetVar $temp $Z_Strings~trimstring
If ($temp = $z_ingamename)
	SetVar $Z_Lib~message $scripttitle & ": XFER - Can't XFER to myself. Exiting..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOXFERCOMM
End
SetVar $i 1
While ($i <= $z_corpies)
	If ($z_corpy[$i] = $temp)
		SetVar $xfercorpynum $i
		SetVar $i $z_corpies
	End
	SetVar $i ($i + 1)
End
GetWordPos $user_command_line $pos "from"
If ($pos <> "0")
	SetVar $xferdir "FROM"
	StripText $user_command_line "from"
Else
	SetVar $xferdir "TO  "
End
GetWordPos $user_command_line $pos1 "fs"
GetWordPos $user_command_line $pos2 "f"
GetWordPos $user_command_line $pos3 "s"
GetWordPos $user_command_line $pos4 "m"
GetWordPos $user_command_line $pos5 "l"
If ($pos1 <> "0")
	SetVar $xferwhat 5
ElseIf ($pos2 <> "0")
	SetVar $xferwhat 1
ElseIf ($pos3 <> "0")
	SetVar $xferwhat 2
ElseIf ($pos4 <> "0")
	SetVar $xferwhat 3
ElseIf ($pos5 <> "0")
	SetVar $xferwhat 4
End
If ($xferwhat = "0") or ($xfercorpynum = "0")
	LoadVar $xfercorpynum
	LoadVar $xferdir
	LoadVar $xferwhat
End
If ($xferwhat = "0") or ($xfercorpynum = "0")
	SetVar $Z_Lib~message $scripttitle & ": XFER - Bad parameter. Exiting..*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOXFERCOMM
End
SaveVar $xfercorpynum
SaveVar $xferdir
SaveVar $xferwhat

SetVar $autorefill TRUE
SetVar $xfercommand TRUE
Gosub :XFER
:NOXFERCOMM
SetVar $autorefill FALSE
SetVar $xfercommand FALSE
SetVar $reset TRUE
Return
# ABOUT 
:INTCOM_ABOUT
KillAllTriggers
#Gosub :SPLASH
SetVar $displaybanner ""
FileExists $fileok "z-banner.txt"
If ($fileok = TRUE)
	ReadToArray "z-banner.txt" $banner
	If ($banner > 0)
		SetVar $i 1
		While ($i <= $banner)
			StripText $banner[$i] #13
			If ($banner[$i] = "")
				SetVar $banner[$i] " "
			End
			SetVar $displaybanner ($displaybanner & $banner[$i] & "*")
			SetVar $i ($i + 1)
		End
		SetVar $Z_Lib~message $displaybanner
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
SetVar $displaybanner ""
SetArray $banner 0
SetVar $reset TRUE
Return
# AUTOREFURB 
:INTCOM_AUTOREFURB
UpperCase $PARM1
UpperCase $PARM2
Gosub :GETSTATS
If ($PARM1 = "") or ($PARM1 = "0")
	If ($autorefurb = TRUE)
		SetVar $ssmsg ($scripttitle & ": AUTO REFURB is currently ON.*")
		If ($ardecash = TRUE)
			SetVar $ssmsg ($ssmsg & "Automatic decashing is ON.*")
		Else
			SetVar $ssmsg ($ssmsg & "Automatic decashing is OFF.*")
		End
	Else
		SetVar $ssmsg ($scripttitle & ": AUTO REFURB is currently OFF.*")
	End
ElseIf ($PARM1 = "ON")
	SetVar $autorefurb TRUE
	SetVar $ssmsg ($scripttitle & ": AUTO REFURB is now set to ON.*")
	If ($PARM2 = "/DC")
		SetVar $ardecash TRUE
		SetVar $ssmsg ($ssmsg & "Automatic decashing is ON.*")
	Else
		SetVar $ardecash FALSE
		SetVar $ssmsg ($ssmsg & "Automatic decashing is OFF.*")
	End
ElseIf ($PARM1 = "OFF")
	SetVar $autorefurb FALSE
	SetVar $ssmsg ($scripttitle & ": AUTO REFURB is now set to OFF.*")
Else
	SetVar $ssmsg ($scripttitle & ": AUTO REFURB - BAD parameter... get help!*")
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# SETFURB 
:INTCOM_SETFURB
If ($PARM1 <> "") and ($PARM1 <> "0")
	SetVar $Z_furbshipletter $PARM1
	LowerCase $Z_furbshipletter
	SaveVar $Z_furbshipletter
	IsNumber $isnum $PARM2
	If ($isnum = TRUE)
		SetVar $z_furbholds $PARM2
		SaveVar $z_furbholds
	End
	SetVar $ssmsg ($scripttitle & ": NEW SETTINGS - Furb Ship: " & $Z_furbshipletter & " - Extra Holds: " & $z_furbholds & "*")
Else
	LoadVar $Z_furbshipletter
	LoadVar $z_furbholds
	SetVar $ssmsg ($scripttitle & ": CURRENT SETTINGS - Furb Ship: " & $Z_furbshipletter & " - Extra Holds: " & $z_furbholds & "*")
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# DASH 
:INTCOM_DASH
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
Gosub :GETSTATS
SetVar $ssmsg $doubledashedline & " " & $scripttitle & ": DASH -   Mode: [" & $mode & "]   Prompt: [" & $startprompt & "]"
If ($Z_Lib~isunlimited = FALSE)
	SetVar $ssmsg ($ssmsg & "   Turns: [" & $turns & "]*" & $dashedline)
Else
	SetVar $ssmsg ($ssmsg & "*" & $doubledashedline)
End
If ($z_twarpadj = "TRUE")
	SetVar $ssmsg ($ssmsg & "--[ADJACENT]--")
Else
	SetVar $ssmsg ($ssmsg & "---[DIRECT]---")
End
If ($z_pr = "TRUE")
	SetVar $ssmsg ($ssmsg & "[PHOTON]--")
Else
	SetVar $ssmsg ($ssmsg & "----------")
End
If ($z_sr = "KILL")
	SetVar $ssmsg ($ssmsg & "-[KILL]---")
ElseIf ($z_sr = "CAP")
	SetVar $ssmsg ($ssmsg & "-[CAP]----")
Else
	SetVar $ssmsg ($ssmsg & "----------")
End
If ($fedwatch = TRUE)
	SetVar $ssmsg ($ssmsg & "[FEDWATCH]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End
If ($z_figger = TRUE)
	SetVar $ssmsg ($ssmsg & "[REFIGGER]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End
If ($z_doublecheckdock = "TRUE")
	SetVar $ssmsg ($ssmsg & "[DOCKSAFE]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End

SetVar $ssmsg ($ssmsg & "*")

If ($autofurb = TRUE)
	SetVar $ssmsg ($ssmsg & "--[AUTOFURB]---")
Else
	SetVar $ssmsg ($ssmsg & "---------------")
End
If ($autorefurb = TRUE)
	SetVar $ssmsg ($ssmsg & "[REFURBER]---")
Else
	SetVar $ssmsg ($ssmsg & "-------------")
End
If ($z_figherald = TRUE)
	SetVar $ssmsg ($ssmsg & "[FIGHERALD]---")
Else
	SetVar $ssmsg ($ssmsg & "--------------")
End
If ($watch = TRUE)
	SetVar $ssmsg ($ssmsg & "[ONLINEWATCH]---")
Else
	SetVar $ssmsg ($ssmsg & "----------------")
End
If ($z_dockfast = "TRUE")
	SetVar $ssmsg ($ssmsg & "[DOCKFAST]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End

SetVar $ssmsg ($ssmsg & "*")

If ($z_autoss = TRUE)
	SetVar $ssmsg ($ssmsg & "--[AUTOSS]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End
If ($z_safetynet = TRUE)
	SetVar $ssmsg ($ssmsg & "[SAFETYNET]--")
Else
	SetVar $ssmsg ($ssmsg & "-------------")
End
If ($z_autoexec = TRUE)
	SetVar $ssmsg ($ssmsg & "-[AUTOEXEC]--")
Else
	SetVar $ssmsg ($ssmsg & "-------------")
End
If ($z_autostatus = TRUE)
	SetVar $ssmsg ($ssmsg & "[AUTOMATE]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End
If ($bbop = TRUE)
	SetVar $ssmsg ($ssmsg & "[BOP]---")
Else
	SetVar $ssmsg ($ssmsg & "--------")
End
If ($z_callfast = "TRUE")
	SetVar $ssmsg ($ssmsg & "[CALLFAST]--")
Else
	SetVar $ssmsg ($ssmsg & "------------")
End
SetVar $ssmsg ($ssmsg & "*")
SetVar $ssmsg ($ssmsg & $doubledashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
Return
# ACTIVE 
:INTCOM_ACTIVE
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOACTIVE
End
Send #145
WaitOn #145 & #8
SetTextLineTrigger actstart :ACTSTART "Activated  Limpet  Scan"
Send "k2"
Pause
:ACTSTART
KillAllTriggers
SetVar $ssmsg $dashedline & $scripttitle & ": Activated Limpet Scan*" & $dashedline
SetTextLineTrigger actscan :ACTSCAN
Pause
:ACTSCAN
SetVar $line CURRENTLINE
StripText $line #13
GetWordPos $line $pos "Total"
If ($pos = "0")
	If ($line <> "")
		SetVar $ssmsg ($ssmsg & " " & $line & "*")
	End
	SetTextLineTrigger actscan :ACTSCAN
	Pause
Else
	SetVar $ssmsg ($ssmsg & " " & $line & "*")
End
KillAllTriggers
SetVar $ssmsg ($ssmsg & $dashedline)
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
:NOACTIVE
SetVar $reset TRUE
Return
# BS 
:INTCOM_BS
KillAllTriggers
Gosub :CLEARMOVEOPTIONS
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt <> "<StarDo")
	SetVar $Z_Lib~setprompt "CITCOM"
	SetVar $Z_Lib~heraldss TRUE
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		Goto :NOBS
	End
	If ($prompt = "Planet ") or ($prompt = "Citadel")
		Gosub :Z_Lib~CURRENTPLANET
	End
Else
	SetVar $prompt $startprompt
End
SetVar $startprompt $prompt
Gosub :GETSTATS
SetVar $bsstartsector $current_sector
If ($credits < 250000)
	SetVar $Z_Lib~message $scripttitle & " - Need more cash - 250k+.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBS
End
If ($twarp <> 2) and ($current_sector <> STARDOCK)
	SetVar $Z_Lib~message $scripttitle & " - Need a level 2 Transwarp drive.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBS
End
GetLength $PARM1 $len
If ($PARM1 = "0") or ($PARM1 = "") or ($len > 2)
	SetVar $Z_Lib~message $scripttitle & " - PARM1 must be the ship letter.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBS
End
SetVar $temp $USER_COMMAND_LINE
If ($PARM2 <> "0") and ($PARM2 <> "")
	GetWordPos $temp $pos $PARM2
	If ($pos <> "0")
		CutText $temp $temp $pos 999
	Else
		SetVar $temp ""
	End
Else
	SetVar $temp ""
End
SetVar $bsname ""
SetVar $bsoutfit FALSE
GetText $temp $bsname "[" "]"
StripText $temp "[" & $bsname & "]"
If ($bsname = "")
	GetRnd $rnd 1 9999999
	SetVar $bsname "Ship-" & $rnd
End
If ($temp <> "")
	UpperCase $temp
	GetWordPos $temp $pos "SH"
	If ($pos > 0)
		SetVar $bsbuyshields TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyshields FALSE
	End
	StripText $temp "SH"
	GetWordPos $temp $pos "P1"
	If ($pos > 0)
		SetVar $bsbuy1photon TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuy1photon FALSE
	End
	StripText $temp "P1"
	GetWordPos $temp $pos "H"
	If ($pos > 0)
		SetVar $bsbuyholds TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyholds FALSE
	End
	StripText $temp "H"
	GetWordPos $temp $pos "F"
	If ($pos > 0)
		SetVar $bsbuyfigs TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyfigs FALSE
	End
	StripText $temp "F"
	GetWordPos $temp $pos "A"
	If ($pos > 0)
		SetVar $bsbuydets TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuydets FALSE
	End
	StripText $temp "A"
	GetWordPos $temp $pos "B"
	If ($pos > 0)
		SetVar $bsbuybeacons TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuybeacons FALSE
	End
	StripText $temp "B"
	GetWordPos $temp $pos "C"
	If ($pos > 0)
		SetVar $bsbuycorbs TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuycorbs FALSE
	End
	StripText $temp "C"
	GetWordPos $temp $pos "D"
	If ($pos > 0)
		SetVar $bsbuycloaks TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuycloaks FALSE
	End
	StripText $temp "D"
	GetWordPos $temp $pos "E"
	If ($pos > 0)
		SetVar $bsbuyprobes TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyprobes FALSE
	End
	StripText $temp "E"
	GetWordPos $temp $pos "L"
	If ($pos > 0)
		SetVar $bsbuylimps TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuylimps FALSE
	End
	StripText $temp "L"
	GetWordPos $temp $pos "M"
	If ($pos > 0)
		SetVar $bsbuymines TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuymines FALSE
	End
	StripText $temp "M"
	GetWordPos $temp $pos "P"
	If ($pos > 0)
		SetVar $bsbuyphotons TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyphotons FALSE
	End
	StripText $temp "P"
	GetWordPos $temp $pos "S"
	If ($pos > 0)
		SetVar $bsbuydisrs TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuydisrs FALSE
	End
	StripText $temp "S"
	GetWordPos $temp $pos "T"
	If ($pos > 0)
		SetVar $bsbuytorps TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuytorps FALSE
	End
	StripText $temp "T"
	GetWordPos $temp $pos "R"
	If ($pos > 0)
		SetVar $bsbuyscanner TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuyscanner FALSE
	End
	StripText $temp "R"
	GetWordPos $temp $pos "W"
	If ($pos > 0)
		SetVar $bsbuytwarp TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuytwarp FALSE
	End
	StripText $temp "W"
	GetWordPos $temp $pos "Y"
	If ($pos > 0)
		SetVar $bsbuypsy TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuypsy FALSE
	End
	StripText $temp "Y"
	GetWordPos $temp $pos "N"
	If ($pos > 0)
		SetVar $bsbuypscan TRUE
		SetVar $bsoutfit TRUE
	Else
		SetVar $bsbuypscan FALSE
		SetVar $bsoutfit TRUE
	End
	StripText $temp "N"
End
If ($current_sector <> STARDOCK)
	If ($prompt = "Citadel")
		Gosub :Z_Lib~CURRENTPLANET
		Send "qt**1*q**"
		Send #145
		WaitFor #145 & #8
		If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
			Send "f1*cd"
		End
		Gosub :Z_Lib~RETURNTOPLANET
	Else
		Send "*"
		WaitFor "elp)?"
		If ($current_sector > 10) and ($current_sector <> STARDOCK)
			If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0")
				Send "p***"
			End
			If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
				Send "f1*cd"
			End
		End
	End
	If (STARDOCK > 0) and (STARDOCK <= SECTORS)
		SetVar $stardockok TRUE
	Else
		SetVar $Z_Lib~message $scripttitle & " - Where is STARDOCK?*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOBS
	End
	Gosub :CHECKSTARDOCK
	If ($stardockchk <> TRUE)
		SetVar $Z_Lib~message $scripttitle & " - Something is wrong with STARDOCK.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOBS
	End
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_dockport FALSE
	SetVar $target STARDOCK
	SetVar $previoussector $current_sector
	Gosub :TWARPING
#Else
#	Send "p sg yg q"
End
If ($startprompt <> "<StarDo")
	Send "p sg yg q"
End
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
GetWord CURRENTLINE $curprmpt 1
If ($curprmpt <> "<StarDock>")
	SetVar $Z_Lib~message $scripttitle & " - We are NOT at the STARDOCK prompt.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBS
End
Send "sbny" & $PARM1 & "yc" & #8 & $bsname & "***"
Gosub :Z_Lib~SYNC
SetVar $temp $bsname
GetLength $temp $len
If ($len > 15)
	CutText $temp $temp 1 15
	SetVar $Z_Strings~trimstring $temp
	Gosub :Z_Strings~RTRIM
	SetVar $temp $Z_Strings~trimstring
End
SetTextLineTrigger shipnum :BSSHIPNUM $temp
SetTextTrigger shipnonum :BSNOSHIPNUM "Choose which ship to sell (Q=Quit)"
SetTextTrigger shipnonum2 :BSNOSHIPNUM "You do not own any other ships orbiting the Stardock!"
Send "sq"
Pause
:BSNOSHIPNUM 
KillTrigger shipnonum
KillTrigger shipnonum2
KillTrigger shipnum
SetVar $Z_Lib~message $scripttitle & " - The ship has gone!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOBS
:BSSHIPNUM
KillTrigger shipnonum
KillTrigger shipnonum2
KillTrigger shipnum
GetWord CURRENTLINE $bsship 1
SetVar $ship1 $shipid
Send "q"
If ($bsoutfit = TRUE)
	Send "qx*" & $bsship & "*qp s"
	If ($bsbuyscanner = TRUE) or ($bsbuytwarp = TRUE) or ($bsbuypsy = TRUE) or ($bsbuypscan = TRUE)
		Send "h "
		If ($bsbuyscanner = TRUE)
			SetTextTrigger bs1 :BS1 "Sorry, your ship can only carry a Density Scanner."
			SetTextTrigger bs2 :BS2 "Sorry, your ship is not equipped for a Long Range Scanner!"
			SetTextTrigger bs3 :BS3 "Ok!  We'll get that sent over to your ship, installation is free!"
			Send "rh"
			Pause
:BS1
			KillTrigger bs1
			KillTrigger bs2
			KillTrigger bs3
			Send "rd"
:BS2
			KillTrigger bs1
			KillTrigger bs2
			KillTrigger bs3
:BS3
			KillTrigger bs1
			KillTrigger bs2
			KillTrigger bs3
		End
		If ($bsbuytwarp = TRUE)
			Send "w2"
		End
		If ($bsbuypsy = TRUE)
			Send "yy"
		End
		If ($bsbuypscan = TRUE)
			Send "fy"
		End
		Send "q"
	End
	If ($bsbuyholds = TRUE) or ($bsbuyfigs = TRUE) or ($bsbuyshields = TRUE)
		SetTextTrigger holds :HOLDS "A  Cargo holds     :"
		Send "sp"
		Pause
:HOLDS
		KillAllTriggers
		GetWord CURRENTLINE $canbuyholds 10
		If ($bsbuyholds = TRUE) and ($canbuyholds > 0)
			KillAllTriggers
			SetTextTrigger buy :buy11 "How many Cargo Holds do you want installed"
			Send "a"
			Pause
:buy11
			KillAllTriggers
			Send $canbuyholds & "*y"
		End
		If ($bsbuyfigs = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy12 "How many K-3A fighters do you want to buy"
			Send "b"
			Pause
:buy12
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuyshields = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy13 "How many shield armor points do you want to buy"
			Send "c"
			Pause
:buy13
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		Send "q q"
	End
	
	If ($bsbuymines = TRUE) or ($bsbuylimps = TRUE) or ($bsbuytorps = TRUE) or ($bsbuydets = TRUE) or ($bsbuycloaks = TRUE) or ($bsbuybeacons = TRUE) or ($bsbuyprobes = TRUE) or ($bsbuydisrs = TRUE) or ($bsbuyphotons = TRUE) or ($bsbuy1photon = TRUE) or ($bsbuycorbs = TRUE)
		Send "h "
		If ($bsbuymines = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy1 "How many mines do you want"
			Send "m"
			Pause
		:buy1
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuylimps = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy2 "How many mines do you want"
			Send "l"
			Pause
		:buy2
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuytorps = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy3 "How many Genesis Torpedoes do you want"
			Send "t"
			Pause
		:buy3
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuydets = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy4 "How many Atomic Detonators do you want"
			Send "a"
			Pause
		:buy4
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuycloaks = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy5 "How many Cloaking units do you want"
			Send "d"
			Pause
		:buy5
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuybeacons = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy6 "How many Beacons do you want"
			Send "b"
			Pause
		:buy6
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuyprobes = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy7 "How many Probes do you want"
			Send "e"
			Pause
		:buy7
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuydisrs = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy8 "How many Mine Disruptors do you want"
			Send "s"
			Pause
		:buy8
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		If ($bsbuyphotons = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy9 "How many Photon Missiles do you want"
			SetTextTrigger nobuy :nobuy1 "Sorry, your ship is not equipped to handle Photon Missiles!"
			Send "p"
			Pause
		:buy9
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		:nobuy1
		KillAllTriggers
		End
		If ($bsbuy1photon = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy9a "How many Photon Missiles do you want"
			SetTextTrigger nobuy2 :nobuy2 "Sorry, your ship is not equipped to handle Photon Missiles!"
			Send "p"
			Pause
		:buy9a
			KillAllTriggers	
			Send "1*"
		:nobuy2
		KillAllTriggers
		End
		If ($bsbuycorbs = TRUE)
			KillAllTriggers
			SetTextTrigger buy :buy10 "How many Corbomite Transducers do you want"
			Send "c"
			Pause
		:buy10
			KillAllTriggers
			GetText CURRENTLINE $amt "(Max " ")"
			StripText $amt ","
			Send $amt & "*"
		End
		Send "q"
	End
	Send "qx*" & $ship1 & "*"
End
Send "q*w* z" & #8 & $bsship & "*"
Gosub :GETSTATS
If ($ore < $holds)
	If (PORT.BUYFUEL[$current_sector] = FALSE) and ($sdsellfuel = TRUE)
		Send "p***"
	End
End
If ($bsstartsector <> $current_sector)
	SetVar $prompt2 $prompt
	SetVar $prompt "Command"
	SetVar $z_dockport FALSE

	SetVar $target $bsstartsector
	SetVar $previoussector $current_sector
	Gosub :TWARPING
	Gosub :GETSTATS
	If ($current_sector <> $target)
		SetVar $Z_Lib~message $scripttitle & " - We didn't make it back.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOBS
	End
	Send "w * * "
End
KillAllTriggers
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
ElseIf ($startprompt = "<StarDo")
	Send "p s"
End
Send #145
WaitOn #145 & #8
SetVar $Z_Lib~message $scripttitle & ": BS - Buy Ship run complete. [" & $bsname & "]*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOBS
SetVar $ssmsg ""
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# SP 
:INTCOM_SP
KillAllTriggers
If ($PARM1 = "") or ($PARM1 = "0")
	SetVar $PARM1 "1"
End
Gosub :GETSTATS
If ($credits < 10000)
	SetVar $Z_Lib~message $scripttitle & " - Need more cash - 10k+.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOSP
End
If ($twarp = "0")
	SetVar $Z_Lib~message $scripttitle & " - Need a Transwarp drive.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBS
End
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOSP
End
Gosub :Z_Lib~CURRENTPLANET
SetVar $x 1
SetVar $shieldsfull FALSE
While ($x <= $PARM1) and ($shieldsfull <> TRUE) and ($credits > 5000)
	Send #145
	WaitOn #145 & #8
	SetVar $Z_Lib~message $scripttitle & ": SP - Shield planet trip: " & $x & "/" & $PARM1 & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetTextLineTrigger xfershields :XFERSHIELDS "and the Shield System has"
	Send "gt"
	Pause
	:XFERSHIELDS
	KillAllTriggers
	GetWord CURRENTLINE $shipshields 3
	GetWord CURRENTLINE $planetshields 10
	If ($shipshields >= 10)
		SetVar $shipshields ($shipshields / 10)
	End
	SetTextLineTrigger toomanyshields :TOOMANYSHIELDS "The planet is limited to"
	SetTextLineTrigger shieldsxfered :SHIELDSXFERED "and the Planetary Shielding System has"
	Send $shipshields & "*"
	Pause
	:TOOMANYSHIELDS
	KillAllTriggers
	GetWord CURRENTLINE $planetmaxshields 6
	SetVar $shipshields ($planetmaxshields - $planetshields)
	Send "gt" & $shipshields & "*"
	SetVar $shieldsfull TRUE
	Goto :SHIELDSDONE
	:SHIELDSXFERED
	KillAllTriggers
	:SHIELDSDONE
	Send "qt**1*q**"
	Send #145
	WaitFor #145 & #8
	If (SECTOR.FIGS.QUANTITY[$current_sector] = "0")
		Send "f1*cd"
	End
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $returnsector $current_sector

	If (STARDOCK > 0) and (STARDOCK <= SECTORS)
		SetVar $stardockok TRUE
	Else
		SetVar $Z_Lib~message $scripttitle & " - Where is STARDOCK?*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOSP
	End
	Gosub :CHECKSTARDOCK
	If ($stardockchk <> TRUE)
		SetVar $Z_Lib~message $scripttitle & " - Something is wrong with STARDOCK.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOSP
	End
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_dockport TRUE
	SetVar $target STARDOCK
	SetVar $previoussector $current_sector
	Gosub :TWARPING
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	GetWord CURRENTLINE $curprmpt 1
	If ($curprmpt <> "<StarDock>")
		SetVar $Z_Lib~message $scripttitle & " - We are NOT at the STARDOCK prompt.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOSP
	End
	SetTextTrigger buy :SPBUY "How many shield armor points do you want to buy"
	Send "spc"
	Pause
	:SPBUY
	KillAllTriggers
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*q "
	Send #145
	WaitOn #145 & #8
	Send "qq "
	Gosub :CLEARMOVEOPTIONS
	SetVar $target $returnsector
	SetVar $previoussector $current_sector
	Gosub :TWARPING
	Gosub :GETSTATS
	If ($current_sector <> $target)
		SetVar $Z_Lib~message $scripttitle & " - We didn't make it back.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOSP
	End
	Gosub :Z_Lib~RETURNTOPLANET
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~message $scripttitle & ": SP - Shield planet run complete...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOSP
SetVar $reset TRUE
Return
# FCR 
:INTCOM_FCR
KillAllTriggers
SetVar $fcrresponses 0
FileExists $fileok "z-fcr.cfg"
If ($fileok <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FCR - z-fcr.cfg FILE NOT FOUND!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFCR
End
UpperCase $PARM1
If ($PARM1 <> "ON") and ($PARM1 <> "FAST")
	SetVar $Z_Lib~message $scripttitle & ": FCR - BAD PARAMETER!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFCR
End
UpperCase $PARM2
If ($PARM1 = "FAST") or ($PARM2 = "FAST")
	SetVar $fcrimmediate TRUE
Else
	SetVar $fcrimmediate FALSE
End
ReadToArray "z-fcr.cfg" $fcrfile
SetVar $fcrptr 0
SetArray $fcrtrigger 0
SetArray $fcrrespond 0
SetVar $i 1
While ($i <= $fcrfile)
	If ($fcrfile[$i] <> "")
		CutText $fcrfile[$i] $ck 1 1
		If ($ck <> "#")
			GetText $fcrfile[$i] $temp1 "[" "]"
			GetText $fcrfile[$i] $temp2 "{" "}"
			If ($temp1 <> "") and ($temp2 <> "")
				SetVar $fcrptr ($fcrptr + 1)
				SetVar $fcrtrigger[$fcrptr] $temp1
				SetVar $fcrrespond[$fcrptr] $temp2
			End
		End
	End
	SetVar $i ($i + 1)
End
If ($fcrptr = 0)
	SetVar $Z_Lib~message $scripttitle & ": FCR - NO entries in z-fcr.cfg file!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFCR
End
SetVar $Z_Lib~message $scripttitle & ": FCR - Processing z-fcr.cfg file. Please wait..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetArray $buckettrigger 0
SetArray $bucketrespond 0
SetArray $bucketct 0
SetVar $bucketmax 0
SetVar $bucketmin 99999
Gosub :Z_Lib~SETDIAL
SetVar $x 1
While ($x <= $fcrptr)
	Gosub :Z_Lib~UPDATEDIAL
	Getlength $buckettrigger $len
	If ($len > 0)
		SetVar $bucketct[$len] ($bucketct[$len] + 1)
		SetVar $buckettrigger[$len][$bucketct[$len]] $fcrtrigger[$x]
		SetVar $bucketrespond[$len][$bucketct[$len]] $fcrrespond[$x]
		If ($len > $bucketmax)
			SetVar $bucketmax $len
		End
		If ($len < $bucketmin)
			SetVar $bucketmin $len
		End
	End
	SetVar $x ($x + 1)
End
SetVar $z $bucketmax
SetVar $fcrptr 0
While ($z >= $bucketmin)
	Gosub :Z_Lib~UPDATEDIAL
	SetVar $x 1
	While ($x <= $bucketct[$z])
		Gosub :Z_Lib~UPDATEDIAL
		SetVar $fcrptr ($fcrptr + 1)
		SetVar $fcrtrigger[$fcrptr] $buckettrigger[$z][$x]
		LowerCase $fcrtrigger[$fcrptr]
		SetVar $fcrrespond[$fcrptr] $bucketrespond[$z][$x]
		SetVar $x ($x + 1)
	End
	SetVar $z ($z - 1)
End
Gosub :Z_Lib~ENDDIAL
SetArray $buckettrigger 0
SetArray $bucketrespond 0
If ($fcrimmediate = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FCR - Active - FAST. " & $fcrptr & " triggers/responses available.*"
Else
	SetVar $Z_Lib~message $scripttitle & ": FCR - Active. " & $fcrptr & " triggers/responses available.*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
GetTime $logtime "dd/mm/yyyy  hh:mm"
Write GAMENAME & "_Z-FCR.log" $fileline
Write GAMENAME & "_Z-FCR.log" $logtime & " - FCR STARTED. " & $fcrptr & " trigger/response entries found."
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $prompt 1 7
If ($prompt = "Citadel") or ($prompt = "Command")
	SetTextLineTrigger fcrcn :FCRCN "(5) Federation comm-link"
	Send "cn"
	Pause
:FCRCN
	KillAllTriggers
	GetWord CURRENTLINE $fcrset 5
	If ($fcrset <> "On")
		Send "5"
		GetTime $logtime "dd/mm/yyyy  hh:mm"
		Write GAMENAME & "_Z-FCR.log" $fileline
		Write GAMENAME & "_Z-FCR.log" $logtime & " - FedCom Channel (cn5) TURNED ON."
	End
	Send "q q "
End
Gosub :Z_Lib~COMMSON
SetVar $fcrlast ""
SetArray $fcrused $fcrptr
:FCRSTART
KillAllTriggers
SetTextOutTrigger fcrabort :FCRABORT "~"
SetTextOutTrigger fcrabort2 :FCRABORT #8
SetTextTrigger t64 :STANDDOWN $z_code & "[Z]STANDDOWN[Z]" & $z_code
SetTextLineTrigger fcroff :FCROFF $z_botname & " fcr off"
SetTextLineTrigger fcrreset :FCRRESET $z_botname & " reset"
SetTextLineTrigger fcrstatus :FCRSTATUS $z_botname & " status"
SetTextLineTrigger fcrmode :FCRMODE $z_botname & " mode"
SetTextLineTrigger fcrmode2 :FCRMODE $z_team & " mode"
SetTextLineTrigger fcrdash :FCRDASH $z_botname & " dash"
SetTextLineTrigger fcrdash2 :FCRDASH $z_team & " dash"
SetTextLineTrigger fcrbusy :FCRBUSY $z_botname & " busy"
SetTextTrigger fcrecho :FCRECHO "elp"
SetTextLineTrigger fcrscan :FCRSCAN "F "
Pause
:FCRECHO
Echo "**" & $boldwhite & $scripttitle & " - [" & $blinkon & $boldgreen & "FCR ON" & $blinkoff & $boldwhite & "] - Responded " & $boldgreen & $fcrresponses & $boldwhite & " times."
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel FCR : **" & $black
SetTextTrigger fcrecho :FCRECHO "elp"
Pause
:FCRSCAN
KillAllTriggers
SetVar $line CURRENTLINE
If ($line = "")
	Goto :FCRSTART
End
GetWord $line $word 1
If ($word = "F")
	CutText $line $fcrmsg 10 999
	CutText $line $sender 3 6
	SetVar $Z_Strings~trimstring $sender
	Gosub :Z_Strings~RTRIM
	SetVar $sender $Z_Strings~trimstring
	GetTime $logtime "dd/mm/yyyy  hh:mm"
	Write GAMENAME & "_Z-FCR.log" $fileline
	Write GAMENAME & "_Z-FCR.log" $logtime & " - " & $sender & " : " & $fcrmsg
	LowerCase $fcrmsg
	SetVar $i 1
	SetVar $fcrfoundctr 0
	SetArray $fcrfound1 0
	While ($i <= $fcrptr)
		SetVar $pos 0
		SetVar $pos1 0
		SetVar $posx 0
		SetVar $fcrtriggeron $fcrtrigger[$i]
		ReplaceText $fcrtriggeron "<me>" $z_ingamename
:FCRRECURSE
		GetWordPos $fcrtriggeron $pos "+"
		If ($pos <> "0")
			CutText $fcrtriggeron $fcrtrigger1 1 $pos
			StripText $fcrtrigger1 "+"
			CutText $fcrtriggeron $fcrtriggeron ($pos + 1) 9999
			GetWordPos $fcrmsg $pos1 $fcrtrigger1
			If ($pos1 <> "0")
				Goto :FCRRECURSE
			End
		Else	
			GetWordPos $fcrmsg $pos1 $fcrtriggeron
		End
		If ($pos1 > 0)
			SetVar $fcrfoundctr ($fcrfoundctr + 1)
			SetVar $fcrfound1[$fcrfoundctr] $i
		End
		SetVar $i ($i + 1)
	End
	SetVar $i 1
	SetVar $fcrfoundctr2 0
	SetArray $fcrfound2 0
	While ($i <= $fcrfoundctr)
		If ($fcrused[$fcrfound1[$i]] <> TRUE)
			SetVar $fcrfoundctr2 ($fcrfoundctr2 + 1)
			SetVar $fcrfound2[$fcrfoundctr2] $fcrfound1[$i]
		End
		SetVar $i ($i + 1)
	End
	If ($fcrfoundctr2 = "0") and ($fcrfoundctr <> "0")
		SetVar $i 1
		While ($i <= $fcrfoundctr)
			If ($fcrrespond[$fcrfound1[$i]] <> $fcrlast)
				SetVar $fcrused[$fcrfound1[$i]] FALSE
				SetVar $fcrfoundctr2 ($fcrfoundctr2 + 1)
				SetVar $fcrfound2[$fcrfoundctr2] $fcrfound1[$i]
			End
			SetVar $i ($i + 1)
		End
	End
	SetVar $fcrresponse ""
	If ($fcrfoundctr2 = 1)
		SetVar $fcrresponse $fcrrespond[$fcrfound2[1]]
		SetVar $fcrusing $fcrfound2[1]
	ElseIf ($fcrfoundctr2 > 1)
		GetRnd $rnd 1 $fcrfoundctr2
		SetVar $fcrresponse $fcrrespond[$fcrfound2[$rnd]]
		SetVar $fcrusing $fcrfound2[$rnd]
	End
	If ($fcrresponse <> "")
		KillAllTriggers
		GetWordPos $fcrresponse $posx "<SENDER>"
		If ($posx <> "0")
			Gosub :Z_GetPlayers~GETPLAYERS
			SetVar $x 1
			While ($x <= $Z_GetPlayers~menu_count)
				SetVar $temp $Z_GetPlayers~menu_name[$x]
				GetLength $temp $len
				If ($len > 6)
					CutText $temp $temp 1 6
				End
				SetVar $Z_Strings~trimstring $temp
				Gosub :Z_Strings~RTRIM
				SetVar $temp $Z_Strings~trimstring
				SetVar $Z_Strings~trimstring $sender
				Gosub :Z_Strings~RTRIM
				SetVar $sender $Z_Strings~trimstring
				LowerCase $sender
				If ($temp = $sender)
					SetVar $sender $Z_GetPlayers~menu_name[$x]
					SetVar $x $Z_GetPlayers~menu_count
				End
				SetVar $x ($x + 1)
			End
			ReplaceText $fcrresponse "<SENDER>" $sender
		End
		If ($fcrresponse <> $fcrlast)
			SetVar $fcrtriggeron $fcrtrigger[$fcrusing]
			Lowercase $fcrtriggeron
			ReplaceText $fcrtriggeron "<me>" $z_ingamename
			GetTime $logtime "dd/mm/yyyy  hh:mm"
			Write GAMENAME & "_Z-FCR.log" $logtime & " - Trigger Found."
			Write GAMENAME & "_Z-FCR.log" $logtime & " : " & $fcrtriggeron
			If ($fcrimmediate <> TRUE)
				GetRnd $rnd1 1 100
				If ($rnd1 > 95)
					GetRnd $rnd 15 90
				Else
					GetRnd $rnd 5 20
				End
			Else
				SetVar $rnd 2
			End
			Echo "**" & $boldwhite "FCR triggered on   : " & $boldgreen & $fcrtriggeron
			Echo "*" & $boldwhite "FCR responding with: " & $boldyellow & $fcrresponse
			Echo "*" & $boldwhite "FCR pause time     : " & $boldcyan & $rnd & " seconds**" & $black
			
			SetVar $fcrdelay ($rnd * 1000)
			SetDelayTrigger fcrdelay :FCRDELAY $fcrdelay
			SetTextOutTrigger fcrabort :FCRABORT "~"
			SetTextTrigger t64 :STANDDOWN $z_code & "[Z]STANDDOWN[Z]" & $z_code
			SetTextLineTrigger fcroff :FCROFF $z_botname & " fcr off"
			SetTextLineTrigger fcrreset :FCRRESET $z_botname & " reset"
			SetTextLineTrigger fcrstatus :FCRSTATUS $z_botname & " status"
			SetTextLineTrigger fcrmode :FCRMODE $z_botname & " mode"
			SetTextLineTrigger fcrmode2 :FCRMODE $z_team & " mode" 
			SetTextLineTrigger fcrdash :FCRDASH $z_botname & " dash"
			SetTextLineTrigger fcrdash2 :FCRDASH $z_team & " dash"
			SetTextLineTrigger fcrbusy :FCRBUSY $z_botname & " busy"
			SetTextLineTrigger fcrscan2 :FCRSCAN2 "F "
			Pause
:FCRSCAN2
			SetVar $line CURRENTLINE
			GetWord $line $word 1
			If ($word = "F")
				CutText $line $fcrmsg 10 999
				CutText $line $sender2 3 6
				SetVar $Z_Strings~trimstring $sender2
				Gosub :Z_Strings~RTRIM
				SetVar $sender2 $Z_Strings~trimstring
				GetTime $logtime "dd/mm/yyyy  hh:mm"
				Write GAMENAME & "_Z-FCR.log" $fileline
				Write GAMENAME & "_Z-FCR.log" $logtime & " - " & $sender2 & " : " & $fcrmsg
			End
			SetTextLineTrigger fcrscan2 :FCRSCAN2 "F "
			Pause
:FCRDELAY
			KillAllTriggers
			SetVar $Z_Lib~message $fcrresponse & "*"
			SetVar $Z_Lib~messageto $sender2
			SetVar $Z_Lib~messagemode "F"
			Gosub :MSGBRIDGE
			SetVar $Z_Lib~messagemode $messagemode
			GetTime $logtime "dd/mm/yyyy  hh:mm"
			Write GAMENAME & "_Z-FCR.log" $logtime & " - Responded after " & $rnd & " seconds."
			Write GAMENAME & "_Z-FCR.log" $logtime & " : " & $fcrresponse
			Write GAMENAME & "_Z-FCR.log" $fileline
			SetVar $fcrresponses ($fcrresponses + 1)
			SetVar $fcrlast $fcrresponse
			SetVar $fcrused[$fcrusing] TRUE
		End
	End
End
Goto :FCRSTART
:FCRRESET
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
Gosub :INTCOM_RESET
Goto :FCRSTART
:FCRSTATUS
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
Gosub :INTCOM_STATUS
Goto :FCRSTART
:FCRMODE
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
Gosub :INTCOM_MODE
Goto :FCRSTART
:FCRDASH
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
Gosub :INTCOM_DASH
Goto :FCRSTART
:FCRBUSY
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
If ($ck = "P")
	SetVar $messagemode "P"
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
Gosub :INTCOM_BUSY
Goto :FCRSTART
:FCROFF
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :FCRSTART
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :FCRSTART
End
:FCRABORT
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & ": FCR - Aborted..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
GetTime $logtime "dd/mm/yyyy  hh:mm"
Write GAMENAME & "_Z-FCR.log" $fileline
Write GAMENAME & "_Z-FCR.log" $logtime & " - FCR ABORTED."
Goto :NOFCR
:NOFCR
KillAllTriggers
SetVar $Z_Lib~messagemode $messagemode
SetArray $fcrtrigger 0
SetArray $fcrrespond 0
SetArray $fcrfile 0
SetVar $reset TRUE
Return
# COURSE 
:INTCOM_COURSE
KillAllTriggers
UpperCase $PARM1
UpperCase $PARM2
ReplaceText $PARM1 "D" STARDOCK
ReplaceText $PARM2 "D" STARDOCK
ReplaceText $PARM1 "A" ALPHACENTAURI
ReplaceText $PARM2 "A" ALPHACENTAURI
ReplaceText $PARM1 "R" RYLOS
ReplaceText $PARM2 "R" RYLOS
ReplaceText $PARM1 "B" $z_base
ReplaceText $PARM2 "B" $z_base
ReplaceText $PARM1 "S" $z_safesector
ReplaceText $PARM2 "S" $z_safesector
FileExists $fileexists GAMENAME & "_BESTCOURSE.txt"
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete GAMENAME & "_BESTCOURSE-backup-" & $timestamp & ".txt"
	Rename GAMENAME & "_BESTCOURSE.txt" GAMENAME & "_BESTCOURSE-backup-" & $timestamp & ".txt"
End
IsNumber $isnum $PARM1
If ($PARM1 = "0") or ($isnum <> TRUE)
	SetVar $Z_Lib~message $scripttitle & ": COURSE - BAD PARAMETER.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOCOURSECOMMAND
End
If ($PARM1 < 1) or ($PARM1 > SECTORS)
	SetVar $Z_Lib~message $scripttitle & ": COURSE - BAD PARAMETER.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOCOURSECOMMAND
End
Gosub :GETSTATS
If ($PARM2 = "0") or ($PARM2 = "GO")
	SetVar $coursefrom $current_sector
	SetVar $courseto $PARM1
Else
	SetVar $coursefrom $PARM1
	IsNumber $isnum $PARM2
	If ($isnum <> TRUE)
		SetVar $Z_Lib~message $scripttitle & ": COURSE - BAD PARAMETER.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOCOURSECOMMAND
	End
	If ($PARM2 < 1) or ($PARM2 > SECTORS)
		SetVar $Z_Lib~message $scripttitle & ": COURSE - BAD PARAMETER.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOCOURSECOMMAND
	End
	SetVar $courseto $PARM2
	If ($courseto = $coursefrom)
		SetVar $Z_Lib~message $scripttitle & ": COURSE - BAD PARAMETER.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOCOURSECOMMAND
	End
End
UpperCase $user_command_line
GetWordPos $user_command_line $pos "GO"
If ($pos <> "0")
	SetVar $coursego TRUE
Else
	SetVar $coursego FALSE
End
SetVar $y "0"
SetVar $courseavoid "0"
SetVar $coursebest ""
SetVar $coursemin "999999999999"
SetVar $coursedeep FALSE
While ($y <= $courses)
	If ($y <> "0")
		If ($courseavoid <> "0")
			ClearAvoid $courseavoid
		End
		If ($avoidarray[$courses[$y]] = TRUE)
			SetVar $y $courses
			Goto :SKIPCOURSE
		Else
			SetAvoid $courses[$y]
			SetVar $courseavoid $courses[$y]
			SetVar $coursedeep TRUE
		End
	End
	GetCourse $courses $coursefrom $courseto
	If ($courses = "-1")
		If ($y = "0")
			SetVar $Z_Lib~message $scripttitle & ": COURSE - NO COURSE FOUND from: " & $coursefrom & " to: " & $courseto & "*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			Goto :NOCOURSECOMMAND
		Else
			Goto :SKIPCOURSE
		End
	End

	SetVar $coursefigs "0"
	SetVar $coursestring ""
	SetVar $coursefigsec "0"
	SetVar $x 1
	While ($x <= ($courses + 1))
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 5
		SetVar $Z_Strings~unpadded $courses[$x]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $coursestring ($coursestring & $Z_Strings~padded & " - ")
		GetSectorParameter $courses[$x] "FIGSEC" $figged
		GetSectorParameter $courses[$x] "MINESEC" $mined
		GetSectorParameter $courses[$x] "LIMPSEC" $limped
		If ($figged = TRUE)
			SetVar $coursestring ($coursestring & "F")
			If ($x <= $courses) and ($x > 1)
				SetVar $coursefigsec ($coursefigsec + 1)
			End
		Else
			SetVar $coursestring ($coursestring & " ")
		End
		If (($courses[$x] = STARDOCK) or ($courses[$x] <= 10) or ($x = 1)) and ($x <> ($courses + 1))
			SetVar $coursefigsec ($coursefigsec + 1)
		End
		If ($mined = TRUE)
			SetVar $coursestring ($coursestring & "M")
		Else
			SetVar $coursestring ($coursestring & " ")
		End
		If ($limped = TRUE)
			SetVar $coursestring ($coursestring & "L")
		Else
			SetVar $coursestring ($coursestring & " ")
		End
		If (SECTOR.FIGS.QUANTITY[$courses[$x]] > 0)
			GetWordPos SECTOR.FIGS.OWNER[$courses[$x]] $pos "our"
			If ($pos = "0")
				SetVar $coursefigs ($coursefigs + SECTOR.FIGS.QUANTITY[$courses[$x]])
				SetVar $coursestring ($coursestring & " " & #42)
			else
				SetVar $coursestring ($coursestring & "  ")
			End
		Else
			SetVar $coursestring ($coursestring & "  ")
		End
		If (PORT.EXISTS[$courses[$x]] = TRUE)
			If ($courses[$x] = ALPHACENTAURI)
				SetVar $coursestring ($coursestring & " ALP")
			ElseIf ($courses[$x] = RYLOS)
				SetVar $coursestring ($coursestring & " RYL")
			ElseIf ($courses[$x] = 1)
				SetVar $coursestring ($coursestring & " TER")
			Else
				If (PORT.BUYFUEL[$courses[$x]] = TRUE)
					SetVar $coursestring ($coursestring & " B")
				Else
					SetVar $coursestring ($coursestring & " S")
				End
				If (PORT.BUYORG[$courses[$x]] = TRUE)
					SetVar $coursestring ($coursestring & "B")
				Else
					SetVar $coursestring ($coursestring & "S")
				End
				If (PORT.BUYEQUIP[$courses[$x]] = TRUE)
					SetVar $coursestring ($coursestring & "B")
				Else
					SetVar $coursestring ($coursestring & "S")
				End
				If ($courses[$x] = STARDOCK)
					SetVar $coursestring ($coursestring & " DOCK")
				End
			End
		Else
			SetVar $coursestring ($coursestring & "    ")
		End
		SetVar $coursestring ($coursestring & "*")
		SetVar $x ($x + 1)
	End
	If ($coursefigsec = $courses)
		SetVar $coursemin "0"
		SetVar $coursebest $coursestring
		SetVar $y $courses
		Goto :SKIPCOURSE
	End
	If ($coursefigs < $coursemin)
		SetVar $coursemin $coursefigs
		SetVar $coursebest $coursestring
	End
:SKIPCOURSE
	SetVar $y ($y + 1)
End
If ($courseavoid <> "0")
	ClearAvoid $courseavoid
End
SetVar $coursestring $coursebest
SetVar $coursefigs $coursemin
SetVar $coursewrite $coursestring
ReplaceText $coursewrite "*" #13 & #10
Write GAMENAME & "_BESTCOURSE.txt" $coursewrite
SetVar $coursestring ($coursestring & $dashedline & "Latest intel suggests " & $coursefigs & " enemy fighters along the route.*")
SetVar $coursestring ($coursestring & $dashedline & "Course saved to file " & GAMENAME & "_BESTCOURSE.txt in the TWX Root.*")
If ($coursego = TRUE)
	SetVar $coursestring ($coursestring & $dashedline & "Attempting to move to " & $courseto & "...*")
End
If ($coursedeep = TRUE)
	SetVar $Z_Lib~message $dashedline & $scripttitle & ": BEST COURSE - From: " & $coursefrom & " To: " & $courseto & " - Hops: " & $courses & "*" & $dashedline
Else
	SetVar $Z_Lib~message $dashedline & $scripttitle & ": DIRECT COURSE - From: " & $coursefrom & " To: " & $courseto & " - Hops: " & $courses & "*" & $dashedline
End
SetVar $Z_Lib~message ($Z_Lib~message & $coursestring & $dashedline)
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
If ($coursego = TRUE)
	FileExists $fileexists GAMENAME & "_BESTCOURSE.txt"
	If ($fileexists <> TRUE)
		SetVar $Z_Lib~message $scripttitle & ": COURSE - File NOT found - " & GAMENAME & "_BESTCOURSE.txt!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOCOURSECOMMAND
	End
	SetVar $Z_Lib~setprompt "COMMAND"
	SetVar $Z_Lib~heraldss TRUE
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		Goto :NOCOURSECOMMAND
	End
	SetVar $x 2
	SetArray $gocourse 0
	ReadToArray GAMENAME & "_BESTCOURSE.txt" $gocourse
	While ($x <= $gocourse)
		GetWord $gocourse[$x] $gocourse[$x] 1
		If ($gocourse[$x] <> "0")
			#Send "s zh * s d"
			Send #145
			WaitOn #145 & #8
			SetVar $warps SECTOR.WARPCOUNT[$current_sector]
			SetVar $y 1
			SetVar $found FALSE
			While ($y <= $warps)
				If (SECTOR.WARPS[$current_sector][$y] = $gocourse[$x])
					SetVar $found TRUE
					SetVar $y $warps
				End
				SetVar $y ($y + 1)
			End
			If ($found <> TRUE)
				SetVar $Z_Lib~message $scripttitle & ": COURSE - Adjacent NOT found - " & $gocourse[$x] & ".*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				Goto :NOCOURSECOMMAND
			End
			SetVar $target $gocourse[$x]
			SetVar $mowmode "Charge"
			Gosub :MOVE
			Send #145
			WaitOn #145 & #8
			Gosub :GETSTATS
			If ($current_sector <> $target)
				SetVar $Z_Lib~message $scripttitle & ": COURSE - Did NOT reach sector - " & $gocourse[$x] & ". Aborting...*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				Goto :NOCOURSECOMMAND
			End
		End
		SetVar $x ($x + 1)
	End
	If ($current_sector = $courseto)
		SetVar $Z_Lib~message $scripttitle & ": COURSE - Arrived at sector: [" & $current_sector & "]*"
	Else
		SetVar $Z_Lib~message $scripttitle & ": COURSE - DID NOT arrive at sector - " & $courseto & ". I am at " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOCOURSECOMMAND
End
:NOCOURSECOMMAND
SetVar $coursestring ""
SetVar $coursebest ""
SetVar $coursewrite ""
SetArray $courses 0
SetVar $reset TRUE
Return
# SR 
:INTCOM_SR
KillAllTriggers
UpperCase $PARM1
UpperCase $PARM2
Gosub :GETSTATS
If ($PARM1 = "") or ($PARM1 = "0")
	If ($z_sr = "KILL") or ($z_sr = "CAP")
		SetVar $ssmsg ($scripttitle & ": SR - Sector Responder is currently ON.*")
		SetVar $ssmsg ($ssmsg & "Base Sector : " & $z_base & "*")
		SetVar $ssmsg ($ssmsg & "Safe Sector : " & $z_safesector & "*")
		SetVar $ssmsg ($ssmsg & "Main Planet : " & $z_planet & "*")
		SetVar $ssmsg ($ssmsg & "Safe Ship   : " & $z_safeship & "*")
		SetVar $ssmsg ($ssmsg & "Attack Mode : " & $z_sr & "*")
	Else
		SetVar $ssmsg ($scripttitle & ": SR - Sector Responder is currently OFF.*")
	End
ElseIf ($PARM1 = "ON")
	SetVar $z_sr "KILL"
	SaveVar $z_sr
	SetVar $ssmsg ($scripttitle & ": SR - Sector Responder is now set to ON.*")
	SetVar $ssmsg ($ssmsg & "Base Sector : " & $z_base & "*")
	SetVar $ssmsg ($ssmsg & "Safe Sector : " & $z_safesector & "*")
	SetVar $ssmsg ($ssmsg & "Main Planet : " & $z_planet & "*")
	SetVar $ssmsg ($ssmsg & "Safe Ship   : " & $z_safeship & "*")
	SetVar $ssmsg ($ssmsg & "Attack Mode : " & $z_sr & "*")
ElseIf ($PARM1 = "KILL") or ($PARM1 = "CAP")
	SetVar $z_sr $PARM1
	SaveVar $z_sr
	SetVar $ssmsg ($scripttitle & ": SR - Sector Responder is now set to ON.*")
	SetVar $ssmsg ($ssmsg & "Base Sector : " & $z_base & "*")
	SetVar $ssmsg ($ssmsg & "Safe Sector : " & $z_safesector & "*")
	SetVar $ssmsg ($ssmsg & "Main Planet : " & $z_planet & "*")
	SetVar $ssmsg ($ssmsg & "Safe Ship   : " & $z_safeship & "*")
	SetVar $ssmsg ($ssmsg & "Attack Mode : " & $z_sr & "*")
ElseIf ($PARM1 = "OFF")
	SetVar $z_sr "OFF"
	SaveVar $z_sr
	SetVar $ssmsg ($scripttitle & ": SR - Sector Responder is now OFF.*")
Else
	SetVar $ssmsg ($scripttitle & ": SR - BAD parameter... get help!*")
End
If ($z_sr <> "OFF")
	If ($z_rescueavailable = TRUE)
		SetVar $ssmsg ($ssmsg & "Rescue Service detected.*")
	Else
		SetVar $ssmsg ($ssmsg & "Rescue Service NOT detected.*")
		SetVar $ssmsg ($ssmsg & "script?*")
	End
End
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# HTX 
:INTCOM_HTX
KillAllTriggers
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :HTXBADPARM
End
IsNumber $isnum $PARM2
If ($isnum <> TRUE)
	Goto :HTXBADPARM
End
If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK) or ($PARM2 < 1)
	Goto :HTXBADPARM
End
Gosub :GETSTATS
If ($twarp <> 2)
	SetVar $Z_Lib~message $scripttitle & " HTX - Need a level 2 Transwarp drive.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHTX
End
If ($targetsystemok <> TRUE)
	SetVar $Z_Lib~message $scripttitle & " HTX - Initialise the Targeting system first.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHTX
End
SetVar $htxsector $PARM1
SetVar $htxship1 $shipid
SetVar $htxship2 $PARM2
SetVar $htxreturn FALSE
SetVar $htxstay FALSE
SetVar $htxstart $current_sector
SetVar $i 1
SetVar $found FALSE
While ($i <= 8)
	If ($targetarray[$htxsector][$i] <> "0")
		GetSectorParameter $targetarray[$htxsector][$i] "FIGSEC" $fig
		If ($fig <> TRUE)
			SetVar $targetarray[$htxsector][$i] "0"
		Else
			SetVar $found TRUE
			SetVar $targetindex $i
			SetVar $i 8
		End
	End
	SetVar $i ($i + 1)
End
If ($found <> TRUE)
	SetVar $Z_Lib~message $scripttitle & " HTX - No available adjacents!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHTX
End
SetVar $htxstage $targetarray[$htxsector][$targetindex]

SetVar $commandline ""
GetText $user_command_line $commandline "[" "]"
StripText $user_command_line "[" & $commandline & "]"
LowerCase $commandline
SetVar $temp $user_command_line
LowerCase $temp
GetWordPos $temp $pos1 "/r"
GetWordPos $temp $pos2 "return"
If ($pos1 <> "0") or ($pos2 <> "0")
	SetVar $htxreturn TRUE
End
GetWordPos $temp $pos1 "/s"
GetWordPos $temp $pos2 "stay"
If ($pos1 <> "0") or ($pos2 <> "0")
	SetVar $htxstay TRUE
End
GetWordPos $temp $pos "arms"
If ($pos <> "0")
	SetVar $arms TRUE
End
SetVar $comline $temp
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOHTX
End
Send #145
WaitOn #145 & #8
SetTextTrigger htxlock :HTXLOCK "You lock your Tractor Beam on"
SetTextTrigger htxnolock :HTXNOLOCK "Command [TL="
Send "w* z" & #8 & $htxship2 & "*"
Pause
:HTXNOLOCK
KillAllTriggers
SetVar $ssmsg ($scripttitle & ": HTX - Could not hooktow onto ship #" & $htxship2 & ".*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHTX
:HTXLOCK
KillAllTriggers
If ($ore < $holds)
	If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0")
		If ($current_sector = STARDOCK)
			If ($sdsellfuel = TRUE)
				Send "p***"
			End
		Else
			Send "p***"
		End
	End
End
Gosub :CLEARMOVEOPTIONS
SetVar $target $htxstage
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
If ($current_sector <> $htxstage)
	SetVar $Z_Lib~message $scripttitle & " HTX - We are NOT at the STAGING sector " & $htxstage & ".*Current sector is " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHTX
End
Send "w * * "
SetVar $htx TRUE
SetVar $PARM1 $htxship2
SetVar $user_command_line "0"
Gosub :INTCOM_XPORT
SetVar $htx FALSE
Gosub :GETSTATS
If ($shipid <> $htxship2)
	SetVar $Z_Lib~message $scripttitle & " HTX - Failed to XPORT into ship #" & $htxship2 & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOHTX
End
Send #145
WaitOn #145 & #8
Send "cpy" & $htxsector & "*q"
If ($arms = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": HTX - ! CALL TO ARMS ! {" & $current_sector & "} [" & $htxsector & "]*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
End
If ($htxstay <> TRUE)
	SetVar $htx TRUE
	SetVar $PARM1 $htxship1
	SetVar $user_command_line "0"
	Gosub :INTCOM_XPORT
	SetVar $htx FALSE
	Gosub :GETSTATS
	If ($shipid <> $htxship1)
		SetVar $Z_Lib~message $scripttitle & " HTX - Failed to XPORT into ship #" & $htxship1 & ".*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOHTX
	End
	Send #145
	WaitOn #145 & #8
End
If ($htxreturn = TRUE)
	If ($htxstay <> TRUE)
		Send "w* z" & #8 & $htxship2 & "*"
	Else
		Send "w* z" & #8 & $htxship1 & "*"
	End
	Gosub :CLEARMOVEOPTIONS
	SetVar $target $htxstart
	SetVar $previoussector $current_sector
	Gosub :TWARPING
	Gosub :GETSTATS
	If ($current_sector <> $htxstart)
		SetVar $Z_Lib~message $scripttitle & " HTX - FAILED to RETURN to the STARTING sector " & $htxstart & ".*Current sector is " & $current_sector & ".*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOHTX
	End
	Send "w * * "
Else
	UpperCase $comline
	StripText $comline "ARMS"
	StripText $comline "STAY"
	StripText $comline "RETURN"
	StripText $comline "/R"
	StripText $comline "/S"
	SetVar $target "0"
	Gosub :CLEARMOVEOPTIONS
	GetWordPos $comline $pos "E"
	If ($pos > 0)
		SetVar $mowmode "MOW"
		SetVar $target $htxsector
		SetVar $z_dockport FALSE
		Gosub :MOVE
		If ($badpath = TRUE)
			SetVar $Z_Lib~message $scripttitle & ": HTX - Could not set a course! Exiting...*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			Goto :NOHTX
		End
	End
	Gosub :CLEARMOVEOPTIONS
	GetWordPos $comline $pos "U"
	If ($pos > 0)
		SetVar $z_surround TRUE
	End
	GetWordPos $comline $pos "K"
	If ($pos > 0)
		SetVar $z_kill TRUE
	End
	GetWordPos $comline $pos "W"
	If ($pos > 0)
		SetVar $z_wavecap TRUE
	End
	GetWordPos $comline $pos "C"
	If ($pos > 0)
		SetVar $z_capture TRUE
	End
	GetWordPos $comline $pos "V"
	If ($pos > 0)
		SetVar $z_callsaveme TRUE
	End
	GetWordPos $comline $pos "X"
	If ($pos > 0)
		SetVar $z_holoattack TRUE
	End
	If ($commandline <> "")
		SetVar $z_runcommand TRUE
	End
	Gosub :DOOPTIONS	
	Gosub :CLEARMOVEOPTIONS
End
SetVar $ssmsg ($scripttitle & ": HTX - Complete...!*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHTX
:HTXBADPARM
SetVar $ssmsg ($scripttitle & ": HTX - BAD parameter... get help!*")
SetVar $Z_Lib~message $ssmsg
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOHTX
:NOHTX
SetVar $Z_Lib~heraldss FALSE
SetVar $ssmsg ""
SetVar $reset TRUE
Return
# MANIFEST 
:INTCOM_MANIFEST
KillAllTriggers
SetVar $filename GAMENAME & "_Z-MANIFEST.txt"
FileExists $fileexists $filename
If ($fileexists = TRUE)
	ReadToArray $filename $banner
	SetVar $lines "-------------------------------------------------------------------"
	SetVar $sortkey 0
	UpperCase $PARM1
	If ($PARM1 = "T")
		SetVar $sortkey 1
		SetVar $lines "----------------===------------------------------------------------"
	ElseIf ($PARM1 = "H")
		SetVar $sortkey 2
		SetVar $lines "--------------------===--------------------------------------------"
	ElseIf ($PARM1 = "F")
		SetVar $sortkey 3
		SetVar $lines "------------------------======-------------------------------------"
	ElseIf ($PARM1 = "S")
		SetVar $sortkey 4
		SetVar $lines "-------------------------------=====-------------------------------"
	ElseIf ($PARM1 = "O")
		SetVar $sortkey 5
		SetVar $lines "-------------------------------------===---------------------------"
	ElseIf ($PARM1 = "D")
		SetVar $sortkey 6
		SetVar $lines "-----------------------------------------===-----------------------"
	ElseIf ($PARM1 = "W")
		SetVar $sortkey 7
		SetVar $lines "---------------------------------------------=====-----------------"
	ElseIf ($PARM1 = "R")
		SetVar $sortkey 9
		SetVar $lines "--------------------------------------------------------===--------"
	End
	If ($sortkey <> 0)
		If ($PARM2 = "A") or ($PARM2 = "a")
			SetVar $ascending TRUE
		Else
			SetVar $ascending FALSE
		End
		SetVar $x 1
		SetArray $class 0
		SetArray $data 0
		While ($x <= $banner)
			GetLength $banner[$x] $len
			If ($len > 16)
				CutText $banner[$x] $class[$x] 1 16
				CutText $banner[$x] $data[$x] 17 999
			End
			SetVar $x ($x + 1)
		End
		SetVar $sortagain TRUE
		While ($sortagain = TRUE)
			SetVar $sortagain FALSE
			SetVar $x 1
			While ($x < $banner)
				GetWord $data[$x] $sort1 $sortkey
				StripText $sort1 #42
				GetWord $data[($x + 1)] $sort2 $sortkey
				StripText $sort2 #42
				If ($ascending = TRUE)
					If ($sort1 > $sort2)
						SetVar $sorttemp $data[($x + 1)]
						SetVar $data[($x + 1)] $data[$x]
						SetVar $data[$x] $sorttemp
						SetVar $sorttemp $class[($x + 1)]
						SetVar $class[($x + 1)] $class[$x]
						SetVar $class[$x] $sorttemp
						SetVar $sortagain TRUE
					End
				Else
					If ($sort1 < $sort2)
						SetVar $sorttemp $data[($x + 1)]
						SetVar $data[($x + 1)] $data[$x]
						SetVar $data[$x] $sorttemp
						SetVar $sorttemp $class[($x + 1)]
						SetVar $class[($x + 1)] $class[$x]
						SetVar $class[$x] $sorttemp
						SetVar $sortagain TRUE
					End
				End
				SetVar $x ($x + 1)
			End
		End
		SetVar $x 1
		While ($x <= $banner)
			SetVar $banner[$x] $class[$x] & $data[$x]
			SetVar $x ($x + 1)
		End
	End
	
	SetVar $displaybanner ""
	SetVar $displaybanner ($displaybanner & " Z-Bot: Ship Manifest*")
	SetVar $displaybanner ($displaybanner & " " & $lines & "*")
	SetVar $displaybanner ($displaybanner & " SHIP CLASS      TPW HLD FIGS   SHLDS OFF DEF WAVE   PHO RNG TWP LRS*")
	SetVar $displaybanner ($displaybanner & " " &  $lines & "*")
	
	SetVar $i 1
	If ($banner > 0)
		While ($i <= $banner)
			If ($banner[$i] = "")
				SetVar $banner[$i] " "
			End
			StripText $banner[$i] #13
			SetVar $displaybanner ($displaybanner & " " & $banner[$i] & "*")
			SetVar $i ($i + 1)
		End
		SetVar $displaybanner ($displaybanner &  " " & $lines & "*")
		#SetVar $displaybanner ($displaybanner & "*")
		SetVar $Z_Lib~message $displaybanner
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
Else
	SetVar $Z_Lib~message $scripttitle & ": MANIFEST - Data file NOT found - " & $filename & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
SetVar $displaybanner ""
SetVar $reset TRUE
Return
# WAVER 
:INTCOM_WAVER
KillAllTriggers
If ($PARM1 = "0") or ($PARM1 = "")
	Goto :WAVEBADPARM
End
IsNumber $isnum $PARM1
If ($isnum <> TRUE)
	Goto :WAVEBADPARM
End
If ($PARM1 < 11) or ($PARM1 > SECTORS) or ($PARM1 = STARDOCK)
	Goto :WAVEBADPARM
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOWAVE
End
Send "m" & $PARM1 & "*  za" & $z_wave & "* *  fz" & $z_mowfigs & "*c q * d <  r */"
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
SetVar $Z_Lib~message $scripttitle & ": WAVER - Waved at sector " & $PARM1 & "*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOWAVE
:WAVEBADPARM
SetVar $Z_Lib~message $scripttitle & ": WAVER - Bad parameter!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOWAVE
:NOWAVE
SetVar $reset TRUE
Return
# EE 
:INTCOM_EE
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
End
Gosub :GETSTATS
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOEE
End
If ($cloaks > 0)
	Send "q  y  n  t*  *  *  *" & PASSWORD & "*  *  *  *  *  "
Else
	Send "q  y  t*  *  *  *" & PASSWORD & "*  *  *  *  *  "
End
:EEDONE
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~RETURNTOPLANET
End
:NOEE
SetVar $reset TRUE
Return
# REDSHIPS 
:INTCOM_REDSHIPS
KillAllTriggers
If ($PARM1 = "0")
	LoadVar $z_redships
	If ($z_redships = "0")
		SetVar $ssmsg "None Set!"
	Else
		SetVar $ssmsg $z_redships
	End
Else
	GetWordPos $PARM1 $pos "="
	If ($pos > 0)
		SetVar $z_redships $user_command_line
		SaveVar $z_redships
		SetVar $ssmsg "New Setting: " & $z_redships
		PROCESSIN 1 "[Z]RELOADREDSHIPS[Z]"
	Else
		SetVar $z_redships "0"
		SaveVar $z_redships
		SetVar $ssmsg "New Setting: None Set!"
		PROCESSIN 1 "[Z]RELOADREDSHIPS[Z]"
	End
End

SetVar $Z_Lib~message $scripttitle & ": REDSHIPS - " & $ssmsg & "*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
Return
#
# END INTERNAL COMMANDS---------------------------------------------------------------
#
# HOLOATTACK 
:HOLOATTACK
KillAllTriggers
Gosub :GETSTATS
If ($Scanner <> "2")
	Goto :NOHOLOATTACK
End
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOHOLOATTACK
End
SetVar $warps SECTOR.WARPCOUNT[$current_sector]
SetArray $hashielded 7
SetArray $hatrader 7
SetArray $haalien 7
SetArray $haadjs 7
SetVar $hactr 0
SetVar $x 1
While ($x <= $aliencount)
	SetTextLineTrigger haalien & $x :HAALIEN $aliens[$x]
	SetVar $x ($x + 1)
End
Send "sz h*"
WaitOn "Long Range Scan"
SetTextTrigger ha1 :HANEXT "Sector  :"
SetTextTrigger ha2 :HASHIELD ">>>> (Shielded)"
SetTextTrigger ha3 :HATRADER "Traders :"
SetTextTrigger ha4 :HADONE "Warps to Sector(s) :"
SetTextTrigger ha5 :HADONE "Command [TL="
Pause
:HANEXT
KillTrigger ha1
GetText CURRENTLINE $hasect "Sector  : " " in"
SetVar $hactr ($hactr + 1)
SetVar $haadjs[$hactr] $hasect
SetTextTrigger ha1 :HANEXT "Sector  :"
Pause
:HASHIELD
KillTrigger ha2
SetVar $hashielded[$hactr] TRUE
SetTextTrigger ha2 :HASHIELD ">>>> (Shielded)"
Pause
:HAALIEN
SetVar $haalien[$hactr] TRUE
Pause
:HATRADER
SetVar $hatrader[$hactr] TRUE
SetTextTrigger ha3 :HATRADER "Traders :"
Pause
:HADONE
KillAllTriggers
SetVar $hatradertarget FALSE
SetVar $haalientarget 0
SetVar $hatarget 0
SetVar $x 1
While ($x <= $warps + 1)
	If ($hashielded[$x] <> TRUE)
		GetSectorParameter $haadjs[$x] "FIGSEC" $figged
		If ($figged = TRUE) or (SECTOR.FIGS.QUANTITY[$haadjs[$x]] <= 100)
			GetSectorParameter $haadjs[$x] "MINESEC" $mined
			If (SECTOR.MINES.QUANTITY[$haadjs[$x]] <= 10) or ($mined = TRUE)
				If ($hatrader[$x] = TRUE)
					SetVar $hatarget $haadjs[$x]
					SetVar $hatradertarget TRUE
					SetVar $x $warps + 1
				ElseIf ($haalien[$x] = TRUE)
					SetVar $haalientarget $haadjs[$x]
				End
			End
		End
	End
	SetVar $x ($x + 1)
End
If ($hatarget = "0")
	SetVar $hatarget $haalientarget
End
If ($hatarget <> "0")
	If ($hatarget <> $current_sector)
		Send #145
		WaitOn #145 & #8
		Echo "*" & $boldyellow & "HOLOATTACK: - TARGET found, moving in...*" & $black
		SetVar $target $hatarget
		Gosub :CLEARMOVEOPTIONS
		SetVar $mowmode "MOW"
		Gosub :MOVE
	End
	Gosub :GETSTATS
	If ($current_sector = $hatarget)
		Send #145
		WaitOn #145 & #8
		Echo "*" & $boldyellow & "HOLOATTACK: - Attacking!*" & $black
		Gosub :SHIPCAP
	End
Else
	Send #145
	WaitOn #145 & #8
	Echo "*" & $boldwhite & "HOLOATTACK: - NO viable TARGETS.*" & $black
End
:NOHOLOATTACK
SetArray $hashielded 0
SetArray $hatrader 0
SetArray $haalien 0
SetArray $haadjs 0
SetVar $hactr 0
SetVar $reset TRUE
Return
# BUYUP 
:BUYUP
KillAllTriggers
Gosub :GETSTATS
If ($current_sector <> STARDOCK)
	SetVar $returnsector $current_sector
	If ($z_figtype = "d")
		Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*d"
	Else
		Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*" & $z_figtype & "q * "
	End
	SetSectorParameter $current_sector "FIGSEC" TRUE
	Gosub :CLEARMOVEOPTIONS
	SetVar $z_dockport FALSE
	SetVar $target STARDOCK
	Gosub :TWARPING
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	If ($current_sector <> STARDOCK)
		Echo "**" & $boldred & "Failed to arrive at STARDOCK..**"
		Goto :NOBUYUP
	End
	Send "p sg yg q s p"
	SetTextTrigger getfigs :BUYUPGETFIGS "How many K-3A fighters do you want to buy"
	Send "b"
	Pause
:BUYUPGETFIGS
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*"
	SetTextTrigger getshlds :BUYUPGETSHLDS "How many shield armor points do you want to buy"
	Send "c"
	Pause
:BUYUPGETSHLDS
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "* q qh"
	WaitOn "<Hardware Emporium> So what are you looking for (?)"
	SetTextTrigger buy :BUYUPMINES "How many mines do you want"
	Send "m"
	Pause
:BUYUPMINES
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*"
	SetTextTrigger buy :BUYUPLIMPS "How many mines do you want"
	Send "l"
	Pause
:BUYUPLIMPS
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "* qq "
End
If ($current_sector <> $returnsector)
	SetVar $z_dockport FALSE
	SetVar $target $returnsector
	Gosub :TWARPING
End
:NOBUYUP
Return
# CITATTACK 
#
:CITATTACK
SetVar $Z_Lib~setprompt "CITADEL"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCITKILL
End
Gosub :GETSHIPDATA
Gosub :GETSTATS
Gosub :Z_Lib~CURRENTPLANET
If ($PARM1 <> "on")
	Goto :NOCITKILL
End
SetVar $citkillison TRUE
Gosub :Z_Lib~COMMSON
SetVar $messagemode "R"
SetVar $Z_Lib~message $scripttitle & ": CIT" & $attackmode & " - Active on planet " & $Z_Lib~planetnum & "...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $lcattackmode $attackmode
LowerCase $lcattackmode
:CITKILLWAIT
Echo "**" & $boldwhite & $scripttitle & " - [" & $blinkon & $boldgreen & "CIT" & $attackmode & " ON" & $blinkoff & $boldwhite & "]"
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel CIT" & $attackmode & " : " & $black
:CITKILLWAIT2
SetVar $messagemode "R"
Gosub :CITKILLTRIGGERKILLS
Gosub :SETPULSETRIGGER
SetTextLineTrigger citkillfighit :CITKILLFIGHIT "Deployed Fighters Report Sector " & $current_sector & ":"
SetTextLineTrigger citkillfighit2 :CITKILLFIGHIT "warps into the sector"
SetTextLineTrigger citkillfighit3 :CITKILLFIGHIT "appears in a brilliant flash" 
SetTextLineTrigger citkillfighit4 :CITKILLFIGHIT " lifts off from "
SetTextLineTrigger citkillfighit5 :CITKILLFIGHIT " blasts off from "
SetTextOutTrigger citkillstop :CITKILLSTOP "~"
SetTextOutTrigger citkillstop3 :CITKILLSTOP #8
SetTextLineTrigger citkillstop2 :CITKILLSTOP ($z_botname & " cit" & $lcattackmode & " off")
SetTextLineTrigger citkillstatus :CITKILLSTATUS $z_botname & " status"
SetTextLineTrigger citkillmode :CITKILLMODE $z_botname & " mode"
SetTextLineTrigger citkillmode2 :CITKILLMODE $z_team & " mode"
SetTextLineTrigger citkillreset :CITKILLRESET $z_botname & " reset"
SetTextTrigger cleftprmpt1 :CLEFTPROMPT "Planet command (?=help)"
SetTextTrigger cleftprmpt2 :CLEFTPROMPT "Computer command [TL="
SetTextTrigger cleftprmpt3 :CLEFTPROMPT "Transfer To or From the Treasury (T/F)"
SetTextTrigger cleftprmpt4 :CLEFTPROMPT "What sector do you want to warp this planet to?"
SetTextTrigger cleftprmpt5 :CLEFTPROMPT "Qcannon Control Type :"
SetTextTrigger cleftprmpt6 :CLEFTPROMPT "What level do you want (0-100) ?"
SetTextTrigger cleftprmpt7 :CLEFTPROMPT "Corporate command [TL="
SetTextTrigger cleftprmpt8 :CLEFTPROMPT "[Pause]"
SetTextTrigger cleftprmpt9 :CLEFTPROMPT "Are you sure you want to force the other ships to blast off?"
SetTextTrigger cleftprmpt10 :CLEFTPROMPT "Transfer To or From the Planetary Shield System (T/F) [T]?"
SetTextTrigger cleftprmpt11 :CLEFTPROMPT "Beam to what sector? (U=Upgrade Q=Quit)"
SetTextTrigger cleftprmpt12 :CLEFTPROMPT "Do you want to change this setting? (Y/N)"
SetTextTrigger cleftprmpt13 :CLEFTPROMPT "Exchange ships:"
Pause
:CITKILLTRIGGERKILLS
KillTrigger pulse
KillTrigger citkillfighit
KillTrigger citkillfighit2
KillTrigger citkillfighit3
KillTrigger citkillfighit4
KillTrigger citkillfighit5
KillTrigger citkillstop
KillTrigger citkillstop2
KillTrigger citkillstop3
KillTrigger citkillstatus
KillTrigger citkillreset
KillTrigger cleftprmpt1
KillTrigger cleftprmpt2
KillTrigger cleftprmpt3
KillTrigger cleftprmpt4
KillTrigger cleftprmpt5
KillTrigger cleftprmpt6
KillTrigger cleftprmpt7
KillTrigger cleftprmpt8
KillTrigger cleftprmpt9
KillTrigger cleftprmpt10
KillTrigger cleftprmpt11
KillTrigger cleftprmpt12
KillTrigger cleftprmpt13
KillTrigger citkillmode
KillTrigger citkillmode2
Return
:CITKILLMODE
Gosub :CITKILLTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :CITKILLWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :CITKILLWAIT
End
Gosub :INTCOM_MODE
Goto :CITKILLWAIT
:CITKILLSTATUS
Gosub :CITKILLTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :CITKILLWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :CITKILLWAIT
End
Gosub :INTCOM_STATUS
Goto :CITKILLWAIT
:CITKILLRESET
Gosub :CITKILLTRIGGERKILLS
SetVar $line CURRENTLINE
CutText $line $ck 1 1
CutText $line $sender 3 6
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "'") and ($ck <> "P")
	Goto :CITKILLWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :CITKILLWAIT
End
Gosub :INTCOM_RESET
Goto :NOCITKILL
:CLEFTPROMPT
Gosub :CITKILLTRIGGERKILLS
SetTextTrigger atprompt :CITKILLPAUSEMODE "Citadel command (?="
SetTextOutTrigger citkillstop :CITKILLSTOP "~"
SetTextOutTrigger citkillstop3 :CITKILLSTOP #8
SetTextLineTrigger citkillstop2 :CITKILLSTOP2 ($z_botname & " cit" & $lcattackmode & " off")
:DISPLAYCITKILLPAUSED
KillTrigger citkillpaused
Echo "**" & $boldyellow & $scripttitle & " - CIT" & $attackmode & " is in " & $blinkon & $boldmagenta & "PAUSE MODE" & $blinkoff & $boldyellow &". Return to the Citadel to UNPAUSE."
Echo "*" & $boldcyan & "Press " & $boldred & "[" & $boldyellow & "~" & $boldred & "]" & $boldcyan & " to cancel CIT" & $attackmode & " : "
#Send "*"
#Send #145
#WaitFor #145 & #8
SetTextTrigger citkillpaused :DISPLAYCITKILLPAUSED "elp"
Pause
:CITKILLPAUSEMODE
KillTrigger citkillpaused
Killtrigger atprompt
KillTrigger citkillstop
KillTrigger citkillstop2
KillTrigger citkillfighit
KillTrigger citkillfighit2
KillTrigger citkillfighit3
Goto :CITKILLWAIT
:CITKILLSTOP
Killtrigger atprompt
KillTrigger citkillpaused
Gosub :CITKILLTRIGGERKILLS
SetVar $Z_Lib~message $scripttitle & ": CIT" & $attackmode & " - Standing down...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": CIT" & $attackmode & " - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOCITKILL
:CITKILLSTOP2
Killtrigger atprompt
KillTrigger citkillpaused
Gosub :CITKILLTRIGGERKILLS
GetWord CURRENTLINE $ck 1
GetWord CURRENTLINE $sender 2
GetLength $sender $len
If ($len > 6)
	CutText $sender $sender 1 6
End
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
If ($ck <> "R") and ($ck <> "P")
	Goto :CITKILLWAIT
End
Gosub :CHECKCORPY
If ($isacorpy = FALSE)
	Goto :CITKILLWAIT
End
SetVar $Z_Lib~message $scripttitle & ": CIT" & $attackmode & " - Standing down...*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Lib~SYNC
Echo "**" & $boldwhite & $scripttitle & ": CIT" & $attackmode & " - Standing down...**"
Send #145
WaitFor #145 & #8
Goto :NOCITKILL
:CITKILLFIGHIT
KillTrigger citkillpaused
Gosub :CITKILLTRIGGERKILLS
Gosub :SHIPCAP
Goto :CITKILLWAIT
:NOCITKILL
KillAllTriggers
Return
# SHIPSTATS 
# START FROM THE CITADEL or COMMAND PROMPT 
:SHIPSTATS
KillAllTriggers
SetVar $line 0
SetArray $line 0
SetVar $nextpage FALSE
SetVar $nextpage2 FALSE
SetVar $sstats 0
SetArray $sstatsclass 0
SetArray $sstatsoffodds 0
SetArray $sstatsdefodds 0
SetArray $sstatswave 0
SetArray $sstatsshields 0
SetArray $sstatsgbonus 0
SetArray $sstatsbutton 0
SetArray $sstatsmaxfigs 0
SetArray $sstatstpw 0
SetArray $sstatslrs 0
SetArray $sstatstwarp 0
SetArray $sstatsholds 0
SetArray $sstatsrange 0
SetArray $sstatsphotons 0

SetTextTrigger sstats1 :SSTATS1 "Which ship are you interested in (?=List)"
Send "c c"
Pause
:SSTATS1
KillAllTriggers
SetTextLineTrigger sstats2 :SSTATS2 ">"
Send "?"
Pause
:SSTATS2
KillAllTriggers
SetVar $line ($line + 1)
SetVar $line[$line] CURRENTLINE
GetWord $line[$line] $word 1
If ($word <> "<+>") and ($word <> "<Q>") and ($word <> "") and ($word <> "0")
	SetVar $sstats ($sstats + 1)
	GetText  $line[$line] $sstatsbutton[$sstats] "<" ">"
	CutText $line[$line] $sstatsclass[$sstats] 5 999
	SetVar $Z_Strings~trimstring $sstatsclass[$sstats]
	Gosub :Z_Strings~RTRIM
	SetVar $sstatsclass[$sstats] $Z_Strings~trimstring
End
If ($word = "<R>")
	SetVar $nextpage2 TRUE
End
If ($word = "<+>") and ($nextpage2 = TRUE)
	WaitOn "<Q>"
	SetVar $nextpage TRUE
	SetVar $nextpage2 FALSE
	Send "+ "
	Goto :SSTATS1
ElseIf ($word <> "<Q>")
	SetTextLineTrigger sstats2 :SSTATS2 ">"
	Pause
End
KillAllTriggers
SetTextTrigger sstats3 :SSTATS3 "Which ship are you interested in (?=List)"
Send "q c"
Pause
:SSTATS3
KillAllTriggers
SetVar $x 1
While ($x <= $sstats)
	KillAllTriggers
	SetTextLineTrigger sstatsshields :SSTATSSHIELDS "Maximum Shields:"
	SetTextLineTrigger sstatsoffodds :SSTATSOFFODDS "Offensive Odds:"
	SetTextLineTrigger sstatsdefodds :SSTATSDEFODDS "Defensive Odds:"
	SetTextLineTrigger sstatslrs :SSTATSLRS "Long Range Scan:"
	SetTextLineTrigger sstatswave :SSTATSWAVE "Max Figs Per Attack:"
	SetTextLineTrigger sstatsrange :SSTATSRANGE "Transport Range:"
	LowerCase $sstatsbutton[$x]
	Send $sstatsbutton[$x]
	Pause
:SSTATSSHIELDS
	GetText CURRENTLINE & "!!!" $sstatsshields[$x] "Maximum Shields:" "!!!"
	Pause
:SSTATSOFFODDS
	GetText CURRENTLINE $sstatsoffodds[$x] "Offensive Odds:" ":"
	GetText CURRENTLINE $sstatsmaxfigs[$x] "Max Fighters:" "Offensive Odds:"
	Pause
:SSTATSDEFODDS
	GetText CURRENTLINE $sstatsdefodds[$x] "Defensive Odds:" ":"
	GetText CURRENTLINE $sstatstpw[$x] "Turns Per Warp:" "Defensive Odds:"
	Pause
:SSTATSLRS
	GetText CURRENTLINE & "!!!" $sstatslrs[$x] "Long Range Scan:" "!!!"
	Pause
:SSTATSWAVE
	GetText CURRENTLINE $sstatswave[$x] "Max Figs Per Attack:" "TransWarp"
	GetText CURRENTLINE $sstatstwarp[$x] "TransWarp Drive:" "Planet Scanner:"
	Pause
:SSTATSRANGE
	KillAllTriggers
	GetText CURRENTLINE $sstatsholds[$x] "Maximum Holds:" "Transport Range:"
	GetText CURRENTLINE $sstatsrange[$x] "Transport Range:" "Photon Missiles:"
	GetText CURRENTLINE & "!!!" $sstatsphotons[$x] "Photon Missiles:" "!!!"

	StripText $sstatsshields[$x] ","
	StripText $sstatsshields[$x] " "
	StripText $sstatsoffodds[$x] "."
	StripText $sstatsdefodds[$x] "."
	StripText $sstatsoffodds[$x] " "
	StripText $sstatsdefodds[$x] " "
	StripText $sstatswave[$x] " "
	StripText $sstatswave[$x] ","
	
	StripText $sstatsmaxfigs[$x] " "
	StripText $sstatsmaxfigs[$x] ","
	StripText $sstatstpw[$x] " "
	StripText $sstatslrs[$x] " "
	StripText $sstatstwarp[$x] " "
	StripText $sstatsholds[$x] " "
	StripText $sstatsrange[$x] " "
	StripText $sstatsphotons[$x] " "
	
	If ($sstatsbutton[$x] = "r") and ($nextpage = TRUE)
		Send "+"
	End
	SetVar $x ($x + 1)
End
:SSTATSDONE
KillAllTriggers
Send "q q "
GetTime $sstatstime "dd/mm/yyyy hh:nn"
Delete GAMENAME & "_Z-SHIPSTATS.cfg"
Write GAMENAME & "_Z-SHIPSTATS.cfg" "Z-Bot Ship Stats - " & $sstatstime
Write GAMENAME & "_Z-SHIPSTATS.cfg" "SHIP CLASS                              OFF DEF WAVE  SHIELDS"
Write GAMENAME & "_Z-SHIPSTATS.cfg" ""
SetVar $x 1
While ($x <= $sstats)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 40
	ReplaceText $sstatsclass[$x] "*" #42
	SetVar $Z_Strings~unpadded $sstatsclass[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp1 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsoffodds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp2 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsdefodds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp3 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $sstatswave[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp4 $Z_Strings~padded
	Write GAMENAME & "_Z-SHIPSTATS.cfg" $temp1 & $temp2 & $temp3 & $temp4 & $sstatsshields[$x]
	SetVar $x ($x + 1)
End
Send #145
WaitOn #145 & #8
Gosub :SSTATSGBONUS
Delete GAMENAME & "_Z-MANIFEST.txt"
SetVar $x 1
While ($x <= $sstats)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 15
	ReplaceText $sstatsclass[$x] "*" #42
	SetVar $Z_Strings~unpadded $sstatsclass[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp1 $Z_Strings~padded
	GetLength $temp1 $len
	If ($len > 15)
		CutText $temp1 $temp1 1 15
	End
	SetVar $temp1 ($temp1 & " ")
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatstpw[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp2 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsholds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp3 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 7
	SetVar $Z_Strings~unpadded $sstatsmaxfigs[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp4 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 7
	SetVar $Z_Strings~unpadded $sstatsmaxfigs[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp4 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $sstatsshields[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp5 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsoffodds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp6 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsdefodds[$x]
	If ($sstatsgbonus[$x] = TRUE)
		SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
	End
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp7 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 7
	SetVar $Z_Strings~unpadded $sstatswave[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp8 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsphotons[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp9 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatsrange[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp10 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatstwarp[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp11 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $sstatslrs[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp12 $Z_Strings~padded
	Write GAMENAME & "_Z-MANIFEST.txt" $temp1 & $temp2 & $temp3 & $temp4 & $temp5 & $temp6 & $temp7 & $temp8 & $temp9 & $temp10 & $temp11 & $temp12
	SetVar $x ($x + 1)
End
Delete "_ck_" & GAMENAME & ".ships"
Write "_ck_" & GAMENAME & ".ships" "SHIP CLASS                                                   OF DF WAVE  SHIELDS"
SetVar $x 1
While ($x <= $sstats)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 61
	ReplaceText $sstatsclass[$x] "*" #42
	SetVar $Z_Strings~unpadded $sstatsclass[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp1 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 3
	SetVar $Z_Strings~unpadded $sstatsoffodds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp2 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 3
	SetVar $Z_Strings~unpadded $sstatsdefodds[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp3 $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $sstatswave[$x]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $temp4 $Z_Strings~padded
	Write "_ck_" & GAMENAME & ".ships" $temp1 & $temp2 & $temp3 & $temp4 & $sstatsshields[$x]
	SetVar $x ($x + 1)
End
Gosub :GETALIENS
:ENDSSTATS
Send #145
WaitOn #145 & #8
Echo "*"  & $boldgreen & $scripttitle & ": SHIPSTATS - Complete!*" & $black
SetVar $line 0
SetArray $line 0
SetArray $sstatsbutton 0
SetVar $nextpage FALSE
Return
# LOADSTATS 
# ENSURE the GAMENAME_Z-SHIPSTATS.cfg file exists. 
:LOADSTATS
Echo "**"  & $boldgreen & $scripttitle & ": SHIPSTATS - Loading Ship Schematics...*"
SetVar $sstats 0
SetArray $sstatsclass 0
SetArray $sstatsoffodds 0
SetArray $sstatsdefodds 0
SetArray $sstatswave 0
SetArray $sstatsshields 0
SetArray $sstatsgbonus 0
ReadToArray GAMENAME & "_Z-SHIPSTATS.cfg" $array
SetVar $x 3
While ($x <= $array)
	If ($array[$x] <> "")
		SetVar $sstats ($sstats + 1)
		CutText $array[$x] $sstatsclass[$sstats] 1 40
		SetVar $Z_Strings~trimstring $sstatsclass[$sstats]
		Gosub :Z_Strings~RTRIM
		SetVar $sstatsclass[$sstats] $Z_Strings~trimstring
		CutText $array[$x] $sstatsoffodds[$sstats] 41 4
		StripText $sstatsoffodds[$sstats] " "
		CutText $array[$x] $sstatsdefodds[$sstats] 45 4
		StripText $sstatsdefodds[$sstats] " "
		CutText $array[$x] $sstatswave[$sstats] 49 6
		StripText $sstatsdefodds[$sstats] " "
		CutText $array[$x] $sstatsshields[$sstats] 55 999
		StripText $sstatsshields[$sstats] " "
	End
	SetVar $x ($x + 1)
End
Echo $boldgreen & "Normal Ship Stats file processed."
FileExists $fileexists GAMENAME & "_Z-ALIENSHIPSTATS.cfg"
If ($fileexists = TRUE)
	Echo "*" & $boldcyan & "Alien Ships file found! Processing..."
	SetArray $array 0
	ReadToArray GAMENAME & "_Z-ALIENSHIPSTATS.cfg" $array
	SetVar $x 1
	While ($x <= $array)
		If ($array[$x] <> "")
			SetVar $sstats ($sstats + 1)
			CutText $array[$x] $sstatsclass[$sstats] 1 40
			SetVar $Z_Strings~trimstring $sstatsclass[$sstats]
			Gosub :Z_Strings~RTRIM
			SetVar $sstatsclass[$sstats] $Z_Strings~trimstring
			CutText $array[$x] $sstatsoffodds[$sstats] 41 4
			StripText $sstatsoffodds[$sstats] " "
			CutText $array[$x] $sstatsdefodds[$sstats] 45 4
			StripText $sstatsdefodds[$sstats] " "
			CutText $array[$x] $sstatswave[$sstats] 49 6
			StripText $sstatsdefodds[$sstats] " "
			CutText $array[$x] $sstatsshields[$sstats] 55 999
			StripText $sstatsshields[$sstats] " "
		End
		SetVar $x ($x + 1)
	End
Else
	Echo "*" & $boldyellow & GAMENAME & "_Z-ALIENSHIPSTATS.cfg file NOT found."
End
Gosub :SSTATSGBONUS
SetArray $array 0
SetVar $aliencount 0
ReadToArray GAMENAME & "_Z-ALIENS.cfg" $array
If ($array[1] <> "NO ALIEN ACTIVITY DETECTED.")
	SetVar $x 1
	While ($x <= $array)
		GetLength $array[$x] $len
		If ($len = 9)
			SetVar $aliencount ($aliencount + 1)
			SetVar $aliens[$aliencount] $array[$x]
		End
		SetVar $x ($x + 1)
	End
	Echo $boldgreen & $aliencount & " alien species detected.*"
Else
	Echo $yellow & "NO alien activity detected.*"
End
Echo $boldwhite & "Complete.*" & $black
SetArray $array 0
Return
# SSTATSADD 
:SSTATSADD
SetVar $sstats ($sstats + 1)
SetVar $sstatsclass[$sstats] $shipclass
ReplaceText $sstatsclass[$sstats] "*" #42
SetVar $sstatsoffodds[$sstats] $offodds
SetVar $sstatsdefodds[$sstats] $defodds
SetVar $sstatswave[$sstats] $z_wave
SetVar $sstatsshields[$sstats] $z_shields
SetVar $sstatsmaxfigs[$sstats] $z_maxfigs
SetVar $sstatstpw[$sstats] $tpw
SetVar $sstatslrs[$sstats] $lrs
SetVar $sstatstwarp[$sstats] $transwarp
SetVar $sstatsholds[$sstats] $maxholds
SetVar $sstatsrange[$sstats] $transrange
SetVar $sstatsphotons[$sstats] $photonsok
Gosub :SSTATSGBONUS
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 40
SetVar $Z_Strings~unpadded $sstatsclass[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp1 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsoffodds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp2 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsdefodds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp3 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $sstatswave[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp4 $Z_Strings~padded
Write GAMENAME & "_Z-ALIENSHIPSTATS.cfg" $temp1 & $temp2 & $temp3 & $temp4 & $sstatsshields[$sstats]
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 61
SetVar $Z_Strings~unpadded $sstatsclass[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp1 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 3
SetVar $Z_Strings~unpadded $sstatsoffodds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp2 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 3
SetVar $Z_Strings~unpadded $sstatsdefodds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp3 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $sstatswave[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp4 $Z_Strings~padded
Write "_ck_" & GAMENAME & ".ships" $temp1 & $temp2 & $temp3 & $temp4 & $sstatsshields[$sstats]
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 15
ReplaceText $sstatsclass[$sstats] "*" #42
SetVar $Z_Strings~unpadded $sstatsclass[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp1 $Z_Strings~padded
GetLength $temp1 $len
If ($len > 15)
	CutText $temp1 $temp1 1 15
End
SetVar $temp1 ($temp1 & " ")
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatstpw[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp2 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsholds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp3 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 7
SetVar $Z_Strings~unpadded $sstatsmaxfigs[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp4 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 7
SetVar $Z_Strings~unpadded $sstatsmaxfigs[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp4 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 6
SetVar $Z_Strings~unpadded $sstatsshields[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp5 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsoffodds[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp6 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsdefodds[$sstats]
If ($sstatsgbonus[$sstats] = TRUE)
		SetVar $Z_Strings~unpadded ($Z_Strings~unpadded & #42)
	End
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp7 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 7
SetVar $Z_Strings~unpadded $sstatswave[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp8 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsphotons[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp9 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatsrange[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp10 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatstwarp[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp11 $Z_Strings~padded
SetVar $Z_Strings~padchar " "
SetVar $Z_Strings~padlen 4
SetVar $Z_Strings~unpadded $sstatslrs[$sstats]
SetVar $Z_Strings~rpad TRUE
Gosub :Z_Strings~PAD
SetVar $temp12 $Z_Strings~padded
Write GAMENAME & "_Z-MANIFEST.txt" $temp1 & $temp2 & $temp3 & $temp4 & $temp5 & $temp6 & $temp7 & $temp8 & $temp9 & $temp10 & $temp11 & $temp12
Echo "**" & $boldgreen & $scripttitle & ": SHIPSTATS - Ship added to database.*" & $black
Return
# SSTATSGBONUS 
:SSTATSGBONUS
FileExists $fileexists "gbonus-ships.txt"
SetVar $gbonusships ""
If ($fileexists = TRUE)
	SetArray $array 0
	ReadToArray "gbonus-ships.txt" $array
	SetVar $x 1
	While ($x <= $sstats)
		SetVar $y 1
		While ($y <= $array)
			If ($sstatsclass[$x] = $array[$y])
				SetVar $sstatsgbonus[$x] TRUE
				SetVar $gbonusships ($gbonusships & $sstatsclass[$x] & "*")
				SetVar $y $array
			End
			SetVar $y ($y + 1)
		End
		SetVar $x ($x + 1)
	End
	Echo "*" & $boldgreen & "GBONUS file found and processed.*"
	If ($gbonusships <> "")
		Echo $boldgreen & "The following ships have the defender bonus:*" & $boldcyan & $gbonusships & $black
	Else
		Echo $boldyellow & "No ships found to have the defender bonus.*" & $black
	End
Else
	Echo "*" & $boldred & "GBONUS file  gbonus-ships.txt  NOT FOUND!*" & $black
End
SetArray $array 0
SetVar $gbonusships ""
Return
# GETALIENS 
:GETALIENS
SetVar $aliencount 0
SetArray $line 0
SetTextLineTrigger getaliens1 :GETALIENS1 " are on the move!"
SetTextTrigger getaliens2 :GETALIENS2 #179 & "Turns"
Send "#/"
Pause
:GETALIENS1
SetVar $aliencount ($aliencount + 1)
SetVar $line[$aliencount] CURRENTLINE
SetTextLineTrigger getaliens1 :GETALIENS1 "are on the move!"
Pause
:GETALIENS2
KillTrigger getaliens1
Delete GAMENAME & "_Z-ALIENS.cfg"
If ($aliencount > 0)
	SetVar $x 1
	While ($x <= $aliencount)
		GetText $line[$x] $aliens[$x] "The " " are on the move!"
		SetVar $Z_Strings~trimstring $aliens[$x]
		Gosub :Z_Strings~RTRIM
		SetVar $aliens[$x] $Z_Strings~trimstring
		GetLength $aliens[$x] $len
		If ($len > 8)
			CutText $aliens[$x] $aliens[$x] 1 8
		End
		GetLength $aliens[$x] $len
		CutText $aliens[$x] $temp ($len - 2) 3
		If ($temp = "ies")
			CutText $aliens[$x] $aliens[$x] 1 ($len - 3)
			SetVar $aliens[$x] ($aliens[$x] & "y")
		End
		GetLength $aliens[$x] $len
		CutText $aliens[$x] $temp ($len - 1) 2
		If ($temp <> "ss")
			CutText $aliens[$x] $temp $len 1
			If ($temp = "s")
				CutText $aliens[$x] $aliens[$x] 1 ($len - 1)
			End
		End
		If ($aliens[$x] = "Treasury")
			SetVar $aliens[$x] "Treasure"
		End
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 8
		SetVar $Z_Strings~unpadded $aliens[$x]
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		SetVar $aliens[$x] $Z_Strings~padded
		SetVar $aliens[$x] ($aliens[$x] & ":")
		Write GAMENAME & "_Z-ALIENS.cfg" $aliens[$x]
		SetVar $x ($x + 1)
	End
	Echo "*" & $boldgreen & $aliencount & " alien species detected.*"
Else
	Write GAMENAME & "_Z-ALIENS.cfg" "NO ALIEN ACTIVITY DETECTED."
	Echo "*" & $yellow & "NO alien activity detected.*"
End
SetArray $line 0
Return
# SHIPCAP 
:SHIPCAP
SetArray $targetfigs 0
SetArray $targetname 0
SetArray $targetdef 0
SetArray $targetdefshieldonly 0
SetArray $targetodds 0
SetArray $targetoff 0
SetArray $targetshiptype 0
SetVar $killnottargets 0
SetVar $killtargets 0
SetVar $killattackmacro ""
SetVar $noattackmacro ""
Gosub :GETSTATS
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $shipcapprompt 1 7
If ($shipcapprompt = "Citadel")
	Gosub :Z_Lib~CURRENTPLANET
	SetVar $shipcaponplanet TRUE
	SetVar $nomessage TRUE
	SetVar $PARM1 "0"
	Gosub :INTCOM_REFILL
Else
	SetVar $shipcaponplanet FALSE
End
:SHIPCAPSTARTLOOP
SetVar $scships FALSE
SetVar $sctraders FALSE
SetVar $scfeds FALSE
SetVar $scaliens FALSE
SetVar $killtargets 0
SetVar $killnottargets 0
SetVar $targetisanalien FALSE
SetVar $sccorpy 0
SetVar $scalienct 0
SetVar $scshipct 0
SetTextLineTrigger shipcapfeds :SHIPCAPFEDS "Federals:"
SetVar $x 1
While ($x <= $aliencount)
	SetTextLineTrigger shipcapalien & $x :SHIPCAPALIEN $aliens[$x]
	SetVar $x ($x + 1)
End
SetTextLineTrigger shipcapcheck :SHIPCAPCHECK "Traders :"
SetTextLineTrigger shipcapnotrader1 :SHIPCAPNOTRADER2 "Ships   :"
SetTextLineTrigger shipcapnotrader2 :SHIPCAPNOTRADER "Fighters:"
SetTextLineTrigger shipcapnotrader3 :SHIPCAPNOTRADER "Mines   :"
SetTextLineTrigger shipcapnotrader4 :SHIPCAPNOTRADER "Warps to Sector(s) :"
SetTextLineTrigger shipcapnotrader5 :SHIPCAPNOTRADER "Citadel treasury contains"
SetTextTrigger shipcapnotrader6 :SHIPCAPNOTRADER "elp)"
SetTextLineTrigger shipcapisbeacon :SHIPCAPISBEACON "Beacon  :"
SetTextTrigger shipcapenemymine :SHIPCAPENEMYMINE "Mined Sector: Do you wish to Avoid this sector in the future? (Y/N)"
If ($shipcaponplanet = TRUE)
	Send "s"
Else
	Send "*"
End
Pause
:SHIPCAPSTARTLOOP2
SetTextLineTrigger shipcapfeds :SHIPCAPFEDS "Federals:"
SetVar $x 1
While ($x <= $aliencount)
	SetTextLineTrigger shipcapalien & $x :SHIPCAPALIEN $aliens[$x]
	SetVar $x ($x + 1)
End
SetTextLineTrigger shipcapcheck :SHIPCAPCHECK "Traders :"
SetTextLineTrigger shipcapnotrader1 :SHIPCAPNOTRADER2 "Ships   :"
SetTextLineTrigger shipcapnotrader2 :SHIPCAPNOTRADER "Fighters:"
SetTextLineTrigger shipcapnotrader3 :SHIPCAPNOTRADER "Mines   :"
SetTextLineTrigger shipcapnotrader4 :SHIPCAPNOTRADER "Warps to Sector(s) :"
SetTextLineTrigger shipcapnotrader5 :SHIPCAPNOTRADER "Citadel treasury contains"
SetTextTrigger shipcapnotrader6 :SHIPCAPNOTRADER "elp)"
SetTextLineTrigger shipcapisbeacon :SHIPCAPISBEACON "Beacon  :"
SetTextTrigger shipcapenemymine :SHIPCAPENEMYMINE "Mined Sector: Do you wish to Avoid this sector in the future? (Y/N)"
If ($scfeds = TRUE)
	SetTextLineTrigger shipcapfedsa :SHIPCAPFEDS ", w/"
ElseIf ($scaliens = TRUE)
	SetTextLineTrigger shipcapaliens :SHIPCAPALIENS ", w/"
ElseIf ($sctraders = TRUE)
	SetTextLineTrigger shipcapchecka :SHIPCAPCHECK ", w/"
ElseIf ($scships = TRUE)
	SetTextLineTrigger shipcapnotrader1a :SHIPCAPNOTRADER2 ", w/"
End
Pause
:SHIPCAPKILLTRIGGERS
SetVar $x 1
While ($x <= $aliencount)
	KillTrigger shipcapalien & $x
	SetVar $x ($x + 1)
End
KillTrigger shipcapfeds
KillTrigger shipcapfedsa
KillTrigger shipcapaliens
KillTrigger shipcapchecka
KillTrigger shipcapnotrader1a
KillTrigger shipcapcheck
KillTrigger shipcapshipfigs
KillTrigger shipcaptrader
KillTrigger shipcapnotrader1
KillTrigger shipcapnotrader2
KillTrigger shipcapnotrader3
KillTrigger shipcapnotrader4
KillTrigger shipcapnotrader5
KillTrigger shipcapnotrader6
KillTrigger shipcapisbeacon
KillTrigger shipcapenemymine
Return
:SHIPCAPALIENS
Gosub :SHIPCAPKILLTRIGGERS
SetVar $scalienct ($scalienct + 1)
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPFEDS
Gosub :SHIPCAPKILLTRIGGERS
SetVar $killnottargets ($killnottargets + 1)
SetVar $scfeds TRUE
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPALIEN
Gosub :SHIPCAPKILLTRIGGERS
SetVar $scfeds FALSE
SetVar $scaliens TRUE
SetVar $scalienct 1
If ($killtargets < 1)
	SetVar $line CURRENTLINE
	GetWordPos $line $pos ", w/ "
	GetWord $line $word 1
	StripText $word ":"
	If ($word = "Ships")
		Goto :SHIPCAPNOTRADER2
	End
	If ($word = "Fighters") or ($word = "Mines") or ($word = "Warps") or ($word = "Citadel")
		Goto :SHIPCAPNOTRADER
	End
	If ($pos > 0)
		SetVar $killtargets 1
		SetVar $targetisanalien TRUE
		GetText $line $targetfigs[$killtargets] "w/ " " ftrs,"
		StripText $targetfigs[$killtargets] ","
		StripText $targetfigs[$killtargets] " "
		CutText $line $targetname[$killtargets] 1 ($pos - 1)
		SetVar $sctraders FALSE
	End
End
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPENEMYMINE
SetVar $scfeds FALSE
Gosub :SHIPCAPKILLTRIGGERS
Send "n"
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPISBEACON
Gosub :SHIPCAPKILLTRIGGERS
SetVar $killnottargets ($killnottargets + 1)
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPCHECK
Gosub :SHIPCAPKILLTRIGGERS
SetVar $scfeds FALSE
SetVar $scaliens FALSE
SetVar $line CURRENTLINE
GetWordPos $line $pos ", w/ "
GetWord $line $word 1
StripText $word ":"
If ($word = "Ships")
	Goto :SHIPCAPNOTRADER2
End
If ($word = "Fighters") or ($word = "Mines") or ($word = "Warps") or ($word = "Citadel")
	Goto :SHIPCAPNOTRADER
End
If ($pos > 0)
	SetVar $needshipdata FALSE
	GetText $line $killcorp "[" "]"
	IsNumber $isnum $killcorp
	If ($isnum = TRUE)
		If ($killcorp = $z_corp) and ($z_corp <> 0)
			SetVar $killnottargets ($killnottargets + 1)
			SetVar $sccorpy ($sccorpy + 1)
		Else
			If ($targetisanalien = TRUE)
				SetVar $killtargets 0
			End
			SetVar $targetisanalien FALSE
			SetVar $killtargets ($killtargets + 1)
			SetVar $needshipdata TRUE
			GetText $line $targetfigs[$killtargets] "w/ " " ftrs,"
			StripText $targetfigs[$killtargets] ","
			StripText $targetfigs[$killtargets] " "
			CutText $line $targetname[$killtargets] 1 ($pos - 1)
			ReplaceText $targetname[$killtargets] "Traders :" "         "
		End
	Else
		If ($targetisanalien = TRUE)
			SetVar $killtargets 0
		End
		SetVar $targetisanalien FALSE
		SetVar $killtargets ($killtargets + 1)
		SetVar $needshipdata TRUE
		GetText $line $targetfigs[$killtargets] "w/ " " ftrs,"
		StripText $targetfigs[$killtargets] ","
		StripText $targetfigs[$killtargets] " "
		CutText $line $targetname[$killtargets] 1 ($pos - 1)
		ReplaceText $targetname[$killtargets] "Traders :" "         "
	End
	SetVar $sctraders TRUE
	If ($needshipdata = TRUE)
		SetTextLineTrigger killshiptype :SHIPCAPSHIPTYPE " in "
	End
End
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPSHIPTYPE
Gosub :SHIPCAPKILLTRIGGERS
SetVar $needshipdata FALSE
SetVar $line CURRENTLINE
GetText $line $targetship[$killtargets] "(" ")"
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPNOTRADER
Gosub :SHIPCAPKILLTRIGGERS
If ($killtargets > 0)
	If ($targetisanalien = TRUE)
		Gosub :GETSTATS
		SetVar $j 1
		While ($j <= $sstats)
			GetWordPos $shipclass $pos2 $sstatsclass[$j]
			If ($pos2 <> "0")
				SetVar $myodds $sstatsoffodds[$j]
				SetVar $j $sstats
			End
			SetVar $j ($j + 1)
		End
		If ($targetfigs[1] > 0)
			SetPrecision 3
			SetVar $alienwave (((($targetfigs[1] * 10) / 100) * 99) / $myodds)
			SetPrecision 0
			SetVar $Z_Lib~number $alienwave
			Gosub :Z_Lib~ROUND
			SetVar $alienwave $Z_Lib~int
			If ($alienwave < 1)
				SetVar $alienwave 1
			ElseIf ($alienwave > $z_wave)
				SetVar $alienwave $z_wave
			End
		Else
			SetVar $alienwave 1
		End
		SetVar $noattackmacro ""
		SetVar $killattackmacro ""
		SetVar $killnottargets ($killnottargets - $scshipct)
		SetVar $i 1
		While ($i <= $killnottargets)
			SetVar $noattackmacro ($noattackmacro & "n")
			SetVar $i ($i + 1)
		End
		SetVar $killattackmacro ($killattackmacro & "a t ")
		SetVar $killattackmacro ($killattackmacro & $noattackmacro)
		SetVar $killattackmacro ($killattackmacro & "y q z " & $alienwave & "n y * ")
		If ($figs >= $alienwave)
			Send #145
			WaitOn #145 & #8
			Echo "***" & $boldgreen & "SECURITY: TARGETING " & $targetname[1] & "!***" & $black
			If ($shipcapprompt = "Citadel")
				Send "q q " & $killattackmacro 
			Else
				Send $killattackmacro 
			End
:SHIPCAPBUZZ
			Send #145
			WaitOn #145 & #8
			Echo $boldwhite & "Buzzing... [~]- Abort" & $black
			SetTextOutTrigger shipcapabort :SHIPCAPABORT "~"
			SetTextOutTrigger shipcapabort2 :SHIPCAPABORT #8
			Send "*"
			WaitOn "<Re-Display>"
			SetTextLineTrigger shipcapgotalien :SHIPCAPGOTALIEN $targetname[1]
			SetTextTrigger shipcapaliengone :SHIPCAPALIENGONE "Command [TL="
			Pause
:SHIPCAPABORT
			KillTrigger shipcapaliengone
			KillTrigger shipcapgotalien
			KillTrigger shipcapabort
			KillTrigger shipcapabort2
			If ($shipcapprompt = "Citadel")
				Gosub :Z_Lib~RETURNTOPLANET
				SetVar $nomessage TRUE
				SetVar $PARM1 "0"
				Gosub :INTCOM_REFILL
			End
			Send #145
			WaitFor #145 & #8
			Echo "*" & $boldred & "SECURITY: ABORTED by user!*" & $black
			Goto :SHIPCAPEND
:SHIPCAPGOTALIEN
			KillTrigger shipcapabort
			KillTrigger shipcapabort2
			KillTrigger shipcapaliengone
			KillTrigger shipcapgotalien
			Gosub :GETSTATS
			If ($figs > 1)
				SetVar $killattackmacro "a t "
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z 1 n y *")
				Send $killattackmacro 
				Send #145
				WaitOn #145 & #8
				Goto :SHIPCAPBUZZ
			Else
				If ($shipcapprompt = "Citadel")
					Gosub :Z_Lib~RETURNTOPLANET
					SetVar $nomessage TRUE
					KillAllTriggers
					SetVar $PARM1 "0"
					Gosub :INTCOM_REFILL
				End
				Send #145
				WaitFor #145 & #8
				Goto :SHIPCAPEND
			End
:SHIPCAPALIENGONE
			KillTrigger shipcapabort
			KillTrigger shipcapabort2
			KillTrigger shipcapgotalien
			KillTrigger shipcapaliengone
			Send #145
			WaitOn #145 & #8
			Echo "***" & $boldwhite & "SECURITY: ALIEN - " & $targetname[1] & " is GONE!***" & $black
			If ($shipcapprompt = "Citadel")
				Gosub :Z_Lib~RETURNTOPLANET
				SetVar $nomessage TRUE
				SetVar $PARM1 "0"
				Gosub :INTCOM_REFILL
			End
			Send #145
			WaitFor #145 & #8
			Goto :SHIPCAPSTARTLOOP
		Else
			Goto :SHIPCAPEND
		End
	ElseIf ($attackmode = "KILL")
		Gosub :GETSTATS
		SetVar $volleys ($figs / $z_wave)
		If ($volleys > 0)
			SetVar $noattackmacro ""
			SetVar $killattackmacro ""
			SetVar $i 1
			SetVar $killnotargets ($killnotargets + $scalienct)
			While ($i <= $killnottargets)
				SetVar $noattackmacro ($noattackmacro & "n")
				SetVar $i ($i + 1)
			End
			SetVar $i 1
			While ($i <= $volleys)
				SetVar $killattackmacro ($killattackmacro & "a t ")
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z " & $z_wave & "n y * ")
				SetVar $i ($i + 1)
			End
			If ($figs >= $z_wave)
				If ($shipcapprompt = "Citadel")
					Send "q q " & $killattackmacro 
					Gosub :Z_Lib~RETURNTOPLANET
					SetVar $nomessage TRUE
					SetVar $PARM1 "0"
					Gosub :INTCOM_REFILL
				Else
					Send $killattackmacro 
				End
				Send #145
				WaitFor #145 & #8
				Goto :SHIPCAPSTARTLOOP
			Else
				#If ($shipcapprompt = "Citadel")
				#	Send "c "
				#End
				Goto :SHIPCAPEND
			End
		Else
			Goto :SHIPCAPEND
		End
	ElseIf ($attackmode = "CAP")
		SetVar $i 1
		SetVar $notfound FALSE
		While ($i <= $killtargets)
			SetVar $found FALSE
			SetVar $j 1
			While ($j <= $sstats)
				GetWordPos $targetship[$i] $pos $sstatsclass[$j]
				If ($pos <> "0")
					SetVar $found TRUE
					SetVar $targetshiptype[$i] $j
					SetVar $targetoff[$i] ($sstatsoffodds[$j] * $targetfigs[$i])
					SetVar $targetdef[$i] (($sstatsdefodds[$j] * $targetfigs[$i]) + ($sstatsdefodds[$j] * $sstatsshields[$j]))
					SetVar $targetdefshieldonly[$i] ($sstatsdefodds[$j] * $sstatsshields[$j])
					SetVar $targetodds[$i] $sstatsdefodds[$j]
					If ($sstatsgbonus[$j] = TRUE)
						If (SECTOR.PLANETCOUNT[$current_sector] > 0)
							If ($shipcapprompt = "Citadel")
								If (SECTOR.PLANETCOUNT[$current_sector] > 1)
									SetVar $targetdef[$i] ($targetdef[$i] * 4)
									SetVar $targetodds[$i] ($targetodds[$i] * 4)
								End
							Else
								SetVar $targetdef[$i] ($targetdef[$i] * 4)
								SetVar $targetodds[$i] ($targetodds[$i] * 4)
							End
						End
					End
				End
				GetWordPos $shipclass $pos2 $sstatsclass[$j]
				If ($pos2 <> "0")
					SetVar $myoff ($sstatsoffodds[$j] * $figs)
					SetVar $waveforce ($sstatsoffodds[$j] * $z_wave)
					SetVar $myodds $sstatsoffodds[$j]
				End
				SetVar $j ($j + 1)
			End
			If ($found <> TRUE)
				SetVar $notfound TRUE
			End
			SetVar $i ($i + 1)
		End
		SetVar $i 1
		SetVar $maxoff 0
		SetVar $besttarget 0
		While ($i <= $killtargets)
			If ($myoff > $targetdef[$i]) and ($targetdef[$i] <> "0")
				If ($targetdef[$i] > $maxoff)
					SetVar $maxoff $targetdef[$i]
					SetVar $besttarget $i
				End
			End
			SetVar $i ($i + 1)
		End
		If ($besttarget <> "0")
			SetVar $Z_Strings~trimstring $targetname[$besttarget]
			Gosub :Z_Strings~LTRIM
			SetVar $targetname[$besttarget] $Z_Strings~trimstring
			SetVar $killnottargets ($killnottargets + ($besttarget - 1))
			
			SetVar $killattackmacro ""
			SetVar $noattackmacro ""
			SetVar $i 1
			SetVar $killnotargets ($killnotargets + $scalienct)
			While ($i <= $killnottargets)
				SetVar $noattackmacro ($noattackmacro & "n")
				SetVar $i ($i + 1)
			End
			SetVar $volleys 0
			SetPrecision 3
			SetVar $volleys (((($targetdef[$besttarget] - $targetdefshieldonly[$besttarget]) / 1000) * 999) / $waveforce)
			SetPrecision 0
			SetVar $Z_Lib~number $volleys
			Gosub :Z_Lib~ROUND
			SetVar $volleys $Z_Lib~int
			If ($volleys < 0)
				SetVar $volleys 0
			End
			SetVar $leftover ($targetdef[$besttarget] - ($volleys * $waveforce))
			If ($leftover > 0)
				SetVar $lastvolley (($leftover * $targetodds[$besttarget]) / $myodds)
			Else
				SetVar $lastvolley 1
			End
			SetVar $killattackmacro ""
			If ($volleys > 0)
				SetVar  $j 1
				While ($j <= $volleys)
					SetVar $killattackmacro ($killattackmacro & "a t ")
					SetVar $killattackmacro ($killattackmacro & $noattackmacro)
					SetVar $killattackmacro ($killattackmacro & "y q z " & $z_wave & "n y * ")
					SetVar $j ($j + 1)
				End
			Else
				SetVar $killattackmacro "a t "
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z " & $lastvolley & "n y * ")
			End
			Echo "***" & $boldgreen & "SECURITY: TARGETING " & $targetname[$besttarget] & "!***" & $black
			#If ($shipcapprompt = "Citadel")
			#	Send "q m * * * "
			#End
			#Gosub :GETSTATS
			If ($shipcapprompt = "Citadel")
				Send "q q " & $killattackmacro
				Send #145
				WaitFor #145 & #8
				Gosub :Z_Lib~RETURNTOPLANET
				Send #145
				WaitFor #145 & #8
				SetVar $PARM1 "0"
				Gosub :INTCOM_REFILL
			Else
				Send $killattackmacro 
			End
			Send #145
			WaitFor #145 & #8
			SetTextLineTrigger shipcapgottarget :SHIPCAPGOTTARGET $targetname[$besttarget]
			SetTextTrigger shipcaptargetgone :SHIPCAPTARGETGONE "elp)"
			If ($shipcapprompt = "Citadel")
				Send "s"
			Else
				Send "*"
			End
			Pause
:SHIPCAPGOTTARGET
			KillTrigger shipcapgottarget
			KillTrigger shipcaptargetgone
			GetText CURRENTLINE $targetfigs[$besttarget] "w/ " " ftrs,"
			StripText $targetfigs[$besttarget] ","
			StripText $targetfigs[$besttarget] " "
			SetVar $targetdef[$besttarget] ($targetodds[$besttarget] * $targetfigs[$besttarget])
			SetVar $killattackmacro ""
			SetVar $volleys 0
			SetPrecision 3
			SetVar $volleys ((($targetdef[$besttarget] / 1000) * 999) / $waveforce)
			SetPrecision 0
			SetVar $Z_Lib~number $volleys
			Gosub :Z_Lib~ROUND
			SetVar $volleys $Z_Lib~int
			If ($volleys < 0)
				SetVar $volleys 0
			End
			SetVar $leftover ($targetdef[$besttarget] - ($volleys * $waveforce))
			If ($leftover > 0)
				SetVar $lastvolley (($leftover * ($targetodds[$besttarget]) / $myodds)
			Else
				SetVar $lastvolley 1
			End
			SetVar $killattackmacro ""
			If ($volleys > 0)
				SetVar  $j 1
				While ($j <= $volleys)
					SetVar $killattackmacro ($killattackmacro & "a t ")
					SetVar $killattackmacro ($killattackmacro & $noattackmacro)
					SetVar $killattackmacro ($killattackmacro & "y q z " & $z_wave & "n y * ")
					SetVar $j ($j + 1)
				End
				SetVar $killattackmacro ($killattackmacro & "a t ")
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z " & $lastvolley & "n y * ")
			Else
				SetVar $killattackmacro "a t "
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z " & $lastvolley & "n y * ")
			End
			SetVar $x 1
			While ($x <= 40)
				SetVar $killattackmacro ($killattackmacro & "a t ")
				SetVar $killattackmacro ($killattackmacro & $noattackmacro)
				SetVar $killattackmacro ($killattackmacro & "y q z " & "1" & "n y * ")
				SetVar $x ($x + 1)
			End
			Echo "***" & $boldgreen & "SECURITY: CLEANING UP " & $targetname[$besttarget] & "!***" & $black
			If ($shipcapprompt = "Citadel")
				Send "q q " & $killattackmacro
				Send #145
				WaitFor #145 & #8
				Gosub :Z_Lib~RETURNTOPLANET
				Send #145
				WaitFor #145 & #8
				SetVar $PARM1 "0"
				Gosub :INTCOM_REFILL
			Else
				Send $killattackmacro 
			End
			Send #145
			WaitFor #145 & #8
			Echo "***" & $boldgreen & "SECURITY: DONE with " & $targetname[$besttarget] & "!***" & $black
			If ($shipcapprompt = "Citadel")
				Gosub :Z_Lib~RETURNTOPLANET
				SetVar $nomessage TRUE
				SetVar $PARM1 "0"
				Gosub :INTCOM_REFILL
			End
			Goto :SHIPCAPSTARTLOOP
:SHIPCAPTARGETGONE
			KillTrigger shipcapgottarget
			KillTrigger shipcaptargetgone
			Send #145
			WaitFor #145 & #8
			Echo "***" & $boldgreen & "SECURITY: TARGET GONE " & $targetname[$besttarget] & "!***" & $black
			Goto :SHIPCAPSTARTLOOP
		ElseIf ($notfound = TRUE)
			Echo "***" & $boldgreen & "SECURITY: ATTACK MODE CHANGED TO KILL!***" & $black
			SetVar $attackmode "KILL"
			SetVar $notfound FALSE
			Goto :SHIPCAPNOTRADER
		Else
			Send #145
			WaitFor #145 & #8
			Echo "***" & $boldgreen & "SECURITY: NO VALID TARGETS!***" & $black
			Goto :SHIPCAPEND
		End
	End
Else
	Send #145
	WaitFor #145 & #8
	SetVar $killtries ($killtries + 1)
	If ($pdropison = TRUE)
		SetVar $capscans 5
	Else
		SetVar $capscans 10
	End
	If ($killtries > $capscans)
		SetVar $killtries 0
		Echo "***" & $boldgreen & "SECURITY: NO TARGETS!***" & $black
		Goto :SHIPCAPEND
	Else
		SetArray $targetfigs 0
		SetArray $targetname 0
		SetArray $targetdef 0
		SetArray $targetdefshieldonly 0
		SetArray $targetodds 0
		SetArray $targetoff 0
		SetArray $targetshiptype 0
		SetVar $killnottargets 0
		SetVar $killtargets 0
		SetVar $killattackmacro ""
		SetVar $noattackmacro ""
		Goto :SHIPCAPSTARTLOOP
	End
End
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPNOTRADER2
Gosub :SHIPCAPKILLTRIGGERS
GetWord $line $word 1
StripText $word ":"
If ($word = "Fighters") or ($word = "Mines") or ($word = "Warps") or ($word = "Citadel")
	SetVar $scfeds FALSE
	Goto :SHIPCAPNOTRADER
End
SetVar $scships TRUE
SetVar $sctraders FALSE
SetVar $scfeds FALSE
SetVar $killnottargets ($killnottargets + 1)
SetVar $scshipct ($scshipct + 1)
Goto :SHIPCAPSTARTLOOP2
:SHIPCAPEND
Gosub :SHIPCAPKILLTRIGGERS
SetArray $targetfigs 0
SetArray $targetname 0
SetArray $targetdef 0
SetArray $targetdefshieldonly 0
SetArray $targetodds 0
SetArray $targetoff 0
SetArray $targetshiptype 0
SetVar $killnottargets 0
SetVar $killtargets 0
SetVar $killattackmacro ""
SetVar $noattackmacro ""
Return
# TARGETARRAY
:TARGETARRAY
Send #145
WaitOn #145 & #8
Echo "**" & $boldwhite & "Initialising the Advanced TARGETING SYSTEM."
Gosub :Z_Lib~SETDIAL
SetArray $targetarray SECTORS 8
SetArray $targetcheck SECTORS 8
SetVar $x 1
While ($x <= SECTORS)
	Gosub :Z_Lib~UPDATEDIAL
	SetVar $y 1
	SetVar $z 0
	SetVar $inct SECTOR.WARPINCOUNT[$x]
	While ($y <= $inct)
		SetVar $adj SECTOR.WARPSIN[$x][$y]
		If ($align >= 1000) or (($adj > 10) and ($adj <> STARDOCK))
			GetSectorParameter $adj "FIGSEC" $fig
			If ($fig = TRUE)
				SetVar $z ($z + 1)
				SetVar $targetarray[$x][$z] $adj
			End
		End
		SetVar $y ($y + 1)
	End
	SetVar $inct SECTOR.WARPCOUNT[$x]
	SetVar $y 1
	SetVar $z 0
	While ($y <= $inct)
		SetVar $adj SECTOR.WARPS[$x][$y]
		If ($align >= 1000) or (($adj > 10) and ($adj <> STARDOCK))
			SetVar $z ($z + 1)
			SetVar $targetcheck[$x][$z] $adj
		End
		SetVar $y ($y + 1)
	End
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~ENDDIAL
SetVar $targetsystemok TRUE
GetTime $lastinitialised "d/mmm/yyyy  h:nn am/pm"
Echo "**"
Return
# JUMPTHEPLANET 
# Make sure you are at the Citadel prompt. 
# Set $pjumpsector to the target sector. 
# Returns $failedtojump = TRUE if it failed. 
:JUMPTHEPLANET
KillAllTriggers
SetVar $failedtojump FALSE
SetTextTrigger noore :PJUMPNOORE "not have enough Fuel Ore on this planet"
SetTextTrigger nofig :PJUMPNOFIG "Blind Jump"
SetTextTrigger jumpingto :PJUMPJUMPINGTO "All Systems Ready, shall we engage?"
SetTextTrigger alreadythere :PJUMPALREADYTHERE "You are already in that sector!"
Send "p" & $pjumpsector & "*"
Pause
:PJUMPNOFIG
KillAllTriggers
Echo ANSI_12 & "*** No fighter in target sector!***"
SetVar $Z_Lib~message $scripttitle & ": No fighter in target sector!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $failedtojump TRUE
Goto :ENDJUMP
:PJUMPNOORE
KillAllTriggers
Echo ANSI_12 & "*** Not enough FUEL ORE!***"
SetVar $Z_Lib~message $scripttitle & ": Not enough FUEL ORE!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $failedtojump TRUE
Goto :ENDJUMP
:PJUMPALREADYTHERE
KillAllTriggers
Echo ANSI_12 & "*** ALREADY IN THAT SECTOR!***"
SetVar $Z_Lib~message $scripttitle & ": ALREADY IN THAT SECTOR!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $failedtojump TRUE
Send "cq"
WaitFor "<Computer deactivated>"
Goto :ENDJUMP
:PJUMPJUMPINGTO
KillAllTriggers
Send "y"
Send "cq"
WaitFor "<Computer deactivated>"
:ENDJUMP
Return
# UPDATEMARKET 
:UPDATEMARKET
LoadVar $z_lastmarket
GetTime $localnow "dd/mm/yyyy"
SetTextLineTrigger umt :UMT " AM "
SetTextLineTrigger umt2 :UMT " PM "
Send "ct"
Pause
:UMT
KillTrigger umt
KillTrigger umt2
SetVar $line CURRENTLINE
GetWord $line $temp1 4
GetWord $line $temp2 5
GetWord $line $temp3 6
SetVar $now ($temp1 & $temp2 & $temp3)
Send "q "
Send #145
WaitOn #145 & #8
If ($z_lastmarket <> $now)
	SetVar $umholds 0
	SetVar $umfigs 0
	SetVar $umshields 0
	SetVar $z_lastmarket $now
	SaveVar $z_lastmarket
	SetTextLineTrigger uma :UMA "A  Cargo holds     :"
	SetTextLineTrigger umb :UMB "B  Fighters        :"
	SetTextLineTrigger umc :UMC "C  Shield Points   :"
	SetTextLineTrigger umd :UMD "<Computer deactivated>"
	Send "c r 1 *q"
	Pause
:UMA
	GetText CURRENTLINE $umholds ":" "credits"
	Pause
:UMB
	GetText CURRENTLINE $umfigs ":" "credits"
	Pause
:UMC
	GetText CURRENTLINE $umshields ":" "credits"
	Pause
:UMD
	KillTrigger uma
	KillTrigger umb
	KillTrigger umc
	KillTrigger umd
	StripText $umholds " "
	StripText $umfigs " "
	StripText $umshields " "
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $umholds
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $umholds $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $umfigs
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $umfigs $Z_Strings~padded
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 4
	SetVar $Z_Strings~unpadded $umshields
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $umshields $Z_Strings~padded
	Write GAMENAME & "_Z-Market.txt" "DATE: " & $localnow & " - Holds: " & $umholds & "  Fighters: " & $umfigs & "  Shields: " & $umshields
End
Return
# GETDENSITIES 
:GETDENSITIES
SetVar $gdct 0
SetArray $gdline 0
SetTextLineTrigger gdstart :GDSTART "---------------------"
If ($scanner = "2")
	Send "sd"
Else
	Send "s"
End
Pause
:GDSTART
SetTextLineTrigger gdline :GDLINE "==>"
SetTextTrigger gddone :GDDONE "Command [TL="
Pause
:GDLINE
SetVar $gdct ($gdct + 1)
SetVar $gdline[$gdct] CURRENTLINE
SetTextLineTrigger gdline :GDLINE "==>"
Pause
:GDDONE
SetVar $gd 1
While ($gd <= $gdct)
	GetWord $gdline[$gd] $gdsector 2
	GetWord $gdline[$gd] $densityscan[$gdsector] 4
	StripText $densityscan[$gdsector] ","
	SetVar $gd ($gd + 1)
End
KillTrigger gdline
KillTrigger gddone
SetArray $gdline 0
Return
# SPLASH 
:SPLASH
Gosub :Z_Lib~CLEARSCREEN
Echo "*" & $yellow & " Archibald H. Vilanos III presents..."
Gosub :Z_Lib~REDLINE
Echo #27 & "[9D" &  $red & "v" & $version
Echo "*" & $blue &"               " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "        " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "    " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "   " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219
Echo "*" & $boldblue &"               " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "        " & #219 & #219 & #219 & "    " & #219 & #219 & "  " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "  " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219
Echo "*" & $boldblue &"                    " & #219 & #219 & #219 & "         " & #219 & #219 & #219 & "    " & #219 & #219 & "  " & #219 & #219 & "  " & #179 & "  " & #219 & #219 & "     " & #219 & #219 & #219
Echo "*" & $blue &"                   " & #219 & #219 & #219 & "    " & #219 & #219 & #219 & #219 & "  " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "   " & #219 & #219 & "\   /" & #219 & #219 & "     " & #219 & #219 & #219
Echo "*" & $blue &"                 " & #219 & #219 & #219 & "      " & #219 & #219 & #219 & #219 & "  " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "   " & #219 & #219 & "/   \" & #219 & #219 & "     " & #219 & #219 & #219
Echo "*" & $boldblue &"                " & #219 & #219 & #219 & "             " & #219 & #219 & #219 & "    " & #219 & #219 & "  " & #219 & #219 & "  " & #179 & "  " & #219 & #219 & "     " & #219 & #219 & #219
Echo "*" & $boldblue &"               " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "        " & #219 & #219 & #219 & "    " & #219 & #219 & "  " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "     " & #219 & #219 & #219
Echo "*" & $blue &"               " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "        " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "    " & #219 & #219 & #219 & #219 & #219 & #219 & #219 & "      " & #219 & #219 & #219
Gosub :Z_Lib~REDLINE
Echo "*" & $boldwhite & "                                                        now you're in control."
Echo "**" & $white & "                                -=[" & $green & "CREDITS" & $white & "]=-"
Echo "*"
Echo "*" & $yellow & "            Traveler, CareTaker, Remco Mulder, Cherokee, LoneStar"
Echo "*"
Echo "*" & $green &  "                           " & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196 & #196
Echo "*"
Return
# FIGOWNER 
:FIGOWNER
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOFIGOWNER
End
Gosub :GETSTATS
Send "*"
WaitFor "] (?=Help)? :"
If (CURRENTSECTOR < 11) or (CURRENTSECTOR = STARDOCK)
	If ($changeto = "c")
		SetVar $Z_Lib~message $scripttitle & " - I'm in Fedspace - Cfigs aborted !!*"
	Else
		SetVar $Z_Lib~message $scripttitle & " - I'm in Fedspace - Pfigs aborted !!*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOFIGOWNER
End
If (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
	GetWordPos SECTOR.FIGS.OWNER[$current_sector] $pos "our"
	If ($pos < 1)
		SetVar $Z_Lib~message $scripttitle & " - Fighters in sector are not ours!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOFIGOWNER
	End
End
SetVar $droptotal SECTOR.FIGS.QUANTITY[$current_sector]
SetVar $figtype $z_figtype
SetTextTrigger getfigtype1 :CGETFIGTYPE1 "[Defensive]"
SetTextTrigger getfigtype2 :CGETFIGTYPE2 "[Offensive]"
SetTextTrigger getfigtype3 :CGETFIGTYPE3 "[Toll]"
SetTextTrigger getfigtype4 :CGETFIGTYPE4 "Warps to Sector(s)"
Send "*"
Pause
:CGETFIGTYPE1
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "d"
Goto :CGOTFIGTYPE
:CGETFIGTYPE2
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "o"
Goto :CGOTFIGTYPE
:CGETFIGTYPE3
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
SetVar $figtype "t"
Goto :CGOTFIGTYPE
:CGETFIGTYPE4
KillTrigger getfigtype1
KillTrigger getfigtype2
KillTrigger getfigtype3
KillTrigger getfigtype4
Goto :CGOTFIGTYPE
:CGOTFIGTYPE
Send "f" & $droptotal & "*" & $changeto & $figtype
If ($changeto = "c")
	SetVar $Z_Lib~message $scripttitle & " - Fighters in sector changed to CORPORATE.*"
Else
	SetVar $Z_Lib~message $scripttitle & " - Fighters in sector changed to PERSONAL.*"
End
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOFIGOWNER
SetVar $ssmsg ""
Gosub :GETSTATS
SetVar $Z_Lib~heraldss FALSE
SetVar $reset TRUE
Return
# NOPE 
:NOPE
SetVar $Z_Lib~heraldss FALSE
Return
# INSECTOR 
:INSECTOR
KillAllTriggers
GetWord CURRENTLINE $spf 1
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NORESPONSE
End
Gosub :CHECKTARGET
If ($targetok = FALSE)
   Goto :NORESPONSE
End
OpenMenu TWX_STOPALLFAST FALSE
If ($z_volley <> "0")
	SetVar $v 1
	SetVar $macro $do_attack
	ReplaceText $macro "<WAVE>" $z_wave
	While ($v <= $z_volley)	
		Send $macro
		SetVar $v ($v + 1)
	End
End
Goto :EMERGENCY1
# EMERGENCY 
:EMERGENCY
KillAllTriggers
GetWord CURRENTLINE $spf 1
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NORESPONSE
End
OpenMenu TWX_STOPALLFAST FALSE
:EMERGENCY1
KillAllTriggers
SetTextTrigger epaused :EMPAUSED "[Pause]"
SetTextTrigger eready :EMREADY "--<  Available Ship Scan  >--"
Send "r* x" 
Pause
:EMPAUSED
KillAllTriggers
Send "*"
Goto :EMERGENCY1
:EMREADY
KillAllTriggers
SetTextTrigger xportok :EMEXPORTOK "Security code accepted, engaging transporter control."
SetTextTrigger xportnotok :EMEXPORTNOTOK "That is not an available ship."
SetTextTrigger xportnotok2 :EMEXPORTNOTOK "only has a transport range of"
SetTextTrigger xportnotok3 :EMEXPORTNOTOK "You don't have any turns left!"
Send $z_safeship & "*q"
Pause
:EMEXPORTNOTOK
KillAllTriggers
If ($z_rescueavailable = TRUE)
	If ($z_callfast = "TRUE")
		SetVar $Z_SaveMe~planet $rescueplanet
		Gosub :Z_Saveme~CALLFAST
	Else
		Gosub :Z_Saveme~CALL
	End
End
Goto :NORESPONSE
:EMEXPORTOK
KillAllTriggers
SetVar $Z_Logs~logentry $scripttitle & ": EMERGENCY PROTOCOL ACTIVATED!"
Gosub :Z_Logs~ENTERLOG
Echo "**" & ANSI_12 & "[5m" & "EMERGENCY PROTOCOL ACTIVATED!**" & "[0m"
If ($z_usesound = TRUE)
	Sound alert
End
Goto :NORESPONSE
:CHECKTARGET
SetVar $targetok TRUE
SetVar $linecheck CURRENTLINE
LowerCase $linecheck
GetWordPos $linecheck $pos "lifts"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET
End
GetWordPos $linecheck $pos "blasts"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET
End
GetWordPos $linecheck $pos "warps"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET
End
GetWordPos $linecheck $pos "appears"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET
End
GetWordPos $linecheck $pos "powering"
If ($pos > 5)
   SetVar $pos ($pos - 5)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET
End
:GOTTARGET
SetVar $count "1"
GetLength $target $len
If ($len > 6)
	CutText $target $target 1 6
End
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
While ($count <= $z_corpies)
   If ($target = $z_corpy[$count])
      SetVar $targetok FALSE
   End
   SetVar $count ($count + 1)
End
:TARGETCHKDONE
SetVar $target ""
Return
:NORESPONSE
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# CHECKSAFESHIPSTATUS
:CHECKSAFESHIPSTATUS
KillAllTriggers
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :ENDSTATUSCHECK
End
If ($z_safeship = "0")
	SetVar $Z_Lib~message "Safeship status check FAILED!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :ENDSTATUSCHECK
End
Gosub :GETSTATS
SetVar $initialship $shipid
SetTextTrigger paused :PAUSED "[Pause]"
SetTextTrigger ready :READY "--<  Available Ship Scan  >--"
Send "x" 
Pause
:PAUSED
KillAllTriggers
Send "*"
SetTextTrigger ready :READY "--<  Available Ship Scan  >--"
Pause
:READY
KillAllTriggers
SetTextTrigger xportnotok3 :XPORTNOTOK "You do not own any other ships!"
SetTextTrigger ready2 :READY1 "Choose which ship to beam to (Q=Quit)"
Pause
:READY1
KillAllTriggers
SetTextTrigger xportok :XPORTOK "Security code accepted, engaging transporter control."
SetTextTrigger xportnotok :XPORTNOTOK "That is not an available ship."
SetTextTrigger xportnotok2 :XPORTNOTOK "only has a transport range of"
Send $z_safeship & "*q" 
Pause
:XPORTOK
KillAllTriggers
SetVar $z_safeshipstatus TRUE
Send "c"
WaitFor "<Computer activated>"
WaitFor "Computer command [TL="
SetTextTrigger personal :PERSONAL "Should this be a (C)orporate ship or (P)ersonal ship?"
SetTextTrigger notpersonal :NOTPERSONAL "Computer command [TL="
Send "o*"
Pause
:PERSONAL
KillAllTriggers
Send "pq"
Goto :CHECKSAFESHIPSTATUSB
:NOTPERSONAL
KillAllTriggers
Send "q"
Goto :CHECKSAFESHIPSTATUSB
:CHECKSAFESHIPSTATUSB
KillAllTriggers
SetTextTrigger bpaused :BPAUSED "[Pause]"
SetTextTrigger bready :BREADY "has a transport range of"
Send "x" 
Pause
:BPAUSED
KillAllTriggers
Send "*"
SetTextTrigger bready :BREADY "has a transport range of"
Pause
:BREADY
SetTextTrigger xportbok :XPORTBOK "Security code accepted, engaging transporter control."
SetTextTrigger xportbnotok :XPORTBNOTOK "That is not an available ship."
SetTextTrigger xportbnotok2 :XPORTBNOTOK "only has a transport range of"
Send $initialship & "*q"
Pause
:XPORTBNOTOK
KillAllTriggers
SetVar $Z_Lib~message "Could NOT xport back to initial ship.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :ENDSTATUSCHECK
:XPORTBOK
KillAllTriggers
Goto :ENDSTATUSCHECK
:XPORTNOTOK
KillAllTriggers
SetVar $Z_Lib~message "Safeship status check FAILED!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:ENDSTATUSCHECK
Send #145
WaitFor #145 & #8
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Return
# BANNER 
:BANNER
KillAllTriggers
If ($banners > 36)
	SetVar $banners 36
End
SetArray $filesok $banners
SetVar $x 1
While ($x <= $banners)
	FileExists $filesok[$x] $bannerfile[$x]
	SetVar $x ($x + 1)
End
SetArray $bkey 36
SetVar $bkey[1] "1"
SetVar $bkey[2] "2"
SetVar $bkey[3] "3"
SetVar $bkey[4] "4"
SetVar $bkey[5] "5"
SetVar $bkey[6] "6"
SetVar $bkey[7] "7"
SetVar $bkey[8] "8"
SetVar $bkey[9] "9"
SetVar $bkey[10] "0"
SetVar $bkey[11] "A"
SetVar $bkey[12] "B"
SetVar $bkey[13] "C"
SetVar $bkey[14] "D"
SetVar $bkey[15] "E"
SetVar $bkey[16] "F"
SetVar $bkey[17] "G"
SetVar $bkey[18] "H"
SetVar $bkey[19] "I"
SetVar $bkey[20] "J"
SetVar $bkey[21] "K"
SetVar $bkey[22] "L"
SetVar $bkey[23] "M"
SetVar $bkey[24] "N"
SetVar $bkey[25] "O"
SetVar $bkey[26] "P"
SetVar $bkey[27] "Q"
SetVar $bkey[28] "R"
SetVar $bkey[29] "S"
SetVar $bkey[30] "T"
SetVar $bkey[31] "U"
SetVar $bkey[32] "V"
SetVar $bkey[33] "W"
SetVar $bkey[34] "X"
SetVar $bkey[35] "Y"
SetVar $bkey[36] "Z"
:STARTBANNER
Gosub :Z_Lib~HEADER
SetVar $x 1
While ($x <= $banners)
	If ($filesok[$x] = TRUE)
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & $bkey[$x] & ANSI_12 & "]=- " & ANSI_11 & $bannerfile[$x]
	Else
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & " " & ANSI_12 & "]=- " & ANSI_3 & $bannerfile[$x]
	End
	SetVar $x ($x + 1)
End
Gosub :Z_Strings~LINE
Echo "*" & $Z_Strings~line
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "~" & ANSI_12 & "]=- " & ANSI_11 & "Another file"
Gosub :Z_Strings~LINE
Echo "*" & $Z_Strings~line
Echo "*" & ANSI_10 & "Select a banner file to display:"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = #13)
	Goto :NOBANNER
End
If ($choice = "~")
	Echo "**" & ANSI_15 & "Enter the filename: "
	GetConsoleInput $filename
	If ($filename = "") or ($filename = #13)
		Goto :BANNER
	End
	FileExists $fileexists $filename
	If ($fileexists = TRUE)
		ReadToArray $filename $banner
		SetVar $i 1
		If ($banner > 0)
			Echo "**" & ANSI_15 & "Send file over [S]ubSpace or [F]edComm [S/f]?"
			GetConsoleInput $choice2 SINGLEKEY
			UpperCase $choice2
			If ($choice2 ="F")
				SetVar $displaybanner "`*"
			Else
				SetVar $displaybanner "'*"
			End
			While ($i <= $banner)
				If ($banner[$i] = "")
					SetVar $banner[$i] " "
				End
				StripText $banner[$i] #13
				SetVar $displaybanner ($displaybanner & " " & $banner[$i] & "*")
				SetVar $i ($i + 1)
			End
			SetVar $displaybanner ($displaybanner & "*")
			Send $displaybanner
		End
	Else
		Echo "**" & ANSI_12 & "File NOT Found - " & $boldyellow & $filename & "*"
	End
	Goto :NOBANNER
End
SetVar $x 1
While ($x <= $banners)
	If ($choice = $bkey[$x])
		If ($filesok[$x] = TRUE)
			ReadToArray $bannerfile[$x] $banner
			SetVar $i 1
			If ($banner > 0)
				Echo "**" & ANSI_15 & "Send banner over [S]ubSpace or [F]edComm [S/f]?"
				GetConsoleInput $choice2 SINGLEKEY
				UpperCase $choice2
				If ($choice2 ="F")
					SetVar $displaybanner "`*"
				Else
					SetVar $displaybanner "'*"
				End
				While ($i <= $banner)
					If ($banner[$i] = "")
						SetVar $banner[$i] " "
					End
					StripText $banner[$i] #13
					SetVar $displaybanner ($displaybanner & " " & $banner[$i] & "*")
					SetVar $i ($i + 1)
				End
				SetVar $displaybanner ($displaybanner & "*")
				Send $displaybanner
			End
		End
		SetVar $x $banners
		SetVar $bannerfound TRUE
	End
	SetVar $x ($x + 1)
End
If ($bannerfound <> TRUE)
	Goto :STARTBANNER
End
:NOBANNER
SetArray $banner 0
SetVar $displaybanner ""
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# XFER 
:XFER
KillAllTriggers
If ($z_corpies < 1)
	Goto :NOXFER
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $xferprompt 1 7
If ($xferprompt = "Citadel") or ($xferprompt = "Planet")
	Gosub :Z_Lib~CURRENTPLANET
	SetVar $nomessage TRUE
	SetVar $PARM1 "0"
	Gosub :INTCOM_REFILL
End
Gosub :Z_Lib~COMMSOFF
SetVar $xferexact "-1"
LoadVar $xfercorpynum
LoadVar $xferdir
LoadVar $xferwhat
If ($xfercorpynum <> "0") and ($xferdir <> "0") and ($xferwhat <> "0") and ($autorefill = TRUE)
	SetVar $useautorefill TRUE
Else
	SetVar $useautorefill FALSE
End
If ($xfercorpynum = "0")
	SetVar $xfercorpynum 1
End
If ($xferdir = "0")
	SetVar $xferdir "TO  "
End
If ($xferwhat = "0")
	SetVar $xferwhat 1
End
SaveVar $xfercorpynum
SaveVar $xferdir
SaveVar $xferwhat
SetVar $xfer[1] "Fighters"
SetVar $xfer[2] "Shields "
SetVar $xfer[3] "Mines   "
SetVar $xfer[4] "Limpets "
SetVar $xfer[5] "Both FS "
SetVar $i 1
SetVar $maxlen 0
While ($i <= $z_corpies)
	GetLength $z_corpy[$i] $len
	If ($len > $maxlen)
		SetVar $maxlen $len
	End
	SetVar $i ($i + 1)
End
SetVar $i 1
While ($i <= $z_corpies)
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen $maxlen
	SetVar $Z_Strings~unpadded $z_corpy[$i]
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar $xfercorpy[$i] $Z_Strings~padded
	SetVar $i ($i + 1)
End
If ($z_corpy[1] = $z_ingamename) and ($z_corpies > 1)
	SetVar $xfercorpynum 2
End
If ($useautorefill = TRUE)
	Echo "**" & $boldgreen & $blinkon & "XFER: Transferring with previous settings...***" & $blinkoff
	SetVar $Z_Strings~trimstring $xfercorpy[$xfercorpynum]
	Gosub :Z_Strings~RTRIM
	SetVar $xfercorpy[$xfercorpynum] $Z_Strings~trimstring
	Goto :DOXFER
End
Gosub :Z_Lib~BLUELINE
Gosub :Z_Lib~ZEDLINE
Echo "[78D" & $boldblue & $blinkon & "XFER" & $blinkoff & "*"
Echo #27&"[s"
Gosub :Z_Lib~BLUELINE
:STARTXFERMENU
Echo #27&"[u"
Echo $boldcyan & " [" & $boldwhite & "1" & $boldcyan & "]-" & $boldyellow & $xfer[$xferwhat] 
Echo $boldcyan & " [" & $boldwhite & "2" & $boldcyan & "]-" & $boldyellow & $xferdir
Echo $boldcyan & " [" & $boldwhite & "3" & $boldcyan & "]-" & $boldyellow & $xfercorpy[$xfercorpynum]
Echo $boldcyan & " [" & $boldwhite & "G" & $boldcyan & "]-" & "GO"
Echo $boldcyan & " [" & $boldwhite & "Q" & $boldcyan & "]-" & "QUIT "
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	SetVar $xferwhat ($xferwhat + 1)
	If ($xferwhat > 5)
		SetVar $xferwhat 1
	End
	SaveVar $xferwhat
ElseIf ($choice = "2")
	If ($xferdir = "FROM")
		SetVar $xferdir "TO  "
	Else
		SetVar $xferdir "FROM"
	End
	SaveVar $xferdir
ElseIf ($choice = "3")
	SetVar $xfercorpynum ($xfercorpynum + 1)
	If ($xfercorpynum > $z_corpies)
		SetVar $xfercorpynum 1
	End
	If ($z_corpy[$xfercorpynum] = $z_ingamename) and ($z_corpies > 1)
		SetVar $xfercorpynum ($xfercorpynum + 1)
	End
	If ($xfercorpynum > $z_corpies)
		SetVar $xfercorpynum 1
	End
	SaveVar $xfercorpynum
ElseIf ($choice = "G")
	Echo #27&"[u"
	Echo $boldcyan & " [" & $boldwhite & "1" & $boldcyan & "]-" & $boldyellow & $xfer[$xferwhat] 
	Echo $boldcyan & " [" & $boldwhite & "2" & $boldcyan & "]-" & $boldyellow & $xferdir
	Echo $boldcyan & " [" & $boldwhite & "3" & $boldcyan & "]-" & $boldyellow & $xfercorpy[$xfercorpynum]
	Echo $boldcyan & " [" & $boldwhite & "G" & $boldcyan & "]-" & "GO"
	Echo $boldcyan & " [" & $boldwhite & "Q" & $boldcyan & "]-" & $cyan & "QUIT "
	Echo "**"
	SetVar $Z_Strings~trimstring $xfercorpy[$xfercorpynum]
	Gosub :Z_Strings~RTRIM
	SetVar $xfercorpy[$xfercorpynum] $Z_Strings~trimstring
	Goto :DOXFER
ElseIf ($choice = "Q")
	Echo #27&"[u"
	Echo $boldcyan & " [" & $boldwhite & "1" & $boldcyan & "]-" & $cyan & $xfer[$xferwhat] 
	Echo $boldcyan & " [" & $boldwhite & "2" & $boldcyan & "]-" & $cyan & $xferdir
	Echo $boldcyan & " [" & $boldwhite & "3" & $boldcyan & "]-" & $cyan & $xfercorpy[$xfercorpynum]
	Echo $boldcyan & " [" & $boldwhite & "G" & $boldcyan & "]-" & $cyan & "GO"
	Echo $boldcyan & " [" & $boldwhite & "Q" & $boldcyan & "]-" & "QUIT "
	SetVar $xferprompt ""
	Echo "**"
	Goto :NOXFER
End
Echo #27&"[u"
Goto :STARTXFERMENU
:DOXFER
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOXFER
End
Send "t "
:DOXFER2
If ($xferwhat = 1)
	SetTextTrigger xfernocorp :XFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger xferto :XFERTOFIG "Exchange with"
	Send "f"
	Pause
:XFERTOFIG
	KillAllTriggers
	GetText CURRENTLINE $word "with " " ("
	LowerCase $word
	GetLength $word $len
	If ($len > 6)
		CutText $word $temp 1 6
		SetVar $word $temp
	End
	SetVar $Z_Strings~trimstring $word
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring
	If ($word <> $xfercorpy[$xfercorpynum])
		SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
		SetTextTrigger xferto :XFERTOFIG "Exchange with"
		Send "n"
		Pause
	Else
		SetTextTrigger youhavefigs :YOUHAVEFIGS "You have"
		If ($xferdir = "FROM")
			Send "yf"
			Pause
		Else
			Send "yt"
			Pause
		End
	End
:YOUHAVEFIGS
	KillAllTriggers
	If ($xferexact <> "-1")
		Send $xferexact & "*q"
		Goto :NOXFER
	Else
		If ($xferdir = "FROM")
			GetText CURRENTLINE $xfergot "has " "."
			GetText CURRENTLINE $xfer2got "have " " fighters"
		Else
			GetText CURRENTLINE $xfergot "have " " fighters"
			GetText CURRENTLINE $xfer2got "has " "."
		End
	End
	SetTextTrigger getexact :GETEXACTFIG "can only carry"
	SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
	Send $xfergot & "*"
	Pause
:GETEXACTFIG
	KillAllTriggers
	GetText CURRENTLINE $xfercarry "carry " " fighters" 
	SetVar $xferexact ($xfercarry - $xfer2got)
	Goto :DOXFER2
ElseIf ($xferwhat = 2)
	SetTextTrigger xfernocorp :XFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger xferto :XFERTOSHLD "Exchange with"
	Send "s"
	Pause
:XFERTOSHLD
	KillAllTriggers
	GetText CURRENTLINE $word "with " " ("
	LowerCase $word
	GetLength $word $len
	If ($len > 6)
		CutText $word $temp 1 6
		SetVar $word $temp
	End
	SetVar $Z_Strings~trimstring $word
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring

	If ($word <> $xfercorpy[$xfercorpynum])
		SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
		SetTextTrigger xferto :XFERTOSHLD "Exchange with"
		Send "n"
		Pause
	Else
		SetTextTrigger youhavefigs :YOUHAVESHLD "You have"
		If ($xferdir = "FROM")
			Send "yf"
			Pause
		Else
			Send "yt"
			Pause
		End
	End
:YOUHAVESHLD
	KillAllTriggers
	If ($xferexact <> "-1")
		Send $xferexact & "*q"
		Goto :NOXFER
	Else
		If ($xferdir = "FROM")
			GetText CURRENTLINE $xfergot "has " "."
			GetText CURRENTLINE $xfer2got "have " " shields"
		Else
			GetText CURRENTLINE $xfergot "have " " shields"
			GetText CURRENTLINE $xfer2got "has " "."
		End
	End
	SetTextTrigger getexact :GETEXACTSHLD "can only have"
	SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
	Send $xfergot & "*"
	Pause
:GETEXACTSHLD
	KillAllTriggers
	GetText CURRENTLINE $xfercarry "have " " shields" 
	SetVar $xferexact ($xfercarry - $xfer2got)
	Goto :DOXFER2
ElseIf ($xferwhat = 3)
	SetTextTrigger xfernocorp :XFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger xferto :XFERTOMINE "Exchange with"
	Send "ha"
	Pause
:XFERTOMINE
	KillAllTriggers
	GetText CURRENTLINE $word "with " " ("
	LowerCase $word
	GetLength $word $len
	If ($len > 6)
		CutText $word $temp 1 6
		SetVar $word $temp
	End
	SetVar $Z_Strings~trimstring $word
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring

	If ($word <> $xfercorpy[$xfercorpynum])
		SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
		SetTextTrigger xferto :XFERTOMINE "Exchange with"
		Send "n"
		Pause
	Else
		SetTextTrigger youhavefigs :YOUHAVEMINE "You have"
		If ($xferdir = "FROM")
			Send "yf"
			Pause
		Else
			Send "yt"
			Pause
		End
	End
:YOUHAVEMINE
	KillAllTriggers
	If ($xferexact <> "-1")
		Send $xferexact & "*q"
		Goto :NOXFER
	Else
		If ($xferdir = "FROM")
			GetText CURRENTLINE $xfergot "has " "."
			GetText CURRENTLINE $xfer2got "have " " Armid"
		Else
			GetText CURRENTLINE $xfergot "have " " Armid"
			GetText CURRENTLINE $xfer2got "has " "."
		End
	End
	SetTextTrigger getexact :GETEXACTMINE "can only have"
	SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
	Send $xfergot & "*"
	Pause
:GETEXACTMINE
	KillAllTriggers
	GetText CURRENTLINE $xfercarry "have " " Armid" 
	SetVar $xferexact ($xfercarry - $xfer2got)
	Goto :DOXFER2
	
ElseIf ($xferwhat = 4)
	SetTextTrigger xfernocorp :XFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger xferto :XFERTOLIMP "Exchange with"
	Send "hl"
	Pause
:XFERTOLIMP
	KillAllTriggers
	GetText CURRENTLINE $word "with " " ("
	LowerCase $word
	GetLength $word $len
	If ($len > 6)
		CutText $word $temp 1 6
		SetVar $word $temp
	End
	SetVar $Z_Strings~trimstring $word
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring

	If ($word <> $xfercorpy[$xfercorpynum])
		SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
		SetTextTrigger xferto :XFERTOLIMP "Exchange with"
		Send "n"
		Pause
	Else
		SetTextTrigger youhavefigs :YOUHAVELIMP "You have"
		If ($xferdir = "FROM")
			Send "yf"
			Pause
		Else
			Send "yt"
			Pause
		End
	End
:YOUHAVELIMP
	KillAllTriggers
	If ($xferexact <> "-1")
		Send $xferexact & "*q"
		Goto :NOXFER
	Else
		If ($xferdir = "FROM")
			GetText CURRENTLINE $xfergot "has " "."
			GetText CURRENTLINE $xfer2got "have " " Limpet"
		Else
			GetText CURRENTLINE $xfergot "have " " Limpet"
			GetText CURRENTLINE $xfer2got "has " "."
		End
	End
	SetTextTrigger getexact :GETEXACTLIMP "can only have"
	SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
	Send $xfergot & "*"
	Pause
:GETEXACTLIMP
	KillAllTriggers
	GetText CURRENTLINE $xfercarry "have " " Limpet" 
	SetVar $xferexact ($xfercarry - $xfer2got)
	Goto :DOXFER2
ElseIf ($xferwhat = 5)
	SetTextTrigger xfernocorp :XFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
	SetTextTrigger xferto :XFERTOFIG2 "Exchange with"
	Send "f"
	Pause
:XFERTOFIG2
	KillAllTriggers
	GetText CURRENTLINE $word "with " " ("
	LowerCase $word
	GetLength $word $len
	If ($len > 6)
		CutText $word $temp 1 6
		SetVar $word $temp
	End
	SetVar $Z_Strings~trimstring $word
	Gosub :Z_Strings~RTRIM
	SetVar $word $Z_Strings~trimstring

	If ($word <> $xfercorpy[$xfercorpynum])
		SetTextTrigger xfernocorp :XFERNOCORP "Corporate command [TL="
		SetTextTrigger xferto :XFERTOFIG2 "Exchange with"
		Send "n"
		Pause
	Else
		SetTextTrigger youhavefigs :YOUHAVEFIGS2 "You have"
		If ($xferdir = "FROM")
			Send "yf"
			Pause
		Else
			Send "yt"
			Pause
		End
	End
:YOUHAVEFIGS2
	KillAllTriggers
	If ($xferexact <> "-1")
		Send $xferexact & "*"
		SetVar $xferwhat 2
		SetVar $xferexact "-1"
		Goto :DOXFER2
	Else
		If ($xferdir = "FROM")
			GetText CURRENTLINE $xfergot "has " "."
			GetText CURRENTLINE $xfer2got "have " " fighters"
		Else
			GetText CURRENTLINE $xfergot "have " " fighters"
			GetText CURRENTLINE $xfer2got "has " "."
		End
	End
	SetTextTrigger getexact :GETEXACTFIG2 "can only carry"
	SetTextTrigger xfernocorp :XFERNOCORP2 "Corporate command [TL="
	Send $xfergot & "*"
	Pause
:XFERNOCORP2
	KillAllTriggers
	SetVar $xferwhat 2
	SetVar $xferexact "-1"
	Goto :DOXFER2
:GETEXACTFIG2
	KillAllTriggers
	GetText CURRENTLINE $xfercarry "carry " " fighters" 
	SetVar $xferexact ($xfercarry - $xfer2got)
	Goto :DOXFER2
End
:XFERNOCORP
KillAllTriggers
Send "q"
:NOXFER
If ($xferprompt = "Citadel") or ($xferprompt = "Planet")
	Gosub :Z_Lib~RETURNTOPLANET
End
If ($xferprompt = "Citadel") or ($xferprompt = "Planet")
	SetVar $nomessage TRUE
	SetVar $PARM1 "0"
	Gosub :INTCOM_REFILL
End
SetVar $Z_Lib~message $scripttitle & ": XFER - Transfer cycle complete.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
SetVar $useautorefill FALSE
SetVar $autorefill FALSE
SetVar $reset TRUE
If ($z_usesound = TRUE)
	Sound ding
End
Gosub :Z_Lib~COMMSON
If ($xfercommand = TRUE)
	SetVar $xfercommand FALSE
	Return
End
Goto :WAITFORCOMMAND
# CITKILLA 
:CITKILLA
:KILLSTARTLOOP
SetVar $killtargets 0
SetVar $killnottargets 0
SetTextLineTrigger killcheck :KILLCHECK "Traders :"
SetTextLineTrigger killnotrader1 :KILLNOTRADER2 "Ships   :"
SetTextLineTrigger killnotrader2 :KILLNOTRADER "Fighters:"
SetTextLineTrigger killnotrader3 :KILLNOTRADER "Mines   :"
SetTextLineTrigger killnotrader4 :KILLNOTRADER "Warps to Sector(s) :"
SetTextLineTrigger killnotrader5 :KILLNOTRADER "Citadel treasury contains"
SetTextTrigger killnotrader6 :KILLNOTRADER "Citadel command (?=help)"
SetTextLineTrigger killisbeacon :KILLISBEACON "Beacon  :"
SetTextTrigger killenemymine :KILLENEMYMINE "Mined Sector: Do you wish to Avoid this sector in the future? (Y/N)"
Send "s"
Pause
:KILLSTARTLOOP2
SetTextLineTrigger killcheck :KILLCHECK "Traders :"
SetTextLineTrigger killnotrader1 :KILLNOTRADER2 "Ships   :"
SetTextLineTrigger killnotrader2 :KILLNOTRADER "Fighters:"
SetTextLineTrigger killnotrader3 :KILLNOTRADER "Mines   :"
SetTextLineTrigger killnotrader4 :KILLNOTRADER "Warps to Sector(s) :"
SetTextLineTrigger killnotrader5 :KILLNOTRADER "Citadel treasury contains"
SetTextTrigger killnotrader6 :KILLNOTRADER "Citadel command (?=help)"
SetTextLineTrigger killisbeacon :KILLISBEACON "Beacon  :"
SetTextTrigger killenemymine :KILLENEMYMINE "Mined Sector: Do you wish to Avoid this sector in the future? (Y/N)"
Pause
:KILLENEMYMINE
KillTrigger killcheck
KillTrigger killtrader
KillTrigger killnotrader1
KillTrigger killnotrader2
KillTrigger killnotrader3
KillTrigger killnotrader4
KillTrigger killnotrader5
KillTrigger killnotrader6
KillTrigger killisbeacon
KillTrigger killenemymine
Send "n"
Goto :KILLSTARTLOOP2
:KILLISBEACON
KillTrigger killcheck
KillTrigger killtrader
KillTrigger killnotrader1
KillTrigger killnotrader2
KillTrigger killnotrader3
KillTrigger killnotrader4
KillTrigger killnotrader5
KillTrigger killnotrader6
KillTrigger killisbeacon
KillTrigger killenemymine
SetVar $killnottargets ($killnottargets + 1)
Goto :KILLSTARTLOOP2
:KILLCHECK
KillTrigger killcheck
KillTrigger killtrader
KillTrigger killnotrader1
KillTrigger killnotrader2
KillTrigger killnotrader3
KillTrigger killnotrader4
KillTrigger killnotrader5
KillTrigger killnotrader6
KillTrigger killisbeacon
KillTrigger killenemymine
SetVar $line CURRENTLINE
GetWordPos $line $pos " w/ "
GetWord $line $word 1
StripText $word ":"
If ($word = "Ships")
	Goto :KILLNOTRADER2
End
If ($word = "Fighters") or ($word = "Mines") or ($word = "Warps") or ($word = "Citadel")
	Goto :KILLNOTRADER
End
If ($pos > 0)
	GetText $line $killcorp "[" "]"
	IsNumber $isnum $killcorp
	If ($isnum = TRUE)
		If ($killcorp = $z_corp) and ($z_corp <> 0)
			SetVar $killnottargets ($killnottargets + 1)
		Else
			SetVar $killtargets ($killtargets + 1)
		End
	Else
		SetVar $killtargets ($killtargets + 1)
	End
End
Goto :KILLSTARTLOOP2
:KILLNOTRADER
KillTrigger killcheck
KillTrigger killtrader
KillTrigger killnotrader1
KillTrigger killnotrader2
KillTrigger killnotrader3
KillTrigger killnotrader4
KillTrigger killnotrader5
KillTrigger killnotrader6
KillTrigger killisbeacon
KillTrigger killenemymine
If ($killtargets > 0)
	SetVar $killattackmacro "a t "
	SetVar $i 1
	While ($i <= $killnottargets)
		SetVar $killattackmacro ($killattackmacro & "n")
		SetVar $i ($i + 1)
	End
	SetVar $killattackmacro ($killattackmacro & "y q z " & $z_wave & "n y * ")
	Send "qm***"
	Gosub :GETSTATS
	If ($figs >= $z_wave)
		Send "q" & $killattackmacro 
		Gosub :Z_Lib~RETURNTOPLANET
		Send #145
		WaitFor #145 & #8
		Goto :CITKILLA
	Else
		Send "c"
		Goto :KILLEND
	End
Else
	SetVar $killtries ($killtries + 1)
	If ($killtries > 5)
		SetVar $killtries 0
		Goto :KILLEND
	Else
		Goto :KILLSTARTLOOP
	End
End
Goto :KILLSTARTLOOP2
:KILLNOTRADER2
KillTrigger killcheck
KillTrigger killtrader
KillTrigger killnotrader1
KillTrigger killnotrader2
KillTrigger killnotrader3
KillTrigger killnotrader4
KillTrigger killnotrader5
KillTrigger killnotrader6
KillTrigger killisbeacon
KillTrigger killenemymine
GetWord $line $word 1
StripText $word ":"
If ($word = "Fighters") or ($word = "Mines") or ($word = "Warps") or ($word = "Citadel")
	Goto :KILLNOTRADER
End
SetVar $killnottargets ($killnottargets + 1)
Goto :KILLSTARTLOOP2
:KILLEND
Return
# RUNEXTERNALCOMMAND 
:RUNEXTERNALCOMMAND
If ($mode = "GENERAL") or ($commandmode = "COMMAND")
	GetWordPos $commandfile $pos "\"
	If ($pos <> 0)
		FileExists $fileok $commandfile
	Else
		FileExists $fileok "scripts\" & $commandfile
	End
	If ($fileok = TRUE)
		SetVar $mode $commandmode
		If ($mode <> "COMMAND") and ($mode <> "DAEMON")
			If ($pos <> 0)
				SetVar $moderunning $commandfile
			Else
				SetVar $moderunning ("scripts\" & $commandfile)
			End
		End
		If ($mode = "DAEMON")
			SetVar $mode "GENERAL"
			SetVar $moderunning ""
		End
		Gosub :Z_Lib~COMMSON
		Send #145
		WaitOn #145 & #8
		SetEventTrigger scriptdone :SCRIPTDONE "SCRIPT STOPPED" $moderunning
		Load $commandfile
	End
End
Return
# SCRIPTDONE 
:SCRIPTDONE
KillAllTriggers
SetVar $mode "GENERAL"
SetVar $moderunning ""
Gosub :CLEARPARMS
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# :CHECKINTERNAL 
:CHECKINTERNAL
SetVar $isinternalcommand FALSE
SetVar $isexternalcommand FALSE
SetVar $i 1
While ($i <= $internalcommands)
	If ($command = $internalcommand[$i])
		SetVar $isinternalcommand TRUE
		SetVar $commandmode $internalmode[$i]
		SetVar $internalindex $i
		SetVar $i $internalcommands
	End
	SetVar $i ($i + 1)
End
Return
# CHECKEXTERNAL 
:CHECKEXTERNAL
SetVar $isexternalcommand FALSE
SetVar $isinternalcommand FALSE
SetVar $i 1
While ($i <= $externalcommands)
	If ($command = $externalcommand[$i])
		SetVar $isexternalcommand TRUE
		SetVar $commandfile $externalfile[$i]
		SetVar $commandmode $externalmode[$i]
		SetVar $i $externalcommands
	End
	SetVar $i ($i + 1)
End
Return
# PARSEUCL 
:PARSEUCL
SaveVar $command
SaveVar $user_command_line
GetWord $user_command_line $parm1 1
SaveVar $parm1
GetWord $user_command_line $parm2 2
SaveVar $parm2
GetWord $user_command_line $parm3 3
SaveVar $parm3
GetWord $user_command_line $parm4 4
SaveVar $parm4
GetWord $user_command_line $parm5 5
SaveVar $parm5
GetWord $user_command_line $parm6 6
SaveVar $parm6
GetWord $user_command_line $parm7 7
SaveVar $parm7
GetWord $user_command_line $parm8 8
SaveVar $parm8
GetWord $user_command_line $parm9 9
SaveVar $parm9
GetWord $user_command_line $parm10 10
SaveVar $parm10
GetWord $user_command_line $parm11 11
SaveVar $parm11
GetWord $user_command_line $parm12 12
SaveVar $parm12
GetWord $user_command_line $parm13 13
SaveVar $parm13
Return
# CHECKCORPY 
:CHECKCORPY
SetVar $isacorpy FALSE
LowerCase $sender
GetLength $sender $len
If ($len > 6)
	CutText $sender $sender 1 6
End
SetVar $Z_Strings~trimstring $sender
Gosub :Z_Strings~RTRIM
SetVar $sender $Z_Strings~trimstring
SetVar $i 1
While ($i <= $z_corpies)
	If ($z_corpy[$i] = $sender)
		SetVar $isacorpy TRUE
		SetVar $i $z_corpies
	End
	SetVar $i ($i + 1)
End
Return
# SETMAINTRIGGERS 
:SETMAINTRIGGERS
KillAllTriggers
SetTextOutTrigger        t4 :SELFBOT $z_selfbotkey
SetTextOutTrigger t46 :STOPALLKEYPRESSED $z_stopallkey
If ($z_pr = "TRUE") and ($p = TRUE)
	SetTextTrigger t69 :PHOTONRESPONSE "launched a P-Missile in sector"
End
If ($z_sr = TRUE) and ($p = TRUE)
	Gosub :SETSRTRIGGERS
End
If (($mode = "GENERAL") or ($mode = "COMMAND"))
	SetTextOutTrigger t61 :LASTBOTKEYPRESSED $z_lastbotkey
	SetTextOutTrigger t5 :MENU $z_menukey
	SetTextOutTrigger t11 :CHARGEKEYPRESSED $z_chargekey 
	SetTextOutTrigger t12 :MOWKEYPRESSED $z_mowkey
	SetTextOutTrigger t14 :MENULAUNCH $z_actkey
	SetTextOutTrigger t16 :TWARPKEYPRESSED $z_transwarpkey
	SetTextOutTrigger t18 :HOOKANDTOW $z_hooktowkey
	SetTextOutTrigger t19 :TOPOFFKEYPRESSED $z_topoffkey
	SetTextOutTrigger t20 :XFER $z_xferkey
	SetTextOutTrigger t21 :BANNER $z_bannerkey
	SetTextOutTrigger t22 :CITADELMENU $z_citmenukey
	SetTextOutTrigger t23 :BLINDWARPKEYPRESSED $z_blindwarpkey
	SetTextOutTrigger t24 :DISRUPT $z_disrkey
	SetTextOutTrigger t26 :SAFETYNETKEYPRESSED $z_safetynetkey
	SetTextOutTrigger t27 :HOTMENUKEYPRESSED $z_hotmenukey
	SetTextOutTrigger t28 :INFOKEYPRESSED $z_infokey
	SetTextOutTrigger t29 :PROBEKEYPRESSED $z_probekey
	SetTextOutTrigger t30 :ZTMKEYPRESSED $z_ztmkey
	SetTextOutTrigger t33 :WALKERKEYPRESSED $z_walkkey
	SetTextOutTrigger t34 :ATTACKKEYPRESSED $z_attackkey
	SetTextOutTrigger t36 :FUELKEYPRESSED $z_fuelkey
	SetTextOutTrigger t37 :CAPKEYPRESSED $z_capkey
	If ($p = TRUE)
		SetTextOutTrigger t43 :REFIGKEYPRESSED $z_refigkey
	End
	SetTextOutTrigger t44 :MATRIXKEYPRESSED $z_matrixkey
	SetTextOutTrigger t45 :HOOKMANKEYPRESSED $z_hookmankey
	
	SetTextOutTrigger t53 :AUTOKEYPRESSED $z_autokey
	If ($p = TRUE)
		SetTextOutTrigger t55 :HUNTKEYPRESSED $z_huntkey
	End
	SetTextOutTrigger t59 :HASHKEYPRESSED "#"
	SetTextOutTrigger t60 :HOTLISTKEYPRESSED $z_hotlistkey
	
	SetTextOutTrigger t63 :PANELKEYPRESSED $z_panelkey
	SetTextOutTrigger t70 :WATCHKEYPRESSED $z_watchkey
	SetTextOutTrigger t74 :FASTREFILLKEYPRESSED $z_fastrefillkey
	#SetTextOutTrigger t76 :NUMBERMENU #220
	SetTextOutTrigger t79 :SETPLANETKEYPRESSED $z_setplanetkey
	SetTextOutTrigger t82 :LOOPERKEYPRESSED $z_loopkey
	SetVar $x 1
	While ($x <= $hotkeys)
		SetTextOutTrigger "hotkey" & $x :HOTKEYPRESSED $hotkey[$x]
		SetVar $x ($x + 1)
	End
	SetTextTrigger            t2 :TURNOFFKEYS "What do you want to name"
	SetTextTrigger           t2a :TURNOFFKEYS2 "<Create New Corporation>"
	If ($z_updateship = "TRUE")
		SetTextTrigger       t10 :CHANGEDSHIP "Security code accepted, engaging transporter control."
	End
	If ($bbop = TRUE)
		SetTextTrigger t58 :BBOPTRIGGER "enters the citadel."
	End

End
SetTextLineTrigger       t1 :REMOTECOMMANDHANDLER $z_botname
SetTextLineTrigger       t3 :NEWCORPY "You have a corporate memo from"
SetTextTrigger            t6 :SET1AVOID "will now be avoided in future navigation calculations."
SetTextTrigger            t7 :CLEAR1AVOID "has been cleared and will be used in future plots."
SetTextLineTrigger       t8 :CLEARAVOIDS "Avoided sectors Cleared."
If (($z_mslflag = TRUE) and ($z_mslsok = TRUE)) or ($z_bustflag = TRUE) or ($z_limpetalarm = TRUE) or ($z_specflag = TRUE) or ($z_lrsflag = TRUE) or ($z_pr = "TRUE") or ($watch = TRUE)
	SetTextTrigger        t9 :FLAGS "] (?=Help)? :"
	SetTextTrigger       t9a :FLAGS "Citadel command (?=help)"
End
SetTextOutTrigger       t13 :BOTONOFF $z_botonoffkey
SetTextTrigger           t15 :AUTOSETAUTOSSON "[Z]FIGMONAUTOSSON[Z]"
SetTextTrigger           t17 :NEWCORPY2 "joined your Corp."
SetTextTrigger          t25 :CBY "ARE YOU SURE CAPTAIN?"
If ($servershutdowntriggers = TRUE)
	SetTextLineTrigger t31 :SERVERSHUTDOWN "The server will shut down in"
	SetTextLineTrigger t32 :SERVERSHUTDOWN "The server is shutting down."
End
If ($z_heraldturns = TRUE)
	SetTextLineTrigger t35 :HERALDTURNS "You recover"
End
If ($z_limpalarm = TRUE)
	If ($z_limpetalarm <> TRUE)
		SetTextTrigger  t38 :LIMPETDETECT "You hear a faint, metallic click on your hull."
	Else
		SetTextTrigger  t39 :LIMPETCLEAR "<StarDock> Where to? (?=Help)"
		SetTextTrigger t39a :LIMPETCLEAR "Which item do you wish to buy? (A,B,C,Q,?)"
		SetTextTrigger  t40 :LIMPETCLEAR "they find and remove the Limpet"
	End
	SetTextLineTrigger t40a :LIMPETACTIVATED "Limpet mine in"
End
If ($z_team <> "") and ($z_team <> "0")
	SetTextLineTrigger t41 :REMOTECOMMANDHANDLER " " & $z_team & " "
End
If ($z_figger = TRUE)
	SetTextLineTrigger t42 :REFIG "=figme!"
	SetTextTrigger t50 :FIGGERSCRIPT "cript?"
End
SetTextTrigger          t47 :SENDINGMESSAGE "Sub-space radio ("
SetTextTrigger          t48 :SENDINGMESSAGE "Hailing frequencies: [<ENTER>"
SetTextTrigger          t49 :SENDINGMESSAGE "Type corporate message [<ENTER>"
SetTextTrigger         t49a :SENDINGMESSAGE "Federation comm-link: [<ENTER>"
SetTextTrigger         t49b :SENDINGMESSAGE "Enter your general announcement now [155 chars]"
#SetTextTrigger        t49c :SENDINGMESSAGE "~~~~~@@~~~~"
If ($damage = TRUE)
	SetTextLineTrigger damaged :DAMAGED "The console reports damages of"
End
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
If ($moderunning <> "") and ($moderunning <> "0")
	SetEventTrigger scriptdone :SCRIPTDONE "SCRIPT STOPPED" $moderunning
End
If ($z_ignorescriptloads <> "TRUE")
	SetEventTrigger t51 :SCRIPTLOADED2 "SCRIPT LOADED"
End
SetEventTrigger t52 :SCRIPTSTOPPED "SCRIPT STOPPED"
If ($z_autostatus = TRUE) and ($z_autotype = 3) and ($z_autotrigger <> "") and ($z_autotrigger <> "0")
	SetTextLineTrigger t54 :AUTOTRIGGER $z_autotrigger
ElseIf ($z_autostatus = TRUE) and ($z_autotype = 4) and ($z_autotrigger <> "") and ($z_autotrigger <> "0")
	SetTextTrigger t54 :AUTOTRIGGER $z_autotrigger
End
If ($fedwatch = TRUE) and ($mode = "GENERAL")
	SetTextLineTrigger t56 :FEDWATCHWARN "warps into the sector"
	SetTextLineTrigger t57 :FEDWATCHWARN "appears in a brilliant flash"
End
If ($autofurb = TRUE)
	SetTextTrigger t62 :AUTOFURBTRIGGER "(ship in tow) enters the sector"
End
SetTextTrigger t64 :STANDDOWN $z_code & "[Z]STANDDOWN[Z]" & $z_code
SetTextTrigger t65 :ATTENTION $z_code & "[Z]ATTENTION[Z]" & $z_code
SetTextTrigger t66 :BALANCE "credits in your account."
SetTextTrigger t67 :DEPOSIT "credits have been deposited in your account."
SetTextLineTrigger t68 :WITHDRAWAL "credits have been withdrawn from your account."
SetTextLineTrigger t71 :RESCUEISON "Zed's Rescue Service operational and standing by on planet"
SetTextLineTrigger t71a :RESCUEISON " - Running from planet"
SetTextLineTrigger t72 :RESCUEISOFF "Zed's Rescue Service is shutting down.."
SetTextTrigger t73 :BOTRESET $z_code & "[Z]RESETALLSYSTEMS[Z]" & $z_code
SetTextTrigger t75 :TURNOFFKEYS3 "Which ship are you interested in (?=List) ?"
SetTextTrigger t75a :TURNOFFKEYS3 "Which planet type are you interested in (?=List) ?"
If ($z_heraldhit <> FALSE)
	SetTextLineTrigger t77 :HERALDHIT "Deployed Fighters Report Sector"
Else
	SetTextLineTrigger t77 :LASTHIT "Deployed Fighters Report Sector"
End
If ($p = TRUE) and ($targetsystemok = TRUE)
	SetTextLineTrigger t78 :TSUPDATE "FIGSEC_ADD Sector"
End
If ($autorefurb = TRUE)
	SetTextLineTrigger t80 :AUTOREFURB " Busted in Sector "
	SetTextLineTrigger t81 :AUTOREFURB " Busted in ship "
End
Gosub :SETPULSETRIGGER
If ($z_safetynet = TRUE)
	Gosub :SAFETYNETTRIGGERS
End
If ($twxerror = TRUE)
	SetVar $twxerror FALSE
	Echo "*" & $boldgreen & "CORRECTION SUCCESSFUL..*"
End
Return
# NUMBERMENU 
:NUMBERMENU

ECHO "***!!! IT WORKED !!!***"

SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LOOPERKEYPRESSED 
:LOOPERKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :Z_Lib~COMMSOFF
LoadVar $z_loopmode
LoadVar $z_loopcommand
LoadVar $z_loops
LoadVar $z_loopsynctype
LoadVar $z_looptrigptr
LoadVar $z_loopdelay
LoadVar $z_loopmacptr
LoadVar $z_loopvar1
LoadVar $z_loopvar2
LoadVar $z_loopvar3
LoadVar $z_loopvar4
LoadVar $z_loopvar5
Gosub :GETTRIGGERS
Gosub :GETMACROS
If ($z_looptrigptr < 1)
	SetVar $z_looptrigptr 1
ElseIf ($z_looptrigptr > $triggercount)
	SetVar $z_looptrigptr $triggercount
End
If ($z_loopmacptr < 1)
	SetVar $z_loopmacptr 1
ElseIf ($z_loopmacptr > $macrocount)
	SetVar $z_loopmacptr $macrocount
End

:STARTLOOPER
If ($z_loopmode <> "MACRO")
	SetVar $z_loopmode "COMMAND"
End
If ($z_loopcommand = "0")
	SetVar $z_loopcommand ""
End
If ($z_loopmacro = "0")
	SetVar $z_loopmacro ""
End
If ($z_loops < 1)
	SetVar $z_loops 1
End
If ($z_loopsynctype <> "TRIGGER")
	SetVar $z_loopsynctype "DELAY"
End
If ($z_loopdelay < 100)
	SetVar $z_loopdelay 100
End
If ($z_loopvar1 = "0")
	SetVar $z_loopvar1d ""
Else
	SetVar $z_loopvar1d $z_loopvar1
End
If ($z_loopvar2 = "0")
	SetVar $z_loopvar2d ""
Else
	SetVar $z_loopvar2d $z_loopvar2
End
If ($z_loopvar3 = "0")
	SetVar $z_loopvar3d ""
Else
	SetVar $z_loopvar3d $z_loopvar3
End
If ($z_loopvar4 = "0")
	SetVar $z_loopvar4d ""
Else
	SetVar $z_loopvar4d $z_loopvar4
End
If ($z_loopvar5 = "0")
	SetVar $z_loopvar5d ""
Else
	SetVar $z_loopvar5d $z_loopvar5
End

SetVar $z_looptrigger $triggers[$z_looptrigptr]
SetVar $z_loopmacro $macros[$z_loopmacptr]
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                      <<<=-[ " & $boldwhite & "MACRO COMMAND LOOPER" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" & $boldred & "-=[" & $boldyellow & "1" & $boldred & "]=- " & $boldcyan & "Looper Mode     : " & $boldgreen & $z_loopmode
If ($z_loopmode = "COMMAND")
	Echo "*" & $boldred & "-=[" & $boldyellow & "2" & $boldred & "]=- " & $boldcyan & "Command Line    : " & $boldwhite & $z_loopcommand
Else
	If ($z_loopmacptr = $macrocount + 1)
		Echo "*" & $boldred & "-=[" & $boldyellow & "2" & $boldred & "]=- " & $boldcyan & "Macro           : " & $boldred & "----------"
		Echo "*" & $boldred & "-=[" & $boldyellow & "M" & $boldred & "]=- " & $boldcyan & "Add New Macro"
	Else
		Echo "*" & $boldred & "-=[" & $boldyellow & "2" & $boldred & "]=- " & $boldcyan & "Macro           : " & $boldyellow & $z_loopmacro
	End
End
Echo "*" & $boldred & "-=[" & $boldyellow & "3" & $boldred & "]=- " & $boldcyan & "Iterations      : " & $boldwhite & $z_loops
Echo "*" & $boldred & "-=[" & $boldyellow & "4" & $boldred & "]=- " & $boldcyan & "Synchroniser    : " & $boldgreen & $z_loopsynctype
If ($z_loopsynctype = "TRIGGER")
	If ($z_looptrigptr = $triggercount + 1)
		Echo "*" & $boldred & "-=[" & $boldyellow & "5" & $boldred & "]=- " & $boldcyan & "Trigger         : " & $boldred & "----------"
		Echo "*" & $boldred & "-=[" & $boldyellow & "T" & $boldred & "]=- " & $boldcyan & "Add New Trigger"
	Else
		Echo "*" & $boldred & "-=[" & $boldyellow & "5" & $boldred & "]=- " & $boldcyan & "Trigger         : " & $boldyellow & $z_looptrigger
	End
Else
	Echo "*" & $boldred & "-=[" & $boldyellow & "5" & $boldred & "]=- " & $boldcyan & "Delay (msecs)   : " & $boldwhite & $z_loopdelay
End
Gosub :Z_Lib~REDLINE
Echo "*" & $boldred & "-=[" & $boldyellow & "6" & $boldred & "]=- " & $boldcyan & "User Constant 1 : " & $boldwhite & $z_loopvar1d
Echo "*" & $boldred & "-=[" & $boldyellow & "7" & $boldred & "]=- " & $boldcyan & "User Constant 2 : " & $boldwhite & $z_loopvar2d
Echo "*" & $boldred & "-=[" & $boldyellow & "8" & $boldred & "]=- " & $boldcyan & "User Constant 3 : " & $boldwhite & $z_loopvar3d
Echo "*" & $boldred & "-=[" & $boldyellow & "9" & $boldred & "]=- " & $boldcyan & "User Constant 4 : " & $boldwhite & $z_loopvar4d
Echo "*" & $boldred & "-=[" & $boldyellow & "A" & $boldred & "]=- " & $boldcyan & "User Constant 5 : " & $boldwhite & $z_loopvar5d
Gosub :Z_Lib~REDLINE
Echo "*" & $boldred & " [ " & $boldgreen & "Available System Constants" & $boldred & " ]"
Echo "*"
Echo "*" & $boldred & "[" & $boldyellow & "wave" & $boldred & "]        " & $boldcyan & "Max Fig Attack  : " & $boldwhite & $z_wave
Echo "*" & $boldred & "[" & $boldyellow & "base" & $boldred & "]        " & $boldcyan & "Base Sector     : " & $boldwhite & $z_base
Echo "*" & $boldred & "[" & $boldyellow & "safesector" & $boldred & "]  " & $boldcyan & "Safe Sector     : " & $boldwhite & $z_safesector
Echo "*" & $boldred & "[" & $boldyellow & "safeship" & $boldred & "]    " & $boldcyan & "Safe Ship       : " & $boldwhite & $z_safeship
Echo "*" & $boldred & "[" & $boldyellow & "planet" & $boldred & "]      " & $boldcyan & "Main Planet     : " & $boldwhite & $z_planet
Echo "*" & $boldred & "[" & $boldyellow & "stardock" & $boldred & "]    " & $boldcyan & "Stardock Sector : " & $boldwhite & STARDOCK
Echo "*" & $boldred & "[" & $boldyellow & "alpha" & $boldred & "]       " & $boldcyan & "Alpha Centauri  : " & $boldwhite & ALPHACENTAURI
Echo "*" & $boldred & "[" & $boldyellow & "rylos" & $boldred & "]       " & $boldcyan & "Rylos Sector    : " & $boldwhite & RYLOS
Gosub :Z_Lib~REDLINE
Echo "*" & $boldred & "-=[" & $boldyellow & "G" & $boldred & "]=- " & $boldcyan & "Go   " & $boldgreen & "(run the " & $z_loopmode & " loop)"
Echo "*" & $boldred & "-=[" & $boldyellow & "Q" & $boldred & "]=- " & $boldcyan & "Quit " & $boldred & "(discard changes)"
Gosub :Z_Lib~REDLINE
Echo "*" & $boldred & "-=[" & $boldyellow & "ENTER" & $boldred & "]=- " & $boldcyan & "Quit " & $boldyellow & "(save changes)"
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
KillAllTriggers

UpperCase $choice
If ($choice = "1")
	If ($z_loopmode = "MACRO")
		SetVar $z_loopmode "COMMAND"
	Else
		SetVar $z_loopmode "MACRO"
	End
ElseIf ($choice = "2")
	If ($z_loopmode = "COMMAND")
		Echo "**" & $boldyellow & "(Use [1], [2], [3], [4] or [5] to signify a constant)"
		Echo "*" & $boldwhite & "Command line: "
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $z_loopcommand $value
		End
	Else
		SetVar $z_loopmacptr ($z_loopmacptr + 1)
		If ($z_loopmacptr > ($macrocount + 1))
			SetVar $z_loopmacptr 1
		End
	End	
ElseIf ($choice = "M")
		If ($z_loopmode = "MACRO") and ($z_loopmacptr = ($macrocount + 1))
			Echo "**" & $boldyellow & "(Use [1], [2], [3], [4] or [5] to signify a constant.)"
			Echo "*" & $boldyellow & "(" & #42 & " or ^M signify a RETURN key press.)"
			Echo "*" & $boldwhite & "New Macro: "
			GetConsoleInput $value
			If ($value <> "") and ($value <> "0") and ($value <> #13)
				SetVar $macros[$z_loopmacptr] $value
				SetVar $macrocount $z_loopmacptr
				Write "z-macros.cfg" $macros[$macrocount]
			End
		End
ElseIf ($choice = "3")
	Echo "**" & $boldwhite & "Loops: "
	GetConsoleInput $value
	IsNumber $isnum $value
	If ($value <> "") and ($value <> "0") and ($value <> #13) and ($isnum = TRUE)
		SetVar $z_loops $value
	End
ElseIf ($choice = "4")
	If ($z_loopsynctype = "DELAY")
		SetVar $z_loopsynctype "TRIGGER"
	Else
		SetVar $z_loopsynctype "DELAY"
	End
ElseIf ($choice = "5")
	If ($z_loopsynctype = "TRIGGER")
		SetVar $z_looptrigptr ($z_looptrigptr + 1)
		If ($z_looptrigptr > ($triggercount + 1))
			SetVar $z_looptrigptr 1
		End
	Else
		Echo "**" & $boldwhite & "Delay (1000 = 1 sec): "
		GetConsoleInput $value
		IsNumber $isnum $value
		If ($value <> "") and ($value <> "0") and ($value <> #13) and ($isnum = TRUE)
			SetVar $z_loopdelay $value
			If ($z_loopdelay < 100)
				SetVar $z_loopdelay 100
			End
		End
	End
ElseIf ($choice = "6")
	Echo "**" & $boldwhite & "Constant 1: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_loopvar1 $value
	End
ElseIf ($choice = "7")
	Echo "**" & $boldwhite & "Constant 2: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_loopvar2 $value
	End
ElseIf ($choice = "8")
	Echo "**" & $boldwhite & "Constant 3: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_loopvar3 $value
	End
ElseIf ($choice = "9")
	Echo "**" & $boldwhite & "Constant 4: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_loopvar4 $value
	End
ElseIf ($choice = "A")
	Echo "**" & $boldwhite & "Constant 5: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_loopvar5 $value
	End
ElseIf ($choice = "T")
	If ($z_loopsynctype = "TRIGGER") and ($z_looptrigptr = ($triggercount + 1))
		Echo "**" & $boldwhite & "New Trigger: "
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $triggers[$z_looptrigptr] $value
			SetVar $triggercount $z_looptrigptr
			Write "z-triggers.cfg" $triggers[$triggercount]
		End
	End
ElseIf ($choice = "G")
	SaveVar $z_loopmode
	SaveVar $z_loopcommand
	SaveVar $z_loops
	SaveVar $z_loopsynctype
	SaveVar $z_looptrigptr
	SaveVar $z_loopdelay
	SaveVar $z_loopmacptr
	SaveVar $z_loopvar1
	SaveVar $z_loopvar2
	SaveVar $z_loopvar3
	SaveVar $z_loopvar4
	SaveVar $z_loopvar5
	Goto :STARTLOOP
	
ElseIf ($choice = "Q")
	Gosub :Z_Lib~COMMSON
	Echo "**" & $boldred & "Settings NOT Saved.**"
	Goto :NOLOOPER
ElseIf ($choice = #13)
	SaveVar $z_loopmode
	SaveVar $z_loopcommand
	SaveVar $z_loops
	SaveVar $z_loopsynctype
	SaveVar $z_looptrigptr
	SaveVar $z_loopdelay
	SaveVar $z_loopmacptr
	SaveVar $z_loopvar1
	SaveVar $z_loopvar2
	SaveVar $z_loopvar3
	SaveVar $z_loopvar4
	SaveVar $z_loopvar5
	Gosub :Z_Lib~COMMSON
	Echo "**" & $boldgreen & "Settings Saved.**"
	Goto :NOLOOPER
End
Goto :STARTLOOPER
:STARTLOOP
Gosub :Z_Lib~COMMSON
If ($z_loopmode = "MACRO")
	SetVar $loopcommandline $z_loopmacro
Else
	SetVar $loopcommandline $z_loopcommand
End
SetVar $loopcounter 1
SetVar $loopcounter2 $loopcounter
While ($loopcounter <= $z_loops)
	Echo "**" & $boldgreen & "MACRO COMMAND LOOPER ITERATION# " & $boldyellow & $blinkon & $loopcounter & $blinkoff & $boldgreen & " of " & $boldyellow & $z_loops & "**"
	If ($z_loopmode = "MACRO")
		SetVar $user_command_line $loopcommandline
		Replacetext $user_command_line "[1]" $z_loopvar1
		Replacetext $user_command_line "[2]" $z_loopvar2
		Replacetext $user_command_line "[3]" $z_loopvar3
		Replacetext $user_command_line "[4]" $z_loopvar4
		Replacetext $user_command_line "[5]" $z_loopvar5
		ReplaceText $user_command_line "^m" #42
		ReplaceText $user_command_line "^M" #42
		Replacetext $user_command_line "[wave]" $z_wave
		Replacetext $user_command_line "[base]" $z_base
		Replacetext $user_command_line "[planet]" $z_planet
		Replacetext $user_command_line "[safesector]" $z_safesector
		Replacetext $user_command_line "[safeship]" $z_safeship
		Replacetext $user_command_line "[stardock]" STARDOCK
		Replacetext $user_command_line "[alpha]" ALPHACENTAURI
		Replacetext $user_command_line "[rylos]" RYLOS
		
		Gosub :INTCOM_MAC
	Else
		SetVar $commandline $loopcommandline
		Replacetext $commandline "[1]" $z_loopvar1
		Replacetext $commandline "[2]" $z_loopvar2
		Replacetext $commandline "[3]" $z_loopvar3
		Replacetext $commandline "[4]" $z_loopvar4
		Replacetext $commandline "[5]" $z_loopvar5
		Replacetext $user_command_line "[wave]" $z_wave
		Replacetext $user_command_line "[base]" $z_base
		Replacetext $user_command_line "[planet]" $z_planet
		Replacetext $user_command_line "[safesector]" $z_safesector
		Replacetext $user_command_line "[safeship]" $z_safeship
		Replacetext $user_command_line "[stardock]" STARDOCK
		Replacetext $user_command_line "[alpha]" ALPHACENTAURI
		Replacetext $user_command_line "[rylos]" RYLOS
		
		SetVar $looping TRUE
		GoSub :AUTOBOT
		SetVar $looping FALSE
	End
	If ($loopcounter >= $z_loops)
		Goto :LOOPDELAY
	End
	If ($z_loopsynctype = "TRIGGER")
		SetTextTrigger loop1 :LOOPDELAY $z_looptrigger
		Echo "**" & $boldgreen & "MACRO COMMAND LOOPER - Waiting for trigger [" & $boldyellow & $z_looptrigger & $boldgreen & "]."
	Else
		SetDelayTrigger loop2 :LOOPDELAY $z_loopdelay
		Echo "**" & $boldgreen & "MACRO COMMAND LOOPER - Waiting for delay [" & $boldyellow & $z_loopdelay & $boldgreen & "]."
	End
		Echo "*" & $boldgreen & "[" & $boldyellow & "TAB" & $boldgreen & "]-Continue "& $boldgreen & " [" & $boldyellow & "BACKSPACE" & $boldgreen & "]-Abort.**"
	SetTextOutTrigger nextloop :LOOPDELAY #9
	SetTextOutTrigger loop3 :LOOPABORT #8
	Pause
:LOOPABORT
	KillAllTriggers
	SetVar $loopcounter2 $loopcounter + 1
	SetVar $loopcounter ($z_loops + 1)
	Echo "**" & $boldred & "MACRO COMMAND LOOPER ABORTED BY USER!**"
	Goto :LOOPENDER
:LOOPDELAY
	KillAllTriggers
	SetVar $loopcounter ($loopcounter + 1)
	SetVar $loopcounter2 $loopcounter
:LOOPENDER
End
Send #145
WaitOn #145 & #8
Echo "**" & $boldcyan & "MACRO COMMAND LOOPER FINISHED " & $boldyellow & $blinkon & ($loopcounter2 - 1) & $blinkoff & $boldcyan & " of " & $boldyellow & $z_loops & $boldcyan & " ITERATIONS.**"
If ($z_usesound = TRUE)
	Sound ding
End
:NOLOOPER
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# SETSRTRIGGERS 
:SETSRTRIGGERS
SetTextTrigger sr1 :SECTORRESPONSE "warps into the sector"
SetTextTrigger sr2 :SECTORRESPONSE "appears in a brilliant flash"
SetTextTrigger sr3 :SECTORRESPONSE " lifts off from "
SetTextTrigger sr4 :SECTORRESPONSE " blasts off from "
SetTextTrigger sr5 :SECTORRESPONSE "Traders :"
SetTextTrigger sr6 :SECTORRESPONSE "is powering up weapons systems!"
SetTextTrigger sr7 :SRSCANNING "Long Range Scan"
Return
# SECTORRESPONSE 
:SECTORRESPONSE
KillAllTriggers
SetVar $linecheck CURRENTLINE
GetWord $linecheck $spf 1
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NOSR
End
Gosub :CHECKTARGET2
If ($targetok = FALSE)
   Goto :NOSR
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $srprompt 1 7
Echo "***" & $boldwhite & "SECTOR RESPONDER - " & $boldred & $blinkon & "Engaging the enemy...***" & $blinkoff
OpenMenu TWX_STOPALLFAST FALSE

SetVar $attackmode $z_sr
Gosub :SHIPCAP
Gosub :GETSTATS
If ($srprompt = "Citadel")
	Goto :SRSTANDDOWN
ElseIf ($current_sector = STARDOCK)
   SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
   #SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
   SetTextLineTrigger srbuy :SRBUYFIGS "B  Fighters"
   Send "p sg yg qs p"
   Pause
:SRBUYFIGS
	KillAllTriggers
	GetWord CURRENTLINE $z_figstobuy 8
	StripText $z_figstobuy ","
	If ($z_figstobuy <= 20)
		If ($missing <> TRUE)
			SetVar $missing TRUE
		Else	
			Goto :SRSTANDDOWN
		End
	Else
		SetVar $missing FALSE
	End
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	SetTextLineTrigger srbuy :SRBUYSHLDS "C  Shield Points"
	Send "b" & $z_figstobuy & "*"
	Pause
:BUYSHLDS
	KillAllTriggers
	GetWord CURRENTLINE $z_shldstobuy 9
	StripText $z_shldstobuy ","
	SetTextTrigger sr5 :SECTORRESPONSE "Traders :"
	SetDelayTrigger srstanddown :SRSTANDDOWN "1500"
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	Send "c" & $z_shldstobuy & "*qqq*/"
	Pause
ElseIf ($current_sector = RYLOS) or ($current_sector = ALPHACENTAURI) or ($current_sector = "1")
	KillAllTriggers
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	SetTextLineTrigger srbuy :SRBUYFIGS2 "B  Fighters"
	Send "p  * y *"
	Pause
:SRBUYFIGS2
	KillAllTriggers
	GetWord CURRENTLINE $z_figstobuy 8
	StripText $z_figstobuy ","
	If ($z_figstobuy <= 20)
		If ($missing <> TRUE)
			SetVar $missing TRUE
		Else	
			If (CURRENTSECTOR = 1)
				Send "q l "
			End
			Goto :SRSTANDDOWN
		End
	Else
		SetVar $missing FALSE
	End
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	SetTextLineTrigger srbuy :SRBUYSHLDS2 "C  Shield Points"
	Send "b"& $z_figstobuy &"*"
	Pause
:SRBUYSHLDS2
	KillAllTriggers
	GetWord CURRENTLINE $z_shldstobuy 9
	StripText $z_shldstobuy ","
	SetTextTrigger sr5 :SECTORRESPONSE "Traders :"
	SetDelayTrigger srstanddown :SRSTANDDOWN "1500"
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	Send "c" & $z_shldstobuy & "*q*/"
	Pause
ElseIf ($current_sector = $z_base) and ($z_planet <> "0")
	SetVar $PARM1 "0"
	SetVar $PARM2 "0"
	SetVar $PARM3 "0"
	Gosub :INTCOM_LAND
	SetVar $nomessage TRUE
	SetVar $PARM1 "0"
	Gosub :INTCOM_REFILL
	Gosub :GETSTATS
	If ($figs = $z_maxfigs)
		SetVar $attackmode "KILL"
		Gosub :SHIPCAP
		Gosub :GETSTATS
	End
	Goto :SRSTANDDOWN
Else
	If ($ore < $holds)
		GetSectorParameter $current_sector "BUSTED" $busted
		If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0") and ($busted <> TRUE)
			Send "p * * * z 0* z 0*"
			Gosub :GETSTATS
		End
	End
	If ($z_safesector = "0")
		If ($align >= 1000)
			SetVar $srsafe 1
		Else
			SetVar $srsafe 0
		End
	Else
		SetVar $srsafe $z_safesector
	End
	SetVar $previoussector $current_sector
	If ($srsafe <> "0")
		Gosub :CLEARMOVEOPTIONS
		SetVar $z_dockport TRUE
		SetVar $target $srsafe
		Gosub :TWARPING
		Gosub :GETSTATS
		If ($current_sector <> $srsafe)
			SetVar $mowmode "Charge"
			Gosub :MOVE
		End
	End
	If ($srsafe = "0") or (($current_sector <> $srsafe) and ($srsafe <> "0"))
		If ($z_safeship <> "0") and ($shipid <> $z_safeship)
			SetVar $PARM1 $z_safeship
			Gosub :INTCOM_XPORT
			Gosub :GETSTATS
		End
	End
	
	If ($srsafe = "0") or (($current_sector <> $srsafe) and ($srsafe <> "0"))
		If ($z_rescueavailable = TRUE)
			Gosub :INTCOM_CALL
		End
	End
	Goto :SRSTANDDOWN
End

:SRSTANDDOWN
Echo "***" & $boldwhite & "SECTOR RESPONDER - " & $boldgreen & "Attack complete!***"
SetVar $Z_Logs~logentry $scripttitle & ": SECTOR RESPONDER ACTIVATED!"
Gosub :Z_Logs~ENTERLOG
If ($z_usesound = TRUE)
	Sound alert
End
Goto :NOSR
:NOSR
Gosub :GETSTATS
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# CHECKTARGET2 
:CHECKTARGET2
SetVar $targetok TRUE
SetVar $linecheck CURRENTLINE
UpperCase $linecheck
GetWord $linecheck $word1 1
If ($word1 = "TRADERS")
	GetText $linecheck $killcorp "[" "]"
	IsNumber $isnum $killcorp
	If ($isnum = TRUE)
		If ($killcorp = $z_corp) and ($z_corp <> 0)
			SetVar $targetok FALSE
		End
	End
   If ($targetok = FALSE)
      Goto :TARGETCHKDONE2
   End
End
GetWordPos $linecheck $pos "LIFTS"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET2
End
GetWordPos $linecheck $pos "BLASTS"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET2
End
GetWordPos $linecheck $pos "WARPS"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET2
End
GetWordPos $linecheck $pos "APPEARS"
If ($pos > 2)
   SetVar $pos ($pos - 2)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET2
End
GetWordPos $linecheck $pos "POWERING"
If ($pos > 5)
   SetVar $pos ($pos - 5)
   CutText $linecheck $target 1 $pos
   Goto :GOTTARGET2
End
:GOTTARGET2
GetLength $target $len
If ($len > 6)
	CutText $target $target 1 6
End
SetVar $Z_Strings~trimstring $target
Gosub :Z_Strings~RTRIM
SetVar $target $Z_Strings~trimstring
SetVar $count "1"
While ($count <= $corpycount)
   If ($target = $corpy[$count])
      SetVar $targetok FALSE
   End
   SetVar $count ($count + 1)
End
:TARGETCHKDONE2
SetVar $target ""
Return
# SRSCANNING 
:SRSCANNING
KillAllTriggers
SetTextTrigger srscanned :SRSCANNED "] (?=Help)? :"
Pause
:SRSCANNED
KillAllTriggers
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# AUTOREFURB 
:AUTOREFURB
KillAllTriggers
SetVar $line CURRENTLINE
GetText $line $arsect "Sector " ".."
GetText $line $arship "ship " ", FURB"
If ($arsect <> "") and ($arsect <> "0")
	IsNumber $isnum $arsect
	If ($isnum = TRUE)
		If ($arsect > 10) and ($arsect <= SECTORS) and ($arsect <> STARDOCK)
			SetVar $PARM1 $arsect
			If ($ardecash = TRUE)
				SetVar $commandline "furb " & $arsect & " /dc"
			Else
				SetVar $commandline "furb " & $arsect
			End
			Goto :AUTOBOT
		End
	End
End
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOAUTOREFURB
End
If ($arship <> "") and ($arship <> "0")
	IsNumber $isnum $arship
	If ($isnum = TRUE)
		SetTextLineTrigger arstart :ARSTART "-----------------------------------------------------------------------------"
		Send "czq"
		Pause
:ARSTART
		KillAllTriggers
		SetTextLineTrigger arscan :ARSCAN
		Pause
:ARSCAN
		SetVar $line CURRENTLINE
		GetWord $line $word 1
		If ($word = $arship)
			GetWord $line $arsect 2
			If ($arsect <> "") and ($arsect <> "0")
				IsNumber $isnum $arsect
				If ($isnum = TRUE)
					If ($arsect > 10) and ($arsect <= SECTORS) and ($arsect <> STARDOCK)
						If ($ardecash = TRUE)
							SetVar $commandline "furb " & $arsect & " /dc"
						Else
							SetVar $commandline "furb " & $arsect
						End
						Goto :AUTOBOT
					End
				End
			End
		ElseIf ($word = "Computer") or ($word = "Command")
			Goto :NOAUTOREFURB
		Else
			SetTextLineTrigger arscan :ARSCAN
			Pause
		End
	End
End
:NOAUTOREFURB
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# SETPLANETKEYPRESSED 
:SETPLANETKEYPRESSED
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
If ($startprompt = "Citadel") or ($startprompt = "Planet ")
	Gosub :Z_Lib~CURRENTPLANET
	SetVar $z_planet $z_lib~planetnum
	SaveVar $z_planet
	Send #145
	WaitOn #145 & #8
	Echo "*" & $boldgreen & $blinkon & "Main planet set to: " & $z_planet & "*" & $blinkoff & $black
Else
	Send #145
	WaitOn #145 & #8
	Echo "*" & $boldred & $blinkon & "Must be on a planet.*" & $blinkoff & $black
End
:NOSETPLANET
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# TSUPDATE 
:TSUPDATE
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
If ($ck = "R")
	GetText $line $temp "ADD Sector " " now!"
	IsNumber $isnum $temp
	If ($isnum = TRUE)
		If ($temp > 10) and ($temp <= SECTORS) and ($temp <> STARDOCK)
			SetVar $i 1
			While ($i <= 8)
				SetVar $found FALSE
				SetVar $x 1
				While ($x <= 8)
					If ($targetcheck[$temp][$i] <> "0")
						If ($targetarray[$targetcheck[$temp][$i]][$x] = $temp)
							SetVar $found TRUE
						End
					End
					SetVar $x ($x + 1)
				End
				If ($found <> TRUE)
					SetVar $x 1
					While ($x <= 8)
						If ($targetcheck[$temp][$i] <> "0")
							If ($targetarray[$targetcheck[$temp][$i]][$x] = "0")
								SetVar $targetarray[$targetcheck[$temp][$i]][$x] $temp
								SetVar $x 8
							End
						End
						SetVar $x ($x + 1)
					End
				End
				SetVar $i ($i + 1)
			End
		End
	End
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LASTHIT 
:LASTHIT
GetWord CURRENTLINE $temp 5
StripText $temp ":"
If ($temp <> "0")
	SetVar $z_lasthit $temp
End
SetTextLineTrigger t77 :LASTHIT "Deployed Fighters Report Sector"
Goto :WAITFORCOMMAND
# HERALDHIT 
:HERALDHIT
KillAllTriggers
GetWord CURRENTLINE $heraldtarget 5
StripText $heraldtarget ":"
If ($heraldtarget <> "0")
	SetVar $z_lasthit $heraldtarget
	SetVar $i 1
	SetVar $found FALSE
	While ($i <= 8)
		If ($targetarray[$heraldtarget][$i] <> "0")
			SetVar $heraldadj $targetarray[$heraldtarget][$i]
			SetVar $found TRUE
			SetVar $i 8
		End
		SetVar $i ($i + 1)
	End
	If ($found = TRUE)
		SetVar $Z_Lib~message $scripttitle & ": HERALD - Hit sector: [" & $heraldtarget & "] - Adjacent: {" & $heraldadj & "}*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $z_heraldhit
		Gosub :MSGBRIDGE
	End
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# FASTREFILLKEYPRESSED 
:FASTREFILLKEYPRESSED
KillAllTriggers
SetVar $autorefill TRUE
Goto :XFER
# BOTRESET 
:BOTRESET
KillAllTriggers
Echo "***" & $boldwhite & $blinkon & "RESET INITIATED EXTERNALLY***" & $blinkoff
SetDelayTrigger br :BR1 800
Pause
:BR1
Gosub :INTCOM_RESET
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# RESCUEISON 
:RESCUEISON
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
If ($ck = "R")
	SetVar $z_rescueavailable TRUE
	GetText $line $rescueplanet "planet " "."
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# RESCUEISOFF
:RESCUEISOFF 
KillAllTriggers
SetVar $line CURRENTLINE
CutText $line $ck 1 1
If ($ck = "R")
	SetVar $z_rescueavailable FALSE
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# WATCHKEYPRESSED 
:WATCHKEYPRESSED
KillAllTriggers
FileExists $fileexist1 "scripts\z-watch.cts"
FileExists $fileexist2 "scripts\z-watch.ts"
If ($fileexist1 = TRUE) or ($fileexist2 = TRUE)
	SetVar $Z_Lib~scriptname "z-watch"
	Gosub :Z_Lib~CHECKRUNNING
	If ($Z_Lib~isrunning = TRUE)
		Stop "z-watch"
		SetVar $watchon FALSE
	Else
		Load "z-watch"
		SetVar $watchon TRUE
	End
	SetDelayTrigger watchwait :WATCHWAIT 1000
	Pause
:WATCHWAIT
	KillAllTriggers
	If ($watchon = TRUE)
		Echo "*" & $boldwhite & "COLONIST WATCH PANEL OPENED...*"
	Else
		Echo "*" & $boldwhite & "COLONIST WATCH PANEL CLOSED...*"
	End
	Send #145
	WaitOn #145 & #8
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HERALDFIG - subroutine 
# Do a GETSTATS first. 
:HERALDFIG
If ($z_figherald = TRUE)
	SetVar $Z_Lib~message $scripttitle & ": FIGSEC_TRUE ADD Sector " & $current_sector & " now!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
End
Return
# PHOTONRESPONSE 
:PHOTONRESPONSE
KillAllTriggers
Gosub :GETSTATS
SetVar $Z_Lib~setprompt "CITCOM"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOPR
End
If ($photons > 0) and ($p = TRUE)
	SetVar $prwarps SECTOR.WARPCOUNT[$current_sector]
	If ($photons >= $prwarps)
		SetVar $prctr $prwarps
	Else
		SetVar $prctr $photons
	End
	If ($z_phmulti <> "TRUE")
		SetVar $prctr 1
	End
	If ($prwarps = 1)
		Send "c p y " & SECTOR.WARPS[$current_sector][1] & "*q"
		SetVar $photons ($photons - 1)
		If ($photons < 0)
			SetVar $photons 0
		End
		Goto :NOPR1
	ElseIf ($prtarget <> "0")
		SetVar $x 1
		SetVar $prchk FALSE
		While ($x <= $prwarps)
			If (SECTOR.WARPS[$current_sector][$x] = $prtarget)
				SetVar $prchk TRUE
				SetVar $x $prwarps
			End
			SetVar $x ($x + 1)
		End
		If ($prchk = TRUE)
			Send "c p y " & $prtarget & "*q"
			SetVar $photons ($photons - 1)
			If ($photons < 0)
				SetVar $photons 0
			End
		Else
			Goto :PROPT
		End
		Goto :NOPR1
	ElseIf ($prwarps > 1)
:PROPT
		SetVar $x 1
		SetVar $prdone ""
		Send "c "
		While ($x <= $prctr)
:PRAGAIN
			GetRnd $rnd 1 $prwarps
			GetWordPos $prdone $pos $rnd
			If ($pos > 0)
				Goto :PRAGAIN
			End
			SetVar $prdone ($prdone & " " & $rnd)
			Send "p y " & SECTOR.WARPS[$current_sector][$rnd] & "*"
			SetVar $photons ($photons - 1)
			If ($photons < 0)
				SetVar $photons 0
			End
			SetVar $x ($x + 1)
		End
		Send "q "
		Goto :NOPR1
	End
End
:NOPR1
KillAllTriggers
Gosub :INTCOM_IGON
Send #145
WaitOn #145 & #8
Goto :NOPR
:NOPR
#SetVar $prdone ""
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LIMPETACTIVATED 
:LIMPETACTIVATED
KillAllTriggers
SetVar $temp CURRENTLINE
GetText $temp $word "Limpet mine in " " activated"
SetVar $x 1
SetVar $latagged FALSE
SetVar $laempty FALSE
While ($x <= $plsect)
	If ($word = $plsect[$x])
		SetVar $latagged TRUE
		SetVar $pllimps[$x] ($pllimps[$x] - 1)
		If ($pllimps[$x] < 0)
			SetVar $pllimps[$x] 0
			SetVar $laempty TRUE
		End
		SetVar $laleft $pllimps[$x]
		SetVar $x $plsect
	End
	SetVar $x ($x + 1)
End
If ($z_broadcast = TRUE)
	SetVar $ssmsg $dashedline
	If ($latagged = TRUE)
		If ($laempty = TRUE)
			SetVar $ssmsg ($ssmsg & $scripttitle & " TAG SECTOR [" & $word & "] - !!! EMPTY !!! - Use SCRUBZONE.*")
		Else
			SetVar $ssmsg ($ssmsg & $scripttitle & " TAG SECTOR [" & $word & "] - " & $laleft & " left.*")
		End
	Else
		SetVar $ssmsg ($ssmsg & $scripttitle & " !!! LIMPET MINE ACTIVATED IN SECTOR [" & $word & "] !!!*")
	End
End
IsNumber $isnum $word
SetVar $laadj FALSE
If ($isnum = TRUE)
	If ($word > 10) and ($word <= SECTORS)
		SetVar $lawarpsin SECTOR.WARPINCOUNT[$word]
		SetVar $i 1
		SetVar $temp2 ""
		If ($lawarpsin <> "0") and ($lawarpsin <> "")
			SetVar $laadj TRUE
			While ($i <= $lawarpsin)
				SetVar $temp2 ($temp2 & " " & SECTOR.WARPSIN[$word][$i] & " -")
				SetVar $i ($i + 1)
			End
			If ($z_broadcast = TRUE) and ($latagged = FALSE)
				SetVar $ssmsg ($ssmsg & "AVAILABLE ADJACENTS: -" & $temp2 & "*")
			End
		End
	End
End
If ($z_broadcast = TRUE)
	SetVar $ssmsg ($ssmsg & $dashedline)
	SetVar $Z_Lib~message $ssmsg
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	SetVar $ssmsg ""
	Send #145
	WaitOn #145 & #8
End
Echo "**"
Gosub :Z_Lib~REDLINE
If ($latagged = TRUE)
	If ($laempty = TRUE)
		Echo "*" & $boldwhite & "TAGGED IN SECTOR " & $boldred & "[" & $boldgreen & $blinkon & $word & $blinkoff & $boldred "]" & $boldwhite & " - " & $boldblue & $blinkon & "!!! EMPTY !!!" & $blinkoff & $boldwhite & " left."
	Else
		Echo "*" & $boldwhite & "TAGGED IN SECTOR " & $boldred & "[" & $boldgreen & $blinkon & $word & $blinkoff & $boldred "]" & $boldwhite & " - " & $boldblue & $laleft & $boldwhite & " left."
	End
Else
	Echo "*" & $boldwhite & " !!! LIMPET MINE ACTIVATED IN SECTOR " & $boldred & "[" & $boldgreen & $blinkon & $word & $blinkoff & $boldred "]" & $boldwhite & " !!!"
End

If ($laadj = TRUE) and ($latagged = FALSE)
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & " AVAILABLE ADJACENTS: -" & $boldcyan & $temp2
End
Gosub :Z_Lib~REDLINE
Echo "**"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# BALANCE 
:BALANCE
KillAllTriggers
SetVar $cline CURRENTLINE
GetText $cline $z_bankbal "have " " credits"
StripText $z_bankbal ","
SaveVar $z_bankbal
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# DEPOSIT 
:DEPOSIT
KillAllTriggers
SetVar $cline CURRENTLINE
GetWord $cline $word 1
IsNumber $isnum $word
If ($isnum = TRUE)
	SetVar $z_bankbal ($z_bankbal + $word)
	SetVar $Credits ($Credits - $word)
	SaveVar $z_bankbal
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# WITHDRAWAL 
:WITHDRAWAL
KillAllTriggers
SetVar $cline CURRENTLINE
GetWord $cline $word 1
IsNumber $isnum $word
If ($isnum = TRUE)
	SetVar $z_bankbal ($z_bankbal - $word)
	SetVar $Credits ($Credits + $word)
	SaveVar $z_bankbal
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# STANDDOWN 
:STANDDOWN
SetVar $mode "STANDDOWN"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# ATTENTION 
:ATTENTION
SetVar $mode "GENERAL"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# AUTOFURBTRIGGER 
:AUTOFURBTRIGGER
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOAUTOFURB
End
Send "a y n q z 20*"
Gosub :GETSTATS
SetVar $Z_Lib~message $scripttitle & ": I now have " & $holds & " holds..*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
:NOAUTOFURB
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# PANELKEYPRESSED
:PANELKEYPRESSED
KillAllTriggers
FileExists $fileexist1 "scripts\z-panel.cts"
FileExists $fileexist2 "scripts\z-panel.ts"
If ($fileexist1 = TRUE) or ($fileexist2 = TRUE)
	SetVar $Z_Lib~scriptname "z-panel"
	Gosub :Z_Lib~CHECKRUNNING
	If ($Z_Lib~isrunning = TRUE)
		Stop "z-panel"
		SetVar $panelon FALSE
	Else
		Load "z-panel"
		SetVar $panelon TRUE
	End
	SetDelayTrigger panelwait :PANELWAIT 1000
	Pause
:PANELWAIT
	KillAllTriggers
	If ($panelon = TRUE)
		Echo "*" & $boldwhite & "INFO PANEL OPENED...*"
	Else
		Echo "*" & $boldwhite & "INFO PANEL CLOSED...*"
	End
	Send #145
	WaitOn #145 & #8
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LASTBOTKEYPRESSED 
:LASTBOTKEYPRESSED
KillAllTriggers
:STARTLASTBOT
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                         <<<=-[ " & $boldwhite & "COMMAND HISTORY" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
SetVar $x 1
While ($x <= 9)
	If ($lastselfbot[$x] <> "0") and ($lastselfbot[$x] <> "")
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & $x & ANSI_12 & "]=- " & ANSI_11 & $lastselfbot[$x]
	Else
		Echo "*" & ANSI_12 & "-=[" & ANSI_14 & " " & ANSI_12 & "]=- " & ANSI_11 & " "
	End
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~REDLINE
Echo "*" & $boldyellow & " Select a command to execute: "
GetConsoleInput $choice SINGLEKEY
If ($choice = $z_selfbotkey)
	Echo "**"
	Goto :SELFBOT
End
IsNumber $isnum $choice
If ($isnum = TRUE)
	If ($choice > 0) and ($choice <= 9)
		If ($lastselfbot[$choice] <> "0") and ($lastselfbot[$choice] <> "")
			SetVar $selfbot TRUE
			SetVar $messagemode "R"
			SetVar $messageto ""
			SetVar $Z_Lib~messagemode "R"
			SetVar $Z_Lib~messageto ""
			SetVar $commandline $lastselfbot[$choice]
			
			If ($commandline <> "") and ($commandline <> "0") and ($commandline <> $lastselfbot[1])
				SetVar $x $choice
				While ($x > 1)
					SetVar $lastselfbot[$x] $lastselfbot[($x - 1)]
					SetVar $x ($x - 1)
				End
				SetVar $lastselfbot[1] $commandline
			End
			Goto :AUTOBOT
		End
	End
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HOTKEYPRESSED 
:HOTKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "E"
SetVar $messagemode "E"
GetOutText $hotkeypressed
SetVar $x 1
While ($x <= $hotkeys)
	If ($hotkeypressed = $hotkey[$x])
		If ($hotkeycommand[$x] <> "0") and ($hotkeycommand[$x] <> "") and ($hotkeytype[$x] <> "0") and ($hotkeytype[$x] <> "")
			If ($hotkeytype[$x] = "INTERNAL")
				SetVar $hotfound FALSE
				SetVar $z 1
				While ($z <= $internalcommands) and ($hotfound = FALSE)
					If ($hotkeycommand[$x] = $internalcommand[$z])
						If ($internalmode[$z] <> "#STATUS#")
							SetVar $mode $internalmode[$z]
						End
						Gosub :INTCOM_ & $hotkeycommand[$x]
						SetVar $mode "GENERAL"
						SetVar $hotfound TRUE
						SetVar $z $internalcommands
					End
					SetVar $z ($z + 1)
				End
			ElseIf ($hotkeytype[$x] = "EXTERNAL")
				FileExists $fileexist $hotkeycommand[$x]
				If ($fileexist = TRUE)
					SetVar $mode "EXTERNAL"
					Load $hotkeycommand[$x]
				End
			End
		End
		SetVar $x $hotkeys
	End
	SetVar $x ($x + 1)
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# SENDINGMESSAGE 
:SENDINGMESSAGE
KillAllTriggers
SetTextTrigger msgended1 :MSGENDED "Sub-space comm-link terminated"
SetTextTrigger msgended2 :MSGENDED "Message sent on sub-space channel"
SetTextTrigger msgended3 :MSGENDED "Federation comm-link terminated."
SetTextTrigger msgended4 :MSGENDED "Message sent on Federation comm-link."
SetTextTrigger msgended5 :MSGENDED "Secure comm-link terminated."
SetTextTrigger msgended6 :MSGENDED "CMS link terminated."
SetTextTrigger msgended7 :MSGENDED "elp)"
SetTextTrigger msgended8 :MSGENDED "Is this what you want to send universally?"
SetTextLineTrigger t1 :REMOTECOMMANDHANDLER "'"& $z_botname
Pause
:MSGENDED
KillAllTriggers
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HASHKEYPRESSED 
:HASHKEYPRESSED
If ($mode = "GENERAL") or ($mode = "SENTRY")
	KillAllTriggers
	SetVar $Z_Lib~messagemode "R"
	SetVar $messagemode "R"
	Gosub :ONLINEWATCH
	SetVar $reset TRUE
Else
	ProcessOut "#"
End
Goto :WAITFORCOMMAND
# BBOPTRIGGER 
:BBOPTRIGGER
KillAllTriggers
Send "s* cr*q"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# FEDWATCHWARN 
:FEDWATCHWARN
KillAllTriggers
GetWord CURRENTLINE $spf 1
If ($spf = "R") or ($spf = "F") or ($spf = "P")
   Goto :NOFEDWATCHWARN
End
SetVar $linecheck CURRENTLINE
UpperCase $linecheck
GetWordPos $linecheck $pos "WARPS"
If ($pos > 1)
	CutText $linecheck $word1 1 ($pos - 2)
Else
	GetWordPos $linecheck $pos "APPEARS"
	If ($pos > 1)
		CutText $linecheck $word1 1 ($pos - 2)
	Else
		GetWord $linecheck $word1 1
	End
End
GetTimer $fedendtime
SetVar $fedtimelapsed ($fedendtime - $fedstarttime)
If ($fedtimelapsed > 5000000000)
	SetVar $fedflag FALSE
End
If ($word1 = $fedlast) and ($fedflag = TRUE)
	Goto :NOFEDWATCHWARN
End
GetWordpos $linecheck $pos "WARPS"
If ($pos > 0)
	SetVar $temp "E-WARPING"
Else
	SetVar $temp "T-WARPING"
End
Gosub :GETSTATS
SetVar $Z_Lib~message $scripttitle & ": FEDWATCH - " & $word1 & " is " & $temp & " into sector " & $current_sector & " !!!*"
SetVar $Z_Lib~messageto $sender
If ($messagemode = "E")
	SetVar $messagemode "S"
End
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $fedlast $word1
SetVar $fedflag TRUE
GetTimer $fedstarttime
:NOFEDWATCHWARN
SetVar $reset TRUE
SetVar $temp ""
Goto :WAITFORCOMMAND
# AUTOTRIGGER 
:AUTOTRIGGER
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $ck 1
If ($ck = "P") or ($ck = "F")
	Goto :NOAUTOTRIGGER
End
SetVar $commandline $z_autocommand
If ($z_autoreturn <> "") and ($z_autoreturn <> "0")
	IsNumber $isnum $z_autoreturn
	If ($isnum = TRUE)
		GetWord $line $autovar $z_autoreturn
	Else
		GetText $z_autoreturn $autobefore "[" "]"
		GetText $z_autoreturn $autobefore "[" "]"
		GetText $z_autoreturn $autoafter "{" "}"
		If ($autobefore <> "") and ($autoafter <> "")
			GetText $line $autovar $autobefore $autoafter
		End
	End
	If ($z_autostrip <> "") and ($z_autostrip <> "0")
		StripText $autovar $z_autostrip
	End
	StripText $autovar " "
	Replacetext $commandline "[!]" $autovar
End
Replacetext $commandline "[1]" $z_autovar1
Replacetext $commandline "[2]" $z_autovar2
SetVar $Z_Logs~logentry $scripttitle & ": AUTOMATE - TRIGGER ACTIVATED!"
Gosub :Z_Logs~ENTERLOG
SetVar $Z_Logs~logentry $scripttitle & ": AUTOMATE - " & $commandline
Gosub :Z_Logs~ENTERLOG
KillAllTriggers
If ($z_autoplanet <> "0")
	IsNumber $isnum $z_autoplanet
	If ($isnum = TRUE)
		Gosub :Z_Lib~CURRENTPLANET
		If (($z_Lib~planet = TRUE) or ($Z_Lib~citadel = TRUE)) and ($z_Lib~planetnum = $z_autoplanet)
			If ($Z_Lib~citadel <> TRUE)
				Send "c  *  "
			End
		Else
			Send "q q q q z 0* q z 0* q z 0* l j" & #8 & #8 & $z_autoplanet & "* * c x q * "
		End
	End
End
Goto :AUTOBOT
:NOAUTOTRIGGER
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# SCRIPTLOADED2 
:SCRIPTLOADED2
KillAllTriggers
SetVar $mode "EXTERNAL"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# SCRIPTSTOPPED 
:SCRIPTSTOPPED
KillAllTriggers
SetVar $mode "GENERAL"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# FIGGERSCRIPT 
:FIGGERSCRIPT
CutText CURRENTLINE $fscheck 1 1
If ($fscheck = "R")
	SetVar $ssmsg "Z-Bot Grid Support is active!*"
	SetVar $Z_Lib~message $ssmsg
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE 
	SetVar $ssmsg ""
End
Goto :WAITFORCOMMAND
# DAMAGED 
:DAMAGED
KillAllTriggers
GetText CURRENTLINE $damageamt "The console reports damages of " " battle points!"
SetVar $damageptr ($damageptr + 1)
SetVar $damages[$damageptr] CURRENTSECTOR & ": " & $damageamt
GetTime $damagetime "d/m/yy h:nn"
Write GAMENAME & "_DAMAGEREPORT.txt" $damagetime & " - DAMAGED IN VICINITY OF SECTOR " & $damages[$damageptr] & " battle points.*"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# STOPALLKEYPRESSED 
:STOPALLKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_STOPALL
SetVar $mode "GENERAL"
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HUNTKEYPRESSED 
:HUNTKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
SetVar $Z_Lib~setprompt "COMMAND"
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOHUNT
End
Gosub :Z_Lib~CN9CHECK
Gosub :Z_Lib~COMMSOFF
Gosub :GETSTATS
Gosub :GETSHIPDATA
Gosub :CHECKIGON
Send #145
WaitOn #145 & #8
Gosub :Z_GetPlayers~GETPLAYERS
SetVar $numplayers $Z_GetPlayers~menu_count
SetVar $i 1
While ($i <= $numplayers)
	SetVar $players[$i] $Z_GetPlayers~menu_name[$i]
	SetVar $i ($i + 1)
End
SetVar $numplayers ($numplayers + 1)
SetVar $players[$numplayers] "ALL"
SetVar $menukey "~"
If ($playerptr < 1) or ($playerptr > $numplayers)
	SetVar $playerptr $numplayers
End
LoadVar $z_ingamename
LowerCase $z_ingamename
SetVar $temp $players[$playerptr]
LowerCase $temp
If ($temp = $z_ingamename)
	SetVar $playerptr ($playerptr + 1)
	If ($playerptr > $numplayers)
		SetVar $playerptr 1
	End
End
SetVar $volleys $z_volley
If ($volleys = "0")
	SetVar $volleys ($z_maxfigs / $z_wave)
End
Gosub :Z_Lib~SYNC
:STARTHUNTMENU
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                            <<<=-[ " & $boldwhite & "HUNT MENU" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "P" & ANSI_12 & "]=- " & ANSI_11 & "Target Player : " & ANSI_15 & $players[$playerptr]
Gosub :Z_Strings~LINE
Echo "*" & $Z_Strings~line
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "G"& ANSI_12 & "]=- " & ANSI_11 & "GO !"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "Q"& ANSI_12 & "]=- " & ANSI_11 & "Quit"
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "P")
	SetVar $playerptr ($playerptr + 1)
	If ($playerptr > $numplayers)
		SetVar $playerptr 1
	End
	SetVar $temp $players[$playerptr]
	LowerCase $temp
	If ($temp = $z_ingamename)
		SetVar $playerptr ($playerptr + 1)
		If ($playerptr > $numplayers)
			SetVar $playerptr 1
		End
	End
ElseIf ($choice = "G")
	SetVar $targetplayer $players[$playerptr]
	UpperCase $targetplayer
	Gosub :Z_Lib~COMMSON
	Send "*"
	Goto :STARTHUNT
ElseIf ($choice = "Q")
	Goto :NOHUNT
End
Goto :STARTHUNTMENU
:PRESTARTHUNT
If ($ore < $holds)
	Gosub :INTCOM_GAS
End
Gosub :GETSTATS
If ($ore < $holds)
	Echo "**" & ANSI_12 & "LOW ON GAS !! Standing down...**"
	Goto :NOHUNT
End
:STARTHUNT
Gosub :GETSTATS
If ($Z_Lib~isunlimited = FALSE) and ($turns < $z_minturns)
	Echo "**" & ANSI_12 & "LOW ON TURNS !! Standing down...**"
	Goto :NOHUNT
End
If ($figs < $z_wave)
	SetVar $returnsector $current_sector
	If ($current_sector <> STARDOCK)
		SetVar $z_dockport FALSE
		SetVar $target STARDOCK
		Gosub :TWARPING
		Gosub :GETSTATS
		Send #145
		WaitFor #145 & #8
		If ($current_sector <> STARDOCK)
			Echo "**" & $boldred & "Failed to arrive at STARDOCK..**"
			Goto :NOHUNT
		End
	End
	Send "p sg yg q s p"
	SetTextTrigger getfigs :HUNTGETFIGS "How many K-3A fighters do you want to buy"
	Send "b"
	Pause
:HUNTGETFIGS
	KillAllTriggers
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*"
	SetTextTrigger getshlds :HUNTGETSHLDS "How many shield armor points do you want to buy"
	Send "c"
	Pause
:HUNTGETSHLDS
	KillAllTriggers
	GetText CURRENTLINE $amt "(Max " ")"
	StripText $amt ","
	Send $amt & "*qqq"
	If ($current_sector <> $returnsector)
		SetVar $z_dockport FALSE
		SetVar $target $returnsector
		Gosub :TWARPING
		Gosub :GETSTATS
		Send #145
		WaitFor #145 & #8
		If ($current_sector <> $returnsector)
			Echo "**" & $boldred & "Failed to arrive at " & $returnsector & ".. **"
			Goto :NOHUNT
		End
		If ($ore < $holds)
			Gosub :INTCOM_GAS
		End
		Gosub :GETSTATS
		If ($ore < $holds)
			Echo "**" & ANSI_12 & "LOW ON GAS !! Standing down...**"
			Goto :NOHUNT
		End
	End
End
If ($figs < $z_wave)
	Echo "**" & ANSI_12 & "LOW ON FIGHTERS !! Standing down...**"
	Goto :NOHUNT
End
SetTextLineTrigger targetacquired :TARGETACQUIRED1 "Deployed Fighters Report Sector"
If ($targetplayer = "ALL")
	SetTextLineTrigger targetacquired2 :TARGETACQUIRED2 "Limpet mine in"
End
SetTextLineTrigger targetacquired3 :TARGETACQUIRED3 "Your mines in "
SetTextLineTrigger insector :HUNTINSECTOR "Shipboard Computers The Interdictor Generator on"
SetTextLineTrigger insector2 :HUNTINSECTOR "warps into the sector."
SetTextLineTrigger insector3 :HUNTINSECTOR "lifts off from"
SetTextLineTrigger insector4 :HUNTINSECTOR "blasts off from the StarDock."
SettextOutTrigger huntkeypressed :HUNTKEYPRESSED $z_huntkey
SetTextLineTrigger huntreset :HUNTRESET $z_botname & " reset"
If ($ore < $holds)
	SetDelayTrigger huntgas :HUNTGAS 10000
End
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
Echo ANSI_15 & "HUNTING - " & ANSI_12 & "TARGET: " & ANSI_14 & "[" & ANSI_11 & $targetplayer & ANSI_14 & "] "
Pause
:HUNTRESET
GetWord CURRENTLINE $ck 1
If ($ck = "R") or ($ck = "P")
	Gosub :INTCOM_RESET
	Goto :NOHUNT
End
GOTO :STARTHUNT
:HUNTINSECTOR
KillAllTriggers
SetVar $line CURRENTLINE
UpperCase $line
GetWordPos $line $pos $targetplayer
If ($pos > 0) or ($targetplayer = "ALL")
	Gosub :ATTACK
End
Goto :STARTHUNT
:TARGETACQUIRED2
KillAllTriggers
SetVar $line CURRENTLINE
UpperCase $line
GetWord $line $hunttarget 4
GetDistance $distance $current_sector $hunttarget
If (($distance > 3) and (($distance * 3) <= $ore) and ($twarp <> "0"))
	Gosub :HUNTTWARP
Else
	SetVar $z_dockport FALSE
	SetVar $mowmode "CHARGE"
	Gosub :MOVE
End
Gosub :ATTACK
Goto :STARTHUNT
:TARGETACQUIRED3
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $ansiline CURRENTANSILINE
GetWord $ansiline $ansiword 9
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :STARTHUNT
End
UpperCase $line
GetWordPos $line $pos $targetplayer
If ($pos > 0) or ($targetplayer = "ALL")
	GetWord $line $hunttarget 4
	GetDistance $distance $current_sector $hunttarget
	If (($distance > 3) and (($distance * 3) <= $ore) and ($twarp <> "0"))
		Gosub :HUNTTWARP
	Else
		SetVar $z_dockport FALSE
		SetVar $mowmode "CHARGE"
		Gosub :MOVE
	End
	Gosub :ATTACK
End
Goto :STARTHUNT
:TARGETACQUIRED1
KillAllTriggers
SetVar $line CURRENTLINE
SetVar $ansiline CURRENTANSILINE
GetWord $ansiline $ansiword 6
CutText $ansiword $num 10 2
If ($num = "33")
	Goto :STARTHUNT
End
UpperCase $line
GetWordPos $line $pos $targetplayer
If ($pos > 0) or ($targetplayer = "ALL")
	GetWord $line $hunttarget 5
	StripText $hunttarget ":"
	GetDistance $distance $current_sector $hunttarget
	If (($distance > 3) and (($distance * 3) <= $ore) and ($twarp <> "0"))
		Gosub :HUNTTWARP
	Else
		SetVar $z_dockport FALSE
		SetVar $mowmode "CHARGE"
		Gosub :MOVE
	End
	Gosub :ATTACK
End
Goto :STARTHUNT
:ATTACK
SetVar $ships SECTOR.SHIPCOUNT[CURRENTSECTOR]
SetVar $huntmacro "a t y n q z " & $z_wave & "* a t n "
SetVar $count 1
While ($count < $ships)
	SetVar $huntmacro ($huntmacro & "n ")
	SetVar $count ($count + 1)
End
SetVar $huntmacro2 ($huntmacro & "n y q z " & $z_wave & "* ")
SetVar $huntmacro ($huntmacro & "y q z " & $z_wave & "* ")
SetVar $i 1
While ($i <= $volleys)
	Send $huntmacro & $huntmacro2
	# Send "a t y n q z " & $z_wave & "n y * a t n y q z " & $z_wave & "n y *"
	SetVar $i ($i + 1)
End
Send "/shsd*"
Gosub :Z_Lib~SYNC
Echo ANSI_15 & "HUNTING - " & ANSI_12 & "TARGET: " & ANSI_14 & "[" & ANSI_11 & $targetplayer & ANSI_14 & "] "
Return
:HUNTGAS
If ($ore < $holds)
	Gosub :INTCOM_GAS
End
Gosub :GETSTATS
If ($ore < $holds)
	Echo "**" & ANSI_12 & "LOW ON GAS !! Standing down...**"
	Goto :NOHUNT
End
Goto :STARTHUNT
:HUNTTWARP
SetVar $target $hunttarget 
SetVar $warpsincount SECTOR.WARPINCOUNT[$target]
SetVar $count "1"
SetVar $availablewarps "0"
While ($count <= $warpsincount)
	SetVar $thiswarp SECTOR.WARPSIN[$target][$count]
	GetSectorParameter $thiswarp "FIGSEC" $figged
	If ($figged = TRUE)
		SetVar $availablewarps ($availablewarps + 1)
		SetVar $warpsin[$availablewarps] $thiswarp
	End
	SetVar $count ($count + 1)
End
If ($availablewarps < 1)
	SetVar $jumpsector $target
Else
	GetRnd $warp 1 $availablewarps
	SetVar $jumpsector $warpsin[$warp]
End
SetVar $target $jumpsector
SetVar $z_dockport FALSE
Gosub :TWARPING
SetVar $z_dockport FALSE
SetVar $target $hunttarget
SetVar $mowmode "CHARGE"
Gosub :MOVE
Return
:NOHUNT
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# AUTOKEYPRESSED 
:AUTOKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :Z_Lib~COMMSOFF
Gosub :GETTRIGGERS
If ($z_triggerptr = "0") or ($z_triggerptr = "")
	LoadVar $z_triggerptr
End
If ($z_triggerptr = "0") or ($z_triggerptr = "")
	SetVar $z_triggerptr 1
End
If ($ztriggerptr > $triggercount)
	SetVar $z_triggerptr 1
End
SetVar $snapshotloaded ""
SetVar $snapshotsaved ""
:STARTAUTOMENU
If ($z_autotype = 0)
	SetVar $z_autotype 3
	SetVar $z_autotyped "Game TextLine"
ElseIf ($z_autotype = 1)
	SetVar $z_autotyped "Time - Run every 12 hours"
ElseIf ($z_autotype = 2)
	SetVar $z_autotyped "Time - Run every 24 hours"
ElseIf ($z_autotype = 3)
	SetVar $z_autotyped "Game TextLine"
ElseIf ($z_autotype = 4)
	SetVar $z_autotyped "Game Text"
ElseIf ($z_autotype = 5)
	SetVar $z_autotyped "Time - Run hourly"
ElseIf ($z_autotype = 6)
	SetVar $z_autotyped "Time - " & ANSI_10 & "Top of the hour"
End
If ($z_autotype = 3) or ($z_autotype = 4)
	SetVar $z_autotrigger $triggers[$z_triggerptr]
End
If ($z_autostatus = TRUE)
	SetVar $z_autostatusd $boldgreen & "ACTIVE"
Else
	SetVar $z_autostatusd $boldred & "OFF"
End
If ($z_autotrigger = "0")
	SetVar $z_autotrigger ""
End
If ($z_autocommand = "0")
	SetVar $z_autocommand ""
End
If ($z_autorename = "0")
	SetVar $z_autorename ""
End
If ($z_autoreturn = "0")
	SetVar $z_autoreturn ""
End
If ($z_autostrip = "0")
	SetVar $z_autostrip ""
End
If ($z_autoplanet = 0)
	SetVar $z_autoplanetd "No"
Else
	SetVar $z_autoplanetd $z_autoplanet
End
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "                         <<<=-[ " & $boldwhite & "AUTOMATE SYSTEM" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"1"& ANSI_12 &"]=- "& ANSI_11 & "Trigger Type    : " & ANSI_15 & $z_autotyped
If (($z_autotype = 3) or ($z_autotype = 4)) and ($z_triggerptr = $triggercount + 1)
	If ($z_autotype = 3)
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "TextLine Trigger: " & ANSI_12 & "----------"
	Else
		Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Text Trigger    : " & ANSI_12 & "----------"
	End
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"T"& ANSI_12 &"]=- "& ANSI_10 & "Add New Trigger : "
ElseIf ($z_autotype = 4)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Text Trigger    : " & ANSI_15 & $z_autotrigger
ElseIf ($z_autotype = 3)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "TextLine Trigger: " & ANSI_15 & $z_autotrigger
ElseIf ($z_autotype = 5)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Hourly Trigger  : " & ANSI_15 & $z_autotrigger
Else
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"2"& ANSI_12 &"]=- "& ANSI_11 & "Time Trigger    : " & ANSI_15 & $z_autotrigger
End
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"3"& ANSI_12 &"]=- "& ANSI_11 & "Command Line    : " & ANSI_15 & $z_autocommand
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"4"& ANSI_12 &"]=- "& ANSI_11 & "Start On Planet : " & ANSI_15 & $z_autoplanetd
If ($z_autotype = 1) or ($z_autotype = 2)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"5"& ANSI_12 &"]=- "& ANSI_11 & "Rename File     : " & ANSI_15 & $z_autorename
End
If ($z_autotype = 3)
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"6"& ANSI_12 &"]=- "& ANSI_11 & "Return Variable : " & ANSI_15 & $z_autoreturn
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"7"& ANSI_12 &"]=- "& ANSI_11 & "Strip Text      : " & ANSI_15 & $z_autostrip
End
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"8"& ANSI_12 &"]=- "& ANSI_11 & "User Constant 1 : " & ANSI_15 & $z_autovar1
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"9"& ANSI_12 &"]=- "& ANSI_11 & "User Constant 2 : " & ANSI_15 & $z_autovar2
	
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"0"& ANSI_12 &"]=- "& ANSI_11 & "Status          : " & ANSI_15 & $z_autostatusd
Gosub :Z_Lib~REDLINE
If ($snapshotloaded <> "")
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"L"& ANSI_12 &"]=- "& ANSI_11 & "Load Snapshot" & $boldyellow & "  - " & $snapshotloaded & $boldgreen & $blinkon & " loaded" & $blinkoff
	SetVar $snapshotloaded ""
Else
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"L"& ANSI_12 &"]=- "& ANSI_11 & "Load Snapshot"
End
If ($snapshotsaved <> "")
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"L"& ANSI_12 &"]=- "& ANSI_11 & "Save Snapshot" & $boldyellow & "  - " & $snapshotsaved & $boldgreen & $blinkon & " saved" & $blinkoff
	SetVar $snapshotsaved ""
Else
	Echo "*" & ANSI_12 &"-=["& ANSI_14 &"S"& ANSI_12 &"]=- "& ANSI_11 & "Save Snapshot"
End
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"D"& ANSI_12 &"]=- "& ANSI_11 & "Display Snapshot List"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"C"& ANSI_12 &"]=- "& ANSI_11 & "Clear Current Settings"
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"G"& ANSI_12 &"]=- "& ANSI_11 & "GO!  " & ANSI_14 & "(Save current settings and exit)"
Echo "*" & ANSI_12 &"-=["& ANSI_14 &"Q"& ANSI_12 &"]=- "& ANSI_11 & "Quit " & ANSI_14 & "(Exit without save, settings remain current until bot reset)"
Gosub :Z_Lib~REDLINE
Echo "*"
Echo "*" & $boldgreen & " TIME: " & $boldred & "[  :  :  ] "
:TIMEDISPLAYRETURN
KillAllTriggers
SetDelayTrigger td :DISPLAYTIME 500
GetConsoleInput $choice SINGLEKEY
KillAllTriggers

UpperCase $choice
If ($choice = "1")
	SetVar $z_autotype ($z_autotype + 1)
	If ($z_autotype > 6)
		SetVar $z_autotype 1
	End
	If ($z_autotype < 3) or ($z_autotype = 5)
		SetVar $z_autotrigger ""
	End
	If ($z_autotype = 6)
		SetVar $z_autotrigger "59"
	End
ElseIf ($choice = "2")
	If ($z_autotype = 1)
		Echo "**" & $boldwhite & "Enter the Time to trigger on (Format hh:mm): "
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $z_autotrigger $value
		End
	ElseIf ($z_autotype = 2)
		Echo "**" & $boldwhite & "Enter the Time to trigger on (Format hh:mm am/pm): "
		GetConsoleInput $value
		LowerCase $value
		GetWord $value $autochk 2
		If ($autochk = "0")
			SetVar $value ($value & "am")
		ElseIf ($autochk = "p") or ($autochk = "a")
			SetVar $value ($value & "m")
		End
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $z_autotrigger $value
		End
	ElseIf ($z_autotype = 5)
		Echo "**" & $boldwhite & "Enter the minute to trigger on (Format mm): "
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $z_autotrigger $value
		End
	ElseIf ($z_autotype = 6)
		Echo "**" & $boldwhite & "Enter the second to trigger on (Format ss): "
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			SetVar $z_autotrigger $value
		End
	Else
		SetVar $z_triggerptr ($z_triggerptr + 1)
		If ($z_triggerptr > $triggercount + 1)
			SetVar $z_triggerptr 1
		End
	End
Elseif ($choice = "T") and ($z_triggerptr = $triggercount + 1)
	Echo "**" & $boldwhite & "Enter the Text to trigger on: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $z_autotrigger $value
		SetVar $triggercount ($triggercount + 1)
		SetVar $triggers[$triggercount] $value
		Write "z-triggers.cfg" $triggers[$triggercount]
	End
ElseIf ($choice = "3")
	If ($z_autotype = 3) or ($z_autotype = 4)
		Echo "**" & $boldwhite & "Enter the command line to execute. (Use [!] to signify a Return Variable)"
		Echo "*" & $boldwhite & "(Use [1] or [2] to signify a constant):*"
	Else
		Echo "**" & $boldwhite & "Enter the command line to execute.*"
		Echo "*" & $boldwhite & "(Use [1] or [2] to signify a constant):*"
	End
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $z_autocommand $value
	End
ElseIf ($choice = "4")
	Echo "**" & $boldwhite & "Enter the planet number to start on: "
	GetConsoleInput $z_autoplanet
	If ($z_autoplanet = "") or ($z_autoplanet = #13)
		SetVar $z_autoplanet 0
	End
ElseIf ($choice = "5") and (($z_autotype = 1) or ($z_autotype = 2))
	Echo "**" & $boldwhite & "Enter the source and destination filenames (separate with a space):*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $z_autorename $value
	Else
		SetVar $z_autorename ""
	End
ElseIf ($choice = "6") and (($z_autotype = 3) or ($z_autotype = 4))
	Echo "**" & $boldwhite & "Enter Return Variable criteria:"
	Echo "*" & $boldwhite & "Enter a number to choose a word based on its position in the trigger line,"
	Echo "*" & $boldwhite & "or Enter the surrounding text. Text before the Return Variable surrounded by [],"
	Echo "*" & $boldwhite & "Text after the Return Variable surrounded by {}. Separate with a space."
	Echo "**" & $boldwhite & "Example: [before text] {after text}"
	Echo "**" & $boldwhite & "The Return Variable will be everything between the [before] and {after} text.*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $z_autoreturn $value
	Else
		SetVar $z_autoreturn ""
	End
ElseIf ($choice = "7") and (($z_autotype = 3) or ($z_autotype = 4))
	Echo "**" & $boldwhite & "Enter the text to strip from the Return Variable:*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $z_autostrip $value
	Else
		SetVar $z_autostrip ""
	End
ElseIf ($choice = "8")
	Echo "**" & $boldwhite & "Enter a value for CONSTANT 1:*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_autovar1 $value
	Else
		SetVar $z_autovar1 ""
	End
ElseIf ($choice = "9")
	Echo "**" & $boldwhite & "Enter a value for CONSTANT 2:*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $z_autovar2 $value
	Else
		SetVar $z_autovar2 ""
	End
ElseIf ($choice = "0")
	If ($z_autostatus = TRUE)
		SetVar $z_autostatus FALSE
	Else
		SetVar $z_autostatus TRUE
	End
ElseIf ($choice = "D")
	FileExists $fileok "Z-Snapshots.cfg"
	GetFileList $snapshots "*.aut"
	SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
	Gosub :Z_Lib~HEADER
	Echo "*" & $boldred & "                          <<<=-[ " & $boldwhite & "SNAPSHOT LIST" & $boldred & " ]-=>>>"
	Gosub :Z_Lib~REDLINE
	SetVar $i 1
	While ($i <= $snapshots)
		StripText $snapshots[$i] ".aut"
		Echo "*" & $boldyellow & $snapshots[$i]
		SetVar $i ($i + 1)
	End
	Gosub :Z_Lib~REDLINE
	Gosub :Z_Lib~ANYKEY
ElseIf ($choice = "S")
	Echo "**" & $boldwhite & "Enter the filename to save the snapshot (NO Ext.):*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $filename $value
		Fileexists $fileexist $filename & ".aut"
		If ($fileexist = TRUE)
			Echo "**" & $boldyellow & "That snapshot already exists, overwrite (y/N)?:*"
			GetConsoleInput $value SINGLEKEY
			UpperCase $value
			If ($value <> "Y")
				Goto :NOSNAPS
			End
			Delete $filename & ".aut"
		Else
			Write "Z-Snapshots.cfg" $filename
		End
		Write $filename & ".aut" "Z-BOTAUTOMATESNAPSHOT"
		Write $filename & ".aut" "TYPE: " & $z_autotype
		Write $filename & ".aut" "TRIGGER: " & $z_autotrigger
		Write $filename & ".aut" "COMMAND: " & $z_autocommand
		Write $filename & ".aut" "RENAME: " & $z_autorename
		Write $filename & ".aut" "RETURN: " & $z_autoreturn
		Write $filename & ".aut" "STRIP: " & $z_autostrip
		Write $filename & ".aut" "PLANET: " & $z_autoplanet
		Write $filename & ".aut" "POINTER: " & $z_triggerptr
		Echo "**" & $boldwhite & "Snapshot saved to " & $boldyellow & $filename & ".aut" & $boldwhite & " in the TWX ROOT.*"
		SetVar $snapshotsaved $filename
	End
:NOSNAPS	
ElseIf ($choice = "L")
	Echo "**" & $boldwhite & "Enter the snapshot filename to load (NO Ext.):*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $filename $value
		Fileexists $fileexist $filename & ".aut"
		If ($fileexist <> TRUE)
			Echo "**" & $boldyellow & "Snapshot file NOT FOUND!*"
			Gosub :Z_Lib~ANYKEY
			Goto :NOSNAPL
		End
		ReadToArray $filename & ".aut" $autfile
		If ($autfile[1] <> "Z-BOTAUTOMATESNAPSHOT")
			Echo "**" & $boldyellow & "BAD Snapshot file !*"
			Gosub :Z_Lib~ANYKEY
			Goto :NOSNAPL
		End
		Echo "**" & $boldred & "THIS WILL CLEAR CURRENT SETTINGS - Are you Sure (y/N)? "
		GetConsoleInput $value SINGLEKEY
		UpperCase $value
		If ($value <> "Y")
			Goto :NOSNAPL
		End
		Gosub :LOADSNAPSHOT
		Echo "**" & $boldwhite & "Snapshot loaded from " & $boldyellow & $filename & ".aut" & $boldwhite & ".*"
		SetVar $snapshotloaded $filename
	End
:NOSNAPL
ElseIf ($choice = "C")
	Echo "**" & $boldred & "CLEAR ALL SETTINGS - Are you Sure (y/N)? "
	GetConsoleInput $value SINGLEKEY
	If ($value = "y") or ($value = "Y")
		SetVar $z_autotype "3"
		SetVar $z_autotrigger ""
		SetVar $z_autocommand ""
		SetVar $z_autorename ""
		SetVar $z_autoreturn ""
		SetVar $z_autostrip ""
		SetVar $z_autostatus FALSE
		SetVar $z_autoplanet 0
		SetVar $z_triggerptr 1
		SetVar $z_autovar1 ""
		SetVar $z_autovar2 ""
		Echo "**" & $boldwhite & "Settings were cleared. Select G from the menu to make it permanent.*"
		Gosub :Z_Lib~ANYKEY
	End
ElseIf ($choice = "G")
	Goto :AUTOGO
ElseIf ($choice = "Q")
	Goto :AUTOQUIT
End
Goto :STARTAUTOMENU
:AUTOGO
SaveVar $z_autotype
SaveVar $z_autotrigger
SaveVar $z_autocommand
SaveVar $z_autorename
SaveVar $z_autoreturn
SaveVar $z_autostrip
SaveVar $z_autostatus
SaveVar $z_autoplanet
SaveVar $z_triggerptr
Echo "**" & $boldgreen & "Settings SAVED...**"
Goto :NOAUTOKEY
:AUTOQUIT
Echo "**" & $boldred & "Settings NOT saved...**"
:NOAUTOKEY
Gosub :Z_Lib~COMMSON
SetVar $reset TRUE
Goto :WAITFORCOMMAND
:LOADSNAPSHOT
SetVar $z_autotype "3"
SetVar $z_autotrigger ""
SetVar $z_autocommand ""
SetVar $z_autorename ""
SetVar $z_autoreturn ""
SetVar $z_autostrip ""
SetVar $z_autostatus FALSE
SetVar $z_autoplanet 0
SetVar $z_triggerptr 1
SetVar $i 2
While ($i <= $autfile)
	GetLength $autfile[$i] $len
	If ($len > 0)
		GetWord $autfile[$i] $type 1
		UpperCase $type
		If ($type = "TYPE:")
			GetLength $autfile[$i] $len
			If ($len > 6)
				CutText $autfile[$i] $z_autotype 7 ($len - 6)
			End
		End
		If ($type = "TRIGGER:")
			GetLength $autfile[$i] $len
			If ($len > 9)
				CutText $autfile[$i] $z_autotrigger 10 ($len - 9)
			End
		End
		If ($type = "COMMAND:")
			GetLength $autfile[$i] $len
			If ($len > 9)
				CutText $autfile[$i] $z_autocommand 10 ($len - 9)
			End
		End
		If ($type = "RENAME:")
			GetLength $autfile[$i] $len
			If ($len > 8)
				CutText $autfile[$i] $z_autorename 9 ($len - 8)
			End
		End
		If ($type = "RETURN:")
			GetLength $autfile[$i] $len
			If ($len > 8)
				CutText $autfile[$i] $z_autoreturn 9 ($len - 8)
			End
		End
		If ($type = "STRIP:")
			GetLength $autfile[$i] $len
			If ($len > 7)
				CutText $autfile[$i] $z_autostrip 8 ($len - 7)
			End
		End
		If ($type = "PLANET:")
			GetLength $autfile[$i] $len
			If ($len > 8)
				CutText $autfile[$i] $z_autoplanet 9 ($len - 8)
			End
		End
		If ($type = "POINTER:")
			GetLength $autfile[$i] $len
			If ($len > 9)
				CutText $autfile[$i] $z_triggerptr 10 ($len - 9)
			End
		End
	End
	SetVar $i ($i + 1)
End
Return
# DISPLAYTIME 
:DISPLAYTIME
KillAllTriggers
Gosub :Z_Dates~DISPLAYTIME
Echo ANSI_0
Goto :TIMEDISPLAYRETURN
# HOOKMANKEYPRESSED 
:HOOKMANKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_HOOK
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# MATRIXKEYPRESSED 
:MATRIXKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_MATRIX
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# REFIGKEYPRESSED 
:REFIGKEYPRESSED
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :GETSTATS
Send "q q q q *   fz1*cqz*d*"
StripText $current_sector " "
SetVar $Z_Strings~padchar "0"
SetVar $Z_Strings~padlen 5
SetVar $Z_Strings~unpadded $current_sector
GoSub :Z_Strings~PAD
SetVar $formattedsector $Z_Strings~padded
SetVar $Z_Lib~message $formattedsector & "=figme!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# REFIG 
:REFIG
KillAllTriggers
SetVar $cline CURRENTLINE
CutText $cline $ck 1 1
If ($ck <> "R")
	Goto :NOREFIG
End
GetWord $cline $rfcorpy 2
GetWord $cline $rfsector 3
StripText $rfsector "=figme!"
SetVar $rfsector ("!" & $rfsector)
StripText $rfsector "!0000"
StripText $rfsector "!000"
StripText $rfsector "!00"
StripText $rfsector "!0"
StripText $rfsector "!"
IsNumber $isnum $rfsector
If ($isnum <> TRUE)
	Goto :NOREFIG
End
If ($rfsector < 1) or ($rfsector > SECTORS)
	Goto :NOREFIG
End
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOREFIG
End
Gosub :GETSTATS
If ($credits < 15000)
	SetVar $Z_Lib~message $scripttitle & ": I am low on credits.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOREFIG
End
If ($figs < 1000)
	SetVar $Z_Lib~message $scripttitle & ": I need at least 1,000 fighters.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOREFIG
End
If ($prompt = "Command")
	If ($fuel < $holds)
		GetSectorParameter CURRENTSECTOR "BUSTED" $busted
		If (PORT.EXISTS[CURRENTSECTOR] = TRUE) and (PORT.BUYFUEL[CURRENTSECTOR] = FALSE) and (PORT.CLASS[CURRENTSECTOR] <> "0") and ($busted <> TRUE)
			Send "p * * * z 0* z 0*"
			Gosub :GETSTATS
			If ($fuel = $holds)
				SetVar $fuelport CURRENTSECTOR
			End
		End
	End
End
SetVar $z_dockport FALSE
SetVar $target $rfsector
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
Send #145
WaitFor #145 & #8
If ($current_sector <> $rfsector)
	SetVar $Z_Lib~message $scripttitle & ": Failed to arrive at " & $rfsector & ". I am at " & $current_sector & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOREFIG
End
GetSectorParameter CURRENTSECTOR "BUSTED" $busted
If (PORT.EXISTS[CURRENTSECTOR] = TRUE) and (PORT.BUYFUEL[CURRENTSECTOR] = FALSE) and (PORT.CLASS[CURRENTSECTOR] <> "0") and ($busted <> TRUE)
	Send "p * * * z 0* z 0*"
End
SetVar $xferexact "-1"
Send "t "
:RFDOXFER
SetTextTrigger xfernocorp :RFXFERNOCORP "Your Associate must be in the same sector to conduct transfers!"
SetTextTrigger xferto :RFXFERTOFIG "Exchange with"
Send "f"
Pause
:RFXFERTOFIG
KillAllTriggers
GetText CURRENTLINE $word "with " " ("
LowerCase $word
LowerCase $rfcorpy
GetLength $word $len
If ($len > 6)
	CutText $word $temp 1 6
	SetVar $word $temp
End
SetVar $Z_Strings~trimstring $word
Gosub :Z_Strings~RTRIM
SetVar $word $Z_Strings~trimstring

If ($word <> $rfcorpy)
	SetTextTrigger xfernocorp :RFXFERNOCORP "Corporate command [TL="
	SetTextTrigger xferto :RFXFERTOFIG "Exchange with"
	Send "n"
	Pause
Else
	SetTextTrigger youhavefigs :RFYOUHAVEFIGS "You have"
	Send "yt"
	Pause
End
:RFYOUHAVEFIGS
KillAllTriggers
If ($xferexact <> "-1")
	Send $xferexact & "*q"
	SetVar $Z_Lib~message $scripttitle & " - Refig complete.. warp away and sin my boy!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Gosub :GETSTATS
	If ($ore < $holds)
		If ($fuelport <> "0")
			SetVar $z_dockport FALSE
			SetVar $target $fuelport
			SetVar $previoussector $current_sector
			Gosub :TWARPING
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
		End
		If ($current_sector <> $fuelport)
			Gosub :INTCOM_GAS
		Else
			Send "p * * * z 0* z 0*"
		End
	Else	
		SetVar $fuelport CURRENTSECTOR
	End
	Goto :NOREFIG
Else
	GetText CURRENTLINE $xfergot "have " " fighters"
	GetText CURRENTLINE $xfer2got "has " "."
End
SetTextTrigger getexact :RFGETEXACTFIG "can only carry"
SetTextTrigger xfernocorp :RFXFERNOCORP "Corporate command [TL="
Send $xfergot & "*"
Pause
:RFGETEXACTFIG
KillAllTriggers
GetText CURRENTLINE $xfercarry "carry " " fighters" 
SetVar $xferexact ($xfercarry - $xfer2got)
Goto :RFDOXFER
:RFXFERNOCORP
KillAllTriggers
Send "q"
:NOREFIG
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LIMPETDETECT 
:LIMPETDETECT
SetVar $z_limpetalarm TRUE
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# LIMPETCLEAR 
:LIMPETCLEAR
SetVar $z_limpetalarm FALSE
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# CAPKEYPRESSED 
:CAPKEYPRESSED
KillAllTriggers
SetVar $attackmode "CAP"
Gosub :SHIPCAP
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# FUELKEYPRESSED 
:FUELKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_GAS
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HERALDTURNS
:HERALDTURNS
SetVar $heraldturnsnow TRUE
Goto :WAITFORCOMMAND
# HERALDTURNSNOW 
:HERALDTURNSNOW
Gosub :Z_Lib~CHECKIFBUSY2
If ($Z_Lib~busy = "FALSE")
	Gosub :GETSTATS
	FileExists $fileexists "Z-Herald.cfg"
	SetVar $msg ""
	If ($fileexists = TRUE)
		ReadToArray "Z-Herald.cfg" $herald
		If ($herald > 0)
			GetRnd $rnd 1 $herald
			SetVar $msg " " & $herald[$rnd]
		End
	End
	FileExists $fileexists "Z-Smilies.cfg"
	SetVar $smiley ""
	If ($fileexists = TRUE)
		ReadToArray "Z-Smilies.cfg" $smilies
		If ($smilies > 0)
			GetRnd $rnd 1 $smilies
			SetVar $smiley "  " & $smilies[$rnd]
		End
	End
	SetVar $messagemode "R"
	SetVar $Z_Lib~message $scripttitle & ": I have " & $turns & $msg & " turns left!" & $smiley & "*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetArray $herald 0
	SetArray $smilies 0
	SetVar $msg ""
	SetVar $smiley ""
	SetVar $heraldturnsnow FALSE
End
Return
# SAFETYNETTRIGGERS 
:SAFETYNETTRIGGERS
KillTrigger r1
KillTrigger r2
KillTrigger r3
KillTrigger r4
KillTrigger r5
KillTrigger r6
KillTrigger r7
KillTrigger r8
KillTrigger r9
KillTrigger r10
KillTrigger r11
SetTextTrigger r1 :EMERGENCY "Quasar Blast!"
SetTextTrigger r2 :INSECTOR "is powering up weapons systems!"
SetTextTrigger r3 :EMERGENCY "You fled in your Escape Pod to sector"
SetTextTrigger r4 :EMERGENCY "An Interdictor Generator in this sector holds you fast"
SetTextTrigger r5 :EMERGENCY "Your ship was hit by a Photon and has been disabled."
SetTextTrigger r6 :INSECTOR " lifts off from "
SetTextTrigger r7 :INSECTOR " blasts off from "
SetTextTrigger r8 :INSECTOR "warps into the sector"
SetTextTrigger r9 :INSECTOR "appears in a brilliant flash"
SetTextTrigger r10 :EMERGENCY " damaging your ship."
SetTextTrigger r11 :EMERGENCY "has just materialized from the void!"
Return
# SERVERSHUTDOWN 
:SERVERSHUTDOWN
KillAllTriggers
SetVar $line CURRENTLINE
GetWord $line $word1 1
If ($word1 = #179)
	StripText $line #179
	GetWord $line $word1 1
End
GetWord $line $word2 2
GetWord $line $word3 3
If ($word1 <> "The") or ($word2 <> "server")
	Goto :NOSHUTDOWN
End
Echo "**"
SetVar $shutdowntime "0"
Gosub :Z_Lib~REDLINE
If ($word3 = "is")
	Echo "*" & $blinkon & $boldred & "!!! THE SERVER IS SHUTTING DOWN !!!" & $blinkoff
	SetVar $Z_Logs~logentry $scripttitle & ": Server Shutdown Detected.. Terminating Z-Bot"
	Gosub :Z_Logs~ENTERLOG
	SetVar $shutdowntime "NOW"
	SetVar $reset TRUE
	Goto :WAITFORCOMMAND
Else
	GetText $line $shutdowntime "in " " min"
	Echo "**"
	#Gosub :Z_Lib~REDLINE
	If ($shutdowntime = 1)
		Echo "*" & $blinkon & $boldmagenta & "THE SERVER WILL SHUT DOWN IN " & $boldyellow & $shutdowntime & $boldmagenta & " minute." & $blinkoff
	Else
		Echo "*" & $blinkon & $boldwhite & "THE SERVER WILL SHUT DOWN IN " & $boldyellow & $shutdowntime & $boldwhite & " minutes." & $blinkoff
	End
End
Echo "*"
Gosub :Z_Lib~REDLINE
Echo "**"
If ($shutdowndone <> TRUE)
	SetVar $Z_Logs~logentry $scripttitle & ": Server Shutdown detected.. Resetting Z-Bot"
	Gosub :Z_Logs~ENTERLOG
	OpenMenu TWX_STOPALLFAST FALSE
	SetVar $mode "GENERAL"
	Gosub :INTCOM_RESET
	Gosub :GETSTATS
	If ($z_planet <> "0") and ($z_base <> "0") and ($current_sector = $z_base)
		SetVar $Z_Logs~logentry $scripttitle & ": Server Shutdown Attempting LAND on PLANET."
		Gosub :Z_Logs~ENTERLOG
		SetVar $PARM1 "0"
		SetVar $PARM2 "0"
		SetVar $PARM3 "0"
		Gosub :INTCOM_LAND
		Gosub :INTCOM_UNLOCK
		
	End
	SetVar $shutdowndone TRUE
End
If ($shutdowntime = 1)
	Send #145
	WaitOn #145 & #8
	CutText CURRENTLINE $startprompt 1 7
	SetVar $shutdowntime "NOW"
	If ($startprompt = "Citadel") or ($startprompt = "Planet ")
		Gosub :INTCOM_UNLOCK
	Else
	#	Goto :CONNECTIONLOST
	#	Goto :FINISH
	End
End
If ($word3 = "is")
	SetVar $Z_Logs~logentry $scripttitle & ": Server Shutdown Detected.. Terminating Z-Bot"
	Gosub :Z_Logs~ENTERLOG
	SetVar $shutdowntime "NOW"
	#Goto :CONNECTIONLOST
	#Goto :FINISH
End
:NOSHUTDOWN
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# ATTACKKEYPRESSED 
:ATTACKKEYPRESSED
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
SetVar $macro $do_attack
ReplaceText $macro "<WAVE>" $z_wave
Send $macro
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HOTMENUKEYPRESSED 
:HOTMENUKEYPRESSED
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :DISPLAYHOTKEYS
Send #145
SetTextOutTrigger t27 :HOTMENUKEYPRESSED $z_hotmenukey
Goto :WAITFORCOMMAND
# HOTLISTKEYPRESSED 
:HOTLISTKEYPRESSED
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :DISPLAYUSERHOTLIST
SetTextOutTrigger t60 :HOTLISTKEYPRESSED $z_hotlistkey
Goto :WAITFORCOMMAND
# SAFETYNETKEYPRESSED 
:SAFETYNETKEYPRESSED
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
If ($z_safetynet = TRUE)
	SetVar $z_safetynet FALSE
	SetVar $Z_Lib~message "SafetyNet is OFF*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	SetVar $z_safeshipstatus FALSE
	Gosub :CHECKSAFESHIPSTATUS
	If ($z_safeshipstatus = TRUE)
		SetVar $z_safetynet TRUE
		If ($z_volley <> "0")
			SetVar $Z_Lib~message "SafetyNet is ON+*"
		Else
			SetVar $Z_Lib~message "SafetyNet is ON*"
		End
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
SetTextOutTrigger t26 :SAFETYNETKEYPRESSED $z_safetynetkey
Goto :WAITFORCOMMAND
# CBY 
:CBY
send "nq"
SetVar $Z_Logs~logentry $scripttitle & ": Anti-Self destruct system ACTIVATED!"
Gosub :Z_Logs~ENTERLOG
Echo "**" & $boldred & $blinkon & " !!! Anti-Self destruct system ACTIVATED !!!**" & $blinkoff
SetDelayTrigger cbydelay :CBYDELAY 200
Pause
:CBYDELAY
KillTrigger cbydelay
Send "*"
Goto :WAITFORCOMMAND
# DISRUPT 
:DISRUPT
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_DISR
Goto :WAITFORCOMMAND
# CITADELMENU 
:CITADELMENU
GetOutText $key
If ($key <> $z_citmenukey)
	PROCESSOUT $key
	Goto :WAITFORCOMMAND
End
KillAllTriggers
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Send #145
WaitFor #145 & #8
CutText CURRENTLINE $word 1 7
If ($word <> "Citadel") and ($word <> "Command") and ($word <> "Planet ")
	PROCESSOUT $z_citmenukey
	Goto :NOCITMENU2
End
Gosub :Z_Lib~COMMSOFF
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	Goto :NOCITMENU
End
PROCESSIN 1 $z_botname & "[Z]COMMSGUARDOFF[Z]" & $z_botname
If ($prompt = "Command")
	Goto :WALKERKEYPRESSED
End
Gosub :Z_Lib~CURRENTPLANET
Send #145
WaitOn #145 & #8
Gosub :GETSHIPDATA
Gosub :GETSTATS
Send #145
WaitOn #145 & #8
If ($gridmaxdensity = "0")
	SetVar $gridmaxdensity 499
End
If ($gridship <> $shipid)
	SetVar $gridship1 $shipid
	SetVar $gridship2 "0"
	SetVar $gridshipsok FALSE
End
#SetVar $gridxportok FALSE
#SetVar $citswapok FALSE
#SetVar $citswapwith ""
If ($dropminesset <> TRUE)
	SetVar $dropmines $z_mowmines
	SetVar $droplimps $z_mowlimps
	SetVar $dropminesset TRUE
End
If ($ptarget = "0")
	SetVar $ptarget "1"
End
SetArray $pdirective 0
SetVar $pdirective[1] "Adjacent"
SetVar $pdirective[2] "Density"
SetVar $pdirective[3] "Flower"
SetVar $pdirective[4] "BounceBk"
If ($pdirective = "0")
	SetVar $pdirective "1"
End
:STARTCITMENU
SetArray $ptarget 0
SetVar $warpcount SECTOR.WARPCOUNT[$current_sector]
SetVar $x "1"
While ($x <= $warpcount)
	SetVar $ptarget[$x] SECTOR.WARPS[$current_sector][$x]
	SetVar $x ($x + 1)
End
Echo "**"
If ($z_altcitview = TRUE)
	Echo "*" & $boldblue "<" & $green & "CITADEL `Siege' Menu" & $boldblue & "> "
	If ($planetctr > 0)
		Echo $boldblue " Planets["
		SetVar $x 1
		While ($x <= $planetctr)
			If ($x <> "1")
				Echo $boldblue & " - "
			End
			If ($planets[$x] = $Z_Lib~planetnum)
				Echo $boldyellow & $blinkon & $planets[$x] & $blinkoff
			Else
				Echo $boldgreen & $planets[$x]
			End
			SetVar $x ($x + 1)
		End
		Echo $boldblue & "]"
	Else
		Echo $boldblue & " Planets[" & $boldyellow & $blinkon & $Z_Lib~planetnum & $blinkoff & $boldblue & "]"
	End
	Echo "*" & $boldblue $dashedline
	Echo        $boldblue "<" & $boldwhite & "S" & $boldblue & ">-" & $boldcyan & " Scan Sector                               " & $boldblue "<" & $boldwhite & "P" & $boldblue & ">- " & $boldcyan & "Photon" & $boldblue & " [" & $cyan & $pdirective[$pdirective] & $boldblue & "]"
	Echo "*" & $boldblue "<" & $boldwhite & "H" & $boldblue & ">-" & $boldcyan & " HoloScan                                  " & $boldblue "<" & $boldwhite & "O" & $boldblue & ">- " & $boldcyan & "Photon Options"
	Echo "*" & $boldblue "<" & $boldwhite & "D" & $boldblue & ">-" & $boldcyan & " Density Scan                              " & $boldblue "<" & $boldwhite & "I" & $boldblue & ">- " & $boldcyan & "Lay Personal Limp"
	If (($mines > 0) and ($dropmines > 0)) or (($limps > 0) and ($droplimps > 0))
		SetVar $cminesd $boldcyan & "Lay Mines & Limps"
	Else
		SetVar $cminesd $magenta & "Lay Mines & Limps"
	End
	Echo "*" & $boldblue "<" & $boldwhite & "N" & $boldblue & ">-" & $boldcyan & " Planet Numbers                            " & $boldblue "<" & $boldwhite & "M" & $boldblue & ">- " & $boldcyan & $cminesd
	Echo "*" & $boldblue "<" & $boldwhite & "L" & $boldblue & ">-" & $boldcyan & " Land on a planet                          " & $boldblue "<" & $boldwhite & "B" & $boldblue & ">- " & $boldcyan & "BWarp & Call Save"
	Echo "*" & $boldblue "<" & $boldwhite & "C" & $boldblue & ">-" & $boldcyan & " CitKill                                   " & $boldblue "<" & $boldwhite & "R" & $boldblue & ">- " & $boldcyan & "Disrupt Adjacent"
	
	If ($citswapok = TRUE)
		Echo "*" & $boldblue "<" & $boldwhite & "E" & $boldblue & ">-" & $boldcyan & " Enter/Exit/Fig                            " & $boldblue "<" & $boldwhite & "A" & $boldblue & ">- " & $boldcyan & "Swap Ships"
	Else
		Echo "*" & $boldblue "<" & $boldwhite & "E" & $boldblue & ">-" & $boldcyan & " Enter/Exit/Fig                            " & $boldblue "<" & $boldwhite & "A" & $boldblue & ">- " & $magenta & "Swap Ships"
	End
	Echo "*" & $boldblue "<" & $boldwhite & "F" & $boldblue & ">-" & $boldcyan & " Lay 1 Fighter                             " & $boldblue "<" & $boldwhite & "." & $boldblue & ">- " & $boldcyan & "Shell Out"
	If ($p = TRUE)
		Echo "*" & $boldblue "<" & $boldwhite & "G" & $boldblue & ">-" & $boldcyan & " 2 Ship Gridder                            " & $boldblue "<" & $boldwhite & "V" & $boldblue & ">- " & $boldcyan & "Change View"
	End
	Echo "*" & $boldblue $dashedline
	Echo $boldblue "                        Target Sector: [" & $cyan & $ptarget[$ptarget] & $boldblue & "]"
	Echo "*" & $boldblue $dashedline
:STARTCITMENU3
	Echo "*" & "[1A" & "                                                  " & "[50D"
	If ($p = TRUE)
		Echo $green & "Other Keys: <" & $boldwhite & "#/|" & $green & "> - Your Selection. ENTER to QUIT:" & $boldwhite
	Else
		Echo $green & "Other Keys: <" & $boldwhite & "#/|V" & $green & "> - Your Selection. ENTER to QUIT:" & $boldwhite
	End
Else
	Gosub :Z_Lib~BLUELINE
	Gosub :Z_Lib~ZEDLINE
	If ($planetctr > 0)
		Echo "[78D" & $boldblue & "CITADEL" & #196 & "["
		SetVar $x 1
		While ($x <= $planetctr)
			If ($x <> "1")
				Echo $boldblue & #196
			End
			If ($planets[$x] = $Z_Lib~planetnum)
				Echo $boldyellow & $blinkon & $planets[$x] & $blinkoff
			Else
				Echo $boldgreen & $planets[$x]
			End
			SetVar $x ($x + 1)
		End
		Echo $boldblue & "]*"
	Else
		Echo "[78D" & $boldblue & "CITADEL" & #196 & "[" & $boldwhite & $blinkon & $Z_Lib~planetnum & $blinkoff & $boldblue & "]*"
	End
	Echo #27&"[s"
	:STARTCITMENU2
	Echo #27&"[u"
	If (($mines > 0) and ($dropmines > 0)) or (($limps > 0) and ($droplimps > 0))
		SetVar $cminesd $boldcyan & "CMines"
	Else
		SetVar $cminesd $magenta & "CMines"
	End
	Echo $boldcyan "[" & $boldyellow & "S" & $boldcyan & "]-Scan [" & $boldyellow & "H" & $boldcyan & "]-Holo [" & $boldyellow & "D" & $boldcyan & "]-Dens [" & $boldyellow & "N" & $boldcyan & "]-Planets [" & $boldyellow "L" & $boldcyan & "]-Land [" & $boldyellow & "C" & $boldcyan & "]-Ckill [" & $boldyellow & "I" & $boldcyan & "]-PLimp [" & $boldyellow & "M" & $boldcyan & "]-" & $cminesd 
	Gosub :Z_Lib~BLUELINE
	If ($citswapok = TRUE)
		SetVar $csd $boldcyan & "Swap"
	Else
		SetVar $csd $magenta & "Swap"
	End
	If ($p = TRUE)
		Echo "*" & $boldcyan "[" & $boldyellow & "P" & $boldcyan & "]-Photon [" & $boldyellow "E" & $boldcyan & "]-EntExit [" & $boldyellow & "B" & $boldcyan & "]-BSave [" & $boldyellow & "A" & $boldcyan & "]-" & $csd & $boldcyan & " [" & $boldyellow & "R" & $boldcyan & "]-Disr [" & $boldyellow & "." & $boldcyan & "]-Shell [" & $boldyellow & "F" & $boldcyan & "]-Fig [" & $boldyellow & "O" & $boldcyan & "]-Opts"
	Else
		Echo "*" & $boldcyan "[" & $boldyellow & "P" & $boldcyan & "]-Photon [" & $boldyellow "E" & $boldcyan & "]-EntExit [" & $boldyellow & "B" & $boldcyan & "]-BSave [" & $boldyellow & "A" & $boldcyan & "]-" & $csd & $boldcyan & " [" & $boldyellow & "R" & $boldcyan & "]-Disr [" & $boldyellow & "." & $boldcyan & "]-Shell [" & $boldyellow & "F" & $boldcyan & "]-Fig [" & $boldyellow & "O" & $boldcyan & "]-Opts"
	End
	Gosub :Z_Lib~BLUELINE
	Echo "[78D" & $boldblue & "[" & $boldblue & $pdirective[$pdirective] & $boldblue & "]"
	If ($p = TRUE)
		Echo "*" & "[1A" & "[37C" & $boldblue & "[" & $boldyellow & "#/|VG" & $boldblue & "]"
	Else
		Echo "*" & "[1A" & "[37C" & $boldblue & "[" & $boldyellow & "#/|V" & $boldblue & "]"
	End
	Echo "*" & "[1A" & "[71C" & $boldblue & "[" & $boldblue & $ptarget[$ptarget] & $boldblue & "]"
	Echo "**" & "[1A" & "                                                  " & "[50D"
	#Echo $boldblue & "[" & $boldyellow & "#/|v" & $boldblue & "]"
End
Echo $boldwhite
KillTrigger connectlost
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "H")
	If ($scanner = "2")
		Send "q q sz hs*"
		Send #145
		WaitFor #145 & #8
		Gosub :Z_Lib~RETURNTOPLANET
		Gosub :Z_Lib~SYNC
		Send #145
		WaitFor #145 & #8
		SetVar $walkscanned TRUE
		Goto :STARTCITMENU
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "F")
	Send "q q f z 1* c q * d "
	Gosub :Z_Lib~RETURNTOPLANET
	SetSectorParameter $current_sector "FIGSEC" TRUE
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "/") or ($choice = "|")
	Echo "*"
	PROCESSOUT $choice
	Send #145
	WaitOn #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "#")
	SetVar $Z_Lib~messagemode "R"
	SetVar $messagemode "R"
	Gosub :ONLINEWATCH
	Send #145
	WaitOn #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = ".")
	SetVar $cmfirst TRUE
	Gosub :Z_Lib~CLEARSCREEN
	Echo "*" & $boldwhite & "Press your HOTKEY. Press the [ENTER] key to ABORT.*"
	Send #145
	WaitOn #145 & #8
	Echo "[25D" & "                                                  " & "[50D"
:CITMENUWAIT
	KillTrigger cmw
	If ($cmfirst = TRUE)
		GetConsoleInput $anykey SINGLEKEY
		ProcessOut $anykey
		SetVar $cmfirst FALSE
	End
	Gosub :Z_Lib~CHECKIFBUSY
	If ($Z_Lib~busy = TRUE)
		SetDelayTrigger cmw :CITMENUWAIT 1000
		Pause
		Goto :CITMENUWAIT
	End
	Gosub :Z_Lib~CLEARSCREEN
	Goto :STARTCITMENU
ElseIf ($choice = "V")
	If ($z_altcitview = TRUE)
		SetVar $z_altcitview FALSE
	Else
		SetVar $z_altcitview TRUE
	End
	Goto :STARTCITMENU
ElseIf ($choice = "O")
	If ($citopt = FALSE) or ($citopt = "FALSE")
		SetVar $citopt "FALSE"
	Else
		SetVar $citopt "TRUE"
	End
	SetArray $ptarget 0
	SetVar $warpcount SECTOR.WARPCOUNT[$current_sector]
	SetVar $x "1"
	While ($x <= $warpcount)
		SetVar $ptarget[$x] SECTOR.WARPS[$current_sector][$x]
		SetVar $x ($x + 1)
	End
:STARTCITOPTIONS
	Echo "*" & "[1A" & "                                                  " & "[50D"
	If ($citopt = "FALSE")
		Echo $boldred & "[" & $boldyellow & "< >" & $boldred & "]-" & $boldgreen & "Photon Directive: " & $boldwhite & $pdirective[$pdirective] & "   " & $boldred & "[" & $boldyellow & "- +" & $boldred & "]-" & $boldgreen & "Target Sector: " & $boldwhite & $ptarget[$ptarget] & "   "  & $boldred & "[" & $boldyellow & "M" & $boldred & "]-" & $boldgreen & "More"
	Else
		Echo $boldred & "[" & $boldyellow & "D" & $boldred & "]-" & $boldgreen & "Drop Mines: " & $boldwhite & $dropmines & "   " & $boldred & "[" & $boldyellow & "L" & $boldred & "]-" & $boldgreen & "Drop Limps: " & $boldwhite & $droplimps & "    "  & $boldred & "[" & $boldyellow & "R" & $boldred & "]-" & $boldgreen & "Reset Swap" & "   "  & $boldred & "[" & $boldyellow & "M" & $boldred & "]-" & $boldgreen & "More"
	End
	KillTrigger connectlost
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	GetConsoleInput $choice SINGLEKEY
	UpperCase $choice
	If ($choice = "M")
		If ($citopt = "TRUE")
			SetVar $citopt "FALSE"
		Else
			SetVar $citopt "TRUE"
		End
	ElseIf ($citopt = "TRUE")
		If ($choice = "D")
			Echo "*" & "[1A" & "                                                  " & "[50D"
			Echo $boldgreen & "How many ARMID mines to drop: "
			GetConsoleInput $value
			IsNumber $isnum $value
			If ($isnum = TRUE)
				SetVar $dropmines $value
			End
			If ($dropmines > 250)
				SetVar $dropmines 250
			End
			If ($dropmines < 0)
				SetVar $dropmines 0
			End
			SetVar $dropminesset TRUE
		ElseIf ($choice = "L")
			Echo "*" & "[1A" & "                                                  " & "[50D"
			Echo $boldgreen & "How many LIMPET mines to drop: "
			GetConsoleInput $value
			IsNumber $isnum $value
			If ($isnum = TRUE)
				SetVar $droplimps $value
			End
			If ($droplimps > 250)
				SetVar $droplimps 250
			End
			If ($droplimps < 0)
				SetVar $droplimps 0
			End
			SetVar $dropminesset TRUE
		ElseIf ($choice = "R")
			SetVar $citswapwith ""
			SetVar $citswapok FALSE
		ElseIf ($choice = "") or ($choice = "0") or ($choice = #13)
			If ($z_altcitview = TRUE)
				Echo "**"
			Else
				Echo #27&"[8A"
			End
			Goto :STARTCITMENU
			End
	ElseIf ($choice = "-")
		SetVar $ptarget ($ptarget - 1)
		If ($ptarget < 1)
			SetVar $ptarget $warpcount
		End
	ElseIf ($choice = "+") or ($choice = "=")
		SetVar $ptarget ($ptarget + 1)
		If ($ptarget > $warpcount)
			SetVar $ptarget 1
		End
	ElseIf ($choice = ",") or ($choice = "<")
		SetVar $pdirective ($pdirective - 1)
		If ($pdirective < "1")
			If ($p = TRUE)
				SetVar $pdirective "4"
			Else
				SetVar $pdirective "2"
			End
		End
	ElseIf ($choice = ".") or ($choice = ">")
		SetVar $pdirective ($pdirective + 1)
		If ($pdirective > "4")
			SetVar $pdirective 1
		End
		If ($p <> TRUE)
			If ($pdirective > "2")
				SetVar $pdirective 1
			End
		End
	ElseIf ($choice = "") or ($choice = "0") or ($choice = #13)
		If ($z_altcitview = TRUE)
			Echo "**"
		Else
			Echo #27&"[8A"
		End
		Goto :STARTCITMENU
	End
	Echo "[25D" & "                                                  " & "[50D"
	Goto :STARTCITOPTIONS
ElseIf ($choice = "S")
	Send "s"
	WaitOn "<Scan Sector>"
	WaitOn "Citadel command (?=help)"
	Goto :STARTCITMENU
ElseIf ($choice = "R")
	If ($disruptors > 0)
		Send "q q c w y " & $ptarget[$ptarget] & "* q "
		Gosub :Z_Lib~RETURNTOPLANET
		SetVar $disruptors ($disruptors - 1)
		Gosub :Z_Lib~SYNC
		Send #145
		WaitFor #145 & #8
		Goto :STARTCITMENU
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "B")
	If ($photons > 0)
		Gosub :Z_Lib~COMMSON
		Send #145
		WaitFor #145 & #8
		Gosub :CHECKRESCUE
		If ($z_rescueavailable <> TRUE)
			Echo "***" & $boldred & $blinkon & "NO RESCUE SERVICE AVAILABLE!***" & $blinkoff
			Goto :STARTCITMENU
		End
		Gosub :GETSTATS
		SetVar $target $ptarget[$ptarget]
		SetVar $previoussector $current_sector
		SetVar $savetarget $target
		StripText $current_sector " "
		SetVar $Z_Strings~padchar "0"
		SetVar $Z_Strings~padlen 5
		SetVar $Z_Strings~unpadded $savetarget
		GoSub :Z_Strings~PAD
		SetVar $formattedsector $z_Strings~padded
		Send "'" & $formattedsector & "=saveme*"
		Gosub :BWARP
		Gosub :GETSTATS
		Send #145
		WaitFor #145 & #8
		If ($current_sector = $target)
			Gosub :Z_SaveMe~MOVEMENTCALL
			Gosub :Z_Lib~SYNC
			Gosub :Z_Lib~COMMSOFF
			SetVar $Z_Lib~planetnum $rescueplanet
			Send #145
			WaitFor #145 & #8
			Goto :STARTCITMENU
		Else
			Goto :NOCITMENU
		End
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "M")
	If (($limps > 0) and ($droplimps > 0)) or (($mines > 0) and ($dropmines > 0))
		Send "q q "
		If ($mines > 0)
			Send "h 1 z " & $dropmines & "* z c * "
			SetSectorParameter $current_sector "MINESEC" TRUE
		End
		If ($limps > 0)
			Send "h 2 z " & $droplimps & "* z c * "
			SetSectorParameter $current_sector "LIMPSEC" TRUE
		End
		Gosub :Z_Lib~RETURNTOPLANET
		Gosub :Z_Lib~SYNC
		Send #145
		WaitFor #145 & #8
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "I")
	If ($limps > 0)
		Send "q q h 2 z 1 * p z 0 * z 0 * z 0 * "
		Gosub :Z_Lib~RETURNTOPLANET
		Gosub :Z_Lib~SYNC
		Send #145
		WaitFor #145 & #8
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "E")
	Gosub :INTCOM_EXIT
	#Send "q q q y n t * * * " & PASSWORD & "* z a  *  *  *  f z 1* c q * d "
	#Gosub :Z_Lib~RETURNTOPLANET
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "D")
	Send "q q sz *"
	Send #145
	WaitFor #145 & #8
	Gosub :Z_Lib~RETURNTOPLANET
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "N")
	SetArray $planets 0
	SetVar $planetctr 0
	Send "qq "
	WaitOn "Command [TL="
	SetDelayTrigger cm0 :CM0 3000
	SetTextTrigger cm1 :CM1 "Registry# and Planet Name"
	SetTextTrigger cm3 :CM3 "Planet command (?=help)"
	Send "lj" & #8 & #8 & $Z_Lib~planetnum & "* c  "
	Pause
:CM0
	KillAllTriggers
	Goto :CM3
:CM1
	#KillAllTriggers
	SetTextTrigger cm2 :CM2 "> "
	#SetTextTrigger cm3 :CM3 "Planet command (?=help)"
	Pause
:CM2
	#KillAllTriggers
	GetText CURRENTLINE $word "<" ">"
	StripText $word " "
	IsNumber $isnum $word
	If ($isnum = TRUE)
		SetVar $planetctr ($planetctr + 1)
		SetVar $planets[$planetctr] $word
		SetTextTrigger cm2 :CM2 "> "
		#SetTextLineTrigger cm3 :CM3 "Planet command (?=help)"
		Pause
	Else
		Goto :CM3
	End
:CM3
	KillAllTriggers
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "L")
	Echo "[25D" & "                                                  " & "[50D"
	Echo $boldcyan & "Land on which planet number (ENTER to cancel):" & $boldwhite
	GetConsoleInput $choice
	If ($choice = "") or ($choice = "0") or ($choice = #13)
		Echo #27&"[8A"
		Goto :STARTCITMENU
	End
	IsNumber $isnum $choice
	If ($isnum <> TRUE)
		Goto :STARTCITMENU
	End
	Send "qq l" & $choice & "* c  *  "
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	CutText CURRENTLINE $word 1 7
	If ($word <> "Citadel")
		Gosub :Z_Lib~RETURNTOPLANET
		SetVar $choice $Z_Lib~planetnum
		Gosub :Z_Lib~SYNC
		Send #145
		WaitFor #145 & #8
		CutText CURRENTLINE $word 1 7
		If ($word <> "Citadel")
			Goto :NOCITMENU
		End
	End
	SetVar $Z_Lib~planetnum $choice
	Echo "**" & $boldcyan & "Landed on planet# " & $blinkon & $boldwhite & $choice & $blinkoff & "*"
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "C")
	SetVar $attackmode "KILL"
	Gosub :SHIPCAP
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	Goto :STARTCITMENU
ElseIf ($choice = "P")
	If ($photons > 0)
		If ($pdirective = "1")
			Send "c p y " & $ptarget[$ptarget] & "* q "
			SetVar $photons ($photons - 1)
			Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
			Goto :STARTCITMENU
		ElseIf ($pdirective = "2")
			Gosub :INTCOM_DP
			Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
			Goto :STARTCITMENU
		ElseIf ($pdirective = "3")
			SetVar $warpcount SECTOR.WARPCOUNT[$current_sector]
			SetVar $x "1"
			SetVar $pok FALSE
			Send "c "
			While ($x <= $warpcount) and ($photons > 0)
				SetVar $thiswarp SECTOR.WARPS[$current_sector][$x]
				Send "p y " & $thiswarp & "* "
				SetVar $photons ($photons - 1)
				SetVar $x ($x + 1)
			End
			Send "q "
			Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
			Goto :STARTCITMENU
		ElseIf ($pdirective = "4")
			Gosub :Z_Lib~COMMSON
			SetVar $target $ptarget[$ptarget]
			SetVar $previoussector $current_sector
			Gosub :GETSTATS
			Gosub :BWARP
			Gosub :GETSTATS
			Send #145
			WaitFor #145 & #8
			If ($current_sector = $target)
				SetVar $PARM1 $previoussector 
				SetVar $PARM2 $Z_Lib~planetnum
				Gosub :INTCOM_PEL
				Gosub :Z_Lib~SYNC
				SetVar $photons ($photons - 1)
				Send "* c x q *"
				Gosub :Z_Lib~COMMSOFF
				Send #145
				WaitFor #145 & #8
				Goto :STARTCITMENU
			Else
				Goto :NOCITMENU
			End
		End
	End
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27&"[8A"
	End
	Goto :STARTCITMENU
ElseIf ($choice = "A")
	SetVar $citswapok FALSE
	Gosub :CITGETTRADERS
	If ($citswapwith <> "0") and ($citswapwith <> "")
		SetVar $x 1
		SetVar $found 0
		While ($x <= $citctr)
			If ($cittraders[$x] = $citswapwith)
				SetVar $found $x
				SetVar $x $citctr
			End
			SetVar $x ($x + 1)
		End
		If ($found <> "0")
			SetVar $temp $shipid
			SetVar $citmacro "e"
			SetVar $x 1
			While ($x < $found)
				SetVar $citmacro ($citmacro & "n")
				SetVar $x ($x + 1)
			End
			SetVar $citmacro ($citmacro & "y")
			Send $citmacro
			Gosub :GETSTATS
			If ($shipid <> $temp)
				SetVar $citswapok TRUE
			End
		End
		Send #145
		WaitOn #145 & #8
		Goto :STARTCITMENU
	Else
		If ($citctr > 0)
			SetVar $traderptr 1
:CITSELECTTRADER
			Echo "[25D" & "                                                  " & "[50D"
			Echo $boldgreen & " Select player to swap with: [ " & $boldyellow & $cittraders[$traderptr] & $boldgreen & " ]  < > ENTER "
			GetConsoleInput $choice2 SINGLEKEY
			If ($choice2 = ",") or ($choice2 = "<")
				SetVar $traderptr ($traderptr - 1)
				If ($traderptr < 1)
					SetVar $traderptr $citctr
				End
				SetVar $citswapok FALSE
			ElseIf ($choice2 = ".") or ($choice2 = ">")
				SetVar $traderptr ($traderptr + 1)
				If ($traderptr > $citctr)
					SetVar $traderptr 1
				End
				SetVar $citswapok FALSE
			ElseIf ($choice2 = #13)
				SetVar $citswapwith $cittraders[$traderptr]
				If ($z_altcitview = TRUE)
					Echo "**"
				Else
					Echo #27&"[8A"
				End
				Goto :STARTCITMENU
			End
		Else
			If ($z_altcitview = TRUE)
				Echo "**"
			Else
				Echo #27&"[8A"
			End
			Goto :STARTCITMENU
		End
		Goto :CITSELECTTRADER
	End
	Send #145
	WaitOn #145 & #8
	Goto :STARTCITMENU
# CITGETTRADERS - subroutine 
:CITGETTRADERS
	KillAllTriggers
	SetVar $citctr 0
	SetArray $cittraders 0
	SetArray $line 0
	SetTextLineTrigger citnoswap :CITNOSWAP "There are no other Traders in the Citadel."
	SetTextLineTrigger citswap :CITSCAN "Other Traders Here                  Ship Type         Fighters  Shields  Holds"
	Send "d"
	Pause
:CITSCAN
	KillAllTriggers
	SetTextLineTrigger citscanline :CITSCANLINE
	Pause
:CITSCANLINE
	KillTrigger citscanline
	SetVar $citctr ($citctr + 1)
	SetVar $line[$citctr] CURRENTLINE
	GetWord $line[$citctr] $word1 1
	GetWord $line[$citctr] $word2 2
	GetWord $line[$citctr] $word3 3
	If ($line[$citctr] = "") or (($word1 = "Citadel") and ($word2 = "treasury") and ($word3 = "contains"))
		SetVar $citctr ($citctr - 1)
		Goto :CITSCANNED
	End
	SetTextLineTrigger citscanline :CITSCANLINE
	Pause
:CITSCANNED
	SetVar $x 1
	While ($x <= $citctr)
		CutText $line[$x] $cittraders[$x] 1 26
		SetVar $Z_Strings~trimstring $cittraders[$x]
		Gosub :Z_Strings~RTRIM
		SetVar $cittraders[$x] $Z_Strings~trimstring
		SetVar $x ($x + 1)	
	End
	SetArray $lines 0
Return	
:CITNOSWAP
	KillAllTriggers
	Goto :STARTCITMENU
	If ($z_altcitview = TRUE)
		Goto :STARTCITMENU3
	Else
		Goto :STARTCITMENU2
	End
#--------------------------------------------------------------
# 2-SHIP GRIDDER 
ElseIf ($choice = "G") and ($p = TRUE)
#--------------------------------------------------------------
	KillAllTriggers
	Gosub :GETSHIPDATA
	If ($gridauto = TRUE)
		
	End
	SetVar $walking TRUE
	SetArray $walkhistory 9
	If ($shipid <> $gridship1)
		SetVar $gridshipsok FALSE
	End
	LoadVar $gridmenureturn
	LoadVar $z_gridmode
	UpperCase $z_gridmode
	If ($z_gridmode <> "PGRID") and ($z_gridmode <> "2SHIP")
		SetVar $z_gridmode "2SHIP"
	End
	If ($z_gridmode = "PGRID")
		Gosub :Z_Lib~COMMSON
		Gosub :CHECKRESCUE
		If ($z_rescueavailable <> TRUE)
			SetVar $z_gridmode "2SHIP"
			Echo "**" & $boldred & $blinkon & "!!! RESCUE NOT AVAILABLE !!!**" & $blinkoff
		End
		Gosub :Z_Lib~COMMSOFF
	End
:GRIDLOOP
	KillAllTriggers
	Gosub :CLEARMOVEOPTIONS
	SetArray $adjacents 6
	SetArray $portclasses 8
	SetVar $portclasses[1] $green & "BB" & $boldcyan & "S"
	SetVar $portclasses[2] $green & "B" & $boldcyan & "S" & $green & "B"
	SetVar $portclasses[3] $boldcyan & "S" & $green & "BB"
	SetVar $portclasses[4] $boldcyan & "SS" & $green & "B"
	SetVar $portclasses[5] $boldcyan & "S" & $green & "B" & $boldcyan & "S"
	SetVar $portclasses[6] $green & "B" & $boldcyan & "SS"
	SetVar $portclasses[7] $boldcyan & "SSS"
	SetVar $portclasses[8] $green & "BBB"
	Gosub :GETSTATS
	Send #145
	WaitFor #145 & #8
	CutText CURRENTLINE $word 1 7
	If ($word <> "Citadel")
		Goto :ENDGRID
	End
	Send "s*"
	Send #145
	WaitFor #145 & #8
	SetVar $Z_Strings~padchar "0"
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $current_sector
	SetVar $Z_Strings~rpad FALSE
	Gosub :Z_Strings~PAD
	SetVar  $currentsectord $Z_Strings~padded
	SetVar $i 1
	SetVar $warps SECTOR.WARPCOUNT[$current_sector]
	SetVar $line1 ""
	SetVar $line2 ""
	SetVar $line3 ""
	SetVar $line4 ""
	SetVar $line5 ""
	SetVar $line6 ""
	While ($i <= $warps)
		SetVar $adjacents[$i] SECTOR.WARPS[$current_sector][$i]
		If ($adjacents[$i] > 0) and ($adjacents[$i] <= SECTORS)
			GetSectorParameter $adjacents[$i] "FIGSEC" $figged
			If ($adjacents[$i] > 10) and ($adjacents[$i] <> STARDOCK) and ((($gridshipsok = TRUE) and ($gridxportok = TRUE)) or ($z_gridmode = "PGRID")) and ((SECTOR.DENSITY[$adjacents[$i]] <= $gridmaxdensity) or ($figged = TRUE))
				SetVar $line1 ($line1 & $boldblue & #179 & $cyan & "---[" & $boldwhite & $i & $cyan & "]---" & $boldblue & #179)
			Else
				SetVar $line1 ($line1 & $boldblue & #179 & $cyan & "---[" & $boldwhite & " " & $cyan & "]---" & $boldblue & #179)
			End
			GetDistance $bdchk $adjacents[$i] $current_sector
			If ($bdchk = "-1")
				SetVar $bktcol $cyan
			ElseIf ($bdchk = "1")
				SetVar $bktcol $boldwhite
			Else
				SetVar $bktcol $boldred
			End
			SetVar $adjcol $boldgreen
			SetVar $walkalert FALSE
			SetVar $walkfigs SECTOR.FIGS.QUANTITY[$adjacents[$i]]
			If ($walkfigs >= 1)
				If (SECTOR.FIGS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.FIGS.OWNER[$adjacents[$i]] = "yours")
					SetVar $adjcol $boldgreen
					SetVar $walkf ($boldgreen & "F")
					If ($walkscanned = TRUE)
						SetSectorParameter $adjacents[$i] "FIGSEC" TRUE
					End
				Else
					If ($walkscanned = TRUE)
						SetSectorParameter $adjacents[$i] "FIGSEC" FALSE
					End
					If ($walkfigs = 1)
						SetVar $adjcol $boldyellow
						SetVar $walkf ($boldyellow & "F")
					ElseIf ($walkfigs <= 100)
						SetVar $adjcol $boldmagenta
						SetVar $walkf ($boldmagenta & "F")
					Else
						SetVar $adjcol $boldred
						SetVar $walkf ($boldred & "F")
						SetVar $walkalert TRUE
					End
				End
			Else
				If ($walkscanned = TRUE)
					SetSectorParameter $adjacents[$i] "FIGSEC" FALSE
				End
				SetVar $adjcol $white
				SetVar $walkf ($boldblack & " ")
			End
			If (PORT.EXISTS[$adjacents[$i]] = TRUE)
				If (PORT.CLASS[$adjacents[$i]] = 0)
					If ($adjacents[$i] = "1")
						SetVar $walkbbb $boldwhite & "TERRA"
					ElseIf ($adjacents[$i] = RYLOS)
						SetVar $walkbbb $boldwhite & "RYLOS"
					ElseIf ($adjacents[$i] = ALPHACENTAURI)
						SetVar $walkbbb $boldwhite & "ALPHA"
					End
				ElseIf (PORT.CLASS[$adjacents[$i]] = 9)
					SetVar $walkbbb $boldwhite & "SDOCK"
				Else
					SetVar $walkbbb ($white & " " & $portclasses[PORT.CLASS[$adjacents[$i]]] & " ")
				End
			Else
				SetVar $walkbbb $boldblack & " --- "
			End
			If (SECTOR.ANOMOLY[$adjacents[$i]] = TRUE)
				If (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "yours")
					SetVar $walkanom $boldgreen & "A"
				Else
					SetVar $walkanom $boldred & "A"
					SetVar $walkalert TRUE
				End
			Else
				SetVar $walkanom " "
			End
			SetVar $walkmines SECTOR.MINES.QUANTITY[$adjacents[$i]]
			If ($walkmines >= 1)
				If (SECTOR.MINES.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.MINES.OWNER[$adjacents[$i]] = "yours")
					SetVar $walkm ($boldgreen & "M")
				Else
					If ($walkmines = 1)
						SetVar $walkf ($yellow & "M")
					ElseIf ($walkmines <= 3)
						SetVar $walkm ($boldyellow & "M")
					Else
						SetVar $adjcol $boldred
						SetVar $walkm ($boldred & "M")
						SetVar $walkalert TRUE
					End
				End
			Else
				SetVar $walkm ($boldblack & " ")
			End
			If (SECTOR.TRADERCOUNT[$adjacents[$i]] > 0)
				SetVar $walktrad $boldred & "TRDRS"
			Else
				SetVar $walktrad $boldblack & " --- "
			End
			If (SECTOR.SHIPCOUNT[$adjacents[$i]] > 0)
				SetVar $walkship $boldwhite & "S"
			Else
				SetVar $walkship " "
			End
			SetVar $walklimps SECTOR.LIMPETS.QUANTITY[$adjacents[$i]]
			If ($walklimps >= 1)
				If (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$adjacents[$i]] = "yours")
					SetVar $walkl ($boldgreen & "L")
				Else
					SetVar $adjcol $boldred
					SetVar $walkl ($boldred & "L")
					SetVar $walkalert TRUE
				End
			Else
				SetVar $walkl ($boldblack & " ")
			End
			SetVar $walkdens SECTOR.DENSITY[$adjacents[$i]]
			If ($adjacents[$i] = $z_base)
				SetVar $walkd $boldgreen & "BASE "
			Else
				If ($walkdens > $gridmaxdensity)
					SetVar $walkd $boldred & "DENSE"
				Else
					If ($adjacents[$i] = $z_safesector)
						SetVar $walkd $green & "SAFE "
					Else
						SetVar $walkd "     "
					End
				End
			End
			If (SECTOR.PLANETCOUNT[$adjacents[$i]] > 0)
				If ($adjacents[$i] = $z_base)
					SetVar $walkp $boldgreen & "P"
				Else
					SetVar $walkp $blinkon & $boldred & "P" & $blinkoff
				End
				If (SECTOR.FIGS.OWNER[$adjacents[$i]] <> "belong to your Corp") and (SECTOR.FIGS.OWNER[$adjacents[$i]] <> "yours") and (SECTOR.FIGS.QUANTITY[$adjacents[$i]] > 0)
					SetVar $walkalert TRUE
				End
			Else
				SetVar $walkp " "
			End
			If (SECTOR.BACKDOORCOUNT[$adjacents[$i]] > 0)
				SetVar $walkbd $red & "BD"
			Else
				SetVar $walkbd "  "
			End
			SetVar $walkwarps SECTOR.WARPCOUNT[$adjacents[$i]]
			If ($walkwarps > 0)
				If ($walkwarps = 1)
					SetVar $walkw $green & $walkwarps & "-Way "
				ElseIf ($walkwarps = 6)
					SetVar $walkw $boldyellow & $walkwarps & "-Way "
				ElseIf ($walkwarps = 5)
					SetVar $walkw $boldcyan & $walkwarps & "-Way "
				Else
					SetVar $walkw $cyan & $walkwarps & "-Way "
				End
			Else
				SetVar $walkw $red & "NO MAP"
			End
			If ($walkalert = TRUE)
				SetVar $adjcol $boldred
			End
			SetVar $Z_Strings~padchar "0"
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded $adjacents[$i]
			SetVar $Z_Strings~rpad FALSE
			Gosub :Z_Strings~PAD
			SetVar  $adjacentd $Z_Strings~padded
			SetVar $line2 ($line2 & $boldblue & #179 & $bktcol & " [" & $adjcol & $adjacentd & $bktcol & "] " & $boldblue & #179)
			SetVar $line3 ($line3 & $boldblue & #179 & $walkf & " " & $walkbbb & " " & $walkanom & $boldblue & #179)
			SetVar $line4 ($line4 & $boldblue & #179 & $walkm & " " & $walktrad & " " & $walkship & $boldblue & #179)
			SetVar $line5 ($line5 & $boldblue & #179 & $walkl & " " & $walkd & " " & $walkp & $boldblue & #179)
			SetVar $line6 ($line6 & $boldblue & #179 & $walkbd & " " & $walkw & $boldblue & #179)
		End
		SetVar $i ($i + 1)
	End
	While ($i <= 6)
		SetVar $line1 ($line1 & "           ")
		SetVar $line2 ($line2 & "           ")
		SetVar $line3 ($line3 & "           ")
		SetVar $line4 ($line4 & "           ")
		SetVar $line5 ($line5 & "           ")
		SetVar $line6 ($line6 & "           ")
		SetVar $i ($i + 1)
	End
	If ($gridshipsok = TRUE) or ($z_gridmode = "PGRID")
		SetVar $line1 ($line1 & "  " & $boldwhite & " C" & $cyan & "onfigure")
	Else
		SetVar $line1 ($line1 & "  " & $boldwhite & " C" & $boldred & $blinkon & "onfigure" & $blinkoff)
	End
	SetVar $line2 ($line2 & "  " & $boldblue & #196 & #196 & #196 & $cyan & "ships" & $boldblue & #196 & #196)
	
	SetVar $Z_Strings~string $gridship1 & "-" & $gridship2
	SetVar $Z_Strings~width 10
	Gosub :Z_Strings~CENTRE
	If ($gridship2 = "0")
		SetVar $line3 ($line3 & "  " & $boldred & $Z_Strings~centre)
	Else
		SetVar $line3 ($line3 & "  " & $boldyellow & $Z_Strings~centre)
	End
	SetVar $line4 ($line4 & "  " & $boldblue & #196 & #196 & $cyan & "density" & $boldblue & #196)
	SetVar $Z_Strings~string $gridmaxdensity
	SetVar $Z_Strings~width 10
	Gosub :Z_Strings~CENTRE
	SetVar $line5 ($line5 & "  " & $boldyellow & $Z_Strings~centre)
	If (($mines > 0) and ($dropmines > 0)) or (($limps > 0) and ($droplimps > 0))
		SetVar $cminesd $boldwhite & "M"
	Else
		SetVar $cminesd $magenta & "M"
	End

	If ($scanner <> "0")
		If ($scanner = "2")
			SetVar $line6 ($line6 & "  " & $boldblue & #196 & #196 & $boldwhite & "H" & $boldblue & #196 & #196 & $boldwhite & "D" & $boldblue & #196 & #196 & $boldwhite & $cminesd & $boldblue & #196)
		Else
			SetVar $line6 ($line6 & "  " & $boldblue & #196 & #196 & #196 & $boldwhite & "D" & $boldblue & #196 & #196 & $boldwhite & $cminesd & $boldblue & #196 & #196 & #196)
		End
	Else
		SetVar $line6 ($line6 & "  " & $red & "no scanner")
	End
	If ($walkscanned = TRUE)
		SetVar $sectcol $boldcyan
	Else
		SetVar $sectcol $white
	End
	If (SECTOR.BACKDOORCOUNT[$current_sector] > 0)
		SetVar $walkbd "[2C" & $boldred & "BD"
	Else
		SetVar $walkbd ""
	End
	SetVar $curstat ""
	If (SECTOR.FIGS.OWNER[$current_sector] <> "belong to your Corp") and (SECTOR.FIGS.OWNER[$current_sector] <> "yours") and (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
		SetVar $curstat $boldred & "F"
	ElseIf (SECTOR.FIGS.QUANTITY[$current_sector] > 0)
		SetVar $curstat $boldgreen & "F"
	Else
		SetVar $curstat $boldblue & #196
	End
	If (SECTOR.MINES.OWNER[$current_sector] <> "belong to your Corp") and (SECTOR.MINES.OWNER[$current_sector] <> "yours") and (SECTOR.MINES.QUANTITY[$current_sector] > 0)
		SetVar $curstat ($curstat & $boldred & "M")
	ElseIf (SECTOR.MINES.QUANTITY[$current_sector] > 0)
		SetVar $curstat ($curstat & $boldgreen & "M")
	Else
		SetVar $curstat ($curstat & $boldblue & #196)
	End
	If (SECTOR.ANOMOLY[$current_sector] = TRUE)
		If (SECTOR.LIMPETS.OWNER[$current_sector] = "belong to your Corp") or (SECTOR.LIMPETS.OWNER[$current_sector] = "yours")
			SetVar $curstat ($curstat & $boldgreen & "L")
		Else
			SetVar $curstat ($curstat & $boldred & "A")
		End
	Else
		SetVar $curstat ($curstat & $boldblue & #196)
	End
	SetDelayTrigger creepdelay :GRIDDELAY 300
	Pause
:GRIDDELAY
	Echo "**"
	Gosub :Z_Lib~BLUELINE
	Gosub :Z_Lib~ZEDLINE
	If ($current_sector = STARDOCK)
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldwhite & "STARDOCK" & $walkbd & "*"
	ElseIf ($current_sector = $z_base)
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldgreen & "BASE" & $walkbd & "*"
	ElseIf ($current_sector = $z_safesector)
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $green & "SAFE" & $walkbd & "*"
	ElseIf ($current_sector = RYLOS)
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $yellow & "RYLOS" & $walkbd & "*"
	ElseIf ($current_sector = ALPHACENTAURI)
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $yellow & "ALPHA" & $walkbd & "*"
	ElseIf ($current_sector = "1")
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $boldyellow & "TERRA" & $walkbd & "*"
	ElseIf (PORT.CLASS[$current_sector] > 0) and (PORT.CLASS[$current_sector] < 10)
		GetSectorParameter $current_sector "MCIC" $walkmcic
		If ($walkmcic <> "") and ($walkmcic <> "0")
			SetVar $walkmcic ($boldblue & "[2C" & #196 & "[MCIC: " & $green & $walkmcic & $boldblue & "]")
		Else
			SetVar $walkmcic ""
		End
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & "[2C" & #196  & $portclasses[PORT.CLASS[$current_sector]] & $walkmcic & $walkbd & "*"
	Else
		Echo "[78D" & $boldblue & "GRIDDER" & "[10C" & $curstat & $boldblue & "[3C" & #196 & "[" & $sectcol & $currentsectord & $boldblue & "]" & $walkbd & "*"
	End
	Echo #27&"[s"
:STARTGRIDMENU
	Echo #27&"[u"
	Echo $line1 & "*"
	Echo $line2 & "*"
	Echo $line3 & "*"
	Echo $line4 & "*"
	Echo $line5 & "*"
	Echo $line6
	Gosub :Z_Lib~BLUELINE
	Echo "[s" & "[8D" & $z_gridmode & "[u"
	If ($walkhistory[1] > 0)
		Echo "*"
		SetVar $j 9
		While ($j >= 1)
			If ($walkhistory[$j] > 0)
				If ($j = 1)
					Echo $boldwhite & " > " & $boldcyan & $walkhistory[$j]
				ElseIf ($j = 9)
					Echo $boldwhite & " > " & $boldblack & $walkhistory[$j]
				Else
					Echo $boldwhite & " > " & $cyan & $walkhistory[$j]
				End
			End
			SetVar $j ($j - 1)
		End
		Echo $boldwhite & " > " & $boldwhite & $current_sector
		Gosub :Z_Lib~BLUELINE
	End
	Echo "*" & "                                                  " & "[50D"
	KillTrigger connectlost
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	GetConsoleInput $choice SINGLEKEY
	UpperCase $choice
	If ($choice = "1") or ($choice = "2") or ($choice = "3") or ($choice = "4") or ($choice = "5") or ($choice = "6")
		If ($choice <= $warps) and (($z_gridmode = "PGRID") or (($gridshipsok = TRUE) and ($gridxportok = TRUE)))
			If ($adjacents[$choice] > 10) and ($adjacents[$choice] <> STARDOCK)
				GetSectorParameter $adjacents[$choice] "FIGSEC" $figged
				If (SECTOR.DENSITY[$adjacents[$choice]] <= $gridmaxdensity) or ($figged = TRUE)
					SetVar $target $adjacents[$choice]
					SetVar $walklast $current_sector
					Gosub :GRIDHISTORY
					If ($z_gridmode = "PGRID")
						Gosub :Z_Lib~COMMSON
						Gosub :CHECKRESCUE
						Gosub :Z_Lib~COMMSOFF
						If ($z_rescueavailable = TRUE)
							SetVar $PARM1 $target
							SetVar $PARM2 $Z_Lib~planetnum
							Gosub :INTCOM_PLOW
						Else
							Echo "**" & $boldred & $blinkon & "!!! RESCUE NOT AVAILABLE !!!**" & $blinkoff
						End
						If ($gridauto = TRUE)
							Send #145
							WaitOn #145 & #8
						End
						If ($gridmenureturn = TRUE)
							Goto :GRIDLOOP
						Else
							Goto :ENDGRID
						End
					Else
						Send "q q * m " & $target & "*  za" & $z_wave & "* *  fz1* c q * d x  " & $gridship2 & " * * "
						Gosub :Z_Lib~RETURNTOPLANET
						Send #145
						WaitOn #145 & #8
						Send "p" & $target & "* y "
						Send #145
						WaitOn #145 & #8
						Send "q t * * 1 * m * * * c c q s* "
						Gosub :GETSTATS
						If ($shipid = $gridship2)
							SetVar $temp $gridship1
							SetVar $gridship1 $gridship2
							SetVar $gridship2 $temp
							If ($current_sector = $target)
								SetSectorParameter $target "FIGSEC" TRUE
								SetVar $walkscanned FALSE
								If ($z_figherald = TRUE)
									SetVar $Z_Lib~message $scripttitle & ": FIGSEC_TRUE ADD Sector " & $target & " now!*"
									SetVar $Z_Lib~messageto $sender
									SetVar $Z_Lib~messagemode "R"
									Gosub :MSGBRIDGE
									Send #145
									WaitOn #145 & #8
									Echo "****"
								End
								If ($gridauto = TRUE)
										
								End
								If ($gridmenureturn = TRUE)
									Goto :GRIDLOOP
								Else
									Goto :ENDGRID
								End
							End
						End
					End
				End
			End
			Goto :NOCITMENU
		End
	ElseIf ($choice = "H")
		If ($scanner = "2")
			Send "q q * sz hs*"
			Gosub :Z_Lib~RETURNTOPLANET
			#Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
			SetVar $walkscanned TRUE
			Goto :GRIDLOOP
		End
		Goto :GRIDLOOP
	ElseIf ($choice = "D")
		If ($scanner <> "0")
			Send "q q * sz *"
			Gosub :Z_Lib~RETURNTOPLANET
			#Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
		End
		Goto :GRIDLOOP
	ElseIf ($choice = "M")
		If (($limps > 0) and ($droplimps > 0)) or (($mines > 0) and ($dropmines > 0))
			Send "q q * "
			If ($mines > 0)
				Send "h 1 z " & $dropmines & "* z c * "
				SetSectorParameter $current_sector "MINESEC" TRUE
			End
			If ($limps > 0)
				Send "h 2 z " & $droplimps & "* z c * "
				SetSectorParameter $current_sector "LIMPSEC" TRUE
			End
			Gosub :Z_Lib~RETURNTOPLANET
			Gosub :Z_Lib~SYNC
			Send #145
			WaitFor #145 & #8
		End
		Goto :GRIDLOOP
	ElseIf ($choice = "C")
		SetVar $gridship1 $shipid
:STARTGRIDCONFIGURE
		If ($gridauto = TRUE)
			SetVar $gridautod $boldyellow & "ON "
		Else
			SetVar $gridautod $boldgreen & "OFF"
		End
		If ($gridmenureturn = TRUE)
			SetVar $gridmenureturnd $boldyellow & "GRID"
		Else
			SetVar $gridmenureturnd $boldwhite & "CIT"
		End
		#Echo "*" & "                                                  " & "[50D"
		Echo "[25D" & "                                                  " & "[50D"
		If ($gridship2 = "0")
			SetVar $gridshipd $boldred & $blinkon & "0" & $blinkoff
		Else
			SetVar $gridshipd $boldgreen & "0"
		End
		Echo $boldwhite & " S" & $boldcyan & "hips: " & $gridship1 & $boldred & "-" & $boldyellow & $gridship2 & $boldwhite & "  D" & $boldcyan & "ensity: " & $boldyellow & $gridmaxdensity & $boldwhite & "  R" & $boldcyan & "eturn to: " & $boldyellow & $gridmenureturnd & $boldwhite & "  G" & $boldcyan & "rid Mode: " & $boldyellow & $z_gridmode & " "
		GetConsoleInput $choice2 SINGLEKEY
		UpperCase $choice2
		If ($choice2 = "S")
			Echo "[25D" & "                                                  " & "[50D"
			Echo $boldwhite & " Enter the other ship number: "
			GetConsoleInput $value
			IsNumber $isnum $value
			If ($isnum = TRUE)
				If ($value <> 0) and ($value <> $shipid)
					SetVar $returnplanet $Z_Lib~planetnum
					SetVar $gridship2 $value
					SetVar $gridshipsok TRUE
					SetVar $gridxportok FALSE
					SetVar $PARM1 $gridship2
					SetVar $returnsector $current_sector
					Gosub :INTCOM_XPORT
					Gosub :GETSTATS
					If ($shipid = $gridship2)
						SetVar $temp $gridship1
						SetVar $gridship1 $gridship2
						SetVar $gridship2 $temp
						If ($current_sector <> $returnsector)
							Gosub :CLEARMOVEOPTIONS
							SetVar $target $returnsector
							Gosub :TWARPING
						End
						Send #145
						WaitOn #145 & #8
						SetVar $returnplanet $Z_Lib~planetnum
						Gosub :Z_Lib~RETURNTOPLANET
						Gosub :GETSTATS
						If ($current_sector = $returnsector)
							Send #145
							WaitOn #145 & #8
							CutText CURRENTLINE $word 1 7
							If ($word = "Citadel")
								SetVar $gridxportok TRUE
								Goto :GRIDLOOP
							End
						End
					End
					Goto :NOCITMENU
				End
			End
			Goto :STARTGRIDCONFIGURE
		ElseIf ($choice2 = "D")
			Echo "[25D" & "                                                  " & "[50D"
			Echo $boldwhite & " Enter the Maximum density to grid : "
			GetConsoleInput $value
			IsNumber $isnum $value
			If ($isnum = TRUE) and ($value <> "0")
				SetVar $gridmaxdensity $value
			End
			Goto :STARTGRIDCONFIGURE
		ElseIf ($choice2 = "R")
			If ($gridmenureturn = TRUE)
				SetVar $gridmenureturn FALSE
			Else
				SetVar $gridmenureturn TRUE
			End
			SaveVar $gridmenureturn
			Goto :STARTGRIDCONFIGURE
		ElseIf ($choice2 = "G")
			If ($z_gridmode = "PGRID")
				SetVar $z_gridmode "2SHIP"
			Else
				SetVar $z_gridmode "PGRID"
			End
			SaveVar $z_gridmode
			Goto :STARTGRIDCONFIGURE
		ElseIf ($choice2 = "A")
			If ($gridauto = TRUE)
				SetVar $gridauto FALSE
			Else
				SetVar $gridauto TRUE
			End
			Goto :STARTGRIDCONFIGURE
		ElseIf ($choice2 = "Q") or ($choice2 = #13)
			If ($z_gridmode = "PGRID")
				Gosub :Z_Lib~COMMSON
				Gosub :CHECKRESCUE
				If ($z_rescueavailable <> TRUE)
					SetVar $z_gridmode "2SHIP"
					Echo "**" & $boldred & $blinkon & "!!! RESCUE NOT AVAILABLE !!!**" & $blinkoff
				End
				Gosub :Z_Lib~COMMSOFF
			End
			Goto :GRIDLOOP
		Else
			Goto :STARTGRIDCONFIGURE
		End
	ElseIf ($choice = "Q") or ($choice = #13)
		SetVar $walkscanned FALSE
		Goto :ENDGRID
	End
	Goto :STARTGRIDMENU
:ENDGRID
	SetVar $line1 ""
	SetVar $line2 ""
	SetVar $line3 ""
	SetVar $line4 ""
	SetVar $line5 ""
	SetVar $line6 ""
	SetArray $portclasses 0
	SetArray $adjacents 0
	SetArray $walkhistory 0
	If ($z_altcitview = TRUE)
		Echo "**"
	Else
		Echo #27 & "[10A"
		SetVar $x 1
		While ($x <= 9)
			Echo "                                                                               *"
			SetVar $x ($x + 1)
		End
	End
	Goto :STARTCITMENU
#------------------------------------------------------------	
ElseIf ($choice = "Q") or ($choice = #13)
	Goto :NOCITMENU
End
If ($z_altcitview = TRUE)
	Echo "*" & "[1A" & "                                                  " & "[50D"
	Goto :STARTCITMENU3
Else
	Goto :STARTCITMENU2
End
:NOCITMENU
KillAllTriggers
Gosub :Z_Lib~COMMSON
PROCESSIN 1 $z_botname & "[Z]COMMSGUARDON[Z]" & $z_botname
SetVar $Z_Lib~heraldss FALSE
SetVar $walking FALSE
#Send #145
#WaitOn #145 & #8
Echo "*" & $boldred & "CITADEL MENU TERMINATED*"
:NOCITMENU2
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# GRIDHISTORY 
:GRIDHISTORY
SetVar $walkhistory[9] $walkhistory[8]
SetVar $walkhistory[8] $walkhistory[7]
SetVar $walkhistory[7] $walkhistory[6]
SetVar $walkhistory[6] $walkhistory[5]
SetVar $walkhistory[5] $walkhistory[4]
SetVar $walkhistory[4] $walkhistory[3]
SetVar $walkhistory[3] $walkhistory[2]
SetVar $walkhistory[2] $walkhistory[1]
SetVar $walkhistory[1] $walklast
Return
# BWARP - subroutine 
# Start from Citadel 
# Do a GETSTATS FIRST! 
:BWARP
SetTextTrigger bw :BW "Planet command (?=help)"
Send "q*c "
Pause
:BW
KillTrigger bw
SetTextTrigger bw0 :BW0 "Citadel command (?=help)"
SetTextLineTrigger bw1 :BW1 "-=-=-=-=-=- TransPort power ="
SetTextLineTrigger bw2 :BW2 "Fuel Ore"
Pause
:BW0
KillTrigger bw0
KillTrigger bw1
KillTrigger bw2
Echo "***" & $boldred & $blinkon & "!!! NO BWARP ON THIS PLANET !!!***" & $blinkoff
Goto :NOBWARP
:BW2
KillTrigger bw2
GetWord CURRENTLINE $bwarpfuel 6
StripText $bwarpfuel ","
Pause
:BW1
KillTrigger bw0
KillTrigger bw1
KillTrigger bw2
GetText CURRENTLINE $bwarprange "TransPort power = " " hops"
Send "^f" & $current_sector & "*" & $target & "*q"
WaitOn "ENDINTERROG"
GetDistance $bwarpdist $current_sector $target
If (($bwarpdist * 10) > $bwarpfuel)
	Echo "***" & $boldred & $blinkon & "!!! NOT ENOUGH BWARP FUEL ON THIS PLANET !!!***" & $blinkoff
	Goto :NOBWARP
End
If ($bwarprange < $bwarpdist)
	Echo "***" & $boldred & $blinkon & "!!! UPGRADE THE BWARP ON THIS PLANET !!!***" & $blinkoff
	Goto :NOBWARP
End
If ($turns < $z_minturns) and ($Z_Lib~isunlimited <> TRUE)
	Echo "***" & $boldred & $blinkon & "!!! NOT ENOUGH TURNS !!!***" & $blinkoff
	Goto :NOBWARP
End
SetTextTrigger bw3 :BW3 "No locating beam found"
SetTextTrigger bw4 :BW4 "Locating beam pinpointed"
SetTextTrigger bw5 :BW5 "No route within"
SetTextTrigger bw6 :BW6 "This planetary transporter does not have the range."
SetTextTrigger bw7 :BW7 "DANGER! You have marked sector"
#SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
Send "b" & $target & "*"
Pause
:BW3
KillTrigger bw3
KillTrigger bw4
KillTrigger bw5
KillTrigger bw6
KillTrigger bw7
Echo "***" & $boldred & $blinkon & "!!! NO FIGHTER DOWN !!!***" & $blinkoff
Send "n"
Goto :NOBWARP
:BW4
KillTrigger bw3
KillTrigger bw4
KillTrigger bw5
KillTrigger bw6
KillTrigger bw7
SetVar $heretrigger "["& $target &"] (?="
SetTextTrigger bw8 :BW8 "Mined Sector: Do you wish to Avoid this sector in the future?"
SetTextTrigger bw9 :BW9 $heretrigger
Send "y"
Pause
:BW5
KillTrigger bw3
KillTrigger bw4
KillTrigger bw5
KillTrigger bw6
KillTrigger bw7
Echo "***" & $boldred & $blinkon & "!!! NO ROUTE !!!***" & $blinkoff
Goto :NOBWARP
:BW6
KillTrigger bw3
KillTrigger bw4
KillTrigger bw5
KillTrigger bw6
KillTrigger bw7
Echo "***" & $boldred & $blinkon & "!!! UPGRADE THE BWARP ON THIS PLANET !!!***" & $blinkoff
Goto :NOBWARP
:BW7
KillTrigger bw3
KillTrigger bw4
KillTrigger bw5
KillTrigger bw6
KillTrigger bw7
Echo "***" & $boldred & $blinkon & "!!! SECTOR AVOIDED !!!***" & $blinkoff
Send "n"
Goto :NOBWARP
:BW8
KillTrigger bw8
KillTrigger bw9
Send "n"
:BW9
KillTrigger bw8
KillTrigger bw9
Goto :NOBWARP
:NOBWARP
Return
# TOPOFFKEYPRESSED 
:TOPOFFKEYPRESSED
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
Gosub :INTCOM_TOPOFF
Goto :WAITFORCOMMAND
# AUTOSETAUTOSSON 
:AUTOSETAUTOSSON
Gosub :SETAUTOSSON
Goto :WAITFORCOMMAND
# MENULAUNCH 
:MENULAUNCH
KillTrigger t14
SetTextOutTrigger launchkey :MENULIVE $z_actkey
SetDelayTrigger quickly :TOOSLOW 250
Pause
:TOOSLOW
KillTrigger launchkey
KillTrigger quickly
ProcessOut $z_actkey
SetTextOutTrigger t14 :MENULAUNCH $z_actkey
Goto :WAITFORCOMMAND
# MENULIVE 
:MENULIVE
KillAllTriggers
Gosub :LOADSCRIPTMENU
Gosub :Z_Lib~COMMSOFF
:SCRIPTMENUSTART
Gosub :DISPLAYSCRIPTMENU
Gosub :Z_Lib~REDLINE
Echo "*" & $boldgreen "Your Selection (ENTER to Exit) [  ]"
GetConsoleInput $key1 SINGLEKEY
If ($key1 = #13)
	Goto :SCRIPTMENUFINISH
End
Gosub :DISPLAYSCRIPTMENU
UpperCase $key1
Echo "**"
Echo $boldgreen & "Your Selection (ENTER to Exit) [" & $boldwhite & $key1 & $boldgreen & " ]"
GetConsoleInput $key2 SINGLEKEY
If ($key2 = #13)
	Goto :SCRIPTMENUFINISH
End
SetVar $keys $key1 & $key2
Gosub :DISPLAYSCRIPTMENU
UpperCase $keys
Echo "**"
Echo $boldgreen & "Your Selection (ENTER to Exit) [" & $boldwhite & $keys & $boldgreen & "]"
SetVar $count 1
SetVar $option 0
While ($count <= $optionkeys)
	If ($keys = $optionkeys[$count])
		SetVar $option $count
		SetVar $count $optionkeys
	End
	SetVar $count ($count + 1)
End
If ($option <> 0)
	If ($optiontype[$option] = "M")
		SetVar $menufile $optionfile[$option]
		Gosub :LOADSCRIPTMENU
		Goto :SCRIPTMENUSTART
	Else
		GetWordPos $optionfile[$option] $pos "\"
		If ($pos <> 0)
			FileExists $fileok $optionfile[$option]
		Else
			FileExists $fileok "scripts\" & $optionfile[$option]
		End
		If ($fileok = TRUE)
			SetEventTrigger t52 :SCRIPTSTOPPED "SCRIPT STOPPED"
			Load $optionfile[$option]
			Goto :SCRIPTLOADED
		Else
			Echo "**" & $boldred & "FILE NOT FOUND ERROR: " & $optionfile[$option] & " !**"
			Gosub :Z_Lib~ANYKEY
		End
	End
End
Goto :SCRIPTMENUSTART
:SCRIPTMENUFINISH
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "-=[" & $boldgreen & "Double Tap the [" & $boldwhite & $z_actkey & $boldgreen & "] key to return to the script menu" & $boldred & "]=-"
echo "*"
Goto :ENDMENU
:SCRIPTLOADED
If ($optiontype[$option] = "D")
	SetVar $mode "GENERAL"
	KillTrigger t52
Else
	SetVar $mode "EXTERNAL"
End
:ENDMENU
Gosub :Z_Lib~COMMSON
If ($z_usesound = TRUE)
	Sound ding
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# DISPLAYSCRIPTMENU 
:DISPLAYSCRIPTMENU
SetVar $Z_Lib~extra "Standalone Scripts"
Gosub :Z_Lib~HEADER
If ($menufile = "zp-main.mnu")
	Echo "*" & $boldred & "-=[" & $boldyellow & $menutitle & $boldred & "]=-"
Else
	Echo "*" & $boldred & "-=[" & $boldcyan & $menutitle & $boldred & "]=-"
End
echo "**"
SetVar $count 1
SetVar $column2 FALSE
While ($count <= $menu)
	If ($optionkeys[$count] <> "0")
		If ($optiontype[$count] = "S") 
			SetVar $menuentry ($boldred & "-=[" & $boldwhite & $optionkeys[$count] & $boldred & "]=-" & $boldyellow & $optiontitle[$count])
		ElseIf ($optiontype[$count] = "D") 
			SetVar $menuentry ($boldred & "-=[" & $boldwhite & $optionkeys[$count] & $boldred & "]=-" & $boldgreen & $optiontitle[$count])
		Else
			SetVar $menuentry ($boldred & "-=[" & $boldwhite & $optionkeys[$count] & $boldred & "]=-" & $boldcyan & $optiontitle[$count])
		End
	End
	If ($column2 = FALSE)
		Echo $menuentry
		SetVar $column2 TRUE
	Else
		SetVar $row (5 + ($count / 2))
		Echo "[" & $row & ";39H" & $menuentry
		Echo "*"
		SetVar $column2 FALSE
	End
	SetVar $count ($count + 1)
	SetVar $menuentry ""
End
Return
# LOADSCRIPTMENU 
:LOADSCRIPTMENU
FileExists $fileexists $menufile
If ($fileexists = TRUE)
	SetArray $menu 0
	SetArray $optiontype 0
	SetArray $optionkeys 0
	SetArray $optionfile 0
	SetArray $optiontitle 0
	ReadToArray $menufile $menu
	SetVar $menutitle $menu[1]
	SetVar $count 2
	While ($count <= $menu)
		SetVar $count2 ($count - 1)
		GetWord $menu[$count] $optiontype[$count2] 1
		UpperCase $optiontype[$count2]
		GetWord $menu[$count] $optionkeys[$count2] 2
		UpperCase $optionkeys[$count2]
		If ($optiontype[$count2] = "S") Or ($optiontype[$count2] = "M") Or ($optiontype[$count2] = "D")
			GetWord $menu[$count] $optionfile[$count2] 3
			GetWordPos $menu[$count] $temp1 $optionfile[$count2]
			GetLength $optionfile[$count2] $temp2
			SetVar $temp ($temp1 + $temp2)
			CutText $menu[$count] $optiontitle[$count2] $temp 999
		End
		SetVar $count ($count + 1)
	End
	SetVar $optionkeys ($menu - 1)
End
Return
# BOTONOFF 
:BOTONOFF
If ($bot = TRUE)
:BOTOFF
	SetVar $bot FALSE
	KillAllTriggers
	Gosub :Z_Lib~COMMSON
	SetTextOutTrigger t13 :BOTONOFF $z_botonoffkey
	SetTextLineTrigger boton :BOTON $z_botname & " bot on"
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	Echo "**" & $blinkon & $boldred & "<<<=-[BOT IS OFF]-=>>>**" & $blinkoff
	Pause
Else
:BOTON
	KillAllTriggers
	SetVar $bot TRUE
	SetVar $reset TRUE
	Echo "**" & $blinkon & $boldgreen & "<<<=-[BOT IS ON]-=>>>**" & $blinkoff
	SetVar $Z_Lib~message "Bot is ON!*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	SetVar $mode "GENERAL"
End
Goto :WAITFORCOMMAND
# TURNOFFKEYS 
:TURNOFFKEYS
KillAllTriggers
SetTextOutTrigger turnonkeys :TURNONKEYS #13
Pause
# TURNOFFKEYS2  
:TURNOFFKEYS2
KillAllTriggers
SetTextTrigger turnonkeys2 :TURNONKEYS2 "Corporate command [TL="
Pause
# TURNOFFKEYS3 
:TURNOFFKEYS3
KillAllTriggers
SetTextTrigger turnonkeys3 :TURNONKEYS2 "<Shipyards> Your option (?) ?"
SetTextTrigger turnonkeys3a :TURNONKEYS2 "You shut off the Vid Term."
Pause
# TURNONKEYS 
:TURNONKEYS
SetVar $reset TRUE
PROCESSOUT #13
Goto :WAITFORCOMMAND
# TURNONKEYS2 
:TURNONKEYS2
KillAllTriggers
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# TIMECHECK 
:TIMECHECK
If ($mode = "GENERAL") or ($mode = "SENTRY")
	GetTime $temp "HH:NN"
	SetVar $timecheckdd $boldcyan & "     TIME CHECK:" & $boldred & " <<<=[" & $boldwhite & $temp & $boldred & "]=>>>"
	Echo "**" & $timecheckdd & "*"
	If ($timecheckmins = "00")
		If ($z_usesound = TRUE)
			Sound cuckoclk
		End
	End
End
Return
# PULSE 
:PULSE
If (CONNECTED = FALSE)
	HALT
End
If ($pdropison = TRUE)
	Gosub :PLOCKTRIGGERKILLS
ElseIf ($citkillison = TRUE)
	Gosub :CITKILLTRIGGERKILLS
ElseIf ($evacison = TRUE)
	Gosub :EVACTRIGGERKILLS
ElseIf ($sentryison = TRUE)
	KillAllTriggers
End
Send #27
#Echo "**" & $boldwhite & $blinkon & "PULSE**" & $blinkoff
GetTime $autotemp "hh:nn am/pm"
GetTime $timecheckmins "nn"
GetTime $timecheckhour "hh"
If ($z_autoss = TRUE)
	Gosub :XAUTOSS
End
If ($watch = TRUE)
	Gosub :Z_Lib~CHECKIFBUSY
	If ($Z_Lib~busy = FALSE)
		Gosub :ONLINEWATCH
	End
End
If ($z_timecheck = FALSE)
	If ($lasttcheck <> $timecheckmins)
		If ($timecheckmins = "00") or ($timecheckmins = "30")
			SetVar $lasttcheck $timecheckmins
			Gosub :TIMECHECK
		End
	End
End
If (($timecheckmins = "04") or ($timecheckmins = "19") or ($timecheckmins = "34") or ($timecheckmins = "49")) and (($z_heraldturns = TRUE) and ($Z_Lib~isunlimited <> TRUE) and ($turnbase <> "Unlimited"))
	Gosub :Z_Lib~CHECKIFBUSY2
	If ($Z_Lib~busy = "FALSE")
		If ($lastgetstats <> $timecheckhour)
			
			Gosub :GETSTATS
		End
		If ($turns = ($turnbank * $turnbase))
			SetVar $messagemode "R"
			SetVar $Z_Lib~message $scripttitle & ": !!! MY TURNS ARE MAXED OUT !!!" & "*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			SetVar $Z_Logs~logentry $scripttitle & ": !!! MY TURNS ARE MAXED OUT !!!"
			Gosub :Z_Logs~ENTERLOG
		End
	End
End
If ($heraldturnsnow = TRUE)
	Gosub :HERALDTURNSNOW
End
If ($pulsecheck = TRUE)
	If ($timecheckmins = "08") or ($timecheckmins = "18") or ($timecheckmins = "28") or ($timecheckmins = "38") or ($timecheckmins = "48") or ($timecheckmins = "58")
		If ($checkfigmonitor <> $timecheckmins)
			Gosub :CHECKFIGMONITOR
			SetVar $checkfigmonitor $timecheckmins
			PROCESSIN 1 "[Z]PROJECTZRUNNING[Z]"
			Gosub :CHECKCOMMSGUARD
		End
	End
	If (($commsguardok = FALSE) and (($timecheckmins = "27") or ($timecheckmins = "57")))
		If ($checkcomms <> $timecheckmins)
			SetVar $checkcomms $timecheckmins
			Gosub :Z_Lib~COMMSON
		End
	End
End
Gosub :SETPULSETRIGGER
If ($citkillison = TRUE)
	Goto :CITKILLWAIT2
ElseIf ($pdropison = TRUE)
	Goto :PDROPWAIT2
ElseIf ($evacison = TRUE)
	Goto :EVACWAIT2
ElseIf ($sentryison = TRUE)
	Goto :SENTRYPULSE
Else
	If ($z_autostatus = TRUE) and (($z_autotype = 1) or ($z_autotype = 2) or ($z_autotype = 5) or ($z_autotype = 6))
		If ($z_autotype = 1)
			Getword $autotemp $temp2 1
			SetVar $autotemp $temp2
		End
		If ($z_autotype > 4)
			ReplaceText $autotemp ":" " "
			Getword $autotemp $temp2 2
			SetVar $autotemp $temp2
		End
		LowerCase $z_autotrigger
		If ($z_autotrigger = $autotemp)
			KillAllTriggers
			If ($z_autorename <> "") and ($z_autorename <> "0")
				GetWord $z_autorename $autosource 1
				GetWord $z_autorename $autodest 2
				If ($autosource <> "0") and ($autosource <> "") and ($autodest <> "0") and ($autodest <> "")
					FileExists $sourceok $autosource
					FileExists $destok $autodest
					If ($sourceok = TRUE)
						If ($destok = TRUE)
							Delete $autodest
						End
						Rename $autosource $autodest
					End
				End
			End
			If ($z_autoplanet <> "0")
				IsNumber $isnum $z_autoplanet
				If ($isnum = TRUE)
					Gosub :Z_Lib~CURRENTPLANET
					If (($z_Lib~planet = TRUE) or ($Z_Lib~citadel = TRUE)) and ($z_Lib~planetnum = $z_autoplanet)
						If ($Z_Lib~citadel <> TRUE)
							Send "c  *  "
						End
					Else
						Send "q q q q z 0* q z 0* q z 0* l j" & #8 & #8 & $z_autoplanet & "* * c x q * "
					End
				End
			End
			If ($z_autotype = 6)
				SetVar $go FALSE
				Echo $boldwhite " COUNTDOWN: [" & $boldred & #42 & #42 & $boldwhite & "] "
:TOPOFTHEHOUR
				KillAllTriggers
				If ($go <> TRUE)
					GetTime $temp "ss"
					If ($temp = $z_autotrigger)
						SetVar $go TRUE
					End
					SetDelayTrigger toth :TOPOFTHEHOUR 750
					Setvar $tothcd (60 - $temp)
					If ($tothcd < 10)
						SetVar $tothcd ("0" & $tothcd)
					End
					Echo $boldred & "[4D" & $tothcd & $boldwhite "] "
					Pause
				End
				Echo $boldgreen & $blinkon & "[4D" & "GO" & $blinkoff & $boldwhite "]**"
				KillAllTriggers
			End
			SetVar $commandline $z_autocommand
			Replacetext $commandline "[1]" $z_autovar1
			Replacetext $commandline "[2]" $z_autovar2
			SetVar $Z_Logs~logentry $scripttitle & ": AUTOMATE - TIME TRIGGER ACTIVATED!"
			Gosub :Z_Logs~ENTERLOG
			SetVar $Z_Logs~logentry $scripttitle & ": AUTOMATE - " & $commandline
			Gosub :Z_Logs~ENTERLOG
			KillAllTriggers
			Goto :AUTOBOT
			SetVar $reset TRUE
		End
	End
	Goto :WAITFORCOMMAND
End
Goto :WAITFORCOMMAND
# SETPULSETRIGGER 
:SETPULSETRIGGER
KillTrigger pulse
If ($watch = TRUE)
	If ($z_watchtime = "0") or ($z_watchtime = "")
		SetVar $z_watchtime 10
	End
	SetVar $pulsetime ($z_watchtime * 1000)
Else
	SetVar $pulsetime (59000)
End
SetDelayTrigger pulse :PULSE $pulsetime
Return
# ONLINEWATCH 
:ONLINEWATCH
If ($mode = "GENERAL") or ($mode = "SENTRY") or ($mode = "COMMAND")
	SetVar $ssmsg ""
	If ($z_clv = "TRUE")
		KillAllTriggers
		Send #145
		WaitOn #145 & #8
		CutText CURRENTLINE $wprompt 1 7
		If ($wprompt = "Command") or ($wprompt = "Citadel")
			SetArray $clv 0
			SetVar $clvptr 0
			SetTextLineTrigger clv :CLV "--- --------------------- -- ------------------------------ ------------------"
			Send "c l vq"
			Pause
:CLV
			KillTrigger clv
			SetTextLineTrigger clvscan :CLVSCAN
			Pause
:CLVSCAN
			KillTrigger clvscan
			SetVar $clvptr ($clvptr + 1)
			SetVar $clv[$clvptr] CURRENTLINE
			GetWord $clv[$clvptr] $word 1
			If ($word = "Computer")
				SetVar $clvptr ($clvptr - 1)
				Goto :CLVSCANDONE
			End
			Goto :CLV
:CLVSCANDONE
			KillTrigger clvscan
			SetVar $x 1
			While ($x <= $clvptr)
				GetWord $clv[$x] $word 1
				IsNumber $isnum $word
				If ($isnum = TRUE) and ($word <> "0")
					GetWord $clv[$x] $clvrank[$x] 2
					StripText $clvrank[$x] ","
					GetWord $clv[$x] $clvalgn[$x] 3
					StripText $clvalgn[$x] ","
					GetWord $clv[$x] $clvcorp[$x] 4
					CutText $clv[$x] $clvname[$x] 30 30
					SetVar $Z_Strings~trimstring $clvname[$x]
					Gosub :Z_Strings~RTRIM
					SetVar $clvname[$x] $Z_Strings~trimstring
					CutText $clv[$x] $clvship[$x] 61 999
					SetVar $Z_Strings~trimstring $clvship[$x]
					Gosub :Z_Strings~RTRIM
					SetVar $clvship[$x] $Z_Strings~trimstring
					SetVar $y 1
					SetVar $clvfound FALSE
					While ($y <= $clvlastptr)
						If ($clvname[$x] = $clvlastname[$y])
							SetVar $clvfound TRUE
							If ($clvalgn[$x] <> $clvlastalgn[$y])
								SetVar $change ($clvalgn[$x] - $clvlastalgn[$y])
								If ($change > 0)
									SetVar $change ("+" & $change)
								End
								SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $clvname[$x] & " ALIGNMENT changed " & $change & ".*")
								SetVar $clvlastalgn[$y] $clvalgn[$x]
							End
							If ($clvrank[$x] <> $clvlastrank[$y])
								SetVar $change ($clvrank[$x] - $clvlastrank[$y])
								If ($change > 0)
									SetVar $change ("+" & $change)
								End
								SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $clvname[$x] & " EXPERIENCE changed " & $change & ".*")
								SetVar $clvlastrank[$y] $clvrank[$x]
							End
							If ($clvcorp[$x] <> $clvlastcorp[$y])
								SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $clvname[$x] & " CHANGED CORP from " & $clvlastcorp[$y] & " to " & $clvcorp[$x] & ".*")
								SetVar $clvlastcorp[$y] $clvcorp[$x]
							End
							If ($clvship[$x] <> $clvlastship[$y])
								SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $clvname[$x] & " CHANGED SHIP to a " & $clvship[$x] & ".*")
								SetVar $clvlastship[$y] $clvship[$x]
							End
							SetVar $y $clvlastptr
						End
						SetVar $y ($y + 1)
					End
					If ($clvfound <> TRUE)
						SetVar $clvlastptr ($clvlastptr + 1)
						SetVar $clvlastname[$clvlastptr] $clvname[$x]
						SetVar $clvlastrank[$clvlastptr] $clvrank[$x]
						SetVar $clvlastalgn[$clvlastptr] $clvalgn[$x]
						SetVar $clvlastcorp[$clvlastptr] $clvcorp[$x]
						SetVar $clvlastship[$clvlastptr] $clvship[$x]
					End
				End
				SetVar $x ($x + 1)
			End
		End
		Send #145
		WaitOn #145 & #8
		Gosub :Z_Lib~CLEARSCREEN
		SetVar $reset TRUE
	End
	Gosub :Z_GetPlayers~GETPLAYERS
	If ($watch = TRUE)
		WaitFor "elp)"
		If ($z_clv = "TRUE")
			Echo ANSI_12 & " [" & ANSI_13 & "ONLINE WATCH " & ANSI_14 & "+CLV" & ANSI_12 & "] " & ANSI_5
		Else
			Echo ANSI_12 & " [" & ANSI_13 & "ONLINE WATCH" & ANSI_12 & "] " & ANSI_5
		End
	End
	If ($lastonlinecount <> "0")
		SetVar $x 1
		While ($x <= $lastonlinecount)
			SetVar $stillonline FALSE
			SetVar $y 1
			UpperCase $lastonline[$x]
			While ($y <= $Z_GetPlayers~menu_count)
				UpperCase $Z_GetPlayers~menu_name[$y]
				If ($Z_GetPlayers~menu_name[$y] = $lastonline[$x])
					SetVar $stillonline TRUE
					SetVar $y $Z_GetPlayers~menu_count
				End
				SetVar $y ($y + 1)
			End
			If ($stillonline = FALSE)
				SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $lastonline[$x] & " LEFT the game.*")
			End
			SetVar $x ($x + 1)
		End
		SetVar $x 1
		While ($x <= $Z_GetPlayers~menu_count)
			SetVar $wasonline FALSE
			SetVar $y 1
			UpperCase $Z_GetPlayers~menu_name[$x]
			While ($y <= $lastonlinecount)
				UpperCase $lastonline[$y]
				If ($Z_GetPlayers~menu_name[$x] = $lastonline[$y])
					SetVar $wasonline TRUE
					SetVar $y $lastonlinecount
				End
				SetVar $y ($y + 1)
			End
			If ($wasonline = FALSE)
				SetVar $ssmsg ($ssmsg & "ONLINEUPDATE: " & $Z_GetPlayers~menu_name[$x] & " ENTERED the game.*")
			End
			SetVar $x ($x + 1)
		End
	End
	If ($ssmsg <> "")
		SetVar $Z_Lib~message $ssmsg
		SetVar $Z_Lib~messageto $sender
		If ($messagemode = "E")
			SetVar $messagemode "S"
		End
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		SetVar $ssmsg ""
		SetVar $Z_Lib~message ""
	End
	SetVar $x 1
	SetArray $lastonline 0
	SetVar $lastonlinecount $Z_GetPlayers~menu_count
	While ($x <= $lastonlinecount)
		SetVar $lastonline[$x] $Z_GetPlayers~menu_name[$x]
		SetVar $x ($x + 1)
	End
	SetArray $clvname 0
	SetArray $clvrank 0
	SetArray $clvalgn 0
	SetArray $clvship 0
	SetArray $clv 0
End

Return
# CHECKBANNER 
:CHECKBANNER
FileExists $fileok $bannerfile[1]
If ($fileok <> TRUE)
	Write $bannerfile[1] $fileline
	Write $bannerfile[1] " "
	Write $bannerfile[1] "        Z-Bot by Archibald H. Vilanos III (aka Zed)"
	Write $bannerfile[1] " "
	Write $bannerfile[1] "         A Tradewars interface with remote control"
	Write $bannerfile[1] " "
	Write $bannerfile[1] "                Over 170 built-in commands"
	Write $bannerfile[1] "         Extensive help system covers all commands"
	Write $bannerfile[1] "  Built in sort/search facility for finding commands fast"
	Write $bannerfile[1] "     Extensible modular design - add your own commands"
	Write $bannerfile[1] "   Fully integrated, and fully featured, movement system"
	Write $bannerfile[1] "          User configurable script menu system"
	Write $bannerfile[1] "     Time and trigger-based command automation system"
	Write $bannerfile[1] "              Integrated combat capabilities"
	Write $bannerfile[1] "        Complete player/alien ship capping system"
	Write $bannerfile[1] "             Integrated Smart Passive Gridder"
	Write $bannerfile[1] "                   Macro Command Looper"
	Write $bannerfile[1] " "
	Write $bannerfile[1] "         Created using TWX 2.06 (Required)"
	Write $bannerfile[1] " "
	Write $bannerfile[1] "                          Z-Bot"
	Write $bannerfile[1] "                  Now you're in control !"
	Write $bannerfile[1] " "
	Write $bannerfile[1] $fileline
	Write $bannerfile[1] "Edit the   BANNER: z-banner.txt   entry in the Z-Options.cfg"
	Write $bannerfile[1] "file to display your own banner file. (or add more!)"
End
Return
# CHECKFCR 
:CHECKFCR
FileExists $fileok "z-fcr.cfg"
If ($fileok <> TRUE)
	Write "z-fcr.cfg" "# FEDCOM RESPONDER CONFIGURATION"
	Write "z-fcr.cfg" "# Lines starting with # are ignored."
	Write "z-fcr.cfg" "# Place the trigger between square brackets [trigger]"
	Write "z-fcr.cfg" "# Place a response on the same line between curly"
	Write "z-fcr.cfg" "# braces {response}"
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# The same response will NOT be used twice in a row."
	Write "z-fcr.cfg" "# Set multiple responses for each trigger as separate entries."
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# The trigger may contain AND logic by using a + to separate"
	Write "z-fcr.cfg" "# the triggers."
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# The following autofilled variables are available:"
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# In the trigger:"
	Write "z-fcr.cfg" "# <ME> - Returns your player name as set in the Bot options."
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# In the response:"
	Write "z-fcr.cfg" "# <SENDER> - Returns the player who sent the fedcom message."
	Write "z-fcr.cfg" "# "
	Write "z-fcr.cfg" "# See the examples below.."
	Write "z-fcr.cfg" "#" & $fileline
	Write "z-fcr.cfg" "[hello+<ME>]{hello <SENDER>}"
	Write "z-fcr.cfg" "[hello]{hello :)}"
	Write "z-fcr.cfg" "[hello]{how ya doin..}"
	Write "z-fcr.cfg" "[how ya doin]{not bad thanks, how are you?}"
	Write "z-fcr.cfg" "[how are you]{no complaints... what's new?}"
	Write "z-fcr.cfg" "[what's new]{the price of eggs have gone up.. :(}"
	Write "z-fcr.cfg" "[the price of eggs]{really?}"
	Write "z-fcr.cfg" "[really?]{what do you think?}"
	Write "z-fcr.cfg" "[what do you think]{who says i think?}"
	Write "z-fcr.cfg" "[who says i think]{haha not me ! ;)}"
	Write "z-fcr.cfg" "[what do you think]{are you accusing me of having a thought?}"
	Write "z-fcr.cfg" "[are you accusing me of having a thought]{haha! not likely !!}"
	Write "z-fcr.cfg" "[goodbye]{cya lata}"
	Write "z-fcr.cfg" "[goodbye]{hoorooh !}"
	Write "z-fcr.cfg" "[cya]{ciao}"
	Write "z-fcr.cfg" "[anyone awake]{nope o.O}"
	Write "z-fcr.cfg" "[anybody awake]{absolutely NOT!}"
	Write "z-fcr.cfg" "[anyone at keys]{nope o.O}"
	Write "z-fcr.cfg" "[anybody at keys]{absolutely NOT!}"
	Write "z-fcr.cfg" "[u at keys]{sort of... <.<}"
	Write "z-fcr.cfg" "[u at keys]{maybe... maybe not >.>}"
	Write "z-fcr.cfg" "[which bot do you]{zbot}"
	Write "z-fcr.cfg" "[u have mombot]{no, zbot}"
	Write "z-fcr.cfg" "[u have kbot]{no, zbot}"
	Write "z-fcr.cfg" "[u have zbot]{yea, Z-Bot does my DIRTY work ;)}"
	Write "z-fcr.cfg" "[i'm afk]{yea... and pigs might fly... hahaha!}"
	Write "z-fcr.cfg" "[what are you doing]{minding my business...}"
	Write "z-fcr.cfg" "[what are you doing]{I could tell you, but then i'd have to POD you.}"
	Write "z-fcr.cfg" "[are you using fcr]{never heard of it....}"
	Write "z-fcr.cfg" "[knock knock]{who's there?}"
	Write "z-fcr.cfg" "[knock knock]{who's there!}"
	Write "z-fcr.cfg" "[knock knock]{get lost! We've moved out!! and i'm changin my name!}"
	Write "z-fcr.cfg" "[who's there]{knock knock}"
	
	Write "z-fcr.cfg" "[baseball]{How do you like my ball club, <SENDER>}"
	Write "z-fcr.cfg" "[How do you like my ball club]{Hey, all those people gonna be at the game today?}"
	Write "z-fcr.cfg" "[people gonna be at the game today?]{certainly...}"
	Write "z-fcr.cfg" "[certainly...]{Ah, this is gonna be a whopper of a game!}"
	Write "z-fcr.cfg" "[gonna be a whopper of a game!]{Well it should be...}"
	Write "z-fcr.cfg" "[Well it should be...]{Hey, <SENDER>...}"
	Write "z-fcr.cfg" "[Hey, <ME>...]{what ..??..}"
	Write "z-fcr.cfg" "[what ..??..]{I understand they made you the manager of this here whole great team.}"
	Write "z-fcr.cfg" "[manager of this here whole great team.]{sure.. why not??}"
	Write "z-fcr.cfg" "[sure.. why not??]{So you're the manager?}"
	Write "z-fcr.cfg" "[So you're the manager?]{I'm the manager!}"
	Write "z-fcr.cfg" "[I'm the manager!]{Well, you know, Id like to know some of the guys names on the team so when I meet em on the street or in the ballpark Ill be able to say, Hello, to those people.}"
	Write "z-fcr.cfg" "[Well, you know, Id like to know some of the guys names]{Why sure I'll introduce you to the boys. They give em funny names though, <SENDER>}"
	Write "z-fcr.cfg" "[Why sure I'll introduce you to the boys.]{Oh I know they give those ball players awful funny names.}"
	Write "z-fcr.cfg" "[ball players awful funny names.]{Well, lets see, on the team we have uh Whos on first, Whats on second, I Dont Know is on third}"
	Write "z-fcr.cfg" "[Well, lets see, on the team we ]{Are you the manager?}"
	Write "z-fcr.cfg" "[Are you the manager?]{yes, i'm the manager..}"
	Write "z-fcr.cfg" "[yes, i'm the manager..]{You know the guys names?}"
	Write "z-fcr.cfg" "[You know the guys names?]{..I sure do..}"
	Write "z-fcr.cfg" "[..I sure do..]{Then tell me the guys names.}"
	Write "z-fcr.cfg" "[Then tell me the guys names.]{I say, Whos on first, Whats on second, I Dont Knows on third...}"
	Write "z-fcr.cfg" "[I say, Whos on first, Whats on]{You are the manager?}"
	Write "z-fcr.cfg" "[You are the manager?]{yes sir.. i'm the manager..}"
	Write "z-fcr.cfg" "[yes sir.. i'm the manager..]{You know the guys names ?}"
	Write "z-fcr.cfg" "[You know the guys names ?]{Im telling you their names!}"
	Write "z-fcr.cfg" "[Im telling you their names!]{Well whos on first?}"
	Write "z-fcr.cfg" "[Well whos on first?]{Yeah. ..}"
	Write "z-fcr.cfg" "[Yeah. ..]{Go ahead and tell me...}"
	Write "z-fcr.cfg" "[Go ahead and tell me...]{..Who ??}"
	Write "z-fcr.cfg" "[..Who ??]{The guy on first..}"
	Write "z-fcr.cfg" "[The guy on first..]{.. who ??}"
	Write "z-fcr.cfg" "[.. who ??]{The guy playin first base.}"
	Write "z-fcr.cfg" "[The guy playin first base.]{.,who ???}"
	Write "z-fcr.cfg" "[.,who ???]{The guy on first,.}"
	Write "z-fcr.cfg" "[The guy on first,.]{Who is  on first!}"
	Write "z-fcr.cfg" "[Who is  on first!]{What are you askin me for? Im askin you!}"
	Write "z-fcr.cfg" "[What are you askin me for? Im askin you!]{Im not asking you, Im telling you.}"
	Write "z-fcr.cfg" "[Im not asking you, Im telling you.]{You aint tellin me nothin. Im askin you, whos on first?}"
	Write "z-fcr.cfg" "[You aint tellin me nothin. Im]{That's it!!}"
	Write "z-fcr.cfg" "[That's it!!]{Well, go ahead and tell me.}"
	Write "z-fcr.cfg" "[Well, go ahead and tell me.]{,Who..!}"
	Write "z-fcr.cfg" "[,Who..!]{The guy on first base.}"
	Write "z-fcr.cfg" "[The guy on first base.]{Thats his name.}"
	Write "z-fcr.cfg" "[Thats his name.]{Thats whose name?}"
	Write "z-fcr.cfg" "[Thats whose name?]{., yes !}"
	Write "z-fcr.cfg" "[., yes !]{Well  go ahead and tell me.}"
	Write "z-fcr.cfg" "[Well  go ahead and tell me.]{Thats the mans name!}"
	Write "z-fcr.cfg" "[Thats the mans name!]{Thats whose name.?.}"
	Write "z-fcr.cfg" "[Thats whose name.?.]{yeah !!!.}"
	Write "z-fcr.cfg" "[yeah !!!.]{Well go ahead and tell me!}"
	Write "z-fcr.cfg" "[Well go ahead and tell me!]{Who is on first...}"
	Write "z-fcr.cfg" "[Who is on first...]{What are you askin me for? Im askin you, whos on first?}"
	Write "z-fcr.cfg" "[What are you askin me for? Im askin you,]{That's it.}"
	Write "z-fcr.cfg" "[That's it.]{Well go  ahead and tell me.}"
	Write "z-fcr.cfg" "[Well go  ahead and tell me.]{wwho..}"
	Write "z-fcr.cfg" "[wwho..]{The guy  on first.}"
	Write "z-fcr.cfg" "[The guy  on first.]{that's  it..}"
	Write "z-fcr.cfg" "[that's  it..]{Whats the guys name on first?}"
	Write "z-fcr.cfg" "[Whats the guys name on first?]{No, Whats on second.}"
	Write "z-fcr.cfg" "[No, Whats on second.]{Im not askin you  whos on second!}"
	Write "z-fcr.cfg" "[Im not askin you  whos on second!]{Whos on first.!}"
	Write "z-fcr.cfg" "[Whos on first.!]{Thats what Im askin you! Whos on first?}"
	Write "z-fcr.cfg" "[Thats what Im askin you! Whos on first?]{Now wait a minute. Dont change the players.}"
	Write "z-fcr.cfg" "[Now wait a minute. Dont change the players.]{Im not changin nobody! I asked you a simple question. Whats the guys name on first base?}"
	Write "z-fcr.cfg" "[Im not changin nobody! I asked]{Whats the guys name on second base.}"
	Write "z-fcr.cfg" "[Whats the guys name on second base.]{I'm not askin you whos on second!}"
	Write "z-fcr.cfg" "[I'm not askin you whos on second!]{Whos on  first.}"
	Write "z-fcr.cfg" "[Whos on  first.]{I don't know...}"
	Write "z-fcr.cfg" "[I don't know...]{Hes on third. Now were not talking about him.}"
	Write "z-fcr.cfg" "[Hes on third. Now were not talking about him.]{Look, you got a first baseman?}"
	Write "z-fcr.cfg" "[Look, you got a first baseman?]{..yes..yes..}"
	Write "z-fcr.cfg" "[..yes..yes..]{Then tell me the fellas name playin first.}"
	Write "z-fcr.cfg" "[Then tell me the fellas name playin first.]{-who .}"
	Write "z-fcr.cfg" "[-who .]{The guy playin first.}"
	Write "z-fcr.cfg" "[The guy playin first.]{That's his name.}"
	Write "z-fcr.cfg" "[That's his name.]{Wait..Whats the guys name on first base?}"
	Write "z-fcr.cfg" "[Wait..Whats the guys name]{What is the guys name on second base!}"
	Write "z-fcr.cfg" "[What is the guys name on second base!]{Whos playin second?}"
	Write "z-fcr.cfg" "[Whos playin second?]{Whos playin first.}"
	Write "z-fcr.cfg" "[Whos playin first.]{I dont know.,.}"
	Write "z-fcr.cfg" "[I dont know.,.]{Hes on third base.}"
	Write "z-fcr.cfg" "[Hes on third base.]{Look, when you pay off the first baseman every month, who do you pay the money to?}"
	Write "z-fcr.cfg" "[Look, when you pay off the first baseman]{Every dollar of it.}"
	Write "z-fcr.cfg" "[Every dollar of it.]{Yeah. Look, you gotta pay the money to somebody on first base, dont you?}"
	Write "z-fcr.cfg" "[Yeah. Look, you gotta pay ]{yeah .,}"
	Write "z-fcr.cfg" "[yeah .,]{Does he give you a receipt?}"
	Write "z-fcr.cfg" "[Does he give you a receipt?]{sure....}"
	Write "z-fcr.cfg" "[sure....]{How does he sign the receipt?}"
	Write "z-fcr.cfg" "[How does he sign the receipt?]{.who.}"	
	Write "z-fcr.cfg" "[.who.]{The guy that you give the money to.}"
	Write "z-fcr.cfg" "[The guy that you give the money to.]{w h o}"
	Write "z-fcr.cfg" "[w h o]{The guy you give the money to,.}"
	Write "z-fcr.cfg" "[The guy you give the money to,.]{Thats how he signs it.}"
	Write "z-fcr.cfg" "[Thats how he signs it.]{Thats how who signs it?}"
	Write "z-fcr.cfg" "[Thats how who signs it?]{;yes'}"
	Write "z-fcr.cfg" "[;yes']{Well go ahead and  tell me!}"
	Write "z-fcr.cfg" "[Well go ahead and  tell me!]{that's  it!!}"
	Write "z-fcr.cfg" "[that's  it!!]{thats who?}"
	Write "z-fcr.cfg" "[thats who?]{yesss..}"
	Write "z-fcr.cfg" "[yesss..]{When you give the guy the money, doesnt he have to sign the receipt?}"
	Write "z-fcr.cfg" "[When you give the guy the money, doesnt]{He does!}"
	Write "z-fcr.cfg" "[He does!]{Well how does he sign his name?}"
	Write "z-fcr.cfg" "[Well how does he sign his name?]{w.h.o}"
	Write "z-fcr.cfg" "[w.h.o]{The guy you give the  money to.}"
	Write "z-fcr.cfg" "[The guy you give the  money to.]{Thats how he signs it!}"
	Write "z-fcr.cfg" "[Thats how he signs it!]{You! You You just dont give money to someone without having em sign the receipt!}"
	Write "z-fcr.cfg" "[You! You You just dont give money]{No! Who signs it.}"
	Write "z-fcr.cfg" "[No! Who signs it.]{What are you askin me for???}"
	Write "z-fcr.cfg" "[What are you askin me for???]{Now calm down. Im not asking you, I am telling you.}"
	Write "z-fcr.cfg" "[Now calm down. Im not asking you,]{Well go ahead and tell me. Whats the guys name that signs the receipt on first base?}"
	Write "z-fcr.cfg" "[Well go ahead and tell me. Whats the]{Well now wait a minute. What signs his own receipt.}"
	Write "z-fcr.cfg" "[Well now wait a minute. What]{Who signs his own receipt?}"
	Write "z-fcr.cfg" "[Who signs his own receipt?]{No, Who signs his.}"
	Write "z-fcr.cfg" "[No, Who signs his.]{Im askin you, when the guy on first base gives you a piece of paper}"
	Write "z-fcr.cfg" "[Im askin you, when the guy on first]{Yes , now wait}"
	Write "z-fcr.cfg" "[Yes , now wait]{he puts his name on it.}"
	Write "z-fcr.cfg" "[he puts his name on it.]{No, Who puts his name on it..}"
	Write "z-fcr.cfg" "[No, Who puts his name on it..]{How??}"
	Write "z-fcr.cfg" "[How??]{and what puts his name on it}"
	Write "z-fcr.cfg" "[and what puts his name on it]{How does the fellas name on first base look to you when he signs his name?}"
	Write "z-fcr.cfg" "[How does the fellas name on first]{wwhhoo}"
	Write "z-fcr.cfg" "[wwhhoo]{to  you..}"
	Write "z-fcr.cfg" "[to  you..]{Thats how it does.}"
	Write "z-fcr.cfg" "[Thats how it does.]{How does it look to you.?}"
	Write "z-fcr.cfg" "[How does it look to you.?]{!!! who !!!}"
	Write "z-fcr.cfg" "[!!! who !!!]{..to you..}"
	Write "z-fcr.cfg" "[..to you..]{,,, who ,,,}"
	Write "z-fcr.cfg" "[,,, who ,,,]{,, to you ..}"
	Write "z-fcr.cfg" "[,, to you ..]{who ! look...}"
	Write "z-fcr.cfg" "[who ! look...]{When the guy signs his name, how does it look to you?}"
	Write "z-fcr.cfg" "[When the guy signs his name,]{Now thats how it looks. Who.}"
	Write "z-fcr.cfg" "[Now thats how it looks. Who.]{HHowWho?}"
	Write "z-fcr.cfg" "[HHowWho?]{w  h  o}"
	Write "z-fcr.cfg" "[w  h  o]{Im askin you. Whats the guys name on first base you give the money to?}"
	Write "z-fcr.cfg" "[Im askin you. Whats the guys]{Who! After all, the mans entitled to it}"
	Write "z-fcr.cfg" "[Who! After all, the]{Who is?}"
	Write "z-fcr.cfg" "[Who is?]{Yes. Sometimes his wife comes down and collects it.}"
	Write "z-fcr.cfg" "[Yes. Sometimes his wife]{Whose wife?}"
	Write "z-fcr.cfg" "[Whose wife?]{yeahh.. sure..}"
	Write "z-fcr.cfg" "[yeahh.. sure..]{All Im tryin to find out is whats the guys name on first base}"
	Write "z-fcr.cfg" "[All Im tryin to find out is]{What is on second base.}"
	Write "z-fcr.cfg" "[What is on second base.]{Im not askin you whos on second.}"
	Write "z-fcr.cfg" "[Im not askin you whos on second.]{Wwhos on first.}"
	Write "z-fcr.cfg" "[Wwhos on first.]{I dont know ...}"
	Write "z-fcr.cfg" "[I dont know ...]{he's.....}"
	Write "z-fcr.cfg" "[he's.....]{Third base, I know.}"
	Write "z-fcr.cfg" "[Third base, I know.]{yyyeeaahh!}"
	Write "z-fcr.cfg" "[yyyeeaahh!]{You got a outfield?}"
	Write "z-fcr.cfg" "[You got a outfield?]{sure,...}"
	Write "z-fcr.cfg" "[sure,...]{The left fielders name?}"
	Write "z-fcr.cfg" "[The left fielders name?]{why,..}"
	Write "z-fcr.cfg" "[why,..]{I just thought Id ask you.}"
	Write "z-fcr.cfg" "[I just thought Id ask you.]{The left fielders name..??}"
	Write "z-fcr.cfg" "[The left fielders name..??]{why!!..}"
	Write "z-fcr.cfg" "[why!!..]{Hmm.. because...}"
	Write "z-fcr.cfg" "[Hmm.. because...]{Oh, hes centerfield.}"
	Write "z-fcr.cfg" "[Oh, hes centerfield.]{Oh..??}"
	Write "z-fcr.cfg" "[Oh..??]{Told you all these players got...}"
	Write "z-fcr.cfg" "[Told you all these players got...]{All Im tryin to figure out is whats the guys name in leftfield.}"
	Write "z-fcr.cfg" "[All Im tryin to figure out is]{Now, Whats on second.}"
	Write "z-fcr.cfg" "[Now, Whats on second.]{Im not askin you whos on second!}"
	Write "z-fcr.cfg" "[Im not askin you whos on second!]{Who's on first.}"
	Write "z-fcr.cfg" "[Who's on first.]{I  dont know...}"
	Write "z-fcr.cfg" "[I  dont know...]{Third base!}"
	Write "z-fcr.cfg" "[Third base!]{You got a pitcher on this team?}"
	Write "z-fcr.cfg" "[You got a pitcher on this team?]{Wouldnt be a fine team without a pitcher.}"
	Write "z-fcr.cfg" "[Wouldnt be a fine team without]{Whats his name?}"
	Write "z-fcr.cfg" "[Whats his name?]{Tomorrow,...}"
	Write "z-fcr.cfg" "[Tomorrow,...]{You dont want to tell me today?}"
	Write "z-fcr.cfg" "[You dont want to tell me today?]{I'm telling you..}"
	Write "z-fcr.cfg" "[I'm telling you..]{Then go ahead.}"
	Write "z-fcr.cfg" "[Then go ahead.]{Tomorrow!!}"
	Write "z-fcr.cfg" "[Tomorrow!!]{What time?}"
	Write "z-fcr.cfg" "[What time?]{What time what?}"
	Write "z-fcr.cfg" "[What time what?]{What time tomorrow are you gonna tell me whos pitching?}"
	Write "z-fcr.cfg" "[What time tomorrow are you gonna]{Now listen. Who is not..}"
	Write "z-fcr.cfg" "[Now listen. Who is not..]{Ill break your arm, you say whos on first! I want to know whats the pitchers name?}"
	Write "z-fcr.cfg" "[Ill break your arm,]{Whats on second,.}"
	Write "z-fcr.cfg" "[Whats on second,.]{I dont know!}"
	Write "z-fcr.cfg" "[I dont know!]{third  base!!}"
	Write "z-fcr.cfg" "[third  base!!]{You got a catcher?}"
	Write "z-fcr.cfg" "[You got a catcher?]{a catcher.. sure}"
	Write "z-fcr.cfg" "[a catcher.. sure]{The catchers name?}"
	Write "z-fcr.cfg" "[The catchers name?]{Today..}"
	Write "z-fcr.cfg" "[Today..]{Today. You dont wanna tell me, today, tomorrow, do you?}"
	Write "z-fcr.cfg" "[Today. You dont wanna tell]{I'm telling you!}"
	Write "z-fcr.cfg" "[I'm telling you!]{So the catchers name ?}"
	Write "z-fcr.cfg" "[So the catchers name ?]{Today ..}"
	Write "z-fcr.cfg" "[Today ..]{Today. And Tomorrows pitching.}"
	Write "z-fcr.cfg" "[Today. And Tomorrows pitching.]{Now youve got it!}"
	Write "z-fcr.cfg" "[Now youve got it!]{Now ive got it..}"
	Write "z-fcr.cfg" "[Now ive got it..]{hey !..}"
	Write "z-fcr.cfg" "[hey !..]{All we got is a couple of days on the team!}"
	Write "z-fcr.cfg" "[All we got is a couple of days]{Well I cant help that.}"
	Write "z-fcr.cfg" "[Well I cant help that.]{All right. You know now, Im a good catcher. Now, I get behind the plate and Tomorrows pitching on my team and a heavy hitter gets up.}"
	Write "z-fcr.cfg" "[All right. You know now,]{yeaa..}"
	Write "z-fcr.cfg" "[yeaa..]{Now when he gets up, me being a good catcher, Im gonna throw the guy out at first base. So the guy bunts the ball. I pick up the ball; Im gonna throw the guy out at first base. So I pick up the ball and throw it to who?}"
	Write "z-fcr.cfg" "[Now when he gets up, ]{Now thats the first thing youve said right.}"
	Write "z-fcr.cfg" "[Now thats the first thing youve]{I dont even know what Im talkin about!}"
	Write "z-fcr.cfg" "[I dont even know what Im talkin]{Well thats Thats all you have to..}"
	Write "z-fcr.cfg" "[Well thats Thats all you have to..]{Thats all I have to do is to throw the ball to first base. Now whos got it?}"
	Write "z-fcr.cfg" "[Thats all I have to do is to throw]{Naturally. Now youve got it.}"
	Write "z-fcr.cfg" "[Naturally. Now youve got it.]{I throw the ball to first base,  somebodys gotta get the ball! Now whos got it?}"
	Write "z-fcr.cfg" "[I throw the ball to first base,  somebodys]{Naturally,..}"
	Write "z-fcr.cfg" "[Naturally,..]{Who.?.?}"
	Write "z-fcr.cfg" "[Who.?.?]{Naturally,,.}"
	Write "z-fcr.cfg" "[Naturally,,.]{Naturally?}"
	Write "z-fcr.cfg" "[Naturally?]{So I pick up the ball and I throw it to Naturally.}"
	Write "z-fcr.cfg" "[So I pick up the ball and I throw it to Naturally.]{No, no, no, no}"
	Write "z-fcr.cfg" "[No, no, no, no]{He gets the ball. Naturally gets the ball and Nat...}"
	Write "z-fcr.cfg" "[He gets the ball. Naturally gets the ball and Nat...]{You throw the ball to first base.}"
	Write "z-fcr.cfg" "[You throw the ball to first base.]{Then who gets it?}"
	Write "z-fcr.cfg" "[Then who gets it?]{..naturally..}"
	Write "z-fcr.cfg" "[..naturally..]{So I pick up the ball and I throw it to  Naturally.}"
	Write "z-fcr.cfg" "[So I pick up the ball and I throw it to  Naturally.]{No!!}"
	Write "z-fcr.cfg" "[No!!]{Naturally gets the ball and and...}"
	Write "z-fcr.cfg" "[Naturally gets the ball and and...]{You throw the ball to Who.}"
	Write "z-fcr.cfg" "[You throw the ball to Who.]{.,naturally ,}"
	Write "z-fcr.cfg" "[.,naturally ,]{-naturally-}"
	Write "z-fcr.cfg" "[-naturally-]{Thats what Im saying!}"
	Write "z-fcr.cfg" "[Thats what Im saying!]{You're not saying it}"
	Write "z-fcr.cfg" "[You're not saying it]{I said, I throw the ball to Naturally.}"
	Write "z-fcr.cfg" "[I said, I throw the ball to Naturally.]{No you dont!}"
	Write "z-fcr.cfg" "[No you dont!]{I throw it to who?}"
	Write "z-fcr.cfg" "[I throw it to who?]{- Naturally -.}"
	Write "z-fcr.cfg" "[- Naturally -.]{Thats what Im saying !}"
	Write "z-fcr.cfg" "[Thats what Im saying !]{No it isnt.}"
	Write "z-fcr.cfg" "[No it isnt.]{I throw the ball to first base, somebodys gotta get it.}"
	Write "z-fcr.cfg" "[I throw the ball to first base, somebodys]{So Who gets it.}"
	Write "z-fcr.cfg" "[So Who gets it.]{.. naturally-}"
	Write "z-fcr.cfg" "[.. naturally-]{Thats it!}"
	Write "z-fcr.cfg" "[Thats it!]{Okay. Now I ask you, who gets it?}"
	Write "z-fcr.cfg" "[Okay. Now I ask you,]{Natura11y}"
	Write "z-fcr.cfg" "[Natura11y]{Same as you!}"
	Write "z-fcr.cfg" "[Same as you!]{Now listen..}"
	Write "z-fcr.cfg" "[Now listen..]{I throw the ball to Naturally ..}"
	Write "z-fcr.cfg" "[I throw the ball to Naturally ..]{You throw the ball to Who!?}"
	Write "z-fcr.cfg" "[You throw the ball to Who!?]{Then who gets it ?}"
	Write "z-fcr.cfg" "[Then who gets it ?]{Natural1y.}"
	Write "z-fcr.cfg" "[Natural1y.]{He better get it! So I throw the ball to first base.}"
	Write "z-fcr.cfg" "[He better get it! So]{All right ..}"
	Write "z-fcr.cfg" "[All right ..]{Whoever gets it drops the ball and the guy runs to second. Now, Who picks up the ball and throws it to What. What throws it to I Dont Know. I Dont Know throws it back to Tomorrow, triple play!}"
	Write "z-fcr.cfg" "[Whoever gets it drops the ball]{Could be.}"
	Write "z-fcr.cfg" "[Could be.]{Another guy gets up and hits a long fly ball to Because.}"
	Write "z-fcr.cfg" "[Another guy gets up]{yeth!}"
	Write "z-fcr.cfg" "[yeth!]{Why? I dont know ! Hes on third and I dont give a darn!}"
	Write "z-fcr.cfg" "[Why? I dont know ! Hes]{Whatd you say?}"
	Write "z-fcr.cfg" "[Whatd you say?]{I said, I dont give a darn!}"
	Write "z-fcr.cfg" "[I said, I dont give a darn!]{Oh, thats our shortstop!}"
	Write "z-fcr.cfg" "[Oh, thats our shortstop!]{haha}"
	Write "z-fcr.cfg" "[<.<]{ >.>}"
	Write "z-fcr.cfg" "[<.<]{ <.<}"
	Write "z-fcr.cfg" "[>.>]{ <.<}"
	Write "z-fcr.cfg" "[>.>]{ >.>}"
	Write "z-fcr.cfg" "[rofl]{lol}"
	Write "z-fcr.cfg" "[lol]{hey <SENDER>, what r u laughin at?}"
	Write "z-fcr.cfg" "[lol]{lol}"
	Write "z-fcr.cfg" "[haha]{lol}"
	Write "z-fcr.cfg" "[haha]{haha}"
	Write "z-fcr.cfg" "[hehe]{hehe}"
End
Return

# INITIALISE 
:INITIALISE
KillAllTriggers
SetVar $Z_Lib~message $scripttitle & " systems initialising...*"
SetVar $Z_Lib~messageto ""
SetVar $Z_Lib~messagemode "R"
Gosub :MSGBRIDGE
SetVar $Z_Logs~logentry $scripttitle & ": Systems initialising"
Gosub :Z_Logs~ENTERLOG
Gosub :PROCESSOPTIONSFILE
SetVar $z_bothotkey $z_hotmenukeyd
SaveVar $z_bothotkey
Gosub :CHECKBANNER
Gosub :CHECKFCR
Gosub :Z_Lib~ISITUNLIMITED
SetArray $avoidarray 0
SetArray $avoidarray SECTORS
Gosub :GETAVOIDS
LoadVar $z_botname
LowerCase $z_botname
If ($z_botname = "") or ($z_botname = "0") or ($z_botname = "your_bot_name_here")
	Echo "***" & $boldred & $blinkon & "Please enter your BOT NAME in the Z-Options.cfg file in the TWX Root!!**" & $blinkoff
	SetVar $Z_Lib~message "Bot name NOT SET! Exiting...*"
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	Goto :FINISH
End
LoadVar $bot_name
If ($bot_name = "0") or ($bot_name = "")
	SetVar $bot_name $z_botname
	SaveVar $bot_name
End
FileExists $fileexist GAMENAME & ".stbot"
If ($fileexist <> TRUE)
	Write GAMENAME & ".stbot" $z_botname
End
Gosub :Z_Lib~SYNC
LoadVar $stardock
SetVar $rylos RYLOS
SetVar $alpha_centauri ALPHACENTAURI
SaveVar $rylos
SaveVar $alpha_centauri
If ($stardock = "0") or ($stardock = "")
	SetTextTrigger getstardock :GETSTARDOCK "The StarDock is located in sector"
	SetTextTrigger nostardock :NOSTARDOCK "-=-=-=-  Current Stats for"
	Send "v"
	Pause
:GETSTARDOCK
	KillTrigger nostardock
	KillTrigger getstardock
	GetText CURRENTLINE $stardock "sector " "."
	SaveVar $stardock
	Echo "**" & $boldwhite & "Stardock located at " & $stardock & "**"
	Goto :STARDOCKDONE
:NOSTARDOCK
	KillTrigger nostardock
	KillTrigger getstardock
	SetVar $stardock STARDOCK
	SaveVar $stardock
:STARDOCKDONE
End
Gosub :INTCOM_CORPY
#Gosub :SPLASH
Gosub :INTERNALCOMMANDLIST
Gosub :CHECKFIGMONITOR
#Gosub :CHECKCOMMSGUARD
Gosub :GETBACKDOORS
LoadVar $z_botpw
LoadVar $z_furbshipletter
LoadVar $z_furbholds
LoadVar $z_limpalarm
LoadVar $z_team
LoadVar $z_mowfigs
LoadVar $z_mowmines
LoadVar $z_mowlimps
LoadVar $z_base
LoadVar $z_safesector
LoadVar $z_safeship
LoadVar $z_planet
LoadVar $z_updateship
If ($z_updateship <> "FALSE")
	SetVar $z_updateship "TRUE"
	SaveVar $z_updateship
End
LoadVar $z_mslflag
LoadVar $z_mslsok
LoadVar $z_msllist
Loadvar $z_bustflag
LoadVar $z_lrsflag
LoadVar $z_specflag
LoadVar $z_turnsflag
LoadVar $z_usesound
LoadVar $z_timecheck
LoadVar $pulsecheck
LoadVar $z_doublecheckdock
If ($z_doublecheckdock <> "FALSE")
	SetVar $z_doublecheckdock "TRUE"
	SaveVar $z_doublecheckdock
End
LoadVar $z_seed
LoadVar $z_autoigon
LoadVar $z_bankbal
LoadVar $z_maxcorp
If ($p = TRUE)
	LoadVar $z_dockfast
	If ($z_dockfast <> "TRUE")
		SetVar $z_dockfast "FALSE"
		SaveVar $z_dockfast
	End
	LoadVar $z_callfast
	If ($z_callfast <> "FALSE")
		SetVar $z_callfast "TRUE"
		SaveVar $z_callfast
	End
Else
	SetVar $z_callfast "FALSE"
	SetVar $z_dockfast "FALSE"
End
LoadVar $z_twarpadj
If ($z_twarpadj <> "FALSE")
	SetVar $z_twarpadj "TRUE"
	SaveVar $z_twarpadj
End
LoadVar $z_minturns
LoadVar $z_minfigs
If ($z_minturns = "0")
	SetVar $z_minturns 100
	SaveVar $z_minturns
End
If ($z_minfigs = "0")
	SetVar $z_minfigs 100
	SaveVar $z_minfigs
End
If ($z_autoigon = "0")
	SetVar $z_autoigon "TRUE"
	SaveVar $z_autoigon
End
SetVar $helpsorted FALSE
If ($sortatstart = TRUE)
	Gosub :SORTHELPLIST
	Gosub :SORTXTRALIST
	SetVar $helpsorted TRUE
End
#----------
FileExists $fileexist1 GAMENAME & "_Z-SHIPSTATS.cfg"
FileExists $fileexist2 "_ck_" & GAMENAME & ".ships"
FileExists $fileexist3 GAMENAME & "_Z-ALIENS.cfg"
If ($fileexist1 <> TRUE) or ($fileexist2 <> TRUE) or ($fileexist3 <> TRUE)
	Gosub :Z_Lib~SYNC
	Send #145
	WaitFor #145 & #8
	SetVar $Z_Lib~setprompt "CITCOM"
	Gosub :Z_Lib~PROMPT
	SetVar $prompt $Z_Lib~prompt
	If ($prompt = "ERROR")
		Halt
	End
	Gosub :SHIPSTATS
Else
	Gosub :LOADSTATS
End
#------------------
Gosub :GETSHIPDATA
If (($z_mowfigs = "0") or ($z_mowfigs = "")) and (($z_mowmines = "0") or ($z_mowmines = "")) and (($z_mowlimps = "0") or ($z_mowlimps = ""))
	SetVar $z_mowfigs "1"
	SaveVar $z_mowfigs
	SetVar $z_mowmines "0"
	SetVar $z_mowlimps "0"
End
If ($z_mowfigs = "0")
	SetVar $z_mowfigs "1"
End
LoadVar $z_figowner
If ($z_figowner = "0") or ($z_figowner = "")
	SetVar $z_figowner "c"
End
LoadVar $z_figtype
If ($z_figtype = "0") or ($z_figtype = "")
	SetVar $z_figtype "d"
End
Gosub :CKSETTINGS
LoadVar $z_autoss
LoadVar $timeoffset
LoadVar $z_corp
LoadVar $mbbs
LoadVar $megabug
LoadVar $turnbase
LoadVar $turnbank
Uppercase $mbbs
UpperCase $megabug
LoadVar $steal_factor
LoadVar $steal_divisor
LoadVar $rob_factor
LoadVar $rob_multiplier
LoadVar $ptradesetting
LoadVar $portproduction
LoadVar $subprompts
LoadVar $colonist_regen
LoadVar $probecost
LoadVar $photonduration
LoadVar $turnbase
LoadVar $turnbank
LoadVar $timelimit
LoadVar $z_bankmax
LoadVar $z_phmulti
LoadVar $productionmax
LoadVar $z_clv
If ($z_clv = "0") or ($z_clv = "") or ($z_clv = "1")
	SetVar $z_clv "TRUE"
	SaveVar $z_clv
End
SetVar $lasthours "-1"
LoadVar $bot_turn_limit
If ($bot_turn_limit = "0")
	SetVar $bot_turn_limit 25
End
SetVar $z_safeshipstatus FALSE
SetVar $mode "GENERAL"
SetVar $watch FALSE
SetVar $damage TRUE
SetVar $fedwatch FALSE
SetVar $fedflag FALSE
SetVar $fedlast ""
SetVar $bbop FALSE
SetVar $autofurb FALSE
SetVar $plow FALSE
SetVar $citkillison FALSE
SetVar $pdropison FALSE
SetVar $evacison FALSE
LoadVar $z_heraldturns
SetVar $z_rescueavailable FALSE
SetVar $targetsystemok FALSE
SetVar $autorefurb FALSE
SetVar $fcr FALSE
Gosub :Z_Lib~SYNC
Fileexists $jumplistok GAMENAME & "_JUMPLIST.txt"
If ($jumplistok = TRUE)
	SetArray $jumplist 0
	ReadToArray GAMENAME & "_JUMPLIST.txt" $jumplist
	LoadVar $z_nextsector
	If ($z_nextsector <> "0")
		SetVar $x 1
		While ($x <= $jumplist)
			GetWord $jumplist[$x] $temp 1
			If ($temp = $z_nextsector)
				SetVar $jumplistptr $x
				SetVar $x $jumplist
			End
			SetVar $x ($x + 1)
		End
	Else
		GetWord $jumplist[1] $z_nextsector 1
		SaveVar $z_nextsector
		SetVar $jumplistptr 1
	End
	If ($jumplistptr = "0")
		GetWord $jumplist[1] $z_nextsector 1
		SaveVar $z_nextsector
		SetVar $jumplistptr 1
	End
Else
	SetArray $jumplist 0
	SetVar $z_nextsector 0
	SaveVar $z_nextsector
	SetVar $jumplistptr 0
End
PROCESSIN 1 "[Z]PROJECTZRUNNING[Z]"
PROCESSIN 1 $z_botname & "[Z]COMMSGUARDON[Z]" & $z_botname
Gosub :Z_Lib~COMMSON
Return
# CKSETTINGS 
:CKSETTINGS
SetVar $CKOPTOUTCNSETTINGS "Y"
SetVar $CKSURROUNDFIGTYPE $z_figtype
UpperCase $CKSURROUNDFIGTYPE
SetVar $CKSURROUNDFIGAMOUNT $z_mowfigs
SetVar $CKSURROUNDARMIDAMOUNT $z_mowmines
SetVar $CKSURROUNDLIMPETAMOUNT $z_mowlimps
SetVar $CKSHIPCAPAUTOLOAD "nowhere"
SaveVar $CKOPTOUTCNSETTINGS
SaveVar $CKSURROUNDFIGTYPE
SaveVar $CKSURROUNDFIGAMOUNT
SaveVar $CKSURROUNDARMIDAMOUNT
SaveVar $CKSURROUNDLIMPETAMOUNT
SaveVar $CKSHIPCAPAUTOLOAD
Return
# CHECKFIGMONITOR 
:CHECKFIGMONITOR
ListActiveScripts $scripts
SetVar $count 1
SetVar $figmonitorok FALSE
SetVar $temp $figmonitor
UpperCase $temp
While ($count <= $scripts)
  UpperCase $scripts[$count]
  GetWordPos $scripts[$count] $pos $temp
  If ($pos > 0)
	 SetVar $figmonitorok TRUE
  End
  SetVar $count ($count + 1)
End
If ($figmonitorok <> TRUE)
	GetWordPos $figmonitor $pos "\"
	If ($pos = 0)
		FileExists $fileok "scripts\" & $figmonitor
	Else
		FileExists $fileok $figmonitor
	End
	If ($fileok = TRUE)
		KillAllTriggers
		SetTextTrigger t51 :CHECKFIGMONITOR2 "[Z]SCRIPTLOADED[Z]"
		SetDelayTrigger cc2 :CHECKFIGMONITOR2 2000
		Load $figmonitor
		pause
:CHECKFIGMONITOR2
		KillAllTriggers
		SetVar $reset TRUE
	End
End
Return
# CHECKCOMMSGUARD 
:CHECKCOMMSGUARD
SetVar $commsguardok FALSE
Fileexists $fileexist1 "scripts\Z-CommsGuard.ts"
Fileexists $fileexist2 "scripts\z-commsguard.cts"
If ($fileexist1 <> "0") or ($fileexist2 <> "0")
	SetVar $Z_Lib~scriptname "z-commsguard"
	Gosub :Z_Lib~CHECKRUNNING
	If ($Z_Lib~isrunning = FALSE)
		KillAllTriggers
		SetTextTrigger t51 :CHECKCOMMSGUARD2 "[Z]SCRIPTLOADED[Z]"
		SetDelayTrigger cc2 :CHECKCOMMSGUARD2 2000
		Load "z-commsguard"
		pause
:CHECKCOMMSGUARD2
		KillAllTriggers
		SetVar $reset TRUE
		Send #145
		WaitOn #145 & #8
	End
	SetVar $Z_Lib~scriptname "z-commsguard"
	Gosub :Z_Lib~CHECKRUNNING
	SetVar $commsguardok $Z_Lib~isrunning
End
Return
# INTERNALCOMMANDLIST 
:INTERNALCOMMANDLIST
SetVar $internalcommands 188
SetArray $internalcommand $internalcommands
SetArray $internalcommand2 $internalcommands
SetArray $internalcategory2 $internalcommands
SetArray $internalmode $internalcommands
SetArray $verbose $internalcommands
SetArray $keywords $internalcommands
SetVar $internalcommand[1] "qss"
SetVar $verbose[1] "Display player info on SS."
SetVar $internalmode[1] "COMMAND"
SetVar $internalcategory2[1] "DATA"
SetVar $keywords[1] "player ship information status mode dash"
SetVar $internalcommand[2] "scripts"
SetVar $verbose[2] "Display active scripts on SS."
SetVar $internalmode[2] "COMMAND"
SetVar $internalcategory2[2] "UTILITY"
SetVar $keywords[2] "active scripts list"
SetVar $internalcommand[3] "reset"
SetVar $verbose[3] "Reset Z-Bot, reload Options file."
SetVar $internalmode[3] "COMMAND"
SetVar $internalcategory2[3] "UTILITY"
SetVar $keywords[3] "restart reboot z-bot"
SetVar $internalcommand[4] "corpy"
SetVar $verbose[4] "Clear and re-populate the corpy list."
SetVar $internalmode[4] "COMMAND"
SetVar $internalcategory2[4] "UTILITY"
SetVar $keywords[4] "players team members list authorise log in login corpies"
SetVar $internalcommand[5] "mow"
SetVar $verbose[5] "Mow to a sector."
SetVar $internalmode[5] "COMMAND"
SetVar $internalcategory2[5] "UTILITY GRID"
SetVar $keywords[5] "movement system charge twarp grid"
SetVar $internalcommand[6] "charge"
SetVar $verbose[6] "Mow without laying figs or mines. (FAST)"
SetVar $internalmode[6] "COMMAND"
SetVar $internalcategory2[6] "UTILITY COMBAT"
SetVar $keywords[6] "movement system mow twarp grid"
SetVar $internalcommand[7] "figs"
SetVar $verbose[7] "Update database with fig info."
SetVar $internalmode[7] "FIGS"
SetVar $internalcategory2[7] "DATA"
SetVar $keywords[7] "fighters list figfiler"
SetVar $internalcommand[8] "mines"
SetVar $verbose[8] "Update database with Mine info."
SetVar $internalmode[8] "MINES"
SetVar $internalcategory2[8] "DATA"
SetVar $keywords[8] "armids list minefiler"
SetVar $internalcommand[9] "limps"
SetVar $verbose[9] "Update database with Limpet info."
SetVar $internalmode[9] "LIMPS"
SetVar $internalcategory2[9] "DATA"
SetVar $keywords[9] "list minefiler"
SetVar $internalcommand[10] "call"
SetVar $verbose[10] "Call Saveme. Summon a planet to sector."
SetVar $internalmode[10] "COMMAND"
SetVar $internalcategory2[10] "COMBAT"
SetVar $keywords[10] "rescue"
SetVar $internalcommand[11] "surround"
SetVar $verbose[11] "Surround sector with figs/mines/limps."
SetVar $internalmode[11] "COMMAND"
SetVar $internalcategory2[11] "COMBAT GRID"
SetVar $keywords[11] "fighters"
SetVar $internalcommand[12] "oreup"
SetVar $verbose[12] "Buydown ore - SUPER FAST!"
SetVar $internalmode[12] "OREUP"
SetVar $internalcategory2[12] "RESOURCE"
SetVar $keywords[12] "fuel"
SetVar $internalcommand[13] "land"
SetVar $verbose[13] "Land on a specified planet."
SetVar $internalmode[13] "COMMAND"
SetVar $internalcategory2[13] "UTILITY"
SetVar $keywords[13] "lift"
SetVar $internalcommand[14] "lift"
SetVar $verbose[14] "Lift off from planet."
SetVar $internalmode[14] "COMMAND"
SetVar $internalcategory2[14] "UTILITY"
SetVar $keywords[14] "land"
SetVar $internalcommand[15] "mac"
SetVar $verbose[15] "Control the bot using a macro."
SetVar $internalmode[15] "MACRO"
SetVar $internalcategory2[15] "UTILITY"
SetVar $keywords[15] ""
SetVar $internalcommand[16] "help"
SetVar $verbose[16] "Display help."
SetVar $internalmode[16] "COMMAND"
SetVar $internalcategory2[16] "UTILITY"
SetVar $keywords[16] ""
SetVar $internalcommand[17] "status"
SetVar $verbose[17] "Display status information."
SetVar $internalmode[17] "#STATUS#"
SetVar $internalcategory2[17] "UTILITY DATA"
SetVar $keywords[17] "qss settings options mode dash"
SetVar $internalcommand[18] "autoss"
SetVar $verbose[18] "Turn the AutoSS Channel Changer ON or OFF."
SetVar $internalmode[18] "COMMAND"
SetVar $internalcategory2[18] "UTILITY"
SetVar $keywords[18] "subspace"
SetVar $internalcommand[19] "page"
SetVar $verbose[19] "Page the bot owner."
SetVar $internalmode[19] "COMMAND"
SetVar $internalcategory2[19] "UTILITY"
SetVar $keywords[19] "alert awaken summon"
SetVar $internalcommand[20] "scan"
SetVar $verbose[20] "Send a Holo and Density scan over SS."
SetVar $internalmode[20] "COMMAND"
SetVar $internalcategory2[20] "DATA"
SetVar $keywords[20] "long range scanner holographic sector display"
SetVar $internalcommand[21] "exit"
SetVar $verbose[21] "Do an EXIT/ENTER."
SetVar $internalmode[21] "EXIT"
SetVar $internalcategory2[21] "UTILITY"
SetVar $keywords[21] "clean clear logout logoff leave retire"
SetVar $internalcommand[22] "pdrop"
SetVar $verbose[22] "PDrop direct and adjacent."
SetVar $internalmode[22] "PDROP"
SetVar $internalcategory2[22] "COMBAT"
SetVar $keywords[22] "planet attack citkill citcap"
SetVar $internalcommand[23] "citkill"
SetVar $verbose[23] "Attack and refurb from a citadel."
SetVar $internalmode[23] "CITKILL"
SetVar $internalcategory2[23] "COMBAT"
SetVar $keywords[23] "pdrop citcap attack"
SetVar $internalcommand[24] "evac"
SetVar $verbose[24] "CitEvac - Automatic planet evacuation."
SetVar $internalmode[24] "CITEVAC"
SetVar $internalcategory2[24] "COMBAT"
SetVar $keywords[24] "evacuate escape flee"
SetVar $internalcommand[25] "qset"
SetVar $verbose[25] "Quasor Cannon Setter."
SetVar $internalmode[25] "COMMAND"
SetVar $internalcategory2[25] "COMBAT"
SetVar $keywords[25] "ccs"
SetVar $internalcommand[26] "pe"
SetVar $verbose[26] "Photon Enter - Invasion macro."
SetVar $internalmode[26] "COMMAND"
SetVar $internalcategory2[26] "COMBAT"
SetVar $keywords[26] ""
SetVar $internalcommand[27] "pel"
SetVar $verbose[27] "Photon Enter Land - Invasion macro."
SetVar $internalmode[27] "COMMAND"
SetVar $internalcategory2[27] "COMBAT"
SetVar $keywords[27] ""
SetVar $internalcommand[28] "pelk"
SetVar $verbose[28] "Photon Enter Land Kill - Invasion macro."
SetVar $internalmode[28] "COMMAND"
SetVar $internalcategory2[28] "COMBAT"
SetVar $keywords[28] ""
SetVar $internalcommand[29] "pxe"
SetVar $verbose[29] "Photon Xport Enter - Invasion macro."
SetVar $internalmode[29] "COMMAND"
SetVar $internalcategory2[29] "COMBAT"
SetVar $keywords[29] "2ship"
SetVar $internalcommand[30] "pxel"
SetVar $verbose[30] "Photon Xport Enter Land - Invasion macro."
SetVar $internalmode[30] "COMMAND"
SetVar $internalcategory2[30] "COMBAT"
SetVar $keywords[30] "2ship"
SetVar $internalcommand[31] "pxelk"
SetVar $verbose[31] "Photon Xport Enter Land Kill - Invasion macro."
SetVar $internalmode[31] "COMMAND"
SetVar $internalcategory2[31] "COMBAT"
SetVar $keywords[31] "2ship"
SetVar $internalcommand[32] "twarp"
SetVar $verbose[32] "TWarp to a sector."
SetVar $internalmode[32] "COMMAND"
SetVar $internalcategory2[32] "UTILITY"
SetVar $keywords[32] "movement system mow charge"
SetVar $internalcommand[33] "t"
SetVar $verbose[33] "TWarp to a sector."
SetVar $internalmode[33] "COMMAND"
SetVar $internalcategory2[33] "UTILITY"
SetVar $keywords[33] "movement system mow charge"
SetVar $internalcommand[34] "m"
SetVar $verbose[34] "Mow to a sector."
SetVar $internalmode[34] "COMMAND"
SetVar $internalcategory2[34] "UTILITY GRID"
SetVar $keywords[34] "movement system twarp charge"
SetVar $internalcommand[35] "c"
SetVar $verbose[35] "Mow without laying figs or mines. (FAST)"
SetVar $internalmode[35] "COMMAND COMBAT"
SetVar $internalcategory2[35] "UTILITY"
SetVar $keywords[35] "movement system twarp mow charge"
SetVar $internalcommand[36] "l"
SetVar $verbose[36] "Land on specified planet."
SetVar $internalmode[36] "COMMAND"
SetVar $internalcategory2[36] "UTILITY"
SetVar $keywords[36] "lift"
SetVar $internalcommand[37] "changess"
SetVar $verbose[37] "Change the SubSpace channel."
SetVar $internalmode[37] "COMMAND"
SetVar $internalcategory2[37] "UTILITY"
SetVar $keywords[37] "autoss"
SetVar $internalcommand[38] "class0"
SetVar $verbose[38] "Display Class 0 Port info on SS."
SetVar $internalmode[38] "COMMAND"
SetVar $internalcategory2[38] "DATA"
SetVar $keywords[38] "alphacentauri rylos terra stardock backdoor"
SetVar $internalcommand[39] "tow"
SetVar $verbose[39] "Hook a tow onto a ship."
SetVar $internalmode[39] "COMMAND"
SetVar $internalcategory2[39] "UTILITY"
SetVar $keywords[39] ""
SetVar $internalcommand[40] "ver"
SetVar $verbose[40] "Display the Z-Bot VERSION on SS."
SetVar $internalmode[40] "COMMAND"
SetVar $internalcategory2[40] "UTILITY"
SetVar $keywords[40] ""
SetVar $internalcommand[41] "topoff"
SetVar $verbose[41] "Top up ship fighters from sector."
SetVar $internalmode[41] "COMMAND"
SetVar $internalcategory2[41] "COMBAT RESOURCE"
SetVar $keywords[41] "figs glean refill"
SetVar $internalcommand[42] "ig"
SetVar $verbose[42] "Set ship's IG ON or OFF."
SetVar $internalmode[42] "COMMAND"
SetVar $internalcategory2[42] "COMBAT UTILITY"
SetVar $keywords[42] "settings options"
SetVar $internalcommand[43] "dc"
SetVar $verbose[43] "Deposit credits at Citadel."
SetVar $internalmode[43] "COMMAND"
SetVar $internalcategory2[43] "CASH"
SetVar $keywords[43] "bank wc withdraw"
SetVar $internalcommand[44] "wc"
SetVar $verbose[44] "Withdraw credits from Citadel."
SetVar $internalmode[44] "COMMAND"
SetVar $internalcategory2[44] "CASH"
SetVar $keywords[44] "bank dc deposit"
SetVar $internalcommand[45] "plimp"
SetVar $verbose[45] "Drop 1 personal limp in sector."
SetVar $internalmode[45] "COMMAND"
SetVar $internalcategory2[45] "COMBAT GRID"
SetVar $keywords[45] "limpet climp"
SetVar $internalcommand[46] "find"
SetVar $verbose[46] "List 6 nearest fuel ports."
SetVar $internalmode[46] "COMMAND"
SetVar $internalcategory2[46] "RESOURCE"
SetVar $keywords[46] "ore gas"
SetVar $internalcommand[47] "stopall"
SetVar $verbose[47] "Stop all active non-system scripts."
SetVar $internalmode[47] "COMMAND"
SetVar $internalcategory2[47] "UTILITY"
SetVar $keywords[47] ""
SetVar $internalcommand[48] "cn9"
SetVar $verbose[48] "Set CN9 to SPACE."
SetVar $internalmode[48] "COMMAND"
SetVar $internalcategory2[48] "UTILITY"
SetVar $keywords[48] "settings options"
SetVar $internalcommand[49] "deploy"
SetVar $verbose[49] "Deploy fighters in sector from planet."
SetVar $internalmode[49] "DEPLOY"
SetVar $internalcategory2[49] "RESOURCE COMBAT"
SetVar $keywords[49] "recall figs"
SetVar $internalcommand[50] "clearallbusts"
SetVar $verbose[50] "Clear busts across all sectors."
SetVar $internalmode[50] "CLEARBUSTS"
SetVar $internalcategory2[50] "DATA"
SetVar $keywords[50] "red cashing"
SetVar $internalcommand[51] "bustup"
SetVar $verbose[51] "Bust planets at Stardock to get experience."
SetVar $internalmode[51] "BUSTUP"
SetVar $internalcategory2[51] "CASH"
SetVar $keywords[51] "red cashing"
SetVar $internalcommand[52] "avoids"
SetVar $verbose[52] "Display current avoids list."
SetVar $internalmode[52] "COMMAND"
SetVar $internalcategory2[52] "DATA"
SetVar $keywords[52] ""
SetVar $internalcommand[53] "xport"
SetVar $verbose[53] "Xport to the specified ship number."
SetVar $internalmode[53] "COMMAND"
SetVar $internalcategory2[53] "UTILITY"
SetVar $keywords[53] ""
SetVar $internalcommand[54] "disr"
SetVar $verbose[54] "Disrupt adjacent enemy armid mines."
SetVar $internalmode[54] "DISRUPT"
SetVar $internalcategory2[54] "COMBAT GRID"
SetVar $keywords[54] "disruptors"
SetVar $internalcommand[55] "x"
SetVar $verbose[55] "Xport to the specified ship number."
SetVar $internalmode[55] "COMMAND"
SetVar $internalcategory2[55] "UTILITY"
SetVar $keywords[55] ""
SetVar $internalcommand[56] "plist"
SetVar $verbose[56] "Display a list of planets in sector."
SetVar $internalmode[56] "COMMAND"
SetVar $internalcategory2[56] "DATA"
SetVar $keywords[56] "pinfo overload"
SetVar $internalcommand[57] "amtrak"
SetVar $verbose[57] "List all adjacents to Fedspace."
SetVar $internalmode[57] "COMMAND"
SetVar $internalcategory2[57] "DATA"
SetVar $keywords[57] "msls"
SetVar $internalcommand[58] "safetynet"
SetVar $verbose[58] "Turn Safetynet ON or OFF."
SetVar $internalmode[58] "COMMAND"
SetVar $internalcategory2[58] "UTILITY COMBAT"
SetVar $keywords[58] "safeship"
SetVar $internalcommand[59] "safeship"
SetVar $verbose[59] "Set the safeship."
SetVar $internalmode[59] "COMMAND"
SetVar $internalcategory2[59] "UTILITY"
SetVar $keywords[59] "safetynet"
SetVar $internalcommand[60] "msls"
SetVar $verbose[60] "List all MSL sectors."
SetVar $internalmode[60] "COMMAND"
SetVar $internalcategory2[60] "DATA"
SetVar $keywords[60] "amtrak"
SetVar $internalcommand[61] "overload"
SetVar $verbose[61] "Check for sectors with too many planets."
SetVar $internalmode[61] "OVERLOAD"
SetVar $internalcategory2[61] "DATA RESOURCE"
SetVar $keywords[61] "collisions pinfo plist"
SetVar $internalcommand[62] "max"
SetVar $verbose[62] "Upgrade a port with or without exp gain."
SetVar $internalmode[62] "MAXPORT"
SetVar $internalcategory2[62] "RESOURCE CASH"
SetVar $keywords[62] ""
SetVar $internalcommand[63] "clear"
SetVar $verbose[63] "Clear adjacents of mines/limps."
SetVar $internalmode[63] "CLEAR"
SetVar $internalcategory2[63] "GRID COMBAT"
SetVar $keywords[63] "clean surround"
SetVar $internalcommand[64] "buy"
SetVar $verbose[64] "Buy down the port."
SetVar $internalmode[64] "BUYDOWN"
SetVar $internalcategory2[64] "CASH RESOURCE"
SetVar $keywords[64] ""
SetVar $internalcommand[65] "neg"
SetVar $verbose[65] "Sell Planet Goods to the port."
SetVar $internalmode[65] "NEGO"
SetVar $internalcategory2[65] "CASH"
SetVar $keywords[65] ""
SetVar $internalcommand[66] "avoid"
SetVar $verbose[66] "Add specified sectors to the Avoids list."
SetVar $internalmode[66] "COMMAND"
SetVar $internalcategory2[66] "UTILITY DATA"
SetVar $keywords[66] "unavoid"
SetVar $internalcommand[67] "unavoid"
SetVar $verbose[67] "Remove sectors from the Avoids list."
SetVar $internalmode[67] "COMMAND"
SetVar $internalcategory2[67] "UTILITY DATA"
SetVar $keywords[67] ""
SetVar $internalcommand[68] "recall"
SetVar $verbose[68] "Recall figs from sector to planet."
SetVar $internalmode[68] "RECALL"
SetVar $internalcategory2[68] "RESOURCE COMBAT"
SetVar $keywords[68] "deploy fighters"
SetVar $internalcommand[69] "dropall"
SetVar $verbose[69] "Drop all figs on ship into sector."
SetVar $internalmode[69] "DROPALL"
SetVar $internalcategory2[69] "UTILITY RESOURCE"
SetVar $keywords[69] "topoff fighters"
SetVar $internalcommand[70] "furb"
SetVar $verbose[70] "Buy and deliver a furb ship."
SetVar $internalmode[70] "FURB"
SetVar $internalcategory2[70] "CASH"
SetVar $keywords[70] "red cashing"
SetVar $internalcommand[71] "watch"
SetVar $verbose[71] "Turns ONLINE WATCH ON and OFF."
SetVar $internalmode[71] "COMMAND"
SetVar $internalcategory2[71] "DATA"
SetVar $keywords[71] "clv"
SetVar $internalcommand[72] "nmac"
SetVar $verbose[72] "Run a macro a number of times."
SetVar $internalmode[72] "MACRO"
SetVar $internalcategory2[72] "UTILITY"
SetVar $keywords[72] ""
SetVar $internalcommand[73] "climp"
SetVar $verbose[73] "Drop 1 corp limp in sector."
SetVar $internalmode[73] "COMMAND"
SetVar $internalcategory2[73] "COMBAT GRID"
SetVar $keywords[73] "plimp limpet"
SetVar $internalcommand[74] "gas"
SetVar $verbose[74] "Find and buy fuel ore (Passive)."
SetVar $internalmode[74] "GAS"
SetVar $internalcategory2[74] "RESOURCE"
SetVar $keywords[74] ""
SetVar $internalcommand[75] "sentry"
SetVar $verbose[75] "Auto refill from planet when attacked."
SetVar $internalmode[75] "SENTRY"
SetVar $internalcategory2[75] "COMBAT"
SetVar $keywords[75] "reloader"
SetVar $internalcommand[76] "density"
SetVar $verbose[76] "Report sectors with high density."
SetVar $internalmode[76] "DENSITY"
SetVar $internalcategory2[76] "DATA"
SetVar $keywords[76] "scan"
SetVar $internalcommand[77] "sendmap"
SetVar $verbose[77] "Send warpspec over SS."
SetVar $internalmode[77] "SENDMAP"
SetVar $internalcategory2[77] "DATA"
SetVar $keywords[77] "ztm getmap"
SetVar $internalcommand[78] "getmap"
SetVar $verbose[78] "Receive warpspec over SS."
SetVar $internalmode[78] "GETMAP"
SetVar $internalcategory2[78] "DATA"
SetVar $keywords[78] "ztm sendmap"
SetVar $internalcommand[79] "aliens"
SetVar $verbose[79]  "List all known alien sectors."
SetVar $internalmode[79] "ALIENS"
SetVar $internalcategory2[79] "DATA"
SetVar $keywords[79] "space enemyfigs"
SetVar $internalcommand[80] "pfigs"
SetVar $verbose[80] "Change sector figs to personal."
SetVar $internalmode[80] "PFIGS"
SetVar $internalcategory2[80] "UTILITY"
SetVar $keywords[80] "cfigs"
SetVar $internalcommand[81] "cfigs"
SetVar $verbose[81] "Change sector figs to corporate."
SetVar $internalmode[81] "CFIGS"
SetVar $internalcategory2[81] "UTILITY"
SetVar $keywords[81] "pfigs"
SetVar $internalcommand[82] "team"
SetVar $verbose[82] "Set the team name for group commands."
SetVar $internalmode[82] "COMMAND"
SetVar $internalcategory2[82] "UTILITY"
SetVar $keywords[82] ""
SetVar $internalcommand[83] "sector"
SetVar $verbose[83] "Display known information about a sector."
SetVar $internalmode[83] "COMMAND"
SetVar $internalcategory2[83] "DATA"
SetVar $keywords[83] "holoscan"
SetVar $internalcommand[84] "setparm"
SetVar $verbose[84] "Set a sector parameter."
SetVar $internalmode[84] "COMMAND"
SetVar $internalcategory2[84] "DATA"
SetVar $keywords[84] ""
SetVar $internalcommand[85] "clearparm"
SetVar $verbose[85] "Clear a sector parameter."
SetVar $internalmode[85] "COMMAND"
SetVar $internalcategory2[85] "DATA"
SetVar $keywords[85] ""
SetVar $internalcommand[86] "listparm"
SetVar $verbose[86] "Lists sector parameters for a sector."
SetVar $internalmode[86] "COMMAND"
SetVar $internalcategory2[86] "DATA"
SetVar $keywords[86] ""
SetVar $internalcommand[87] "countbusts"
SetVar $verbose[87] "Counts sectors marked as BUSTED."
SetVar $internalmode[87] "COMMAND"
SetVar $internalcategory2[87] "DATA"
SetVar $keywords[87] "red cashing"
If ($p = TRUE)
	SetVar $internalcommand[88] "figger"
	SetVar $verbose[88] " (+) Turns the AUTO Refigger ON and OFF."
	SetVar $internalmode[88] "COMMAND"
	SetVar $internalcategory2[88] "GRID"
	SetVar $keywords[88] ""
Else
	SetVar $internalcommand[88] #145
	SetVar $verbose[88] " "
	SetVar $internalmode[88] " "
	SetVar $internalcategory2[88] " "
	SetVar $keywords[88] ""
End
SetVar $internalcommand[89] "setmatrix"
SetVar $verbose[89] "Set the sectors for the matrix command."
SetVar $internalmode[89] "COMMAND"
SetVar $internalcategory2[89] "CASH"
SetVar $keywords[89] "red cashing"
SetVar $internalcommand[90] "matrix"
SetVar $verbose[90] "Display bust status of red cashing sectors."
SetVar $internalmode[90] "COMMAND"
SetVar $internalcategory2[90] "CASH"
SetVar $keywords[90] ""
SetVar $internalcommand[91] "busy"
SetVar $verbose[91] "Responds immediately if the bot is not busy."
SetVar $internalmode[91] "BUSYCHECK"
SetVar $internalcategory2[91] "UTILITY"
SetVar $keywords[91] ""
SetVar $internalcommand[92] "zmac"
SetVar $verbose[92] "Run a macro of move commands a number of times."
SetVar $internalmode[92] "MACRO"
SetVar $internalcategory2[92] "UTILITY"
SetVar $keywords[92] "movement system"
SetVar $internalcommand[93] "ndmac"
SetVar $verbose[93] "Run a macro a number of times with a delay."
SetVar $internalmode[93] "MACRO"
SetVar $internalcategory2[93] "UTILITY"
SetVar $keywords[93] ""
SetVar $internalcommand[94] "sendlist"
SetVar $verbose[94] "Send the GAMENAME_jumplist.txt file over SS."
SetVar $internalmode[94] "LIST"
SetVar $internalcategory2[94] "UTILITY DATA"
SetVar $keywords[94] "getlist"
SetVar $internalcommand[95] "getlist"
SetVar $verbose[95] "Receive the GAMENAME_jumplist.txt file over SS."
SetVar $internalmode[95] "LIST"
SetVar $internalcategory2[95] "UTILITY DATA"
SetVar $keywords[95] "sendlist"
SetVar $internalcommand[96] "setnext"
SetVar $verbose[96] "Set the next sector to jump to in the jumplist."
SetVar $internalmode[96] "COMMAND"
SetVar $internalcategory2[96] "UTILITY DATA"
SetVar $keywords[96] "movement system"
SetVar $internalcommand[97] "hook"
SetVar $verbose[97] "Hook tow onto a manned ship."
SetVar $internalmode[97] "HOOKTOW"
SetVar $internalcategory2[97] "UTILITY"
SetVar $keywords[97] ""
SetVar $internalcommand[98] "pretax"
SetVar $verbose[98] "Pretax and unlock ship."
SetVar $internalmode[98] "PRETAX"
SetVar $internalcategory2[98] "UTILITY"
SetVar $keywords[98] ""
SetVar $internalcommand[99] "damage"
SetVar $verbose[99] "Report recent quasar damage."
SetVar $internalmode[99] "COMMAND"
SetVar $internalcategory2[99] "UTILITY DATA"
SetVar $keywords[99] ""
SetVar $internalcommand[100] "mcic"
SetVar $verbose[100] "Display a list of known high MCIC ports."
SetVar $internalmode[100] "MCIC"
SetVar $internalcategory2[100] "DATA"
SetVar $keywords[100] ""
SetVar $internalcommand[101] "unlock"
SetVar $verbose[101] "Pretax and unlock ship."
SetVar $internalmode[101] "UNLOCK"
SetVar $internalcategory2[101] "UTILITY"
SetVar $keywords[101] ""
SetVar $internalcommand[102] "bot"
SetVar $verbose[102] "Turn the bot ON and OFF."
SetVar $internalmode[102] "COMMAND"
SetVar $internalcategory2[102] "UTILITY"
SetVar $keywords[102] ""
SetVar $internalcommand[103] "dp"
SetVar $verbose[103] "Density Photon."
SetVar $internalmode[103] "PHOTON"
SetVar $internalcategory2[103] "COMBAT"
SetVar $keywords[103] "foton"
SetVar $internalcommand[104] "rob"
SetVar $verbose[104] "Rob the port in sector."
SetVar $internalmode[104] "ROB"
SetVar $internalcategory2[104] "CASH"
SetVar $keywords[104] "red cashing"
If ($p = TRUE)
	SetVar $internalcommand[105] "nail"
	SetVar $verbose[105] " (+) Kill a fast target at a busy STARDOCK."
	SetVar $internalmode[105] "NAIL"
	SetVar $internalcategory2[105] "COMBAT"
	SetVar $keywords[105] "dockkill"
Else
	SetVar $internalcommand[105] #145
	SetVar $verbose[105] " "
	SetVar $internalmode[105] " "
	SetVar $internalcategory2[105] " "
	SetVar $keywords[105] ""
End
SetVar $internalcommand[106] "comms"
SetVar $verbose[106] "Set the comms ON."
SetVar $internalmode[106] "COMMAND"
SetVar $internalcategory2[106] "UTILITY"
SetVar $keywords[106] ""
SetVar $internalcommand[107] "refill"
SetVar $verbose[107] "Refill figs/shields from a planet or Class0/9."
SetVar $internalmode[107] "REFILL"
SetVar $internalcategory2[107] "UTILITY"
SetVar $keywords[107] "buy"
SetVar $internalcommand[108] "gamesettings"
SetVar $verbose[108] "Retrieve the game settings and save to a file."
SetVar $internalmode[108] "SETTINGS"
SetVar $internalcategory2[108] "UTILITY"
SetVar $keywords[108] ""
SetVar $internalcommand[109] "base"
SetVar $verbose[109] "Set the BASE sector."
SetVar $internalmode[109] "COMMAND"
SetVar $internalcategory2[109] "UTILITY"
SetVar $keywords[109] ""
SetVar $internalcommand[110] "safesector"
SetVar $verbose[110] "Set the SAFE sector."
SetVar $internalmode[110] "COMMAND"
SetVar $internalcategory2[110] "UTILITY"
SetVar $keywords[110] ""
SetVar $internalcommand[111] "scrub"
SetVar $verbose[111] "Twarp to SAFESECTOR, scrub, Twarp to BASE."
SetVar $internalmode[111] "SCRUB"
SetVar $internalcategory2[111] "COMBAT GRID"
SetVar $keywords[111] "clean"
SetVar $internalcommand[112] "scrubzone"
SetVar $verbose[112] "List sectors with personal limps."
SetVar $internalmode[112] "SCRUBZONE"
SetVar $internalcategory2[112] "DATA"
SetVar $keywords[112] ""
If ($p = TRUE)
	SetVar $internalcommand[113] "ccs"
	SetVar $verbose[113] " (+) Cascaded Cannon Setter."
	SetVar $internalmode[113] "CCS"
	SetVar $internalcategory2[113] "COMBAT"
	SetVar $keywords[113] "qset"
Else
	SetVar $internalcommand[113] #145
	SetVar $verbose[113] " "
	SetVar $internalmode[113] " "
	SetVar $internalcategory2[113] " "
	SetVar $keywords[113] ""
End
SetVar $internalcommand[114] "tp"
SetVar $verbose[114] "Twarp Photon."
SetVar $internalmode[114] "TP"
SetVar $internalcategory2[114] "COMBAT"
SetVar $keywords[114] "foton boton"
SetVar $internalcommand[115] "automate"
SetVar $verbose[115] "Turn the Automate system ON or OFF."
SetVar $internalmode[115] "COMMAND"
SetVar $internalcategory2[115] "UTILITY"
SetVar $keywords[115] ""
SetVar $internalcommand[116] "near"
SetVar $verbose[116] "Display nearest figged sectors."
SetVar $internalmode[116] "NEAR"
SetVar $internalcategory2[116] "DATA"
SetVar $keywords[116] ""
SetVar $internalcommand[117] "fedwatch"
SetVar $verbose[117] "Alert when someone comes into sector."
SetVar $internalmode[117] "COMMAND"
SetVar $internalcategory2[117] "UTILITY"
SetVar $keywords[117] ""
SetVar $internalcommand[118] "bbop"
SetVar $verbose[118] "Collect port data while on a planet."
SetVar $internalmode[118] "COMMAND"
SetVar $internalcategory2[118] "DATA"
SetVar $keywords[118] ""
SetVar $internalcommand[119] "prices"
SetVar $verbose[119] "Display Hold/Fig/Shield price history."
SetVar $internalmode[119] "COMMAND"
SetVar $internalcategory2[119] "DATA"
SetVar $keywords[119] "market"
SetVar $internalcommand[120] "defig"
SetVar $verbose[120] "Remove fig from adjacent. (FAST)"
SetVar $internalmode[120] "COMMAND"
SetVar $internalcategory2[120] "COMBAT GRID"
SetVar $keywords[120] ""
SetVar $internalcommand[121] "glean"
SetVar $verbose[121] "Glean figs from a planet as they are made."
SetVar $internalmode[121] "GLEAN"
SetVar $internalcategory2[121] "RESOURCE"
SetVar $keywords[121] "topoff refill"
SetVar $internalcommand[122] "plock"
SetVar $verbose[122] "Prelock and Pdrop with optional citkill/cap."
SetVar $internalmode[122] "PLOCK"
SetVar $internalcategory2[122] "COMBAT"
SetVar $keywords[122] ""
SetVar $internalcommand[123] "news"
SetVar $verbose[123] "Summarise the daily logs."
SetVar $internalmode[123] "NEWS"
SetVar $internalcategory2[123] "DATA"
SetVar $keywords[123] ""
SetVar $internalcommand[124] "ships"
SetVar $verbose[124] "Display ships within XPORT range."
SetVar $internalmode[124] "SHIPS"
SetVar $internalcategory2[124] "UTILITY"
SetVar $keywords[124] ""
SetVar $internalcommand[125] "mode"
SetVar $verbose[125] "Display the bots MODE."
SetVar $internalmode[125] "#STATUS#"
SetVar $internalcategory2[125] "UTILITY"
SetVar $keywords[125] "status qss dash"
SetVar $internalcommand[126] "autofurb"
SetVar $verbose[126] "Auto attack incoming towed ships for holds."
SetVar $internalmode[126] "COMMAND"
SetVar $internalcategory2[126] "UTILITY CASH"
SetVar $keywords[126] "red cashing"
If ($p = TRUE)
	SetVar $internalcommand[127] "plow"
	SetVar $verbose[127] " (+) Charge and call for a planet."
	SetVar $internalmode[127] "PLOW"
	SetVar $internalcategory2[127] "COMBAT GRID"
	SetVar $keywords[127] "pgrid"
Else
	SetVar $internalcommand[127] #145
	SetVar $verbose[127] " "
	SetVar $internalmode[127] " "
	SetVar $internalcategory2[127] " "
	SetVar $keywords[127] ""
End
SetVar $internalcommand[128] "evacuate"
SetVar $verbose[128] "Evacuate all movable planets."
SetVar $internalmode[128] "EVACUATE"
SetVar $internalcategory2[128] "RESOURCE"
SetVar $keywords[128] "escape"
SetVar $internalcommand[129] "moveships"
SetVar $verbose[129] "Move all ships to a specified sector."
SetVar $internalmode[129] "MOVESHIPS"
SetVar $internalcategory2[129] "RESOURCE"
SetVar $keywords[129] "deliver"
SetVar $internalcommand[130] "pwarp"
SetVar $verbose[130] "Pwarp planet."
SetVar $internalmode[130] "PWARP"
SetVar $internalcategory2[130] "UTILITY"
SetVar $keywords[130] ""
SetVar $internalcommand[131] "p"
SetVar $verbose[131] "Pwarp planet."
SetVar $internalmode[131] "PWARP"
SetVar $internalcategory2[131] "UTILITY"
SetVar $keywords[131] ""
SetVar $internalcommand[132] "cship"
SetVar $verbose[132] "Set ship to corp owned and clear password."
SetVar $internalmode[132] "CSHIP"
SetVar $internalcategory2[132] "UTILITY"
SetVar $keywords[132] ""
SetVar $internalcommand[133] "turns"
SetVar $verbose[133] "Display turns left on SS."
SetVar $internalmode[133] "TURNS"
SetVar $internalcategory2[133] "UTILITY"
SetVar $keywords[133] ""
SetVar $internalcommand[134] "pinfo"
SetVar $verbose[134] "Display planet info on SS."
SetVar $internalmode[134] "PINFO"
SetVar $internalcategory2[134] "UTILITY"
SetVar $keywords[134] "plist overload"
SetVar $internalcommand[135] "delimp"
SetVar $verbose[135] "Clear limps in current sector."
SetVar $internalmode[135] "DELIMP"
SetVar $internalcategory2[135] "GRID UTILITY"
SetVar $keywords[135] ""
SetVar $internalcommand[136] "seed"
SetVar $verbose[136] "Set a seed for the AUTOSS system."
SetVar $internalmode[136] "COMMAND"
SetVar $internalcategory2[136] "UTILITY"
SetVar $keywords[136] ""
SetVar $internalcommand[137] "prompt"
SetVar $verbose[137] "Change to the specified prompt."
SetVar $internalmode[137] "COMMAND"
SetVar $internalcategory2[137] "UTILITY"
SetVar $keywords[137] ""
SetVar $internalcommand[138] "fs"
SetVar $verbose[138] "TWARP to fedspace (RED or BLUE)."
SetVar $internalmode[138] "FS"
SetVar $internalcategory2[138] "UTILITY"
SetVar $keywords[138] "movement system"
SetVar $internalcommand[139] "clearbust"
SetVar $verbose[139] "Clear bust parameter in a given sector."
SetVar $internalmode[139] "COMMAND"
SetVar $internalcategory2[139] "DATA"
SetVar $keywords[139] "red cashing"
SetVar $internalcommand[140] "setbust"
SetVar $verbose[140] "Set bust parameter in a given sector."
SetVar $internalmode[140] "COMMAND"
SetVar $internalcategory2[140] "DATA"
SetVar $keywords[140] "red cashing"
SetVar $internalcommand[141] "portcheck"
SetVar $verbose[141] "Send a commerce report over Subspace."
SetVar $internalmode[141] "COMMAND"
SetVar $internalcategory2[141] "DATA"
SetVar $keywords[141] "display sector"
SetVar $internalcommand[142] "sellships"
SetVar $verbose[142] "Sell ALL ships in the Stardock sector."
SetVar $internalmode[142] "SELLSHIPS"
SetVar $internalcategory2[142] "RESOURCE"
SetVar $keywords[142] "bs buyship"
SetVar $internalcommand[143] "display"
SetVar $verbose[143] "Display the current sector over Subspace."
SetVar $internalmode[143] "COMMAND"
SetVar $internalcategory2[143] "DATA"
SetVar $keywords[143] "sector holoscan"
SetVar $internalcommand[144] "holo"
SetVar $verbose[144] "Sends a holographic scan over Subspace."
SetVar $internalmode[144] "COMMAND"
SetVar $internalcategory2[144] "DATA"
SetVar $keywords[144] "display sector holoscan"
SetVar $internalcommand[145] "mega"
SetVar $verbose[145] "Megarobs a port in an MBBS game."
SetVar $internalmode[145] "MEGA"
SetVar $internalcategory2[145] "CASH"
SetVar $keywords[145] "red cashing"
SetVar $internalcommand[146] "bank"
SetVar $verbose[146] "Handle transactions at the Galactic Bank."
SetVar $internalmode[146] "BANK"
SetVar $internalcategory2[146] "CASH"
SetVar $keywords[146] "credits"
SetVar $internalcommand[147] "leave"
SetVar $verbose[147] "Leave the game for X seconds."
SetVar $internalmode[147] "LEAVE"
SetVar $internalcategory2[147] "UTILITY"
SetVar $keywords[147] "exit retire logoff logout"
SetVar $internalcommand[148] "deliver"
SetVar $verbose[148] "Pickup and deliver a ship."
SetVar $internalmode[148] "DELIVER"
SetVar $internalcategory2[148] "RESOURCE"
SetVar $keywords[148] "moveships"
If ($p = TRUE)
	SetVar $internalcommand[149] "pr"
	SetVar $verbose[149] " (+) Turns the PHOTON RESPONDER ON and OFF."
	SetVar $internalmode[149] "COMMAND"
	SetVar $internalcategory2[149] "COMBAT"
	SetVar $keywords[149] "foton"
Else
	SetVar $internalcommand[149] #145
	SetVar $verbose[149] " "
	SetVar $internalmode[149] " "
	SetVar $internalcategory2[149] " "
	SetVar $keywords[149] ""
End
SetVar $internalcommand[150] "planet"
SetVar $verbose[150] "Set the Main Planet Number."
SetVar $internalmode[150] "COMMAND"
SetVar $internalcategory2[150] "UTILITY"
SetVar $keywords[150] ""
SetVar $internalcommand[151] "heraldturns"
SetVar $verbose[151] "Toggle ON/OFF Turn Heralding."
SetVar $internalmode[151] "COMMAND"
SetVar $internalcategory2[151] "UTILITY"
SetVar $keywords[151] ""
If ($p = TRUE)
	SetVar $internalcommand[152] "fp"
	SetVar $verbose[152] " (+) FAST Photon Attack."
	SetVar $internalmode[152] "PHOTON"
	SetVar $internalcategory2[152] "COMBAT"
	SetVar $keywords[152] "foton"
	SetVar $internalcommand[153] "init"
	SetVar $verbose[153] " (+) Initialise the TARGETING SYSTEM."
	SetVar $internalmode[153] "TARSYS"
	SetVar $internalcategory2[153] "DATA"
	SetVar $keywords[153] "photon foton"
Else
	SetVar $internalcommand[152] #145
	SetVar $verbose[152] " "
	SetVar $internalmode[152] " "
	SetVar $internalcategory2[152] " "
	SetVar $keywords[152] ""
	SetVar $internalcommand[153] #145
	SetVar $verbose[153] " "
	SetVar $internalmode[153] " "
	SetVar $internalcategory2[153] " "
	SetVar $keywords[153] ""
End
SetVar $internalcommand[154] "radar"
SetVar $verbose[154] "Limpet Tracking Radar."
SetVar $internalmode[154] "RADAR"
SetVar $internalcategory2[154] "COMBAT DATA"
SetVar $keywords[154] "limps active"
If ($p = TRUE)
	SetVar $internalcommand[155] "clean"
	SetVar $verbose[155] " (+) FAST defig ALL adjacents."
	SetVar $internalmode[155] "CLEAN"
	SetVar $internalcategory2[155] "GRID COMBAT"
	SetVar $keywords[155] "clear"
Else
	SetVar $internalcommand[155] #145
	SetVar $verbose[155] " "
	SetVar $internalmode[155] " "
	SetVar $internalcategory2[155] " "
	SetVar $keywords[155] ""
End
SetVar $internalcommand[156] "compile"
SetVar $verbose[156] "Compiles a list of UPGRADED ports."
SetVar $internalmode[156] "COMPILE"
SetVar $internalcategory2[156] "DATA"
SetVar $keywords[156] ""
SetVar $internalcommand[157] "spg"
SetVar $verbose[157] "Smart Passive Gridder."
SetVar $internalmode[157] "SPG"
SetVar $internalcategory2[157] "GRID"
SetVar $keywords[157] "hunt"
SetVar $internalcommand[158] "list"
SetVar $verbose[158] "Display the Approved File Transfer List."
SetVar $internalmode[158] "COMPILE"
SetVar $internalcategory2[158] "DATA"
SetVar $keywords[158] "sendfile getfile"
SetVar $internalcommand[159] "sendfile"
SetVar $verbose[159] "Send a file over subspace."
SetVar $internalmode[159] "SENDFILE"
SetVar $internalcategory2[159] "DATA"
SetVar $keywords[159] "list getfile"
SetVar $internalcommand[160] "getfile"
SetVar $verbose[160] "Receive a file over subspace."
SetVar $internalmode[160] "GETFILE"
SetVar $internalcategory2[160] "DATA"
SetVar $keywords[160] "list sendfile"
SetVar $internalcommand[161] "plimps"
SetVar $verbose[161] "Drop max personal limps in sector."
SetVar $internalmode[161] "COMMAND"
SetVar $internalcategory2[161] "COMBAT GRID"
SetVar $keywords[161] "climps"
SetVar $internalcommand[162] "climps"
SetVar $verbose[162] "Drop max corp limps in sector."
SetVar $internalmode[162] "COMMAND"
SetVar $internalcategory2[162] "COMBAT GRID"
SetVar $keywords[162] "plimps"
SetVar $internalcommand[163] "assets"
SetVar $verbose[163] "Displays a corporate assets report."
SetVar $internalmode[163] "ASSETS"
SetVar $internalcategory2[163] "DATA"
SetVar $keywords[163] "sitrep"
SetVar $internalcommand[164] "citcap"
SetVar $verbose[164] "Attack and refurb from a citadel."
SetVar $internalmode[164] "CITCAP"
SetVar $internalcategory2[164] "COMBAT"
SetVar $keywords[164] "pdrop attack"
If ($p = TRUE)
	SetVar $internalcommand[165] "heraldhits"
	SetVar $verbose[165] " (+) Herald fig hits and adjacents over SS."
	SetVar $internalmode[165] "COMMAND"
	SetVar $internalcategory2[165] "DATA"
	SetVar $keywords[165] "init"
Else
	SetVar $internalcommand[165] #145
	SetVar $verbose[165] " "
	SetVar $internalmode[165] " "
	SetVar $internalcategory2[165] " "
	SetVar $keywords[165] ""
End
SetVar $internalcommand[166] "cap"
SetVar $verbose[166] "Capture an enemy ship."
SetVar $internalmode[166] "CAP"
SetVar $internalcategory2[166] "COMBAT"
SetVar $keywords[166] ""
SetVar $internalcommand[167] "shipprices"
SetVar $verbose[167] "Collect and display ship prices."
SetVar $internalmode[167] "PRICES"
SetVar $internalcategory2[167] "DATA"
SetVar $keywords[167] "bs buyship buy ship sellships sell ships"
SetVar $internalcommand[168] "enemyfigs"
SetVar $verbose[168] "Display sectors with enemy figs."
SetVar $internalmode[168] "ENEMYFIGS"
SetVar $internalcategory2[168] "DATA"
SetVar $keywords[168] "aliens"
SetVar $internalcommand[169] "retire"
SetVar $verbose[169] "Retire in a Citadel."
SetVar $internalmode[169] "RETIRE"
SetVar $internalcategory2[169] "UTILITY"
SetVar $keywords[169] "exit leave logoff logout"
SetVar $internalcommand[170] "pa"
SetVar $verbose[170] "Photon Adjacent."
SetVar $internalmode[170] "COMMAND"
SetVar $internalcategory2[170] "COMBAT"
SetVar $keywords[170] ""
SetVar $internalcommand[171] "empty"
SetVar $verbose[171] "Empty ship figs onto planet."
SetVar $internalmode[171] "EMPTY"
SetVar $internalcategory2[171] "UTILITY"
SetVar $keywords[171] ""
SetVar $internalcommand[172] "switchbot"
SetVar $verbose[172] "Switch to another bot."
SetVar $internalmode[172] "SWITCH"
SetVar $internalcategory2[172] "UTILITY"
SetVar $keywords[172] "mombot kraakenbot kbot z-bot"
SetVar $internalcommand[173] "xfer"
SetVar $verbose[173] "Transfer figs/shields/mines to a corpy."
SetVar $internalmode[173] "XFER"
SetVar $internalcategory2[173] "UTILITY"
SetVar $keywords[173] ""
SetVar $internalcommand[174] "about"
SetVar $verbose[174] "Displays the splash screen."
SetVar $internalmode[174] "COMMAND"
SetVar $internalcategory2[174] "UTILITY"
SetVar $keywords[174] ""
SetVar $internalcommand[175] "autorefurb"
SetVar $verbose[175] "Turns on the Auto Refurber."
SetVar $internalmode[175] "COMMAND"
SetVar $internalcategory2[175] "CASH"
SetVar $keywords[175] "red cashing"
SetVar $internalcommand[176] "setfurb"
SetVar $verbose[176] "Set the Furb Ship Letter and Extra holds."
SetVar $internalmode[176] "COMMAND"
SetVar $internalcategory2[176] "CASH"
SetVar $keywords[176] "red cashing"
SetVar $internalcommand[177] "dash"
SetVar $verbose[177] "Displays a dashboard of active features."
SetVar $internalmode[177] "#STATUS#"
SetVar $internalcategory2[177] "UTILITY"
SetVar $keywords[177] "qss status"
SetVar $internalcommand[178] "active"
SetVar $verbose[178] "Displays active limp list."
SetVar $internalmode[178] "ACTIVE"
SetVar $internalcategory2[178] "DATA UTILITY"
SetVar $keywords[178] "limps radar"
SetVar $internalcommand[179] "bs"
SetVar $verbose[179] "Buy and outfit a ship."
SetVar $internalmode[179] "BS"
SetVar $internalcategory2[179] "RESOURCE"
SetVar $keywords[179] "buyships buy ships dockshopper dock shopper ds sellships sell ships"
SetVar $internalcommand[180] "sp"
SetVar $verbose[180] "Put shields on a planet using Twarp and STARDOCK."
SetVar $internalmode[180] "SP"
SetVar $internalcategory2[180] "RESOURCE"
SetVar $keywords[180] "buy down armourer class0 class 0 buydown"
SetVar $internalcommand[181] "fcr"
SetVar $verbose[181] "Automatic FedCom Responder."
SetVar $internalmode[181] "FCR"
SetVar $internalcategory2[181] "UTILITY"
SetVar $keywords[181] ""
SetVar $internalcommand[182] "course"
SetVar $verbose[182] "Plot a `safe' course from one sector to another."
SetVar $internalmode[182] "COURSE"
SetVar $internalcategory2[182] "GRID"
SetVar $keywords[182] "safemow route"
If ($p = TRUE)
	SetVar $internalcommand[183] "sr"
	SetVar $verbose[183] " (+) Set the Sector Responder mode - kill/cap/off."
	SetVar $internalmode[183] "SR"
	SetVar $internalcategory2[183] "COMBAT"
	SetVar $keywords[183] "dockkill class0kill citkill citcap shipcap attack"
	SetVar $internalcommand[184] "htx"
	SetVar $verbose[184] " (+) Hook -> TWarp -> Xport -> Photon !"
	SetVar $internalmode[184] "HTX"
	SetVar $internalcategory2[184] "COMBAT"
	SetVar $keywords[184] "2 ship photon tow foton 2ship photon"
Else
	SetVar $internalcommand[183] #145
	SetVar $verbose[183] " "
	SetVar $internalmode[183] " "
	SetVar $internalcategory2[183] " "
	SetVar $keywords[183] ""
	SetVar $internalcommand[184] #145
	SetVar $verbose[184] " "
	SetVar $internalmode[184] " "
	SetVar $internalcategory2[184] " "
	SetVar $keywords[184] ""
End
SetVar $internalcommand[185] "manifest"
SetVar $verbose[185] "Display a list of ship data over subspace."
SetVar $internalmode[185] "MANIFEST"
SetVar $internalcategory2[185] "DATA"
SetVar $keywords[185] "ship stats shipstats"
SetVar $internalcommand[186] "waver"
SetVar $verbose[186] "Wave on an adjacent and retreat."
SetVar $internalmode[186] "WAVE"
SetVar $internalcategory2[186] "COMBAT"
SetVar $keywords[186] "clear figs fighters"
SetVar $internalcommand[187] "ee"
SetVar $verbose[187] "Fast Exit/Enter."
SetVar $internalmode[187] "EXIT"
SetVar $internalcategory2[187] "COMBAT GRID"
SetVar $keywords[187] ""
SetVar $internalcommand[188] "redships"
SetVar $verbose[188] "Set the red cashing ships and sectors"
SetVar $internalmode[188] "REDSHIPS"
SetVar $internalcategory2[188] "CASHING DATA"
SetVar $keywords[188] "red cashing sdt matrix"

SetVar $x 1
While ($x <= $internalcommands)
	SetVar $internalcommand2[$x] $internalcommand[$x]
	SetVar $x ($x + 1)
End
# Gosub :SORTHELPLIST
Return
# SORTHELPLIST 
:SORTHELPLIST
Echo "**" & $boldcyan & $blinkon & "Sorting Help Lists." & $blinkoff
SetArray $bucket 0
SetArray $bucketct 0
SetArray $bucketverbose 0
SetArray $bucketcategory 0
SetArray $bucketkeywords 0
Gosub :Z_Lib~SETDIAL
SetVar $x 1
While ($x <= $internalcommands)
	Gosub :Z_Lib~UPDATEDIAL
	CutText $internalcommand2[$x] $sort 1 1
	GetCharCode $sort $sortcode
	If ($sortcode > 0)
		SetVar $bucketct[$sortcode] ($bucketct[$sortcode] + 1)
		SetVar $bucket[$sortcode][$bucketct[$sortcode]] $internalcommand2[$x]
		SetVar $bucketverbose[$sortcode][$bucketct[$sortcode]] $verbose[$x]
		SetVar $bucketcategory[$sortcode][$bucketct[$sortcode]] $internalcategory2[$x]
		SetVar $bucketkeywords[$sortcode][$bucketct[$sortcode]] $keywords[$x]
		
	End
	SetVar $x ($x + 1)
End
SetVar $z 96
While ($z <= 145)
	SetVar $sortagain TRUE
	While ($sortagain = TRUE)
		Gosub :Z_Lib~UPDATEDIAL
		SetVar $sortagain FALSE
		SetVar $x 1
		While ($x < $bucketct[$z])
			SetVar $i 1
:DEEPSORT
			CutText $bucket[$z][$x] $sort1 $i 1
			CutText $bucket[$z][($x + 1)] $sort2 $i 1
			GetCharCode $sort1 $sortcode1
			GetCharCode $sort2 $sortcode2
			If ($sortcode1 > $sortcode2)
				SetVar $sorttemp $bucket[$z][($x + 1)]
				SetVar $sorttemp2 $bucketverbose[$z][($x + 1)]
				SetVar $sorttemp3 $bucketcategory[$z][($x + 1)]
				SetVar $sorttemp4 $bucketkeywords[$z][($x + 1)]
				
				SetVar $bucket[$z][($x + 1)] $bucket[$z][$x]
				SetVar $bucketverbose[$z][($x + 1)] $bucketverbose[$z][$x]
				SetVar $bucketcategory[$z][($x + 1)] $bucketcategory[$z][$x]
				SetVar $bucketkeywords[$z][($x + 1)] $bucketkeywords[$z][$x]
				
				SetVar $bucket[$z][$x] $sorttemp
				SetVar $bucketverbose[$z][$x] $sorttemp2
				SetVar $bucketcategory[$z][$x] $sorttemp3
				SetVar $bucketkeywords[$z][$x] $sorttemp4

				SetVar $sortagain TRUE
			ElseIf ($sortcode1 = $sortcode2)
				GetLength $bucket[$z][$x] $len1
				GetLength  $bucket[$z][($x + 1)] $len2
				If ($len1 > $i) and ($len2 > $i)
					SetVar $i ($i + 1)
					Goto :DEEPSORT
				Else
					If ($len1 > $len2)
						SetVar $sorttemp $bucket[$z][($x + 1)]
						SetVar $sorttemp2 $bucketverbose[$z][($x + 1)]
						SetVar $sorttemp3 $bucketcategory[$z][($x + 1)]
						SetVar $sorttemp4 $bucketkeywords[$z][($x + 1)]
						
						SetVar $bucket[$z][($x + 1)] $bucket[$z][$x]
						SetVar $bucketverbose[$z][($x + 1)] $bucketverbose[$z][$x]
						SetVar $bucketcategory[$z][($x + 1)] $bucketcategory[$z][$x]
						SetVar $bucketkeywords[$z][($x + 1)] $bucketkeywords[$z][$x]
						
						SetVar $bucket[$z][$x] $sorttemp
						SetVar $bucketverbose[$z][$x] $sorttemp2
						SetVar $bucketcategory[$z][$x] $sorttemp3
						SetVar $bucketkeywords[$z][$x] $sorttemp4
						
						SetVar $sortagain TRUE
					End
				End
			End
			SetVar $x ($x + 1)
		End
	End
	SetVar $z ($z + 1)
End
SetVar $z 96
SetVar $index 0
While ($z <= 145)
	Gosub :Z_Lib~UPDATEDIAL
	SetVar $x 1
	While ($x <= $bucketct[$z])
		SetVar $index ($index + 1)
		SetVar $internalcommand2[$index] $bucket[$z][$x]
		SetVar $verbose[$index] $bucketverbose[$z][$x]
		SetVar $internalcategory2[$index] $bucketcategory[$z][$x]
		SetVar $keywords[$index] $bucketkeywords[$z][$x]
		SetVar $x ($x + 1)
	End
	SetVar $z ($z + 1)
End
SetArray $bucket 0
SetArray $bucketct 0
SetArray $bucketverbose 0
SetArray $bucketcategory 0
SetArray $bucketkeywords 0
Return
# SORTXTRALIST 
:SORTXTRALIST
SetArray $bucket2 0
SetArray $bucketct2 0
SetArray $bucketmode 0
SetArray $bucketfile 0
SetArray $bucketdesc 0
SetVar $x 1
While ($x <= $externalcommands)
	Gosub :Z_Lib~UPDATEDIAL
	CutText $externalcommand2[$x] $sort 1 1
	GetCharCode $sort $sortcode
	If ($sortcode > 0)
		SetVar $bucketct2[$sortcode] ($bucketct2[$sortcode] + 1)
		SetVar $bucket2[$sortcode][$bucketct2[$sortcode]] $externalcommand2[$x]
		SetVar $bucketmode[$sortcode][$bucketct2[$sortcode]] $externalmode[$x]
		SetVar $bucketfile[$sortcode][$bucketct2[$sortcode]] $externalfile[$x]
		SetVar $bucketdesc[$sortcode][$bucketct2[$sortcode]] $externaldesc[$x]
	End
	SetVar $x ($x + 1)
End
SetVar $z 96
While ($z <= 145)
	SetVar $sortagain TRUE
	While ($sortagain = TRUE)
		Gosub :Z_Lib~UPDATEDIAL
		SetVar $sortagain FALSE
		SetVar $x 1
		While ($x < $bucket2[$z])
			SetVar $i 1
	:DEEPSORT2
			CutText $bucket2[$z][$x] $sort1 $i 1
			CutText $bucket2[$z][($x + 1)] $sort2 $i 1
			GetCharCode $sort1 $sortcode1
			GetCharCode $sort2 $sortcode2
			If ($sortcode1 > $sortcode2)
				SetVar $sorttemp $bucket2[$z][($x + 1)]
				SetVar $sorttemp2 $bucketmode[$z][($x + 1)]
				SetVar $sorttemp3 $bucketfile[$z][($x + 1)]
				SetVar $sorttemp4 $bucketdesc[$z][($x + 1)]
				
				SetVar $bucket2[$z][($x + 1)] $bucket2[$z][$x]
				SetVar $bucketmode[$z][($x + 1)] $bucketmode[$z][$x]
				SetVar $bucketfile[$z][($x + 1)] $bucketfile[$z][$x]
				SetVar $bucketdesc[$z][($x + 1)] $bucketdesc[$z][$x]
				
				SetVar $bucket2[$z][$x] $sorttemp
				SetVar $bucketmode[$z][$x] $sorttemp2
				SetVar $bucketfile[$z][$x] $sorttemp3
				SetVar $bucketdesc[$z][$x] $sorttemp4
				
				SetVar $sortagain TRUE
			ElseIf ($sortcode1 = $sortcode2)
				GetLength $bucket2[$z][$x] $len1
				GetLength  $bucket2[$z][($x + 1)] $len2
				If ($len1 > $i) and ($len2 > $i)
					SetVar $i ($i + 1)
					Goto :DEEPSORT2
				Else
					If ($len1 > $len2)
						SetVar $sorttemp $bucket2[$z][($x + 1)]
						SetVar $sorttemp2 $bucketmode[$z][($x + 1)]
						SetVar $sorttemp3 $bucketfile[$z][($x + 1)]
						SetVar $sorttemp4 $bucketdesc[$z][($x + 1)]
						
						SetVar $bucket2[$z][($x + 1)] $bucket2[$z][$x]
						SetVar $bucketmode[$z][($x + 1)] $bucketmode[$z][$x]
						SetVar $bucketfile[$z][($x + 1)] $bucketfile[$z][$x]
						SetVar $bucketdesc[$z][($x + 1)] $bucketdesc[$z][$x]
						
						SetVar $bucket2[$z][$x] $sorttemp
						SetVar $bucketmode[$z][$x] $sorttemp2
						SetVar $bucketfile[$z][$x] $sorttemp3
						SetVar $bucketdesc[$z][$x] $sorttemp4
						
						SetVar $sortagain TRUE
					End
				End
			End
			SetVar $x ($x + 1)
		End
	End
	SetVar $z ($z + 1)
End
SetVar $z 96
SetVar $index 0
While ($z <= 145)
	Gosub :Z_Lib~UPDATEDIAL
	SetVar $x 1
	While ($x <= $bucketct2[$z])
		SetVar $index ($index + 1)
		SetVar $externalcommand2[$index] $bucket2[$z][$x]
		SetVar $externalmode2[$index] $bucketmode[$z][$x]
		SetVar $externalfile2[$index] $bucketfile[$z][$x]
		SetVar $externaldesc2[$index] $bucketdesc[$z][$x]
		SetVar $x ($x + 1)
	End
	SetVar $z ($z + 1)
End
SetArray $bucket2 0
SetArray $bucketct2 0
SetArray $bucketmode 0
SetArray $bucketfile 0
SetArray $bucketdesc 0
Gosub :Z_Lib~ENDDIAL
Return
# PROCESSOPTIONSFILE 
:PROCESSOPTIONSFILE
FileExists $fileok "Z-Options.cfg"
If ($fileok = TRUE)
	SetVar $externalcommands 0
	SetVar $hotkeys 0
	SetVar $banners 0
	ReadToArray "Z-Options.cfg" $optionsfile
	SetVar $i 1
	While ($i <= $optionsfile)
		GetLength $optionsfile[$i] $len
		If ($len > 0)
			CutText $optionsfile[$i] $ck 1 1
			If ($ck <> "#")
				GetWord $optionsfile[$i] $type 1
				UpperCase $type
				If ($type = "BOTNAME:")
					GetWord $optionsfile[$i] $z_botname 2
					SaveVar $z_botname
				End
				If ($type = "FIGMONITOR:")
					GetWord $optionsfile[$i] $figmonitor 2
				End
				If ($type = "SCRIPT:")
					GetWord $optionsfile[$i] $temp 4
					If ($temp <> "") and ($temp <> "0")
						SetVar $externalcommands ($externalcommands + 1)
						GetWordPos $optionsfile[$i] $pos1 "["
						GetWordPos $optionsfile[$i] $pos2 "]"
						If ($pos1 <> "0") and ($pos2 <> "0")
							GetText $optionsfile[$i] $externaldesc[$externalcommands] "[" "]"
							StripText $optionsfile[$i] "[" & $externaldesc[$externalcommands] & "]"
						Else
							SetVar $externaldesc[$externalcommands] ""
						End
						GetWord $optionsfile[$i] $externalmode[$externalcommands] 2
						UpperCase $externalmode[$externalcommands]
						GetWord $optionsfile[$i] $externalcommand[$externalcommands] 3
						LowerCase $externalcommand[$externalcommands]
						GetWord $optionsfile[$i] $externalfile[$externalcommands] 4
					End
				End
				If ($type = "HOTKEY:")
					GetWord $optionsfile[$i] $temp 3
					If ($temp <> "") and ($temp <> "0")
						SetVar $hotkeys ($hotkeys + 1)
						GetWord $optionsfile[$i] $tempkey 2
						Gosub :CHECKKEYS
						SetVar $hotkeyd[$hotkeys] $tempkeyd
						SetVar $hotkey[$hotkeys] $tempkey
						SetVar $hotkeyof[$hotkeys] $tempkeyof
						GetWord $optionsfile[$i] $hotkeytype[$hotkeys] 3
						UpperCase $hotkeytype[$hotkeys]
						GetWord $optionsfile[$i] $hotkeycommand[$hotkeys] 4
						GetWordPos $optionsfile[$i] $temppos $hotkeycommand[$hotkeys]
						GetLength $hotkeycommand[$hotkeys] $templen
						CutText $optionsfile[$i] $tempdesc ($temppos + $templen) 999
						GetWord $tempdesc $word1 1
						GetWordPos $tempdesc $temppos $word1
						CutText $tempdesc $hotkeydesc[$hotkeys] $temppos 999
						LowerCase $hotkeycommand[$hotkeys]
					End
				End
				If ($type = "BANNER:")
					SetVar $banners ($banners + 1)
					GetWord $optionsfile[$i] $bannerfile[$banners] 2
				End
				If ($type = "WAVECAP:")
					GetLength $optionsfile[$i] $len
					If ($len > 9)
						CutText $optionsfile[$i] $do_wavecap 10 ($len - 9)
						ReplaceText $do_wavecap #42 "*"
					End
				End
				If ($type = "CAPTURE:")
					GetLength $optionsfile[$i] $len
					If ($len > 9)
						CutText $optionsfile[$i] $do_capture 10 ($len - 9)
						ReplaceText $do_capture #42 "*"
					End
				End
				If ($type = "KILL:")
					GetLength $optionsfile[$i] $len
					If ($len > 6)
						CutText $optionsfile[$i] $do_kill 7 ($len - 6)
						ReplaceText $do_kill #42 "*"
					End
				End
				If ($type = "ATTACK:")
					GetLength $optionsfile[$i] $len
					If ($len > 8)
						CutText $optionsfile[$i] $do_attack 9 ($len - 8)
						ReplaceText $do_attack #42 "*"
					End
				End
				If ($type = "MACRO:")
					GetLength $optionsfile[$i] $len
					If ($len > 7)
						CutText $optionsfile[$i] $do_macro 8 ($len - 7)
						ReplaceText $do_macro #42 "*"
					End
				End
				If ($type = "SORTHELP:")
					GetWord $optionsfile[$i] $temp 2
					UpperCase $temp
					If ($temp = "ON") or ($temp = "YES")
						SetVar $sortatstart TRUE
					Else
						SetVar $sortatstart FALSE
					End
				End
				If ($type = "SHOWHOTKEYS:")
					GetWord $optionsfile[$i] $temp 2
					UpperCase $temp
					If ($temp = "ON") or ($temp = "YES")
						SetVar $showhotkeys TRUE
					Else
						SetVar $showhotkeys FALSE
					End
				End
				If ($type = "ANNOUNCEMOTTOS:")
					GetWord $optionsfile[$i] $temp 2
					UpperCase $temp
					If ($temp = "OFF") or ($temp = "NO")
						SetVar $announcemottos "OFF"
					Else
						SetVar $announcemottos "ON"
					End
				End
				If ($type = "MENUKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_menukeyd $tempkeyd
						SetVar $z_menukeycd $tempkeycd
						SetVar $z_menukey $tempkey
						SetVar $z_menukeyof $tempkeyof
					End
				End
				If ($type = "DOUBLETAPKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_actkeyd $tempkeyd
						SetVar $z_actkeycd $tempkeycd
						SetVar $z_actkey $tempkey
						SetVar $z_actkeyof $tempkeyof
					End
				End
				If ($type = "CHARGEKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_chargekeyd $tempkeyd
						SetVar $z_chargekeycd $tempkeycd
						SetVar $z_chargekey $tempkey
						SetVar $z_chargekeyof $tempkeyof
					End
				End
				If ($type = "MOWKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_mowkeyd $tempkeyd
						SetVar $z_mowkeycd $tempkeycd
						SetVar $z_mowkey $tempkey
						SetVar $z_mowkeyof $tempkeyof
					End
				End
				If ($type = "SELFBOTKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_selfbotkeyd $tempkeyd
						SetVar $z_selfbotkeycd $tempkeycd
						SetVar $z_selfbotkey $tempkey
						SetVar $z_selfbotkeyof $tempkeyof
					End
				End
				If ($type = "TRANSWARPKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_transwarpkeyd $tempkeyd
						SetVar $z_transwarpkeycd $tempkeycd
						SetVar $z_transwarpkey $tempkey
						SetVar $z_transwarpkeyof $tempkeyof
					End
				End
				If ($type = "BOTONOFFKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_botonoffkeyd $tempkeyd
						SetVar $z_botonoffkeycd $tempkeycd
						SetVar $z_botonoffkey $tempkey
						SetVar $z_botonoffkeyof $tempkeyof
					End
				End
				If ($type = "HOOKTOWKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_hooktowkeyd $tempkeyd
						SetVar $z_hooktowkeycd $tempkeycd
						SetVar $z_hooktowkey $tempkey
						SetVar $z_hooktowkeyof $tempkeyof
					End
				End
				If ($type = "TOPOFFKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_topoffkeyd $tempkeyd
						SetVar $z_topoffkeycd $tempkeycd
						SetVar $z_topoffkey $tempkey
						SetVar $z_topoffkeyof $tempkeyof
					End
				End
				If ($type = "XFERKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_xferkeyd $tempkeyd
						SetVar $z_xferkeycd $tempkeycd
						SetVar $z_xferkey $tempkey
						SetVar $z_xferkeyof $tempkeyof
					End
				End
				If ($type = "BANNERKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_bannerkeyd $tempkeyd
						SetVar $z_bannerkeycd $tempkeycd
						SetVar $z_bannerkey $tempkey
						SetVar $z_bannerkeyof $tempkeyof
					End
				End
				If ($type = "CITMENUKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_citmenukeyd $tempkeyd
						SetVar $z_citmenukeycd $tempkeycd
						SetVar $z_citmenukey $tempkey
						SetVar $z_citmenukeyof $tempkeyof
					End
				End
				If ($type = "BLINDWARPKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_blindwarpkeyd $tempkeyd
						SetVar $z_blindwarpkeycd $tempkeycd
						SetVar $z_blindwarpkey $tempkey
						SetVar $z_blindwarpkeyof $tempkeyof
					End
				End
				If ($type = "DISRUPTKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_disrkeyd $tempkeyd
						SetVar $z_disrkeycd $tempkeycd
						SetVar $z_disrkey $tempkey
						SetVar $z_disrkeyof $tempkeyof
					End
				End
				If ($type = "SAFETYNETKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_safetynetkeyd $tempkeyd
						SetVar $z_safetynetkeycd $tempkeycd
						SetVar $z_safetynetkey $tempkey
						SetVar $z_safetynetkeyof $tempkeyof
					End
				End
				If ($type = "HOTMENUKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_hotmenukeyd $tempkeyd
						SetVar $z_hotmenukeycd $tempkeycd
						SetVar $z_hotmenukey $tempkey
						SetVar $z_hotmenukeyof $tempkeyof
					End
				End
				If ($type = "INFOKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_infokeyd $tempkeyd
						SetVar $z_infokeycd $tempkeycd
						SetVar $z_infokey $tempkey
						SetVar $z_infokeyof $tempkeyof
					End
				End
				If ($type = "PROBEKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_probekeyd $tempkeyd
						SetVar $z_probekeycd $tempkeycd
						SetVar $z_probekey $tempkey
						SetVar $z_probekeyof $tempkeyof
					End
				End
				If ($type = "ZTMKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_ztmkeyd $tempkeyd
						SetVar $z_ztmkeycd $tempkeycd
						SetVar $z_ztmkey $tempkey
						SetVar $z_ztmkeyof $tempkeyof
					End
				End
				If ($type = "ATTACKKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_attackkeyd $tempkeyd
						SetVar $z_attackkeycd $tempkeycd
						SetVar $z_attackkey $tempkey
						SetVar $z_attackkeyof $tempkeyof
					End
				End
				If ($type = "FUELKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_fuelkeyd $tempkeyd
						SetVar $z_fuelkeycd $tempkeycd
						SetVar $z_fuelkey $tempkey
						SetVar $z_fuelkeyof $tempkeyof
					End
				End
				If ($type = "CAPKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_capkeyd $tempkeyd
						SetVar $z_capkeycd $tempkeycd
						SetVar $z_capkey $tempkey
						SetVar $z_capkeyof $tempkeyof
					End
				End
				If ($type = "REFIGKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_refigkeyd $tempkeyd
						SetVar $z_refigkeycd $tempkeycd
						SetVar $z_refigkey $tempkey
						SetVar $z_refigkeyof $tempkeyof
					End
				End
				If ($type = "MATRIXKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_matrixkeyd $tempkeyd
						SetVar $z_matrixkeycd $tempkeycd
						SetVar $z_matrixkey $tempkey
						SetVar $z_matrixkeyof $tempkeyof
					End
				End
				If ($type = "HOOKMANKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_hookmankeyd $tempkeyd
						SetVar $z_hookmankeycd $tempkeycd
						SetVar $z_hookmankey $tempkey
						SetVar $z_hookmankeyof $tempkeyof
					End
				End
				If ($type = "STOPALLKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_stopallkeyd $tempkeyd
						SetVar $z_stopallkeycd $tempkeycd
						SetVar $z_stopallkey $tempkey
						SetVar $z_stopallkeyof $tempkeyof
					End
				End
				If ($type = "AUTOKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_autokeyd $tempkeyd
						SetVar $z_autokeycd $tempkeycd
						SetVar $z_autokey $tempkey
						SetVar $z_autokeyof $tempkeyof
					End
				End
				If ($type = "HUNTKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_huntkeyd $tempkeyd
						SetVar $z_huntkeycd $tempkeycd
						SetVar $z_huntkey $tempkey
						SetVar $z_huntkeyof $tempkeyof
					End
				End
				If ($type = "HOTLISTKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_hotlistkeyd $tempkeyd
						SetVar $z_hotlistkeycd $tempkeycd
						SetVar $z_hotlistkey $tempkey
						SetVar $z_hotlistkeyof $tempkeyof
					End
				End
				If ($type = "LASTBOTKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_lastbotkeyd $tempkeyd
						SetVar $z_lastbotkeycd $tempkeycd
						SetVar $z_lastbotkey $tempkey
						SetVar $z_lastbotkeyof $tempkeyof
					End
				End
				If ($type = "PANELKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_panelkeyd $tempkeyd
						SetVar $z_panelkeycd $tempkeycd
						SetVar $z_panelkey $tempkey
						SetVar $z_panelkeyof $tempkeyof
					End
				End
				If ($type = "WATCHKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_watchkeyd $tempkeyd
						SetVar $z_watchkeycd $tempkeycd
						SetVar $z_watchkey $tempkey
						SetVar $z_watchkeyof $tempkeyof
					End
				End
				If ($type = "FASTXFERKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_fastrefillkeyd $tempkeyd
						SetVar $z_fastrefillkeycd $tempkeycd
						SetVar $z_fastrefillkey $tempkey
						SetVar $z_fastrefillkeyof $tempkeyof
					End
				End
				If ($type = "SETPLANETKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_setplanetkeyd $tempkeyd
						SetVar $z_setplanetkeycd $tempkeycd
						SetVar $z_setplanetkey $tempkey
						SetVar $z_setplanetkeyof $tempkeyof
					End
				End
				If ($type = "LOOPKEY:")
					GetWord $optionsfile[$i] $tempkey 2
					If ($tempkey <> "0") and ($tempkey <> "")
						Gosub :CHECKKEYS
						SetVar $z_loopkeyd $tempkeyd
						SetVar $z_loopkeycd $tempkeycd
						SetVar $z_loopkey $tempkey
						SetVar $z_loopkeyof $tempkeyof
					End
				End
				# New Entries above here 
			End
		End
		SetVar $i ($i + 1)
	End
	SetArray $optionsfile 0
	SetArray $externalmode2 $externalcommands
	SetArray $externalfile2 $externalcommands
	SetArray $externaldesc2 $externalcommands
	SetVar $x 1
	While ($x <= $externalcommands)
		SetVar $externalcommand2[$x] $externalcommand[$x]
		SetVar $externalmode2[$x] $externalmode[$x]
		SetVar $externalfile2[$x] $externalfile[$x]
		SetVar $externaldesc2[$x] $externaldesc[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~SYNC
	# Gosub :SORTXTRALIST
Else
	Echo "**" & $boldred & "Z-Options.cfg FILE NOT FOUND !!! Creating one in the TWX Root.*"
	Echo "*" & $boldwhite & "We need to give your bot a name."
	Echo "*" & $boldwhite & "This name should be 3 or 4 chars long and easy to remember."
	Echo "*" & $boldwhite & "It will be used by your corpies to communicate with your bot."
	Echo "*" & $boldyellow & "Please enter your botname: " & $boldwhite
	GetConsoleInput $value
	If ($value ="") or ($value = "0")
		GetLength LOGINNAME $len
		If ($len > 1)
			CutText LOGINNAME $z_botname 1 3
			LowerCase $z_botname
		Else
			SetVar $z_botname "123"
		End
	Else
		SetVar $z_botname $value
		LowerCase $z_botname
	End
# OPTIONS FILE 
	Echo "**" & $boldgreen & "Naming the bot: " & $z_botname & "**"
	Write "z-options.cfg" "# " & $scripttitle & " Options File."
	Write "z-options.cfg" "# -------------------------------"
	Write "z-options.cfg" "BOTNAME: " & $z_botname
	Write "z-options.cfg" "FIGMONITOR: z-figmon.cts"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "SORTHELP: OFF"
	Write "z-options.cfg" "SHOWHOTKEYS: OFF"
	Write "z-options.cfg" "ANNOUNCEMOTTOS: OFF"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# EXTERNAL BOT SCRIPTS"
	Write "z-options.cfg" "# ---------------------"
	Write "z-options.cfg" "# KEY    CATEGORY    BOTCOMMAND      SCRIPTFILE                      [DESCRIPTION] (optional)"
	Write "z-options.cfg" "# ------------------------------------------------------------------------------------------------------------"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    zarm            scripts\z-armourer.cts          [Z-Armourer Class 0 Buydown]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    zcol            scripts\z-coloniser.cts         [Z-Coloniser Twarp Red/Blue Coloniser]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    fetch           scripts\z-fetch.cts             [Z-Fetch Buy perishables from STARDOCK]"
	Write "z-options.cfg" "SCRIPT:  COMBAT      rescue          scripts\z-rescue.cts            [Z-Rescue Save me script]"
	Write "z-options.cfg" "SCRIPT:  COMBAT      saveme          scripts\z-rescue.cts            [Z-Rescue Save me script]"
	Write "z-options.cfg" "SCRIPT:  GRID        scout           scripts\z-scout.cts             [Z-Scout Gridder]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    strip           scripts\z-strip.cts             [Z-Strip Planet Stripper]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    charger         scripts\z-charger.cts           [Charges to you destination.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    clearbusts      scripts\z-clearbusts.cts        [Clears Busts according to a list provided by Swath.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    grid            scripts\z-grid.cts              [Zed's Unstoppable Gridder.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    mcicprimer      scripts\z-mcicprimer.cts        [Sells a little equipment to ports to get the MCICs.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    pursuit         scripts\z-pursuit.cts           [Tag Script - Search and Destroy.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    zrr             scripts\-rapidresponse.cts      [Sector Responder with refurb and retreat abilities.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    citcap          scripts\zcitcap.cts             [Captures enemy ships from planet citadel.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE    gridtest        scripts\zgridtest.cts           [Hunter script? idk...]"
    Write "z-options.cfg" "SCRIPT:  CASH        worldtrade      scripts\zworldtrade.cts         [Bottable Pack 2 World Trade (no parms)]"
	Write "z-options.cfg" "######## Zed updated mombot scripts - probably opsolete - need to research"
	Write "z-options.cfg" "#SCRIPT:  CASHING     psst            scripts\zpsst.cts               [MomBot Planet SST]"
	Write "z-options.cfg" "#SCRIPT:  RESOURCE    pimp            scripts\zpimp.cts               [Mombot Pimp - Bust planets to Oreup]"
	Write "z-options.cfg" "#SCRIPT:  GRID        minesweep       scripts\zminesweep.cts          [Mombot MineSweeper - Clear Mines & Limps]"
	Write "z-options.cfg" "#SCRIPT:  GRID        ugrid           scripts\zugrid.cts              [Mombot Ugrid - Ultimate Gridder]"
	Write "z-options.cfg" "#SCRIPT:  CASH        merch           scripts\zmerch.cts              [Mombot Merch - Planet Buy/Sell Product]"
	Write "z-options.cfg" "SCRIPT:   CASH        wsst            scripts\zwsst.cts               [Mombot World SST - Red Cashing]"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "######## Mombot 3.5x scripts"
	Write "z-options.cfg" "SCRIPT:  CASH     ppt         scripts\mombot\commands\cashing\ppt.cts      [Mombot ppt - Paired Port Trade]"
	Write "z-options.cfg" "SCRIPT:  CASH     tricon      scripts\mombot\commands\cashing\tricon.cts   [Mombot tricon - Will Play Tricon until Win or Rounds Hit]"
	Write "z-options.cfg" "SCRIPT:  DATA     armids      scripts\mombot\commands\data\armids.cts      [Mombot armids - Refreshes Deployed Armid List]"
	Write "z-options.cfg" "SCRIPT:  DATA     disp        scripts\mombot\commands\data\disp.cts        [Mombot disp - Displays current sector]"
	Write "z-options.cfg" "SCRIPT:  DATA     dscan       scripts\mombot\commands\data\dscan.cts       [Mombot dscan - Displays Density scans]"
	Write "z-options.cfg" "SCRIPT:  DATA     getvar      scripts\mombot\commands\data\getvar.cts      [Mombot getvar - Reads Bots Local Vairables]"
	Write "z-options.cfg" "SCRIPT:  DATA     param       scripts\mombot\commands\data\param.cts       [Mombot param - Displays sector parameters saved in game.]"
	Write "z-options.cfg" "SCRIPT:  DATA     ping        scripts\mombot\commands\data\ping.cts        [Mombot ping - Determine current server ping times.]"
	Write "z-options.cfg" "SCRIPT:  DATA     pscan       scripts\mombot\commands\data\pscan.cts       [Mombot pscan - Sends Planet Data]"
	Write "z-options.cfg" "SCRIPT:  DATA     setparam    scripts\mombot\commands\data\setparam.cts    [Mombot setparam - Set sector parameters]"
	Write "z-options.cfg" "SCRIPT:  DATA     setparms    scripts\mombot\commands\data\setparms.cts    [Mombot setparms - Set sector parameters]"
	Write "z-options.cfg" "SCRIPT:  DATA     setvar      scripts\mombot\commands\data\setvar.cts      [Mombot setvar - Set Mobots Local Variables]"
	Write "z-options.cfg" "SCRIPT:  DATA     slist       scripts\mombot\commands\data\slist.cts       [Mombot slist - Scans Active-Ships and sends output]"
	Write "z-options.cfg" "SCRIPT:  DATA     time        scripts\mombot\commands\data\time.cts        [Mombot time - Displays systems local time]"
	Write "z-options.cfg" "SCRIPT:  UTILITY  bwarp       scripts\mombot\commands\general\bwarp.cts    [Mombot bwarp - Teleport From Palnet to a Sector.]"
	Write "z-options.cfg" "SCRIPT:  UTILITY  callout     scripts\mombot\commands\general\callout.cts  [Mombot callout - Reports team name and current sector.]"
	Write "z-options.cfg" "SCRIPT:  UTILITY  corp        scripts\mombot\commands\general\corp.cts     [Mombot corp] - Join/drop a corp member."
	Write "z-options.cfg" "SCRIPT:  UTILITY  photon      scripts\mombot\commands\general\photon.cts   [Mombot photon] - Fires photon into adjacent sector."
	Write "z-options.cfg" "SCRIPT:  UTILITY  port        scripts\mombot\commands\general\port.cts     [Mombot port - build/create/destroy/kill/upgrade/max port.]"
	Write "z-options.cfg" "SCRIPT:  UTILITY  subspace    scripts\mombot\commands\general\subspace.cts [Mombot subspace - Sets the subspace channel.]"
	Write "z-options.cfg" "SCRIPT:  GRID     cmine       scripts\mombot\commands\grid\cmine.cts       [Mombot cmine - Deploys Corporate Armid Mines into the sector.]"
	Write "z-options.cfg" "SCRIPT:  GRID     pgrid       scripts\mombot\commands\grid\pgrid.cts       [Mombot pgrid - Planet-Grid an Adjacent Sector.]"
	Write "z-options.cfg" "SCRIPT:  GRID     pmine       scripts\mombot\commands\grid\pmine.cts       [Mombot pmine - Deploy Personal Mines.]"
	Write "z-options.cfg" "SCRIPT:  GRID     xenter      scripts\mombot\commands\grid\xenter.cts      [Mombot xenter - exit/enter repeatidly to clear sector.]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   hkill       scripts\mombot\commands\offense\hkill.cts    [Mombot hkill - Holo Kill]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   kill        scripts\mombot\commands\offense\kill.cts     [Mombot kill - Current Sector Kill Command.]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   ped         scripts\mombot\commands\offense\ped.cts      [Mombot ped - Photon, Export, Enter, Defend.]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   pex         scripts\mombot\commands\offense\pex.cts      [Mombot pex - Photon, Enter, Export.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE dump        scripts\mombot\commands\resource\dump.cts    [Mombot dump - Jettisons colos off of planet.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE sellship    scripts\mombot\commands\resource\sellship.cts[Mombot sellship - Sell All Ships, At Stardock.]"
	Write "z-options.cfg" "SCRIPT:  CASH     bbb         scripts\mombot\commands\cashing\bbb.cts      [Mombot bbb - Buys minimum Ore/Org/Equip for experience.]"
	Write "z-options.cfg" "SCRIPT:  CASH     Merch       scripts\mombot\commands\cashing\Merch.cts    [Mombot Merch - Visits all ports in grid and sells organics.]"
	Write "z-options.cfg" "SCRIPT:  CASH     sdt         scripts\mombot\commands\cashing\sdt.cts      [Mombot sdt - Steal Dump Transport]"
	Write "z-options.cfg" "SCRIPT:  CASH     sst         scripts\mombot\commands\cashing\sst.cts      [Mombot sst - Sell, Steal, Transport]"
	Write "z-options.cfg" "SCRIPT:  CASH     tbust       scripts\mombot\commands\cashing\tbust.cts    [Mombot tbust - Bust planets for experience]"
	Write "z-options.cfg" "SCRIPT:  CASH     wppt        scripts\mombot\commands\cashing\wppt.cts     [Mombot wppt - World Paired Port Trade]"
	Write "z-options.cfg" "SCRIPT:  DATA     sentinel    scripts\mombot\modes\data\sentinel.cts       [Mombot sentine - does cim hunting and checks clv for changesl]"
	Write "z-options.cfg" "SCRIPT:  DATA     ztm         scripts\mombot\modes\data\ztm.cts            [Mombot ztm - Zero Turn Mapping]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   Boton       scripts\mombot\modes\offense\Boton.cts       [Mombot Boton - Bwarp Photon]"
	Write "z-options.cfg" "SCRIPT:  COMBAT   Foton       scripts\mombot\modes\offense\Foton.cts       [Mombot Foton - Multipurpose Photon Mode]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE lsd         scripts\mombot\modes\resource\lsd.cts        [Mombot lsd - Lonestar Dockshopper (backend)]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE Move        scripts\mombot\modes\resource\Move.cts       [Mombot Move - Product Mover]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE movefig     scripts\mombot\modes\resource\movefig.cts    [Mombot movefig - Fighter Move Move fighters onto or off of a planet.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE PATP        scripts\mombot\modes\resource\PATP.cts       [Mombot PATP - Pay At The Pump.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE Pimp        scripts\mombot\modes\resource\Pimp.cts       [Mombot Pimp - Makes planets and strips them of product.]"
	Write "z-options.cfg" "SCRIPT:  RESOURCE strip       scripts\mombot\modes\resource\strip.cts      [Mombot strip] - Strips planets of resources and places them on starting planet."
	Write "z-options.cfg" "#"	
	Write "z-options.cfg" "#"	
	Write "z-options.cfg" "# Add as many script entries above as needed..."
	Write "z-options.cfg" "# Case is significant with script entries."
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# Available Script Categories"
	Write "z-options.cfg" "# ----------------------------"
	Write "z-options.cfg" "# COMBAT CASH RESOURCE DATA GRID UTILITY"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# Special Script Categories"
	Write "z-options.cfg" "# --------------------------"
	Write "z-options.cfg" "# DAEMON - A script that runs in the background and may have sub-commands."
	Write "z-options.cfg" "#          Z-Bot does NOT automatically stand down when a daemon script is loaded."
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# KEY ASSIGNMENTS"
	Write "z-options.cfg" "# ----------------"
	Write "z-options.cfg" "MENUKEY: TAB"
	Write "z-options.cfg" "DOUBLETAPKEY: >"
	Write "z-options.cfg" "CHARGEKEY: ]"
	Write "z-options.cfg" "MOWKEY: {"
	Write "z-options.cfg" "SELFBOTKEY: ."
	Write "z-options.cfg" "TRANSWARPKEY: ["
	Write "z-options.cfg" "BOTONOFFKEY: CTRL-Z"
	Write "z-options.cfg" "HOOKTOWKEY: J"
	Write "z-options.cfg" "TOPOFFKEY: T"
	Write "z-options.cfg" "XFERKEY: X"
	Write "z-options.cfg" "BANNERKEY: B"
	Write "z-options.cfg" "CITMENUKEY: -"
	Write "z-options.cfg" "BLINDWARPKEY: }"
	Write "z-options.cfg" "DISRUPTKEY: D"
	Write "z-options.cfg" "SAFETYNETKEY: S"
	Write "z-options.cfg" "HOTMENUKEY: K"
	Write "z-options.cfg" "INFOKEY: G"
	Write "z-options.cfg" "PROBEKEY: E"
	Write "z-options.cfg" "ZTMKEY: O"
	Write "z-options.cfg" "ATTACKKEY: A"
	Write "z-options.cfg" "FUELKEY: F"
	Write "z-options.cfg" "CAPKEY: C"
	Write "z-options.cfg" "MATRIXKEY: V"
	Write "z-options.cfg" "HOOKMANKEY: W"
	Write "z-options.cfg" "STOPALLKEY: L"
	Write "z-options.cfg" "FASTXFERKEY: ,"
	Write "z-options.cfg" "SETPLANETKEY: P"
	If ($p = TRUE)
		Write "z-options.cfg" "REFIGKEY: R"
		Write "z-options.cfg" "HUNTKEY: N"
	End
	Write "z-options.cfg" "AUTOKEY: U"
	Write "z-options.cfg" "HOTLISTKEY: H"
	Write "z-options.cfg" "LASTBOTKEY: ("
	Write "z-options.cfg" "PANELKEY: I"
	Write "z-options.cfg" "WATCHKEY: Z"
	Write "z-options.cfg" "LOOPKEY: M"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# USER DEFINED HOTKEYS"
	Write "z-options.cfg" "#----------------------"
	Write "z-options.cfg" "#      Key          Type    Command/Script                 Description"
	Write "z-options.cfg" "#-----------------------------------------------------------------------"
	Write "z-options.cfg" "HOTKEY: Q           INTERNAL qss                            QSS"
	Write "z-options.cfg" "HOTKEY: Y           EXTERNAL scripts\z-backdoor.cts         Backdoor"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# Add your own HOTKEYS above as preferred."
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# SOME AVAILABLE KEYS ARE:"
	Write "z-options.cfg" "# -------------------------"
	Write "z-options.cfg" "# []{}-_+>()&^%#@!~`,;:|" & #34 & #42
	Write "z-options.cfg" "# CTRL-A thru CTRL-Z SHIFT-A thru SHIFT-Z"
	Write "z-options.cfg" "# TAB BACKSPACE UPARROW DOWNARROW LEFTARROW RIGHTARROW DOT"
	Write "z-options.cfg" "# Note that some of these keys may be in use by TradeWars or Swath."
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# BANNERS - Add more  BANNER:  entries to have more banners."
	Write "z-options.cfg" "#-----------------------------------------------------------"
	Write "z-options.cfg" "BANNER: z-banner.txt"
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# MACROS for the CHARGE, MOW, TWARP and BLINDWARP Functions"
	Write "z-options.cfg" "#-----------------------------------------------------------"
	Write "z-options.cfg" "# Use " & #42 & " for the ENTER key."
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "WAVECAP: q q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " a t y n q z <WAVE> n y " & #42 & "qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn"
	Write "z-options.cfg" "CAPTURE: q q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " zn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn ay1" & #42 & " qzn "
	Write "z-options.cfg" "KILL: q q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " a t y n q z <WAVE> n y " & #42 & " a t n y q z <WAVE> n y " & #42 
	Write "z-options.cfg" "MACRO: q q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " sz h* sd" & #42
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "# ATTACK HOTKEY Macro"
	Write "z-options.cfg" "#---------------------"
	Write "z-options.cfg" "ATTACK: q q q q z 0" & #42 & " q z 0" & #42 & " q z 0" & #42 & " a t y n q z <WAVE> n y " & #42 & " a t n y q z <WAVE> n y " & #42 
	Write "z-options.cfg" "#"
	Write "z-options.cfg" "#"
	Goto :PROCESSOPTIONSFILE
End
Return
# CHECKKEYS
:CHECKKEYS
UpperCase $tempkey
SetVar $tempkeyd $tempkey
SetVar $tempkeyof $tempkey
If ($tempkey = "TAB")
	SetVar $tempkey #9
ElseIf ($tempkey = "BACKSPACE")
	SetVar $tempkey #8
ElseIf ($tempkey = "CTRL-A")
	SetVar $tempkey #1
ElseIf ($tempkey = "CTRL-B")
	SetVar $tempkey #2
ElseIf ($tempkey = "CTRL-C")
	SetVar $tempkey #3
ElseIf ($tempkey = "CTRL-D")
	SetVar $tempkey #4
ElseIf ($tempkey = "CTRL-E")
	SetVar $tempkey #5
ElseIf ($tempkey = "CTRL-F")
	SetVar $tempkey #6
ElseIf ($tempkey = "CTRL-G")
	SetVar $tempkey #7
ElseIf ($tempkey = "CTRL-H")
	SetVar $tempkey #8
ElseIf ($tempkey = "CTRL-I")
	SetVar $tempkey #9
ElseIf ($tempkey = "CTRL-J")
	SetVar $tempkey #10
ElseIf ($tempkey = "CTRL-K")
	SetVar $tempkey #11
ElseIf ($tempkey = "CTRL-L")
	SetVar $tempkey #12
ElseIf ($tempkey = "CTRL-M")
	SetVar $tempkey #13
ElseIf ($tempkey = "CTRL-N")
	SetVar $tempkey #14
ElseIf ($tempkey = "CTRL-O")
	SetVar $tempkey #15
ElseIf ($tempkey = "CTRL-P")
	SetVar $tempkey #16
ElseIf ($tempkey = "CTRL-Q")
	SetVar $tempkey #17
ElseIf ($tempkey = "CTRL-R")
	SetVar $tempkey #18
ElseIf ($tempkey = "CTRL-S")
	SetVar $tempkey #19
ElseIf ($tempkey = "CTRL-T")
	SetVar $tempkey #20
ElseIf ($tempkey = "CTRL-U")
	SetVar $tempkey #21
ElseIf ($tempkey = "CTRL-V")
	SetVar $tempkey #22
ElseIf ($tempkey = "CTRL-W")
	SetVar $tempkey #23
ElseIf ($tempkey = "CTRL-X")
	SetVar $tempkey #24
ElseIf ($tempkey = "CTRL-Y")
	SetVar $tempkey #25
ElseIf ($tempkey = "CTRL-Z")
	SetVar $tempkey #26
ElseIf ($tempkey = "SHFT-A")
	SetVar $tempkey "A"
ElseIf ($tempkey = "SHFT-B")
	SetVar $tempkey "B"
ElseIf ($tempkey = "SHFT-C")
	SetVar $tempkey "C"
ElseIf ($tempkey = "SHFT-D")
	SetVar $tempkey "D"
ElseIf ($tempkey = "SHFT-E")
	SetVar $tempkey "E"
ElseIf ($tempkey = "SHFT-F")
	SetVar $tempkey "F"
ElseIf ($tempkey = "SHFT-G")
	SetVar $tempkey "G"
ElseIf ($tempkey = "SHFT-H")
	SetVar $tempkey "H"
ElseIf ($tempkey = "SHFT-I")
	SetVar $tempkey "I"
ElseIf ($tempkey = "SHFT-J")
	SetVar $tempkey "J"
ElseIf ($tempkey = "SHFT-K")
	SetVar $tempkey "K"
ElseIf ($tempkey = "SHFT-L")
	SetVar $tempkey "L"
ElseIf ($tempkey = "SHFT-M")
	SetVar $tempkey "M"
ElseIf ($tempkey = "SHFT-N")
	SetVar $tempkey "N"
ElseIf ($tempkey = "SHFT-O")
	SetVar $tempkey "O"
ElseIf ($tempkey = "SHFT-P")
	SetVar $tempkey "P"
ElseIf ($tempkey = "SHFT-Q")
	SetVar $tempkey "Q"
ElseIf ($tempkey = "SHFT-R")
	SetVar $tempkey "R"
ElseIf ($tempkey = "SHFT-S")
	SetVar $tempkey "S"
ElseIf ($tempkey = "SHFT-T")
	SetVar $tempkey "T"
ElseIf ($tempkey = "SHFT-U")
	SetVar $tempkey "U"
ElseIf ($tempkey = "SHFT-V")
	SetVar $tempkey "V"
ElseIf ($tempkey = "SHFT-W")
	SetVar $tempkey "W"
ElseIf ($tempkey = "SHFT-X")
	SetVar $tempkey "X"
ElseIf ($tempkey = "SHFT-Y")
	SetVar $tempkey "Y"
ElseIf ($tempkey = "SHFT-Z")
	SetVar $tempkey "Z"
ElseIf ($tempkey = "A")
	SetVar $tempkeyd "SHFT-A"
ElseIf ($tempkey = "B")
	SetVar $tempkeyd "SHFT-B"
ElseIf ($tempkey = "C")
	SetVar $tempkeyd "SHFT-C"
ElseIf ($tempkey = "D")
	SetVar $tempkeyd "SHFT-D"
ElseIf ($tempkey = "E")
	SetVar $tempkeyd "SHFT-E"
ElseIf ($tempkey = "F")
	SetVar $tempkeyd "SHFT-F"
ElseIf ($tempkey = "G")
	SetVar $tempkeyd "SHFT-G"
ElseIf ($tempkey = "H")
	SetVar $tempkeyd "SHFT-H"
ElseIf ($tempkey = "I")
	SetVar $tempkeyd "SHFT-I"
ElseIf ($tempkey = "J")
	SetVar $tempkeyd "SHFT-J"
ElseIf ($tempkey = "K")
	SetVar $tempkeyd "SHFT-K"
ElseIf ($tempkey = "L")
	SetVar $tempkeyd "SHFT-L"
ElseIf ($tempkey = "M")
	SetVar $tempkeyd "SHFT-M"
ElseIf ($tempkey = "N")
	SetVar $tempkeyd "SHFT-N"
ElseIf ($tempkey = "O")
	SetVar $tempkeyd "SHFT-O"
ElseIf ($tempkey = "P")
	SetVar $tempkeyd "SHFT-P"
ElseIf ($tempkey = "Q")
	SetVar $tempkeyd "SHFT-Q"
ElseIf ($tempkey = "R")
	SetVar $tempkeyd "SHFT-R"
ElseIf ($tempkey = "S")
	SetVar $tempkeyd "SHFT-S"
ElseIf ($tempkey = "T")
	SetVar $tempkeyd "SHFT-T"
ElseIf ($tempkey = "U")
	SetVar $tempkeyd "SHFT-U"
ElseIf ($tempkey = "V")
	SetVar $tempkeyd "SHFT-V"
ElseIf ($tempkey = "W")
	SetVar $tempkeyd "SHFT-W"
ElseIf ($tempkey = "X")
	SetVar $tempkeyd "SHFT-X"
ElseIf ($tempkey = "Y")
	SetVar $tempkeyd "SHFT-Y"
ElseIf ($tempkey = "Z")
	SetVar $tempkeyd "SHFT-Z"
ElseIf ($tempkey = "UPARROW")
	SetVar $tempkey ""&#79&#65
	SetVar $tempkeyd "UARROW"
	
ElseIf ($tempkey = "DOWNARROW")
	SetVar $tempkey ""&#79&#66
	SetVar $tempkeyd "DARROW"

ElseIf ($tempkey = "RIGHTARROW")
	SetVar $tempkey ""&#79&#67
	SetVar $tempkeyd "RARROW"

ElseIf ($tempkey = "LEFTARROW")
	SetVar $tempkey ""&#79&#68
	SetVar $tempkeyd "LARROW"
	
ElseIf ($tempkey = "UPARROW2")
	SetVar $tempkey ""&#91&#65
	SetVar $tempkeyd "UPARRW"
ElseIf ($tempkey = "DOWNARROW2")
	SetVar $tempkey ""&#91&#66
	SetVar $tempkeyd "DNARRW"
ElseIf ($tempkey = "RIGHTARROW2")
	SetVar $tempkey ""&#91&#67
	SetVar $tempkeyd "RTARRW"
ElseIf ($tempkey = "LEFTARROW2")
	SetVar $tempkey ""&#91&#68
	SetVar $tempkeyd "LTARRW"
ElseIf ($tempkey = "DOT")
	SetVar $tempkey "."
	SetVar $tempkeyd "."
End
If ($tempkey = ".")
	SetVar  $tempkeycd "   .  "
Else
	SetVar $Z_Strings~string $tempkeyd
	SetVar $Z_Strings~width 6
	Gosub :Z_Strings~CENTRE
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 6
	SetVar $Z_Strings~unpadded $Z_Strings~centre
	SetVar $Z_Strings~rpad TRUE
	Gosub :Z_Strings~PAD
	SetVar  $tempkeycd $Z_Strings~padded
	End
Return
# CONFIGURATOR 
:CONFIGURATOR
KillAllTriggers
SetVar $flashconfig TRUE
SetVar $x 1
While ($x <= $externalcommands)
	SetVar $removecommand[$x] FALSE
	SetVar $x ($x + 1)
End
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
If ($needreset = TRUE)
	Echo "*" & $boldred & "                       <<<=-[ " & $boldwhite & "Z-Bot Configurator" & $boldred & " ]-=>>> " & $boldcyan & #42
Else
	Echo "*" & $boldred & "                       <<<=-[ " & $boldwhite & "Z-Bot Configurator" & $boldred & " ]-=>>>"
End
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-Options.cfg    " & ANSI_2 & "- Main Z-Bot Config file"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-Globals.cfg    " & ANSI_7 & "- Z-Login Game Start Config"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "3" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-Filelist.cfg   " & ANSI_7 & "- File Transfer Authorisations"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "4" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-SectorList.cfg " & ANSI_7 & "- Selectable File Names"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "5" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-Unload.cfg     " & ANSI_7 & "- Scripts Exempt from Z-Unload"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "6" & ANSI_12 & "]=- " & ANSI_11 & "Edit Z-Mottos.cfg     " & ANSI_7 & "- Z-Bot Mottos and Catch Phrases"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "7" & ANSI_12 & "]=- " & ANSI_11 & "Edit Standalone Menus " & ANSI_2 & "- The Double-Tap Menu System"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Bot Options."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	Gosub :CONFIG_OPTIONS
ElseIf ($choice = "2")
	Gosub :CONFIG_GLOBALS
ElseIf ($choice = "3")
	Gosub :CONFIG_FILELIST
ElseIf ($choice = "4")
	Gosub :CONFIG_SECTORLIST
ElseIf ($choice = "5")
	Gosub :CONFIG_UNLOAD
ElseIf ($choice = "6")
	Gosub :CONFIG_MOTTOS
ElseIf ($choice = "7")
	Gosub :CONFIG_MENUS
ElseIf ($choice = #13)
	Goto :NOCONFIGURATOR
End
Goto :CONFIGURATOR
:CONFIG_OPTIONS
SetVar $edited FALSE
:CONFIG_OPTIONS2
If ($sortatstart = TRUE)
	SetVar $sortatstartd $boldgreen & "ON"
Else
	SetVar $sortatstartd $boldwhite & "OFF"
End
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
If ($edited = TRUE)
	Echo "*" & $boldred & "                  <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options" & $boldred & " ]-=>>> " & $boldcyan & #42
Else
	Echo "*" & $boldred & "                  <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options" & $boldred & " ]-=>>>"
End
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Bot Name        : " & ANSI_10 & $z_botname
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Fig Monitor     : " & ANSI_15 & $figmonitor
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "3" & ANSI_12 & "]=- " & ANSI_11 & "Auto Sort Help  : " & ANSI_15 & $sortatstartd
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "4" & ANSI_12 & "]=- " & ANSI_11 & "Show Hotkeys    : " & ANSI_15 & $showhotkeys
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "5" & ANSI_12 & "]=- " & ANSI_11 & "Announce Mottos : " & ANSI_15 & $announcemottos
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "6" & ANSI_12 & "]=- " & ANSI_10 & "Edit External Script Entries"
#Echo "*" & ANSI_12 & "-=[" & ANSI_14 & " " & ANSI_12 & "]=- " & ANSI_8 & "Edit Key Assignments (Not Yet Implemented)"
#Echo "*" & ANSI_12 & "-=[" & ANSI_14 & " " & ANSI_12 & "]=- " & ANSI_8 & "Edit User Defined Hotkeys  (Not Yet Implemented)"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "7" & ANSI_12 & "]=- " & ANSI_10 & "Edit Banner File Entries"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "8" & ANSI_12 & "]=- " & ANSI_10 & "Edit Movement and Attack Macro Entries"
Gosub :Z_Lib~REDLINE
If ($edited = FALSE)
	Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "M" & ANSI_12 & "]=- " & ANSI_7 & "Mark as Edited (recreates Z-Options.cfg)"
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_14 & "NOTE:" & ANSI_12 & " Z-Bot will RESET after any changes to the z-options.cfg file."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	If ($p = TRUE)
		Echo "**"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldred & $blinkon & "AUTHORISATION will HALT!" & $blinkoff
		Echo "*" & $boldyellow & "You will need to re-run AUTHORISE after a Botname change."
	End
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Enter your new BOT name (3-4 chars).*"
	GetConsoleInput $value
	LowerCase $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		GetLength $value $len
		If ($len > 1) and ($len < 6)
			PROCESSIN 1 "[Z]!BOTNAME![Z]"
			SetVar $z_botname $value
			SaveVar $z_botname
			SetVar $bot_name $z_botname
			SaveVar $bot_name
			Delete GAMENAME & ".stbot"
			Write GAMENAME  & ".stbot" $z_botname
			SetVar $edited TRUE
			SetVar $needreset TRUE
			Echo "**" & $boldwhite & "New Botname is Set to " & $z_botname & ".*"
			If ($p = TRUE)
				SetVar $p FALSE
				StripText $version "+"
				SetVar $Z_Lib~Version $version
				GoSub :Z_Lib~INITLIB
				SetVar $z_Lib~license ""
				Echo "**" & $boldred & $blinkon & "AUTHORISATION HALTED! Security set to PUBLIC.*" & $blinkoff
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "2")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Fig Monitor Script Filename."
	Echo "*" & $boldwhite & "Do NOT begin with  scripts\  as this will be added"
	Echo "*" & $boldwhite & "automatically. Please include the extension. (.cts or .ts)"
	Echo "*" & $boldwhite & "Current setting is: " & $figmonitor
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Enter the filename for the Fig Monitor script.*"
	GetConsoleInput $value
	LowerCase $value
	If ($value <> "") and ($value <> #13)
		FileExists $fileexists "scripts\" & $value
		If ($fileexists = TRUE)
			SetVar $figmonitor "scripts\" & $value
			SetVar $edited TRUE
			SetVar $needreset TRUE
		Else
			Echo "**" & $boldred & "File does NOT exist - " & $boldyellow & "scripts\" & $value
			Gosub :Z_Lib~ANYKEY
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "3")
	If ($sortatstart = TRUE)
		SetVar $sortatstart FALSE
	Else
		SetVar $sortatstart TRUE
	End
	SetVar $edited TRUE
	SetVar $needreset TRUE
ElseIf ($choice = "4")
	If ($showhotkeys = TRUE)
		SetVar $showhotkeys FALSE
	Else
		SetVar $showhotkeys TRUE
	End
	SetVar $edited TRUE
	SetVar $needreset TRUE
ElseIf ($choice = "5")
	If ($announcemottos = "ON")
		SetVar $announcemottos "OFF"
	Else
		SetVar $announcemottos "ON"
	End
	SetVar $edited TRUE
	SetVar $needreset TRUE
ElseIf ($choice = "6")
	Gosub :CONFIG_OPTIONS_SCRIPTS
#lseIf ($choice = "7")
#	Gosub :CONFIG_OPTIONS_KEYS
#lseIf ($choice = "8")
#	Gosub :CONFIG_OPTIONS_HOTKEYS
ElseIf ($choice = "7")
	Gosub :CONFIG_OPTIONS_BANNERS
ElseIf ($choice = "8")
	Gosub :CONFIG_OPTIONS_MACROS
ElseIf ($choice = "M")
	SetVar $edited TRUE
ElseIf ($choice = #13)
	Goto :NOCONFIGOPTIONS
End
Goto :CONFIG_OPTIONS2
:NOCONFIGOPTIONS
If ($edited = TRUE)
	Gosub :SAVEOPTIONSFILE
	SetVar $edited FALSE
End
Return
:SAVEOPTIONSFILE
FileExists $fileexists "Z-Options.cfg"
If ($fileexists = TRUE)
	GetTime $timestamp "yyyymmddhhnnss"
	Delete "Z-Options-backup-" & $timestamp & ".cfg"
	Rename "Z-Options.cfg" "Z-Options-backup-" & $timestamp & ".cfg"
	Echo "**" & $boldwhite & "Z-Options.cfg backed up to Z-Options-backup-" & $timestamp & ".cfg"
End
Delete "Z-Options.cfg"
Write "Z-Options.cfg" "# " & $scripttitle & " Options File."
Write "Z-Options.cfg" "# -------------------------------"
Write "Z-Options.cfg" "BOTNAME: " & $z_botname
Write "Z-Options.cfg" "FIGMONITOR: " & $figmonitor
Write "Z-Options.cfg" "#"
If ($sortatstart = TRUE)
	Write "Z-Options.cfg" "SORTHELP: ON"
Else
	Write "Z-Options.cfg" "SORTHELP: OFF"
End
Write "Z-Options.cfg" "ANNOUNCEMOTTOS: " & $announcemottos
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# EXTERNAL BOT SCRIPTS"
Write "Z-Options.cfg" "# ---------------------"
Write "Z-Options.cfg" "# KEY    CATEGORY    BOTCOMMAND      SCRIPTFILE                      [DESCRIPTION] (optional)"
Write "Z-Options.cfg" "# ------------------------------------------------------------------------------------------------------------"
SetVar $maxfilelen 0
SetVar $x 1
While ($x <= $externalcommands)
	GetLength $externalfile[$x] $len
	If ($len > $maxfilelen)
		SetVar $maxfilelen $len
	End
	SetVar $x ($x + 1)
End
SetVar $x 1
While ($x <= $externalcommands)
	If ($removecommand[$x] <> TRUE)
		SetVar $line "SCRIPT:  "
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 11
		SetVar $Z_Strings~unpadded $externalmode[$x]
		SetVar $Z_Strings~rpad TRUE
		GoSub :Z_Strings~PAD
		SetVar $line ($line & $Z_Strings~padded & " ")
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 15
		SetVar $Z_Strings~unpadded $externalcommand[$x]
		SetVar $Z_Strings~rpad TRUE
		GoSub :Z_Strings~PAD
		SetVar $line ($line & $Z_Strings~padded & " ")
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen ($maxfilelen + 1)
		SetVar $Z_Strings~unpadded $externalfile[$x]
		SetVar $Z_Strings~rpad TRUE
		GoSub :Z_Strings~PAD
		SetVar $line ($line & $Z_Strings~padded & " ")
		SetVar $line ($line & "[" & $externaldesc[$x] & "]")
		Write "Z-Options.cfg" $line
	Else
		SetVar $removecommand[$x] FALSE
	End
	SetVar $x ($x + 1)
End
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# Add as many script entries above as needed..."
Write "Z-Options.cfg" "# Case is significant with script entries."
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# Available Script Categories"
Write "Z-Options.cfg" "# ----------------------------"
Write "Z-Options.cfg" "# COMBAT CASH RESOURCE DATA GRID UTILITY"
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# Special Script Categories"
Write "Z-Options.cfg" "# --------------------------"
Write "Z-Options.cfg" "# DAEMON - A script that runs in the background and may have sub-commands."
Write "Z-Options.cfg" "#          Z-Bot does NOT automatically stand down when a daemon script is loaded."
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# KEY ASSIGNMENTS"
Write "Z-Options.cfg" "# ----------------"
Write "Z-Options.cfg" "MENUKEY: " & $z_menukeyof
Write "Z-Options.cfg" "DOUBLETAPKEY: " & $z_actkeyof
Write "Z-Options.cfg" "CHARGEKEY: " & $z_chargekeyof
Write "Z-Options.cfg" "MOWKEY: " & $z_mowkeyof
Write "Z-Options.cfg" "SELFBOTKEY: " & $z_selfbotkeyof
Write "Z-Options.cfg" "TRANSWARPKEY: " & $z_transwarpkeyof
Write "Z-Options.cfg" "BOTONOFFKEY: " & $z_botonoffkeyof
Write "Z-Options.cfg" "HOOKTOWKEY: " & $z_hooktowkeyof
Write "Z-Options.cfg" "TOPOFFKEY: " & $z_topoffkeyof
Write "Z-Options.cfg" "XFERKEY: " & $z_xferkeyof
Write "Z-Options.cfg" "BANNERKEY: " & $z_bannerkeyof
Write "Z-Options.cfg" "CITMENUKEY: " & $z_citmenukeyof
Write "Z-Options.cfg" "BLINDWARPKEY: " & $z_blindwarpkeyof
Write "Z-Options.cfg" "DISRUPTKEY: " & $z_disrkeyof
Write "Z-Options.cfg" "SAFETYNETKEY: " & $z_safetynetkeyof
Write "Z-Options.cfg" "HOTMENUKEY: " & $z_hotmenukeyof
Write "Z-Options.cfg" "INFOKEY: " & $z_infokeyof
Write "Z-Options.cfg" "PROBEKEY: " & $z_probekeyof
Write "Z-Options.cfg" "ZTMKEY: " & $z_ztmkeyof
Write "Z-Options.cfg" "ATTACKKEY: " & $z_attackkeyof
Write "Z-Options.cfg" "FUELKEY: " & $z_fuelkeyof
Write "Z-Options.cfg" "CAPKEY: " & $z_capkeyof
Write "Z-Options.cfg" "MATRIXKEY: " & $z_matrixkeyof
Write "Z-Options.cfg" "HOOKMANKEY: " & $z_hookmankeyof
Write "Z-Options.cfg" "STOPALLKEY: " & $z_stopallkeyof
Write "Z-Options.cfg" "AUTOKEY: " & $z_autokeyof
Write "Z-Options.cfg" "HOTLISTKEY: " & $z_hotlistkeyof
Write "Z-Options.cfg" "LASTBOTKEY: " & $z_lastbotkeyof
Write "Z-Options.cfg" "PANELKEY: " & $z_panelkeyof
Write "Z-Options.cfg" "WATCHKEY: " & $z_watchkeyof
Write "Z-Options.cfg" "FASTXFERKEY: " & $z_fastrefillkeyof
Write "Z-Options.cfg" "SETPLANETKEY: " & $z_setplanetkeyof
Write "Z-Options.cfg" "LOOPKEY: " & $z_loopkeyof
If ($p = TRUE) or ($z_huntkeyof <> "0") or ($z_refigkeyof <> "0")
	Write "Z-Options.cfg" "HUNTKEY: " & $z_huntkeyof
	Write "Z-Options.cfg" "REFIGKEY: " & $z_refigkeyof
End
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# USER DEFINED HOTKEYS"
Write "Z-Options.cfg" "#----------------------"
Write "Z-Options.cfg" "#      Key          Type    Command/Script                 Description"
Write "Z-Options.cfg" "#-----------------------------------------------------------------------"
SetVar $x 1
SetVar $maxfilelen 0
While ($x <= $hotkeys)
	GetLength $hotkeycommand[$x] $len
	If ($len > $maxfilelen)
		SetVar $maxfilelen $len
	End
	SetVar $x ($x + 1)
End
SetVar $x 1
While ($x <= $hotkeys)
	SetVar $line "HOTKEY: "
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 11
	SetVar $Z_Strings~unpadded $hotkeyof[$x]
	SetVar $Z_Strings~rpad TRUE
	GoSub :Z_Strings~PAD
	SetVar $line ($line & $Z_Strings~padded & " ")
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen 9
	SetVar $Z_Strings~unpadded $hotkeytype[$x]
	SetVar $Z_Strings~rpad TRUE
	GoSub :Z_Strings~PAD
	SetVar $line ($line & $Z_Strings~padded & " ")
	SetVar $Z_Strings~padchar " "
	SetVar $Z_Strings~padlen ($maxfilelen + 1)
	SetVar $Z_Strings~unpadded $hotkeycommand[$x]
	SetVar $Z_Strings~rpad TRUE
	GoSub :Z_Strings~PAD
	SetVar $line ($line & $Z_Strings~padded & " ")
	SetVar $line ($line & $hotkeydesc[$x])
	Write "Z-Options.cfg" $line
	SetVar $x ($x + 1)
End
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# Add your own HOTKEYS above as preferred."
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# SOME AVAILABLE KEYS ARE:"
Write "Z-Options.cfg" "# -------------------------"
Write "Z-Options.cfg" "# []{}-_+>()&^%#@!~`,;:|" & #34 & #42
Write "Z-Options.cfg" "# CTRL-A thru CTRL-Z SHIFT-A thru SHIFT-Z"
Write "Z-Options.cfg" "# TAB BACKSPACE UPARROW DOWNARROW LEFTARROW RIGHTARROW DOT"
Write "Z-Options.cfg" "# Note that some of these keys may be in use by TradeWars or Swath."
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# BANNERS - Add more  BANNER:  entries to have more banners."
Write "Z-Options.cfg" "#-----------------------------------------------------------"
SetVar $x 1
While ($x <= $banners)
	Write "Z-Options.cfg" "BANNER: " & $bannerfile[$x]
	SetVar $x ($x + 1)
End
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# MACROS for the CHARGE, MOW, TWARP and BLINDWARP Functions"
Write "Z-Options.cfg" "#-----------------------------------------------------------"
Write "Z-Options.cfg" "# Use " & #42 & " for the ENTER key."
Write "Z-Options.cfg" "#"
ReplaceText $do_wavecap "*" #42
Write "Z-Options.cfg" "WAVECAP: " & $do_wavecap
ReplaceText $do_capture "*" #42	
Write "Z-Options.cfg" "CAPTURE: " & $do_capture
ReplaceText $do_kill "*" #42
Write "Z-Options.cfg" "KILL: " & $do_kill
ReplaceText $do_macro "*" #42
Write "Z-Options.cfg" "MACRO: " & $do_macro
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "# ATTACK HOTKEY Macro"
Write "Z-Options.cfg" "#---------------------"
ReplaceText $do_attack "*" #42
Write "Z-Options.cfg" "ATTACK: " & $do_attack
Write "Z-Options.cfg" "#"
Write "Z-Options.cfg" "#"
Echo "*" & $boldgreen & "Z-Options.cfg recreated.**"
Return
:CONFIG_GLOBALS
SetVar $configglobaledited FALSE
Fileexists $fileexist "z-globals.cfg"
SetVar $globalfile "z-globals.cfg"
If ($fileexist = TRUE)
	ReadToArray $globalfile $globals
	SetArray $configautoload 0
	SetVar $count "1"
	SetVar $loadpointer "0"
	While ($count <= $globals)
		GetWordPos $globals[$count] $pos "ALIAS:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 7)
				CutText $globals[$count] $configalias 7 999
			End
		End
		GetWordPos $globals[$count] $pos "SHIPNAME:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 10)
				CutText $globals[$count] $configshipname 10 999
			End
		End
		GetWordPos $globals[$count] $pos "PLANETNAME:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 12)
				CutText $globals[$count] $configplanetname 12 999
			End
		End
		GetWordPos $globals[$count] $pos "CORPNAME:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 10)
				CutText $globals[$count] $configcorpname 10 999
			End
		End
		GetWordPos $globals[$count] $pos "CORPPW:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 8)
				CutText $globals[$count] $configcorppw 8 999
			End
		End
		GetWordPos $globals[$count] $pos "SSCHANNEL:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 11)
				CutText $globals[$count] $configsschannel 11 999
				Isnumber $isnum $configsschannel
				If ($isnum = TRUE)
					If ($configsschannel < "-1") or ($configsschannel > 60000)
						SetVar $configsschannel "0"
					End
				Else
					SetVar $configsschannel "0"
				End
			End
		End
		GetWordPos $globals[$count] $pos "AUTOLOAD:"
		If ($pos > 0)
			GetLength $globals[$count] $len
			If ($len >= 10)
				CutText $globals[$count] $configload 10 999
				SetVar $loadpointer ($loadpointer + 1)
				SetVar $configautoload[$loadpointer] $configload 
			End
		End
		SetVar $count ($count + 1)
	End
End
:CONFIG_GLOBALS2
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
If ($configglobaledited = TRUE)
	Echo "*" & $boldred & "                  <<<=-[ " & $boldwhite & "Z-Bot Configurator - Globals" & $boldred & " ]-=>>> " & $boldcyan & #42
Else
	Echo "*" & $boldred & "                  <<<=-[ " & $boldwhite & "Z-Bot Configurator - Globals" & $boldred & " ]-=>>>"
End
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "A" & ANSI_12 & "]=- " & ANSI_11 & "Alias            : " & ANSI_15 & $configalias
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "S" & ANSI_12 & "]=- " & ANSI_11 & "Ship Name        : " & ANSI_15 & $configshipname
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "P" & ANSI_12 & "]=- " & ANSI_11 & "Planet Name      : " & ANSI_15 & $configplanetname
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "C" & ANSI_12 & "]=- " & ANSI_11 & "Corp Name        : " & ANSI_15 & $configcorpname
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "W" & ANSI_12 & "]=- " & ANSI_11 & "Corp Password    : " & ANSI_15 & $configcorppw
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "U" & ANSI_12 & "]=- " & ANSI_11 & "SubSpace Channel : " & ANSI_15 & $configsschannel
Gosub :Z_Lib~REDLINE
Echo "*" & $boldmagenta & " NOTE: The above settings are only used when starting a NEW game."
Gosub :Z_Lib~REDLINE
SetVar $x 1
While ($x <= $loadpointer) and ($x <= 9)
	Echo "*" & ANSI_12 & "-=[" & ANSI_14 & $x & ANSI_12 & "]=- " & ANSI_11 & "Remove Autoload: " & ANSI_14 & $configautoload[$x]
	SetVar $x ($x + 1)
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "L" & ANSI_12 & "]=- " & ANSI_10 & "Add Autoload Entry"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
IsNumber $isanum $choice
If ($choice = "A")
	Echo "*" & $boldwhite & "Enter your ALIAS (or -- for none): "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		If ($value = "--")
			SetVar $configalias ""
		Else
			SetVar $configalias $value
			SetVar $configglobaledited TRUE
		End
	End
ElseIf ($choice = "S")
	Echo "*" & $boldwhite & "Enter your SHIP NAME: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $configshipname $value
		SetVar $configglobaledited TRUE
	End
ElseIf ($choice = "P")
	Echo "*" & $boldwhite & "Enter your PLANET NAME: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $configplanetname $value
		SetVar $configglobaledited TRUE
	End
ElseIf ($choice = "C")
	Echo "*" & $boldwhite & "Enter your CORP NAME: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $configcorpname $value
		SetVar $configglobaledited TRUE
	End
ElseIf ($choice = "W")
	Echo "*" & $boldwhite & "Enter the CORP PASSWORD: "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $configcorppw $value
		SetVar $configglobaledited TRUE
	End
ElseIf ($choice = "U")
	Echo "*" & $boldwhite & "Enter the SUBSPACE CHANNEL (1 - 60000): "
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If ($value > 0) and ($value <= 60000)
				SetVar $configsschannel $value
				SetVar $configglobaledited TRUE
			End
		End
	End
ElseIf ($choice = "L") and ($loadpointer <= 9)
	Echo "*" & $boldwhite & "Enter the FILENAME for the script to AUTOLOAD:*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $loadpointer ($loadpointer + 1)
		SetVar $configautoload[$loadpointer] $value
		SetVar $configglobaledited TRUE
	End
ElseIf ($isanum = TRUE)
	If ($choice > 0) and ($choice <= $loadpointer)
		Echo "**" & $boldwhite & "AUTOLOAD:" & $configautoload[$choice]
		Echo "*" & $boldyellow & "Delete this entry? (y/N)"
		GetConsoleInput $value SINGLEKEY
		UpperCase $value
		If ($value = "Y")
			SetVar $x 1
			SetVar $z 0
			SetArray $temparray 0
			While ($x <= $loadpointer)
				If ($x <> $choice)
					SetVar $z ($z + 1)
					SetVar $temparray[$z] $configautoload[$x]
				End
				SetVar $x ($x + 1)
			End
			SetArray $configautoload 0
			SetVar $loadpointer $z
			SetVar $x 1
			While ($x <= $loadpointer)
				SetVar $configautoload[$x] $temparray[$x]
				SetVar $x ($x + 1)
			End
			SetVar $configglobaledited TRUE
			SetArray $temparray 0
		End
	End
ElseIf ($choice = #13)
	If ($configglobaledited = TRUE)
		Delete $globalfile
		Write $globalfile "ALIAS:" & $configalias
		Write $globalfile "SHIPNAME:" & $configshipname
		Write $globalfile "PLANETNAME:" & $configplanetname
		Write $globalfile "CORPNAME:" & $configcorpname
		Write $globalfile "CORPPW:" & $configcorppw
		Write $globalfile "SSCHANNEL:" & $configsschannel
		SetVar $x 1
		While ($x <= $loadpointer)
			Write $globalfile "AUTOLOAD:" & $configautoload[$x]
			SetVar $x ($x + 1)
		End
		SetVar $configglobaledited FALSE
		Echo "**" & $boldwhite & "Z-Globals.cfg updated.*"
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
	Goto :NOCONFIGGLOBAL
End
Goto :CONFIG_GLOBALS2
:NOCONFIGGLOBAL
Return
:CONFIG_MOTTOS
SetVar $filename "z-mottos.cfg"
FileExists $fileok $filename
If ($fileok <> TRUE)
	Echo "*" & $boldred & "Could not create/read z-mottos.cfg file.*"
Else
	SetArray $array 0
	SetArray $mottos 0
	ReadToArray $filename $array
	SetVar $x 1
	SetVar $z 0
	While ($x <= $array)
		If ($array[$x] <> "") and ($array[$x] <> "0")
			CutText $array[$x] $chk 1 1
			If ($chk <> "#")
				SetVar $z ($z + 1)
				SetVar $mottos[$z] $array[$x]
			End
		End
		SetVar $x ($x + 1)
	End
	SetVar $mottocount $z
	SetArray $array 0
End
:CONFIG_MOTTOS2
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "         <<<=-[ " & $boldwhite & "Z-Bot Configurator - Mottos and Catch Phrases" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($mottocount > 0)
	Echo "*" & $boldmagenta & "Existing Entries:"
	SetVar $x 1
	While ($x <= $mottocount)
		SetVar $Z_Strings~padchar " "
		SetVar $Z_Strings~padlen 3
		SetVar $Z_Strings~unpadded $x
		SetVar $Z_Strings~rpad TRUE
		Gosub :Z_Strings~PAD
		Echo  "* " & $yellow & $Z_Strings~padded & " - "
		Echo $green & $mottos[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add Motto"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove Motto"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Enter the New Motto (Max 60 chars):"
	SetVar $Z_Lib~repeat "9"
	SetVar $Z_Lib~char "-"
	Gosub :Z_Lib~STRINGREPEAT 
	Echo "*  " & $yellow & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "*"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $mottocount ($mottocount + 1)
		SetVar $mottos[$mottocount] $value
		Gosub :CONFIGSAVEMOTTOS
	End
ElseIf ($choice = "2")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Enter the Motto Number to remove (1 - " & $mottocount & "):"
	GetConsoleInput $value
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If ($value >= 1) and ($value <= $mottocount)
				Gosub :Z_Lib~REDLINE
				Echo "*" & $boldwhite & $value & " - " & $mottos[$value]
				Gosub :Z_Lib~REDLINE
				Echo "*" & $boldyellow & "Remove this motto? (y/N)"
				GetConsoleInput $choice2 SINGLEKEY
				LowerCase $choice2
				If ($choice2 = "y")
					SetVar $mottodeleted $value
					Gosub :CONFIGSAVEMOTTOS
				Else
					Echo "**" & $boldwhite & "No changes made.*"
				End
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = #13)
	Goto :NOCONFIGMOTTOS
End
Goto :CONFIG_MOTTOS2
:NOCONFIGMOTTOS
SetArray $array 0
SetArray $mottos 0
SetArray $motto2 0
Return
:CONFIGSAVEMOTTOS
Gosub :MOTTOHEADER
SetVar $x 1
SetVar $z 0
While ($x <= $mottocount)
	If ($x <> $mottodeleted)
		SetVar $z ($z + 1)
		CutText $mottos[$x]  $motto2[$z] 1 60
	End
	SetVar $x ($x + 1)
End
SetArray $mottos 0
SetVar $x 1
SetVar $mottocount $z
While ($x <= $mottocount)
	SetVar $mottos[$x] $motto2[$x]
	Write $filename $mottos[$x]
	SetVar $x ($x + 1)
End
SetArray $motto2 0
SetVar $mottodeleted 0
Echo "**" & $boldwhite & "Z-Mottos.cfg file updated.*"
Return
:MOTTOHEADER
Delete $filename
Write $filename "# Z-Bot Mottos File."
Write $filename "# -------------------"
Write $filename "# 1 motto (or catch phrase) per line (max around 60 characters)."
Write $filename "# Any non-blank line not starting with # is considered a motto."
Write $filename "# 1 motto will be chosen at random from this file at each bot reset."
Write $filename "# Delete all non-blank lines below to have no motto."
Write $filename "# ------------------------<- 60 ->--------------------------"
Return
:CONFIG_FILELIST
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	Gosub :CREATEFILELISTHEADER
End
FileExists $fileexists "z-filelist.cfg"
If ($fileexists <> TRUE)
	Goto :NOCONFIGFILELIST
End
ReadToArray "z-filelist.cfg" $filelist
SetVar $x 1
SetVar $z 0
SetArray $configfilelist 0
While ($x <= $filelist)
	GetLength $filelist[$x] $len
	If ($len > 0)
		CutText $filelist[$x] $ck 1 1
		If ($ck <> "#")
			GetWord $filelist[$x] $word 1
			If ($word <> "0")
				SetVar $z ($z + 1)
				SetVar $configfilelist[$z] $word
			End
		End
	End
	SetVar $x ($x + 1)
End
SetVar $words $z
:CONFIG_FILELIST2
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "       <<<=-[ " & $boldwhite & "Z-Bot Configurator - File Transfer Authorisations" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($filelist > 0)
	Echo "*" & $boldmagenta & "Existing Entries:"
	SetVar $x 1
	While ($x <= $words)
		Echo "*" & $green & $configfilelist[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add File to Authorised List"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove File from Authorised List"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator - Options Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1") or ($choice = "2")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	If ($choice = "1")
		Echo "*" & $boldyellow & "NOTE: Only text files starting with GAMENAME_"
		Echo "*" & $boldyellow & "can be sent. Do not include the GAMENAME_ or"
		Echo "*" & $boldyellow & "the .txt as this will be done automatically."
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldwhite & "Enter the filename to ADD to the list:"
	Else
		Echo "*" & $boldwhite & "Enter the filename to REMOVE from the list:"
	End
	Echo "*"
	GetConsoleInput $value
	LowerCase $value
	StripText $value " "
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $found 0
		SetVar $x 1
		While ($x <= $words)
			If ($value = $configfilelist[$x])
				SetVar $found $x
				SetVar $x $words
			End
			SetVar $x ($x + 1)
		End
		If ($choice = "1")
			If ($found <> "0")
				Echo "**" & $boldwhite & "File already authorised. No changes made.*"
			Else
				SetVar $words ($words + 1)
				SetVar $configfilelist[$words] $value
				SetVar $configfiledelete 0
				Gosub :CONFIGSAVEFILELIST
				Echo "**" & $boldwhite & "File authorised. Z-FileList.cfg updated.*"
			End
		Else
			If ($found <> "0")
				SetVar $configfiledelete $found
				Gosub :CONFIGSAVEFILELIST
				SetVar $configfiledelete 0
				Echo "**" & $boldwhite & "Entry Removed. Z-FileList.cfg updated.*"
				Goto :CONFIG_FILELIST
			Else
				Echo "**" & $boldwhite & "Entry not found. No changes made.*"
			End
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = #13)
	Goto :NOCONFIGFILELIST
End
Goto :CONFIG_FILELIST2
:CONFIGSAVEFILELIST
Delete "Z-FileList.cfg"
Gosub :CREATEFILELISTHEADER
SetVar $x 1
While ($x <= $words)
	If ($x <> $configfiledelete)
		Write "Z-FileList.cfg" $configfilelist[$x]
	End
	SetVar $x ($x + 1)
End
:NOCONFIGFILELIST
Return
:CONFIG_SECTORLIST
FileExists $cfgok "z-sectorlist.cfg"
SetVar $configedited FALSE
If ($cfgok = TRUE)
	ReadToArray "z-sectorlist.cfg" $configfile
	SetVar $sourcefilecount 0
	SetVar $outputfilecount 0
	SetVar $excludefilecount 0
	SetArray $sourcefiles 0
	SetArray $outputfiles 0
	SetArray $excludefiles 0
	SetVar $i 1
	While ($i <= $configfile)
		UpperCase $configfile[$i]
		GetWordPos $configfile[$i] $pos "SOURCE:"
		If ($pos > 0)
			SetVar $sourcefilecount ($sourcefilecount + 1)
			SetVar $temp $configfile[$i]
			SetVar $temp ($temp & "!!!")
			GetText $temp $sourcefiles[$sourcefilecount] "SOURCE:" "!!!"
			StripText $sourcefiles[$sourcefilecount] " "
		End
		GetWordPos $configfile[$i] $pos "OUTPUT:"
		If ($pos > 0)
			SetVar $outputfilecount ($outputfilecount + 1)
			SetVar $temp $configfile[$i]
			SetVar $temp ($temp & "!!!")
			GetText $temp $outputfiles[$outputfilecount] "OUTPUT:" "!!!"
			StripText $outputfiles[$outputfilecount] " "
		End
		GetWordPos $configfile[$i] $pos "EXCLUDE:"
		If ($pos > 0)
			SetVar $excludefilecount ($excludefilecount + 1)
			SetVar $temp $configfile[$i]
			SetVar $temp ($temp & "!!!")
			GetText $temp $excludefiles[$excludefilecount] "EXCLUDE:" "!!!"
			StripText $excludefiles[$excludefilecount] " "
		End
		SetVar $i ($i + 1)
	End
:CONFIG_SECTORLIST2
	SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
	Gosub :Z_Lib~HEADER
	If ($configedited = TRUE)
		Echo "*" & $boldred & "           <<<=-[ " & $boldwhite & "Z-Bot Configurator - Selectable Filenames" & $boldred & " ]-=>>> " & $boldcyan & #42
	Else
		Echo "*" & $boldred & "           <<<=-[ " & $boldwhite & "Z-Bot Configurator - Selectable Filenames" & $boldred & " ]-=>>>"
	End
	Gosub :Z_Lib~REDLINE
	If ($excludefilecount > 0) or ($outputfilecount > 0) or ($sourcefilecount > 0)
		Echo "*" & $boldmagenta & "Existing Entries:"
		Echo "*" & $boldwhite & " OUTPUT FILES          SOURCE FILES          EXCLUDE FILES"
		Gosub :Z_Lib~REDLINE
		SetVar $z 1
		While ($excludefilecount >= $z) or ($outputfilecount >= $z) or ($sourcefilecount >= $z)
			If ($outputfilecount >= $z)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 22
				SetVar $Z_Strings~unpadded $outputfiles[$z]
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				Echo  "* " & $green & $Z_Strings~padded
			Else
				SetVar $Z_Lib~repeat "22"
				SetVar $Z_Lib~char " "
				Gosub :Z_Lib~STRINGREPEAT 
				Echo "* " & $Z_Lib~string 
			End
			If ($sourcefilecount >= $z)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 22
				SetVar $Z_Strings~unpadded $sourcefiles[$z]
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				Echo $green & $Z_Strings~padded
			Else
				SetVar $Z_Lib~repeat "22"
				SetVar $Z_Lib~char " "
				Gosub :Z_Lib~STRINGREPEAT 
				Echo $Z_Lib~string 
			End
			If ($excludefilecount >= $z)
				SetVar $Z_Strings~padchar " "
				SetVar $Z_Strings~padlen 22
				SetVar $Z_Strings~unpadded $excludefiles[$z]
				SetVar $Z_Strings~rpad TRUE
				Gosub :Z_Strings~PAD
				Echo $green & $Z_Strings~padded
			End
			SetVar $z ($z + 1)
		End
		Gosub :Z_Lib~REDLINE
	End
	Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add Filename"
	Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove Filename"
	Gosub :Z_Lib~REDLINE
	Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
	Gosub :Z_Lib~REDLINE
	Echo "*"
	GetConsoleInput $choice SINGLEKEY
	UpperCase $choice
	If ($choice = "1")
		Echo "*" & $boldwhite & "Enter the filename to ADD. (No GAMENAME_)?**"
		GetConsoleInput $value
		UpperCase $value
		If ($value <> "") and ($value <> #13)
			Echo "*" & $boldwhite & "Select the TYPE (1=Source, 2=Output, 3=Exclude): "
			GetConsoleInput $value2 SINGLEKEY
			LowerCase $value2
			SetVar $found FALSE
			If ($value2 = "1")
				SetVar $x 1
				While ($x <= $sourcefilecount)
					If ($value = $sourcefiles[$x])
						SetVar $found TRUE
						SetVar $x $sourcefilecount
					End
					SetVar $x ($x + 1)
				End
			ElseIf ($value2 = "2")
				SetVar $x 1
				While ($x <= $outputfilecount)
					If ($value = $outputfiles[$x])
						SetVar $found TRUE
						SetVar $x $outputfilecount
					End
					SetVar $x ($x + 1)
				End
			ElseIf ($value2 = "3")	
				SetVar $x 1
				While ($x <= $excludefilecount)
					If ($value = $excludefiles[$x])
						SetVar $found TRUE
						SetVar $x $excludefilecount
					End
					SetVar $x ($x + 1)
				End
			Else
				Echo "**" & $boldwhite & "No changes made.*"
				Goto :CONFIG_SECTORLIST2
			End
			If ($found = TRUE)
				Echo "**" & $boldwhite & "Entry exists for that file and type. No Changes Made.*"
				Goto :CONFIG_SECTORLIST2
			End
			If ($value2 = "1")
				SetVar $sourcefilecount ($sourcefilecount + 1)
				SetVar $sourcefiles[$sourcefilecount] $value
				SetVar $configedited TRUE
			ElseIf ($value2 = "2")
				SetVar $outputfilecount ($outputfilecount + 1)
				SetVar $outputfiles[$outputfilecount] $value
				SetVar $configedited TRUE
			ElseIf ($value2 = "3")
				SetVar $excludefilecount ($excludefilecount + 1)
				SetVar $excludefiles[$excludefilecount] $value
				SetVar $configedited TRUE
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
			Goto :CONFIG_SECTORLIST2
		End
	ElseIf ($choice = "2")
		Echo "*" & $boldwhite & "Enter the filename to REMOVE. (No GAMENAME_)?**"
		GetConsoleInput $value
		UpperCase $value
		If ($value <> "") and ($value <> #13)
			Echo "*" & $boldwhite & "Select the TYPE (1=Source, 2=Output, 3=Exclude): "
			GetConsoleInput $value2 SINGLEKEY
			LowerCase $value2
			SetVar $found 0
			If ($value2 = "1")
				SetVar $x 1
				While ($x <= $sourcefilecount)
					If ($value = $sourcefiles[$x])
						SetVar $found $x
						SetVar $x $sourcefilecount
					End
					SetVar $x ($x + 1)
				End
			ElseIf ($value2 = "2")
				SetVar $x 1
				While ($x <= $outputfilecount)
					If ($value = $outputfiles[$x])
						SetVar $found $x
						SetVar $x $outputfilecount
					End
					SetVar $x ($x + 1)
				End
			ElseIf ($value2 = "3")	
				SetVar $x 1
				While ($x <= $excludefilecount)
					If ($value = $excludefiles[$x])
						SetVar $found $x
						SetVar $x $excludefilecount
					End
					SetVar $x ($x + 1)
				End
			Else
				Echo "**" & $boldwhite & "No changes made.*"
				Goto :CONFIG_SECTORLIST2
			End
			If ($found = "0")
				Echo "**" & $boldwhite & "Entry NOT found for that file and type. No Changes Made.*"
				Goto :CONFIG_SECTORLIST2
			End
			SetArray $temparray 0
			If ($value2 = "1")
				SetVar $x 1
				SetVar $z 0
				While ($x <= $sourcefilecount)
					If ($x <> $found)
						SetVar $z ($z + 1)
						SetVar $temparray[$z] $sourcefiles[$x]
					End
					SetVar $x ($x + 1)
				End
				SetVar $x 1
				SetVar $sourcefilecount $z
				SetArray $sourcefiles 0
				While ($x <= $sourcefilecount)
					SetVar $sourcefiles[$x] $temparray[$x]
					SetVar $x ($x + 1)
				End
				SetVar $configedited TRUE
			ElseIf ($value2 = "2")
				SetVar $x 1
				SetVar $z 0
				While ($x <= $outputfilecount)
					If ($x <> $found)
						SetVar $z ($z + 1)
						SetVar $temparray[$z] $outputfiles[$x]
					End
					SetVar $x ($x + 1)
				End
				SetVar $x 1
				SetVar $outputfilecount $z
				SetArray $outputfiles 0
				While ($x <= $outputfilecount)
					SetVar $outputfiles[$x] $temparray[$x]
					SetVar $x ($x + 1)
				End
				SetVar $configedited TRUE
			ElseIf ($value2 = "3")
				SetVar $x 1
				SetVar $z 0
				While ($x <= $excludefilecount)
					If ($x <> $found)
						SetVar $z ($z + 1)
						SetVar $temparray[$z] $excludefiles[$x]
					End
					SetVar $x ($x + 1)
				End
				SetVar $x 1
				SetVar $excludefilecount $z
				SetArray $excludefiles 0
				While ($x <= $excludefilecount)
					SetVar $excludefiles[$x] $temparray[$x]
					SetVar $x ($x + 1)
				End
				SetVar $configedited TRUE
			End
			SetArray $temparray 0
		Else
			Echo "**" & $boldwhite & "No changes made.*"
			Goto :CONFIG_SECTORLIST2
		End
	ElseIf ($choice = #13)
		If ($configedited = TRUE)
			Delete "Z-SectorList.cfg"
			SetVar $x 1
			While ($x <= $sourcefilecount)
				Write "Z-SectorList.cfg" "SOURCE:" & $sourcefiles[$x]
				SetVar $x ($x + 1)
			End
			SetVar $x 1
			While ($x <= $outputfilecount)
				Write "Z-SectorList.cfg" "OUTPUT:" & $outputfiles[$x]
				SetVar $x ($x + 1)
			End
			SetVar $x 1
			While ($x <= $excludefilecount)
				Write "Z-SectorList.cfg" "EXCLUDE:" & $excludefiles[$x]
				SetVar $x ($x + 1)
			End
			Echo "**" & $boldwhite & "Z-SectorList.cfg Updated.*"
		End
		Goto :NOCONFIGFILENAMES
	End
	Goto :CONFIG_SECTORLIST2
End
Goto :CONFIG_SECTORLIST2
:NOCONFIGFILENAMES
Return
:CONFIG_UNLOAD
SetArray $configfilelist 0
FileExists $fileexists "z-unload.cfg"
If ($fileexists <> TRUE)
	Goto :NOCONFIGUNLOAD
End
ReadToArray "z-unload.cfg" $filelist
SetVar $x 1
SetVar $z 0
SetArray $configfilelist 0
While ($x <= $filelist)
	GetLength $filelist[$x] $len
	If ($len > 0)
		CutText $filelist[$x] $ck 1 1
		If ($ck <> "#")
			GetWord $filelist[$x] $word 1
			If ($word <> "0")
				SetVar $z ($z + 1)
				SetVar $configfilelist[$z] $word
			End
		End
	End
	SetVar $x ($x + 1)
End
SetVar $words $z
:CONFIG_UNLOAD2
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "             <<<=-[ " & $boldwhite & "Z-Bot Configurator - Unload Exemptions" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($filelist > 0)
	Echo "*" & $boldmagenta & "Existing Entries:"
	SetVar $x 1
	While ($x <= $words)
		Echo "*" & $green & $configfilelist[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add File to Exemption List"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove File from Exemption List"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1") or ($choice = "2")
	If ($choice = "1")
		Echo "*" & $boldwhite & "Enter the filename to ADD to the list:"
	Else
		Echo "*" & $boldwhite & "Enter the filename to REMOVE from the list:"
	End
	Echo "*"
	GetConsoleInput $value
	LowerCase $value
	StripText $value " "
	If ($value <> "") and ($value <> "0") and ($value <> #13)
		SetVar $found 0
		SetVar $x 1
		While ($x <= $words)
			If ($value = $configfilelist[$x])
				SetVar $found $x
				SetVar $x $words
			End
			SetVar $x ($x + 1)
		End
		If ($choice = "1")
			If ($found <> "0")
				Echo "**" & $boldwhite & "File already exempted. No changes made.*"
			Else
				SetVar $words ($words + 1)
				SetVar $configfilelist[$words] $value
				SetVar $configfiledelete 0
				
				Gosub :CONFIGSAVEUNLOAD
				
				Echo "**" & $boldwhite & "File exempted. Z-Unload.cfg updated.*"
			End
		Else
			If ($found <> "0")
				SetVar $configfiledelete $found
				Gosub :CONFIGSAVEUNLOAD
				SetVar $configfiledelete 0
				Echo "**" & $boldwhite & "Entry Removed. Z-unload.cfg updated.*"
				Goto :CONFIG_UNLOAD2
			Else
				Echo "**" & $boldwhite & "Entry not found. No changes made.*"
			End
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = #13)
	Goto :NOCONFIGUNLOAD
End
Goto :CONFIG_UNLOAD2
:NOCONFIGUNLOAD
Return
:CONFIGSAVEUNLOAD
Delete "Z-Unload.cfg"
SetVar $x 1
While ($x <= $words)
	If ($x <> $configfiledelete)
		Write "Z-Unload.cfg" $configfilelist[$x]
	End
	SetVar $x ($x + 1)
End
Return
:CONFIG_MENUS
SetArray $configmenufiles 0
SetArray $configmenufiles2 0
SetVar $configmenuiptr 2
SetVar $configmenufptr 1
SetVar $configmenuitemedited FALSE
SetVar $configmenuedited FALSE
GetFileList $configmenufiles2 "zp-*.mnu"
SetVar $x 1
While ($x <= $configmenufiles2)
	SetVar $configmenufiles[$x] $configmenufiles2[$x]
	SetVar $configmenufiles[0] $x
	If ($configmenufiles[$x] = "zp-main.mnu")
		SetVar $configmenufptr $x
	End
	SetVar $x ($x + 1)
End
SetArray $configmenufiles2 0
SetVar $configlastmenu 0
:CONFIG_MENUS2
If ($configmenuitemedited = TRUE)
	Gosub :CONFIGSAVEMENUITEM
End
If ($configmenufptr <> $configlastmenu)
	SetVar $configlastmenu $configmenufptr
	FileExists $fileexists $configmenufiles[$configmenufptr]
	If ($fileexists = TRUE)
		SetArray $configmenuarray 0
		SetArray $configmenuarray2 0
		ReadToArray $configmenufiles[$configmenufptr] $configmenuarray2
		If ($configmenuarray2 > 0)
			SetVar $x 1
			While ($x <= $configmenuarray2)
				SetVar $configmenuarray[$x] $configmenuarray2[$x]
				SetVar $configmenuarray[0] $x
				SetVar $x ($x + 1)
			End
			SetArray $configmenuarray2 0
		End
	End
End
If ($configmenuarray[0] > 0)
	SetVar $configmenutitle $configmenuarray[1]
	GetWord $configmenuarray[$configmenuiptr] $configmenutype 1
	GetWord $configmenuarray[$configmenuiptr] $configmenukeys 2
	GetWord $configmenuarray[$configmenuiptr] $configmenufilename 3
	GetText $configmenuarray[$configmenuiptr] & "!!!" $configmenudesc $configmenufilename & " " "!!!"
End
UpperCase $configmenutype
If ($configmenutype = "S")
	SetVar $configmenutyped "S" & $yellow & "   <-- Script (Run a Standalone Script)"
ElseIf ($configmenutype = "D")
	SetVar $configmenutyped "D" & $green & "   <-- Daemon (Run a Background Script)"
ElseIf ($configmenutype = "M")
	SetVar $configmenutyped "M" & $cyan & "   <-- Menu (Leads to another Menu)"
End
If ($configmenudesc = "") or ($configmenudesc = "0")
	SetVar $configmenudescd $boldred & "NOT SET"
Else
	SetVar $configmenudescd $boldwhite & $configmenudesc
End
If ($configmenukeys = "") or ($configmenukeys = "0") or ($configmenukeys = "..")
	SetVar $configmenukeysd $boldred & "NOT SET"
Else
	SetVar $configmenukeysd $boldyellow & $configmenukeys
End
If ($configmenufilename = "") or ($configmenufilename = "0")
	SetVar $configmenufilenamed $boldred & "NOT SET"
Else
	SetVar $configmenufilenamed $boldyellow & $configmenufilename
End

SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
If ($configmenuitemedited = TRUE) or ($configmenuedited = TRUE)
	Echo "*" & $boldred & "            <<<=-[ " & $boldwhite & "Z-Bot Configurator - DoubleTap Menu Editor" & $boldred & " ]-=>>> " & $boldcyan & #42
Else
	Echo "*" & $boldred & "            <<<=-[ " & $boldwhite & "Z-Bot Configurator - DoubleTap Menu Editor" & $boldred & " ]-=>>>"
End
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "T" & ANSI_12 & "]=-  " & ANSI_11 & "Menu Title        : " & ANSI_13 & $configmenutitle
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "[]" & ANSI_12 & "]=- " & ANSI_11 & "Select Menu File   : " & ANSI_14 & $configmenufiles[$configmenufptr]
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "M" & ANSI_12 & "]=- " & ANSI_10 & "Add a New Menu"
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "U" & ANSI_12 & "]=- " & ANSI_2 & "Sort Menu Item types to the Top"
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "D" & ANSI_12 & "]=- " & ANSI_2 & "Sort Menu Item types to the Bottom"
Gosub :Z_Lib~REDLINE
SetVar $x 2
While ($x <= $configmenuarray[0])
	If ($x = $configmenuiptr)
		Echo "* " & $boldwhite
	Else
		Echo "* " & $green
	End
	Echo $configmenuarray[$x]
	SetVar $x ($x + 1)
End
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "H" & ANSI_12 & "]=- " & ANSI_11 & "Menu Item Heading  : " & $configmenudescd
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "Y" & ANSI_12 & "]=- " & ANSI_11 & "Menu Item Type     : " & $configmenutyped
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "K" & ANSI_12 & "]=- " & ANSI_11 & "2 Digit Key Code   : " & $configmenukeysd
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "F" & ANSI_12 & "]=- " & ANSI_11 & "File Name          : " & $configmenufilenamed

Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "<>" & ANSI_12 & "]=- " & ANSI_11 & "Select Menu Item   : " & ANSI_14 & $configmenuiptr
Echo "*" & ANSI_12 & " -=[" & ANSI_14 & "I" & ANSI_12 & "]=- " & ANSI_10 & "Add a New Menu Item"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "[") or ($choice = "{")
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	If ($configmenuedited = TRUE)
		Gosub :CONFIGSAVEMENU
	End
	SetVar $configmenufptr ($configmenufptr - 1)
	If ($configmenufptr < 1)
		SetVar $configmenufptr $configmenufiles[0]
	End
	SetVar $configmenuiptr 2
ElseIf ($choice = "]") or ($choice = "}")
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	If ($configmenuedited = TRUE)
		Gosub :CONFIGSAVEMENU
	End
	SetVar $configmenufptr ($configmenufptr + 1)
	If ($configmenufptr > $configmenufiles[0])
		SetVar $configmenufptr 1
	End
	SetVar $configmenuiptr 2
ElseIf ($choice = "<") or ($choice = ",")
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	SetVar $configmenuiptr ($configmenuiptr - 1)
	If ($configmenuiptr < 2)
		SetVar $configmenuiptr $configmenuarray[0]
	End
ElseIf ($choice = ">") or ($choice = ".")
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	SetVar $configmenuiptr ($configmenuiptr + 1)
	If ($configmenuiptr > $configmenuarray[0])
		SetVar $configmenuiptr 2
	End
ElseIf ($choice = "T")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Enter a TITLE for this Menu : "
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $configmenutitle $value
		SetVar $configmenuarray[1] $value
		SetVar $configmenuedited TRUE
	End
ElseIf ($choice = "H")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Enter a HEADING for this Menu Item:**"
	GetConsoleInput $value
	If ($value <> "") and ($value <> #13)
		SetVar $configmenudesc $value
		SetVar $configmenuitemedited TRUE
	End
ElseIf ($choice = "Y")
	If ($configmenutype = "S")
		SetVar $configmenutype "D"
	ElseIf ($configmenutype = "D")
		SetVar $configmenutype "m"
	Else
		SetVar $configmenutype "S"
	End
	SetVar $configmenuitemedited TRUE
ElseIf ($choice = "K")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "The 2-DIGIT KEY CODE should be UNIQUE for this Menu."
	Echo "*" & $boldwhite & "The following key codes have already been used:*" & $boldred & ".. "
	SetVar $x 2
	While ($x <= $configmenuarray[0])
		GetWord $configmenuarray[$x] $temp 2
		Echo $temp & " "
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Enter a the 2-DIGIT KEY CODE for this Menu Item:"
	GetConsoleInput $value
	UpperCase $value
	GetLength $value $len
	If ($value <> "") and ($value <> #13) and ($len = 2)
		SetVar $x 2
		SetVar $found FALSE
		While ($x <= $configmenuarray[0])
			GetWord $configmenuarray[$x] $temp 2
			If ($value = $temp)
				SetVar $found TRUE
				Echo "*" & $boldwhite $temp & " already in use!"
			End
			SetVar $x ($x + 1)
		End
		If ($found <> TRUE)
			SetVar $configmenukeys $value
			SetVar $configmenuitemedited TRUE
		End
	End
ElseIf ($choice = "F")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Menu filenames BEGIN with " & $boldmagenta & " zp-" & $boldwhite & " and MUST END with  " & $boldmagenta & ".mnu"
	Echo "*" & $boldwhite & "Script and daemon filenames do not need to BEGIN with  " & $boldmagenta & "scripts\"
	Echo "*" & $boldwhite & "unless they are in another folder."
	Echo "*" & $boldwhite & "Please include the script file extension : " & $boldmagenta & " .ts  or  .cts"
	Echo "*" & $boldred & "NO SPACES IN FILENAMES PLEASE !"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Enter the filename to execute for this Menu Item:**"
	GetConsoleInput $value
	StripText $value " "
	If ($value <> "") and ($value <> #13)
		SetVar $configmenufilename $value
		SetVar $configmenuitemedited TRUE
	End
ElseIf ($choice = "M")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Menu filenames BEGIN with " & $boldmagenta & " zp-" & $boldwhite & " and MUST END with  " & $boldmagenta & ".mnu"
	Echo "*" & $boldyellow & "These will be added if they are missing."
	Echo "*" & $boldred & "NO SPACES IN FILENAMES PLEASE !"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldgreen & "Enter the filename for this Menu:**"
	GetConsoleInput $value
	StripText $value " "
	If ($value <> "") and ($value <> #13)
		LowerCase $value
		GetWordPos $value $pos ".mnu"
		If ($pos = "0")
			SetVar $value ($value & ".mnu")
		End
		CutText $value $ck 1 3
		If ($ck <> "zp-")
			SetVar $value ("zp-" & $value)
		End
		FileExists $fileexists $value
		If ($fileexists <> TRUE)
			Write $value "NEW MENU TITLE"
			Write $value "M MM zp-main.mnu Main Menu"
			Echo "*" & $boldwhite "New menu file created: " & $value & ".*"
			SetVar $configmenufiles[0] ($configmenufiles[0] + 1)
			If ($configmenuitemedited <> TRUE)
				SetVar $configmenufptr ($configmenufiles[0])
				SetVar $configmenufiles[$configmenufptr] $value
				Echo "*" & $boldyellow "No edits pending.. Switching to newly created menu.*"
			End
		Else
			Echo "*" & $boldwhite "File already exists!. No changes made.*"
		End
	End
ElseIf ($choice = "I")
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	SetVar $configmenuarray[0] ($configmenuarray[0] + 1)
	SetVar $configmenuiptr $configmenuarray[0]
	SetVar $configmenudesc "ENTER A NEW MENU ITEM HEADING HERE"
	SetVar $configmenutype "S"
	SetVar $configmenukeys ".."
	SetVar $configmenufilename "ENTER_A_FILENAME_HERE"
	Echo "*" & $boldwhite "Menu item added.*"
	SetVar $configmenuitemedited TRUE
ElseIf ($choice = "U") or ($choice = "D")
	SetArray $bucket 0
	SetArray $bucketct 0
	SetVar $x 2
	While ($x <= $configmenuarray[0])
		CutText $configmenuarray[$x] $sort 1 1
		If ($choice = "U")
			If ($sort = "M")
				SetVar $bucketct[1] ($bucketct[1] + 1)
				SetVar $bucket[1][$bucketct[1]] $configmenuarray[$x]
			ElseIf ($sort = "D")
				SetVar $bucketct[2] ($bucketct[2] + 1)
				SetVar $bucket[2][$bucketct[2]] $configmenuarray[$x]
			ElseIf ($sort = "S")
				SetVar $bucketct[3] ($bucketct[3] + 1)
				SetVar $bucket[3][$bucketct[3]] $configmenuarray[$x]
			End
		Else
			If ($sort = "M")
				SetVar $bucketct[3] ($bucketct[3] + 1)
				SetVar $bucket[3][$bucketct[3]] $configmenuarray[$x]
			ElseIf ($sort = "D")
				SetVar $bucketct[2] ($bucketct[2] + 1)
				SetVar $bucket[2][$bucketct[2]] $configmenuarray[$x]
			ElseIf ($sort = "S")
				SetVar $bucketct[1] ($bucketct[1] + 1)
				SetVar $bucket[1][$bucketct[1]] $configmenuarray[$x]
			End
		End
		SetVar $x ($x + 1)
	End
	SetVar $y 1
	SetVar $z 1
	SetArray $configmenuarray 0
	SetVar $configmenuarray[1] $configmenutitle
	While ($y <= 3)
		SetVar $x 1
		While ($x <= $bucketct[$y])
			SetVar $z ($z + 1)
			SetVar $configmenuarray[$z] $bucket[$y][$x]
			SetVar $x ($x + 1)
		End
		
		SetVar $y ($y + 1)
	End
	SetVar $configmenuarray[0] $z
	Echo "**" & $boldwhite & "Menu File Sorted.*"
	SetVar $configmenuedited TRUE
	SetArray $bucket 0
	SetArray $bucketct 0
ElseIf ($choice = #13)
	If ($configmenuitemedited = TRUE)
		Gosub :CONFIGSAVEMENUITEM
	End
	If ($configmenuedited = TRUE)
		Gosub :CONFIGSAVEMENU
	End
	Goto :NOCONFIGMENUS
End
Goto :CONFIG_MENUS2
:NOCONFIGMENUS
Return
:CONFIGSAVEMENU
Delete $configmenufiles[$configmenufptr]
Write $configmenufiles[$configmenufptr] $configmenutitle
SetVar $x 2
While ($x <= $configmenuarray[0])
	Write $configmenufiles[$configmenufptr] $configmenuarray[$x]
	SetVar $x ($x + 1)
End
SetVar $configmenuedited FALSE
Echo "**" & $boldwhite & "Menu file " & $configmenufiles[$configmenufptr] & " updated.*"
Return
:CONFIGSAVEMENUITEM
SetVar $configmenuarray[$configmenuiptr] $configmenutype & " " & $configmenukeys & " " & $configmenufilename & " " & $configmenudesc
SetVar $configmenuitemedited FALSE
SetVar $configmenuedited TRUE
Return
:CONFIG_OPTIONS_SCRIPTS
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "             <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options - Scripts" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($externalcommands > 0)
	Echo "*" & $boldmagenta & "Existing Entries:"
	SetVar $x 1
	While ($x <= $externalcommands)
		Echo "*" & $green & $externalcommand[$x] & $white & "  --> " & $externalfile[$x]
		If ($removecommand[$x] = TRUE)
			Echo $boldred & " <-- deleting"
		End
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add Script Entry"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove Script Entry"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator - Options Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "What will the command be to run this script?**"
	GetConsoleInput $value
	LowerCase $value
	GetWordPos $value $pos " "
	If ($value <> "") and ($value <> #13) and ($pos = "0")
		SetVar $found 0
		SetVar $x 1
		While ($x <= $externalcommands)
			If ($value = $externalcommand[$x])
				SetVar $found $x
				SetVar $x $externalcommands
			End
			SetVar $x ($x + 1)
		End
		If ($found <> "0")
			If ($removecommand[$found] <> TRUE)
				Echo "**" & $boldgreen & "Found   : " & $boldcyan & $externalcommand[$found]
				Echo "*" & $boldgreen & "Category : " & $boldwhite & $externalmode[$found]
				Echo "*" & $boldgreen & "Script   : " & $boldwhite & $externalfile[$found]
				Echo "*" & $boldgreen & "Descript : " & $boldwhite & $externaldesc[$found]
				Echo "*" & $boldred & "That command already exists."
				Gosub :Z_Lib~ANYKEY
				Echo "**" & $boldwhite & "No changes made.*"
				Goto :CONFIGOPTIONSNOADD
			End
		End
		SetVar $found2 0
		SetVar $x 1
		While ($x <= $internalcommands)
			If ($value = $internalcommand[$x])
				SetVar $found2 $x
				SetVar $x $internalcommands
			End
			SetVar $x ($x + 1)
		End
		If ($found2 <> "0")
			Echo "**"
			Gosub :Z_Lib~REDLINE
			Echo "*" & $boldgreen & "Found   : " & $boldcyan & $internalcommand[$found2]
			Echo "*" & $boldgreen & "Category : " & $boldwhite & $internalcategory[$found2]
			Echo "*" & $boldgreen & "Descript : " & $boldwhite & $verbose[$found2]
			Gosub :Z_Lib~REDLINE
			Echo "*" & $boldred & "This will OVERRIDE an existing internal command."
			Echo "**" & $boldyellow & "Continue? (y/N)"
			GetConsoleInput $value SINGLEKEY
			UpperCase $value
			If ($value <> "Y")
				Echo "**" & $boldwhite & "No changes made.*"
				Goto :CONFIGOPTIONSNOADD
			End
		End
		SetVar $optioncommand $value
		SetVar $cat[1] "COMBAT"
		SetVar $cat[2] "CASH"
		SetVar $cat[3] "RESOURCE"
		SetVar $cat[4] "DATA"
		SetVar $cat[5] "GRID"
		SetVar $cat[6] "UTILITY"
		SetVar $cat[7] "DAEMON"
		Echo "**"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldyellow & "1 - COMBAT"
		Echo "*" & $boldyellow & "2 - CASH"
		Echo "*" & $boldyellow & "3 - RESOURCE"
		Echo "*" & $boldyellow & "4 - DATA"
		Echo "*" & $boldyellow & "5 - GRID"
		Echo "*" & $boldyellow & "6 - UTILITY"
		Echo "*" & $boldyellow & "7 - DAEMON - Special."
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldwhite & "Select a Category for this command (1-7)"
		SetVar $choice2 "0"
		While ($choice2 <> "1") and ($choice2 <> "2") and ($choice2 <> "3") and ($choice2 <> "4") and ($choice2 <> "5") and ($choice2 <> "6") and ($choice2 <> "7")
			GetConsoleInput $choice2 SINGLEKEY
		End
		SetVar $optioncategory $cat[$choice2]
		Echo "**"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldgreen & "Script Filename."
		Echo "*" & $boldwhite & "Do NOT begin with  scripts\  as this will be added"
		Echo "*" & $boldwhite & "automatically. Please include the extension. (.cts or .ts)"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldyellow & "Enter the filename for this script.*"
		GetConsoleInput $value
		LowerCase $value
		If ($value <> "") and ($value <> #13)
			FileExists $fileexists "scripts\" & $value
			If ($fileexists = TRUE)
				SetVar $optionfile "scripts\" & $value
			Else
				Echo "**" & $boldred & "File does NOT exist - " & $boldyellow & "scripts\" & $value
				Gosub :Z_Lib~ANYKEY
				Echo "**" & $boldwhite & "No changes made.*"
				Goto :CONFIGOPTIONSNOADD
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
			Goto :CONFIGOPTIONSNOADD
		End
		Echo "**"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldwhite & "Enter a description for this script.(0-48 chars)*"
		SetVar $Z_Lib~repeat "9"
		SetVar $Z_Lib~char "-"
		Gosub :Z_Lib~STRINGREPEAT 
		Echo "*  " & $yellow & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "|" & $Z_Lib~string & "--------*"
		GetConsoleInput $value
		If ($value = "0") or ($value = "")
			SetVar $value ""
		Else
			GetLength $value $len
			If ($len > 48)
				CutText $value $value 1 48
			End
		End
		SetVar $optiondesc $value
		Echo "**"
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldgreen & "Command  : " & $boldyellow & $optioncommand
		Echo "*" & $boldgreen & "Category : " & $boldwhite & $optioncategory
		Echo "*" & $boldgreen & "Filename : " & $boldwhite & $optionfile
		Echo "*" & $boldgreen & "Descript : " & $boldwhite & $optiondesc
		Gosub :Z_Lib~REDLINE
		Echo "*" & $boldyellow & "Add this entry? (y/N)"
		GetConsoleInput $value SINGLEKEY
		Uppercase $value
		If ($value = "Y")
			SetVar $externalcommands ($externalcommands + 1)
			SetVar $externalcommand[$externalcommands] $optioncommand
			SetVar $externalmode[$externalcommands] $optioncategory
			SetVar $externalfile[$externalcommands] $optionfile
			SetVar $externaldesc[$externalcommands] $optiondesc
			Echo "**" & $boldgreen & "Command added to Script entries in Z-Options.cfg - " & $boldyellow & $externalcommand[$externalcommands]
			SetVar $edited TRUE
			SetVar $needreset TRUE
			Gosub :Z_Lib~ANYKEY
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	End
:CONFIGOPTIONSNOADD
ElseIf ($choice = "2")
	Echo "*" & $boldwhite & "Remove which command? "
	GetConsoleInput $value
	LowerCase $value
	If ($value <> "") and ($value <> #13)
		SetVar $found 0
		SetVar $x 1
		While ($x <= $externalcommands)
			If ($value = $externalcommand[$x])
				SetVar $found $x
				SetVar $x $externalcommands
			End
			SetVar $x ($x + 1)
		End
		If ($found <> "0")
			Echo "**"
			Gosub :Z_Lib~REDLINE
			Echo "*" & $boldgreen & "Found   : " & $boldcyan & $externalcommand[$found]
			Echo "*" & $boldgreen & "Category : " & $boldwhite & $externalmode[$found]
			Echo "*" & $boldgreen & "Script   : " & $boldwhite & $externalfile[$found]
			Echo "*" & $boldgreen & "Descript : " & $boldwhite & $externaldesc[$found]
			Gosub :Z_Lib~REDLINE
			If ($removecommand[$found] = TRUE)
				Echo "*" & $boldred & "Already marked for deletion."
				Gosub :Z_Lib~ANYKEY
				Echo "**" & $boldwhite & "No changes made.*"
			Else
				Echo "*" & $boldyellow & "Are you sure you want to remove this entry? (y/N)"
				GetConsoleInput $value SINGLEKEY
				Uppercase $value
				If ($value = "Y")
					SetVar $removecommand[$found] TRUE
					Echo "**" & $boldred & "Command marked for deletion: " & $boldyellow & $externalcommand[$found]
					SetVar $edited TRUE
					SetVar $needreset TRUE
					Gosub :Z_Lib~ANYKEY
				Else
					Echo "**" & $boldwhite & "No changes made.*"
				End
			End
		Else
			Echo "**" & $boldred & "Command NOT Found   : " & $boldyellow & $value
			Gosub :Z_Lib~ANYKEY
		End
	End
ElseIf ($choice = #13)
	Goto :NOCONFIGOPTIONSSCRIPTS
End
Goto :CONFIG_OPTIONS_SCRIPTS
:NOCONFIGOPTIONSSCRIPTS
Return
:CONFIG_OPTIONS_KEYS
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "         <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options - Key Assignments" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & ""
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & ""
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator - Options Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
ElseIf ($choice = "2")
ElseIf ($choice = "3")
ElseIf ($choice = "4")
ElseIf ($choice = "5")
ElseIf ($choice = "6")
ElseIf ($choice = "7")
ElseIf ($choice = "8")
ElseIf ($choice = "9")
ElseIf ($choice = "A")
ElseIf ($choice = "B")
ElseIf ($choice = "C")
ElseIf ($choice = "D")
ElseIf ($choice = "E")
ElseIf ($choice = "F")
ElseIf ($choice = "G")
ElseIf ($choice = "H")
ElseIf ($choice = "I")
ElseIf ($choice = "J")
ElseIf ($choice = "K")
ElseIf ($choice = "L")
ElseIf ($choice = "M")
ElseIf ($choice = "N")
ElseIf ($choice = "O")
ElseIf ($choice = "P")
ElseIf ($choice = "R")

ElseIf ($choice = #13)
	Goto :NOCONFIGKEYS
End
Goto :CONFIG_OPTIONS_KEYS
:NOCONFIGKEYS
Return
:CONFIG_OPTIONS_HOTKEYS
Return
:CONFIG_OPTIONS_BANNERS
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "             <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options - Banners" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
If ($banners > 0)
	Echo "*" & $boldmagenta & "Existing Entries:"
	SetVar $x 1
	While ($x <= $banners)
		Echo "*" & $green & $bannerfile[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
End
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Add Banner Entry"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Remove Banner Entry"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator - Options Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldwhite & "Banner filename: "
	GetConsoleInput $value
	LowerCase $value
	If ($value <> "") and ($value <> #13)
		SetVar $x 1
		SetVar $found FALSE
		While ($x <= $banners)
			If ($bannerfile[$x] = $value)
				SetVar $found TRUE
				SetVar $x $banners
			End
			SetVar $x ($x + 1)
		End
		If ($found = TRUE)
			Echo "*" & $boldred & "Entry already exists."
			Gosub :Z_Lib~ANYKEY
			Echo "**" & $boldwhite & "No changes made.*"
			Goto :CONFIGNOBANNER
		Else
			SetVar $banners ($banners + 1)
			SetVar $bannerfile[$banners] $value
			Echo "**" & $boldwhite & "Banner entry added - " & $bannerfile[$banners] & "*"
			SetVar $edited TRUE
			SetVar $needreset TRUE
		End
	End
ElseIf ($choice = "2")
	SetVar $x 1
	Echo "**"
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldyellow & "Banner Entries:"
	Gosub :Z_Lib~REDLINE
	While ($x <= $banners)
		Echo "*" & $boldgreen & $x & " - " & $bannerfile[$x]
		SetVar $banner2[$x] $bannerfile[$x]
		SetVar $x ($x + 1)
	End
	Gosub :Z_Lib~REDLINE
	Echo "*" & $boldyellow & "Delete which Banner Entry:"
	GetConsoleInput $value
	If ($value <> "0") and ($value <> "") and ($value <> #13)
		IsNumber $isnum $value
		If ($isnum = TRUE)
			If ($value > 1) and ($value <= $banners)
				Echo "**" & $boldgreen & "Banner Entry: " & $boldyellow & $bannerfile[$value]
				Echo "**" & $boldwhite & "Remove this entry? (y/N)"
				GetConsoleInput $choice2 SINGLEKEY
				Uppercase $choice2
				If ($choice2 = "Y")
					SetVar $x 1
					SetVar $z 0
					While ($x <= $banners)
						If ($x <> $value)
							SetVar $z ($z + 1)
							SetVar $bannerfile[$z] $banner2[$x]
						End
						SetVar $x ($x + 1)
					End
					SetVar $banners $z
					SetVar $edited TRUE
					SetVar $needreset TRUE
					Echo "**" & $boldwhite & "Banner entry Removed - " & $banner2[$value] & "*"
				Else
					Echo "**" & $boldwhite & "No changes made.*"
				End
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = #13)
	Goto :CONFIGNOBANNER
End
Goto :CONFIG_OPTIONS_BANNERS
:CONFIGNOBANNER
Return
:CONFIG_OPTIONS_MACROS
SetVar $Z_Lib~extra $boldgreen & "by Archibald H. Vilanos III"
Gosub :Z_Lib~HEADER
Echo "*" & $boldred & "             <<<=-[ " & $boldwhite & "Z-Bot Configurator - Options - Macros" & $boldred & " ]-=>>>"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "1" & ANSI_12 & "]=- " & ANSI_11 & "Edit Move System Wavecap Macro"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "2" & ANSI_12 & "]=- " & ANSI_11 & "Edit Move System Capture Macro"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "3" & ANSI_12 & "]=- " & ANSI_11 & "Edit Move System Kill Macro"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "4" & ANSI_12 & "]=- " & ANSI_11 & "Edit Move System Macro"
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "5" & ANSI_12 & "]=- " & ANSI_11 & "Edit Attack Macro"
Gosub :Z_Lib~REDLINE
Echo "*" & ANSI_12 & "-=[" & ANSI_14 & "ENTER" & ANSI_12 & "]=- " & ANSI_11 & "Back to Configurator - Options Menu."
Gosub :Z_Lib~REDLINE
Echo "*"
GetConsoleInput $choice SINGLEKEY
UpperCase $choice
If ($choice = "1")
	Echo "**" & $boldgreen & "OLD WaveCap Macro"
	Gosub :Z_Lib~REDLINE
	SetVar $temp $do_wavecap
	ReplaceText $temp "*" #42
	Echo "*" & $boldwhite & $temp
	Gosub :Z_Lib~REDLINE
	Echo "**" & $boldyellow & "Replace the WaveCap macro? (y/N)*"
	GetConsoleInput $choice2 SINGLEKEY
	UpperCase $choice2
	If ($choice2 = "Y")
		Echo "**" & $boldyellow & "Enter the new WaveCap macro (Use " & #42 & " as the ENTER key):*"
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			Echo "**" & $boldgreen & "NEW WaveCap Macro"
			Gosub :Z_Lib~REDLINE
			ReplaceText $value "*" #42
			Echo "*" & $boldcyan & $value
			Gosub :Z_Lib~REDLINE
			Echo "**" & $boldyellow & "Replace the WaveCap macro? (y/N)*"
			GetConsoleInput $choice3 SINGLEKEY
			UpperCase $choice3
			If ($choice3 = "Y")
				SetVar $edited TRUE
				SetVar $needreset TRUE
				SetVar $do_wavecap $value
				Echo "**" & $boldwhite & "WaveCap Macro Replaced.*"
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "2")
	Echo "**" & $boldgreen & "OLD Capture Macro"
	Gosub :Z_Lib~REDLINE
	SetVar $temp $do_capture
	ReplaceText $temp "*" #42
	Echo "*" & $boldwhite & $temp
	Gosub :Z_Lib~REDLINE
	Echo "**" & $boldyellow & "Replace the Capture macro? (y/N)*"
	GetConsoleInput $choice2 SINGLEKEY
	UpperCase $choice2
	If ($choice2 = "Y")
		Echo "**" & $boldyellow & "Enter the new Capture macro (Use " & #42 & " as the ENTER key):*"
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			Echo "**" & $boldgreen & "NEW Capture Macro"
			Gosub :Z_Lib~REDLINE
			ReplaceText $value "*" #42
			Echo "*" & $boldcyan & $value
			Gosub :Z_Lib~REDLINE
			Echo "**" & $boldyellow & "Replace the Capture macro? (y/N)*"
			GetConsoleInput $choice3 SINGLEKEY
			UpperCase $choice3
			If ($choice3 = "Y")
				SetVar $edited TRUE
				SetVar $needreset TRUE
				SetVar $do_capture $value
				Echo "**" & $boldwhite & "Capture Macro Replaced.*"
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "3")
	Echo "**" & $boldgreen & "OLD Kill Macro"
	Gosub :Z_Lib~REDLINE
	SetVar $temp $do_kill
	ReplaceText $temp "*" #42
	Echo "*" & $boldwhite & $temp
	Gosub :Z_Lib~REDLINE
	Echo "**" & $boldyellow & "Replace the Kill macro? (y/N)*"
	GetConsoleInput $choice2 SINGLEKEY
	UpperCase $choice2
	If ($choice2 = "Y")
		Echo "**" & $boldyellow & "Enter the new Kill macro (Use " & #42 & " as the ENTER key):*"
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			Echo "**" & $boldgreen & "NEW Kill Macro"
			Gosub :Z_Lib~REDLINE
			ReplaceText $value "*" #42
			Echo "*" & $boldcyan & $value
			Gosub :Z_Lib~REDLINE
			Echo "**" & $boldyellow & "Replace the Kill macro? (y/N)*"
			GetConsoleInput $choice3 SINGLEKEY
			UpperCase $choice3
			If ($choice3 = "Y")
				SetVar $edited TRUE
				SetVar $needreset TRUE
				SetVar $do_kill $value
				Echo "**" & $boldwhite & "Kill Macro Replaced.*"
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "4")
	Echo "**" & $boldgreen & "OLD Movement System Macro"
	Gosub :Z_Lib~REDLINE
	SetVar $temp $do_macro
	ReplaceText $temp "*" #42
	Echo "*" & $boldwhite & $temp
	Gosub :Z_Lib~REDLINE
	Echo "**" & $boldyellow & "Replace the Movement System macro? (y/N)*"
	GetConsoleInput $choice2 SINGLEKEY
	UpperCase $choice2
	If ($choice2 = "Y")
		Echo "**" & $boldyellow & "Enter the new Movement System macro (Use " & #42 & " as the ENTER key):*"
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			Echo "**" & $boldgreen & "NEW Movement System Macro"
			Gosub :Z_Lib~REDLINE
			ReplaceText $value "*" #42
			Echo "*" & $boldcyan & $value
			Gosub :Z_Lib~REDLINE
			Echo "**" & $boldyellow & "Replace the Movement System macro? (y/N)*"
			GetConsoleInput $choice3 SINGLEKEY
			UpperCase $choice3
			If ($choice3 = "Y")
				SetVar $edited TRUE
				SetVar $needreset TRUE
				SetVar $do_macro $value
				Echo "**" & $boldwhite & "Movement System Macro Replaced.*"
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = "5")
	Echo "**" & $boldgreen & "OLD Attack Macro"
	Gosub :Z_Lib~REDLINE
	SetVar $temp $do_attack
	ReplaceText $temp "*" #42
	Echo "*" & $boldwhite & $temp
	Gosub :Z_Lib~REDLINE
	Echo "**" & $boldyellow & "Replace the Attack macro? (y/N)*"
	GetConsoleInput $choice2 SINGLEKEY
	UpperCase $choice2
	If ($choice2 = "Y")
		Echo "**" & $boldyellow & "Enter the new Attack macro (Use " & #42 & " as the ENTER key):*"
		GetConsoleInput $value
		If ($value <> "") and ($value <> "0") and ($value <> #13)
			Echo "**" & $boldgreen & "NEW Attack Macro"
			Gosub :Z_Lib~REDLINE
			ReplaceText $value "*" #42
			Echo "*" & $boldcyan & $value
			Gosub :Z_Lib~REDLINE
			Echo "**" & $boldyellow & "Replace the Attack macro? (y/N)*"
			GetConsoleInput $choice3 SINGLEKEY
			UpperCase $choice3
			If ($choice3 = "Y")
				SetVar $edited TRUE
				SetVar $needreset TRUE
				SetVar $do_attack $value
				Echo "**" & $boldwhite & "Attack Macro Replaced.*"
			Else
				Echo "**" & $boldwhite & "No changes made.*"
			End
		Else
			Echo "**" & $boldwhite & "No changes made.*"
		End
	Else
		Echo "**" & $boldwhite & "No changes made.*"
	End
ElseIf ($choice = #13)
	Goto :NOCONFIGMACROS
End
Goto :CONFIG_OPTIONS_MACROS
:NOCONFIGMACROS
Return
:NOCONFIGURATOR
Return
# CREATEFILELISTHEADER 
:CREATEFILELISTHEADER
Write "z-filelist.cfg" "# Z-Bot - Approved File Transfer List."
Write "z-filelist.cfg" "#"
Write "z-filelist.cfg" "# This file controls what files are available to be sent"
Write "z-filelist.cfg" "# to your corpies upon request. By default it is empty,"
Write "z-filelist.cfg" "# (Meaning NO files may be sent)."
Write "z-filelist.cfg" "# Add the filenames 1 per line. Any line starting with"
Write "z-filelist.cfg" "# a # is disregarded as a comment line."
Write "z-filelist.cfg" "# NOTE: Only text files starting with GAMENAME_ can be"
Write "z-filelist.cfg" "# sent. Do not include the GAMENAME_ or the .txt as this"
Write "z-filelist.cfg" "# will be done automatically."
Write "z-filelist.cfg" "# -------------------------------------------------------"
Return
# SETUP 
:SETUP
KillAllTriggers
LoadVar $z_bot
If ($z_bot <> TRUE)
	Gosub :Z_Lib~ISITUNLIMITED
	SetVar $unlimitedgame $Z_Lib~isunlimited
	SaveVar $unlimitedgame
	Gosub :EXIT
	SetVar $pulsecheck TRUE
	SaveVar $pulsecheck
:AMPMAGAIN
	SetTextLineTrigger getoffset1 :GETOFFSET "AM"
	SetTextLineTrigger getoffset2 :GETOFFSET "PM"
	SetDelayTrigger ampmtoolong :AMPMTOOLONG 5000
	Send "ctq"
	Pause
:AMPMTOOLONG
	KillTrigger getoffset1
	KillTrigger getoffset2
	KillTrigger ampmtoolong
	If ($tryampmagain <> TRUE)
		SetVar $tryampmagain TRUE
		Goto :AMPMAGAIN
	End
	SetVar $Z_Logs~logentry $scripttitle & ": !!! COULD NOT GET TIME OFFSET !!!"
	Gosub :Z_Logs~ENTERLOG
	Goto :NOAMPM
:GETOFFSET
	KillTrigger getoffset1
	KillTrigger getoffset2
	KillTrigger ampmtoolong
	SetVar $servertime CURRENTLINE
	GetTime $mytime "d m yyyy h"
	SetVar $Z_Dates~date $servertime
	Gosub :Z_Dates~DAYS
	SetVar $serverhours $Z_Dates~hours
	SetVar $Z_Dates~date $mytime
	Gosub :Z_Dates~DAYS
	SetVar $myhours $Z_Dates~hours
	SetVar $timeoffset ($serverhours - $myhours)
	SaveVar $timeoffset
	SetVar $Z_Logs~logentry $scripttitle & ": TIME OFFSET calculated to be " & $timeoffset & " hours."
	Gosub :Z_Logs~ENTERLOG
:NOAMPM
End
SetVar $pdropreturndelay 10
SaveVar $pdropreturndelay
SetVar $reset TRUE
Return
# GETSTATS 
:GETSTATS
Gosub :PlayerInfo~InfoQuick
SetVar $current_sector $PlayerInfo~Sector
SetVar $credits $PlayerInfo~Credits
SetVar $figs $PlayerInfo~Fighters
SetVar $mines $PlayerInfo~Mines
SetVar $limps $PlayerInfo~Limpets
SetVar $shields $PlayerInfo~Shields
SetVar $holds $PlayerInfo~Holds
SetVar $ore $PlayerInfo~Ore
SetVar $org $PlayerInfo~Org
SetVar $equ $PlayerInfo~Equip
SetVar $colonists $PlayerInfo~Colonists
SetVar $scanner $PlayerInfo~Scanner
SetVar $twarp $PlayerInfo~TWarp
SetVar $turns $PlayerInfo~Turns
SetVar $photons $PlayerInfo~Photons
SetVar $torps $PlayerInfo~GenTorps
SetVar $cloaks $PlayerInfo~Cloaks
SetVar $beacons $PlayerInfo~Beacons
SetVar $dets $PlayerInfo~Dets
SetVar $corbo $PlayerInfo~Corbo
SetVar $probes $PlayerInfo~Probes
SetVar $disruptors $PlayerInfo~Disruptors
SetVar $psiprobe $PlayerInfo~PsiProbe
SetVar $planetscanner $PlayerInfo~PlanetScanner
SetVar $align $PlayerInfo~Align
SetVar $experience $PlayerInfo~Experience
SetVar $corp $PlayerInfo~Corp
SetVar $shipid $PlayerInfo~Ship
SetVar $z_corp $PlayerInfo~Corp
SaveVar $z_corp
GetTime $timecheckhour "hh"
SetVar $lastgetstats $timecheckhour
Return
# SETANSI 
:SETANSI
SetVar $cls "[2J"
SetVar $savecursor "[s"
SetVar $restorecursor "[u"
SetVar $black "[0;30m"
SetVar $red "[0;31m"
SetVar $green "[0;32m"
SetVar $yellow "[0;33m"
SetVar $blue "[0;34m"
SetVar $magenta "[0;35m"
SetVar $cyan "[0;36m"
SetVar $white "[0;37m"
SetVar $boldblack "[1;30m"
SetVar $boldred "[1;31m"
SetVar $boldgreen "[1;32m"
SetVar $boldyellow "[1;33m"
SetVar $boldblue "[1;34m"
SetVar $boldmagenta "[1;35m"
SetVar $boldcyan "[1;36m"
SetVar $boldwhite "[1;37m"
SetVar $blackbgd "[40m"
SetVar $redbgd "[41m"
SetVar $greenbgd "[42m"
SetVar $yellowbgd "[43m"
SetVar $bluebgd "[44m"
SetVar $magentabgd "[45m"
SetVar $cyanbgd "[46m"
SetVar $whitebgd "[47m"
SetVar $blinkon "[5m"
SetVar $blinkoff "[0m"
Return
# CLEARPARMS 
:CLEARPARMS
SetVar $PARM1 "0"
SetVar $PARM2 "0"
SetVar $PARM3 "0"
SetVar $PARM4 "0"
SetVar $PARM5 "0"
SetVar $PARM6 "0"
SetVar $PARM7 "0"
SetVar $PARM8 "0"
SetVar $PARM9 "0"
SetVar $PARM10 "0"
SetVar $PARM11 "0"
SetVar $PARM12 "0"
SetVar $PARM13 "0"
SetVar $USER_COMMAND_LINE "0 0 0 0 0 0 0 0 0 0 0 0 0"
SetVar $COMMAND "0"
SaveVar $PARM1
SaveVar $PARM2
SaveVar $PARM3
SaveVar $PARM4
SaveVar $PARM5
SaveVar $PARM6
SaveVar $PARM7
SaveVar $PARM8
SaveVar $PARM9
SaveVar $PARM10
SaveVar $PARM11
SaveVar $PARM12
SaveVar $PARM13
SaveVar $USER_COMMAND_LINE
SaveVar $COMMAND
Return
# GETBACKDOORS 
:GETBACKDOORS
Gosub :Z_Backdoors~BACKDOORS
SetVar $z_sdbackdoor $Z_Backdoors~sdbackdoor
SetVar $z_rybackdoor $Z_Backdoors~rybackdoor
SetVar $z_acbackdoor $Z_Backdoors~acbackdoor
SetVar $z_tebackdoor $Z_Backdoors~tebackdoor
Return
# GETAVOIDS 
:GETAVOIDS
SetVar $i 0
SetTextTrigger getready :GETREADY "<List Avoided Sectors>"
Send "cxq"
Pause
:GETREADY
SetTextLineTrigger getavoids :GETALINEAVOIDS ""
Pause
:GETALINEAVOIDS
GetWord CURRENTLINE $word 1
If ($word <> "Computer")
	SetVar $i ($i + 1)
	SetVar $line[$i] CURRENTLINE
	SetTextLineTrigger getavoids :GETALINEAVOIDS ""
	Pause
End
SetVar $j 1
While ($j <= $i)
	If ($line[$j] <> "")
		SetVar $line[$j] ($line[$j] & " !!!!")
		SetVar $k 1
		SetVar $word ""
		Echo "**" & ANSI_14 & "Avoid List.*"
		While ($word <> "!!!!")
			GetWord $line[$j] $word $k
			IsNumber $isnum $word
			If ($isnum = TRUE)
				SetAvoid $word
				Write GAMENAME & "_AVOIDSLIST.TXT" $word
				SetVar $avoidarray[$word] TRUE
				Echo "*" & ANSI_15 $word
			End
			SetVar $k ($k + 1)
		End
	End
	SetVar $j ($j + 1)
End
Return
# SET1AVOID 
:SET1AVOID
SetVar $line CURRENTLINE
GetText $line $avoidsector "Sector " " will"
IsNumber $isnum $avoidsector
If ($isnum = TRUE)
	SetAvoid $avoidsector
	Write GAMENAME & "_AVOIDSLIST.TXT" $avoidsector
	SetVar $avoidarray[$avoidsector] TRUE
End
SetTextTrigger t6 :SET1AVOID "will now be avoided in future navigation calculations."
Goto :WAITFORCOMMAND
# CLEAR1AVOID 
:CLEAR1AVOID
SetVar $line CURRENTLINE
GetWord $line $avoidsector 1
IsNumber $isnum $avoidsector
If ($isnum = TRUE)
	ClearAvoid $avoidsector
	SetVar $avoidarray[$avoidsector] FALSE
End
SetTextTrigger t7 :CLEAR1AVOID "has been cleared and will be used in future plots."
Goto :WAITFORCOMMAND
# CLEARAVOIDS 
:CLEARAVOIDS
ClearAllAvoids
SetVar $i 1
While ($i <= SECTORS)
	SetVar $avoidarray[$i] FALSE
	SetVar $i ($i + 1)
End
SetTextLineTrigger t8 :CLEARAVOIDS "Avoided sectors Cleared."
Goto :WAITFORCOMMAND
# FLAGS 
:FLAGS
SetVar $line CURRENTLINE
GetWord $line $word1 1
If ($word1 <> "Command") and ($word1 <> "Citadel")
	Goto :WAITFORCOMMAND
End
If ($word1 = "Command")
	GetText $line $current_sector "]:[" "] ("
	IsNumber $isnum $current_sector
	GetTimer $endtime
	If ($isnum = TRUE)
		SetVar $timelapsed ($endtime - $starttime)
		If ($timelapsed > 3000000000)
			SetVar $lastsect "-1"
		End
		If ($lastsect <> $current_sector)
			If ($z_pr = "TRUE")
				Echo ANSI_12 & "[" & ANSI_11 & "PR ON - " & ANSI_14 & $photons & ANSI_12 & "] " & ANSI_5
				GetTimer $starttime
			ElseIf ($watch = TRUE)
				If ($z_clv = "TRUE")
					Echo ANSI_12 & "[" & ANSI_13 & "ONLINE WATCH " & ANSI_14 & "+CLV" & ANSI_12 & "] " & ANSI_5
				Else
					Echo ANSI_12 & "[" & ANSI_13 & "ONLINE WATCH" & ANSI_12 & "] " & ANSI_5
				End
				GetTimer $starttime
			ElseIf ($z_specflag = TRUE)
				If ($current_sector = STARDOCK)
					Echo ANSI_12 & "[" & ANSI_10 & "DOCK" & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				ElseIf ($current_sector = ALPHACENTAURI)
					Echo ANSI_12 & "[" & ANSI_10 & "ALPHA" & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				ElseIf ($current_sector = RYLOS)
					Echo ANSI_12 & "[" & ANSI_10 & "RYLOS" & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				ElseIf ($current_sector = "1")
					Echo ANSI_12 & "[" & ANSI_10 & "TERRA" & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				Else
					GetSectorParameter $current_sector "MCIC" $mcicflag
					If ($mcicflag <> "0") and ($mcicflag <> "")
						Echo ANSI_11 & "[" & ANSI_15 & "MCIC=" & ANSI_10 & $mcicflag & ANSI_11 & "] " & ANSI_5
						GetTimer $starttime
					End
				End
			End
			
			If ($z_sr = "KILL") or ($z_sr = "CAP")
				If ($current_sector = $z_base)
					Echo ANSI_12 & "[" & ANSI_14 & "BASE" & ANSI_12 & "] " & ANSI_5
				Else
					Echo ANSI_12 & "[" & ANSI_14 & $z_sr & ANSI_12 & "] " & ANSI_5
				End
				GetTimer $starttime
			End
			
			If ($z_turnsflag = TRUE) and ($turns < $z_minturns) and ($Z_Lib~isunlimited = FALSE)
				Echo ANSI_14 & "[" & ANSI_12 & $blinkon & "TURNS" & $blinkoff & ANSI_14 & "] " & ANSI_5
				GetTimer $starttime
			End
			
			If ($z_mslflag = TRUE) and ($z_mslsok = TRUE)
				GetSectorParameter $current_sector "MSLSEC" $ismsl
				If ($ismsl = TRUE) and ((($current_sector <> STARDOCK) and ($current_sector <> RYLOS) and ($current_sector <> ALPHACENTAURI) and ($current_sector <> "1")) or ($z_specflag = FALSE))
					Echo ANSI_13 & "[" & ANSI_11 & "MSL" & ANSI_13 & "] " & ANSI_5
					GetTimer $starttime
				End
			End
			If ($z_bustflag = TRUE)
				GetSectorParameter $current_sector "BUSTED" $isbusted
				If ($isbusted = TRUE)
					Echo ANSI_12 & "[" & ANSI_14 & "BUSTED" & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				End
			End
			If ($z_lrsflag = true)
				GetSectorParameter $current_sector "LASTRS" $lastrs
				If ($lastrs = TRUE)
					Echo ANSI_12 & "[" & ANSI_15 & $blinkon & "LAST ROB/STEAL" & $blinkoff & ANSI_12 & "] " & ANSI_5
					GetTimer $starttime
				End
			End
			If ($z_limpetalarm = TRUE)
				Echo ANSI_15 & "<<<[" & $blinkon & ANSI_12 & "LIMPET" & $blinkoff & ANSI_15 & "]>>> " & ANSI_5
				GetTimer $starttime
			End
			SetVar $lastsect $current_sector
		End
	End
Else
	GetTimer $endtime
	SetVar $timelapsed ($endtime - $starttime)
	If ($timelapsed > 3000000000)
		SetVar $lastsect "-1"
	End
	If ($lastsect = "-1")
		SetVar $lastsect "-2"
		If ($z_pr = "TRUE")
			Echo ANSI_12 & "[" & ANSI_11 & "PR ON - " & ANSI_14 & $photons & ANSI_12 & "] " & ANSI_5
			GetTimer $starttime
		ElseIf ($watch = TRUE)
			If ($z_clv = "TRUE")
				Echo ANSI_12 & "[" & ANSI_13 & "ONLINE WATCH " & ANSI_14 & "+CLV" & ANSI_12 & "] " & ANSI_5
			Else
				Echo ANSI_12 & "[" & ANSI_13 & "ONLINE WATCH" & ANSI_12 & "] " & ANSI_5
			End
			GetTimer $starttime
		End
	End
End
KillTrigger t9
KillTrigger t9a
SetTextTrigger t9 :FLAGS "] (?=Help)? :"
SetTextTrigger t9a :FLAGS "Citadel command (?=help)"
Goto :WAITFORCOMMAND
# GETMSLS 
:GETMSLS
If ($z_mslflag = TRUE) and ($z_mslsok = FALSE)
	If (STARDOCK <> 0) and (RYLOS <> 0) and (ALPHACENTAURI <> 0)
		Send "^"
		Send "f1"&"*"&STARDOCK&"*"
		Send "f"&STARDOCK&"*"&"1*"
		Send "f"&RYLOS&"*"&STARDOCK&"*"
		Send "f"&STARDOCK&"*"&RYLOS&"*"
		Send "f"&ALPHACENTAURI&"*"&STARDOCK&"*"
		Send "f"&STARDOCK&"*"&ALPHACENTAURI&"*"
		Send "f"&ALPHACENTAURI&"*"&RYLOS&"*"
		Send "f"&RYLOS&"*"&ALPHACENTAURI&"*"
		Send "q"
		WaitFor "ENDINTERROG"
		SetVar $didmsls TRUE
		SetVar $msloksofar TRUE
		GetCourse $msl1 1 STARDOCK
		If ($msl1 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl2 STARDOCK 1
		If ($msl2 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl3 STARDOCK RYLOS
		If ($msl3 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl4 RYLOS STARDOCK
		If ($msl4 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl5 ALPHACENTAURI STARDOCK
		If ($msl5 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl6 STARDOCK ALPHACENTAURI
		If ($msl6 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl7 ALPHACENTAURI RYLOS
		If ($msl7 < 0)
			SetVar $msloksofar FALSE
		End
		GetCourse $msl8 RYLOS ALPHACENTAURI
		If ($msl8 < 0)
			SetVar $msloksofar FALSE
		End
		If ($msloksofar = TRUE)
			SetVar $count 1
			SetArray $msllist SECTORS
			SetVar $z_msllist ""
			While ($count <= $msl1 + 1)
				SetSectorParameter $msl1[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl1[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl2 + 1)
				SetSectorParameter $msl2[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl2[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl3 + 1)
				SetSectorParameter $msl3[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl3[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl4 + 1)
				SetSectorParameter $msl4[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl4[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl5 + 1)
				SetSectorParameter $msl5[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl5[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl6 + 1)
				SetSectorParameter $msl6[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl6[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl7 + 1)
				SetSectorParameter $msl7[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl7[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 1
			While ($count <= $msl8 + 1)
				SetSectorParameter $msl8[$count] "MSLSEC" TRUE
				SetVar $msllist[$msl8[$count]] TRUE
				SetVar $count ($count + 1)
			End
			SetVar $count 11
			While ($count <= SECTORS)
				If ($msllist[$count] = TRUE)
					SetVar $z_msllist ($z_msllist & " " & $count & " ")
				End
				SetVar $count ($count + 1)
			End
			SaveVar $z_msllist
			SetArray $msllist 0
			SetArray $msl1 0
			SetArray $msl2 0
			SetArray $msl3 0
			SetArray $msl4 0
			SetArray $msl5 0
			SetArray $msl6 0
			SetArray $msl7 0
			SetArray $msl8 0
			SetVar $z_mslsok TRUE
			SaveVar $z_mslsok
		End
	End
End
Return
# CHECKMSLSFIGGED 
:CHECKMSLSFIGGED
	SetVar $mslsfigged FALSE
	If ($z_msllist <> 0)
		SetVar $wordnum 1
		SetVar $keepgoing TRUE
		While ($keepgoing = TRUE)
			SetVar $keepgoing FALSE
			GetWord $z_msllist $word $wordnum
			SetVar $wordnum ($wordnum + 1)
			If ($word <> "") and ($word <> "0")
				SetVar $keepgoing TRUE
				GetSectorParameter $word "FIGSEC" $mslisfigged
				If ($mslisfigged = TRUE)
					SetVar $keepgoing FALSE
					SetVar $mslsfigged TRUE
				End
			End
		End
	End
Return
# GETSHIPDATA 
:GETSHIPDATA
KillTrigger 1
KillTrigger 2
KillTrigger 3
KillTrigger 4
KillTrigger 5
Send #145
WaitOn #145 & #8
Send "c;"
WaitOn "<Computer activated>"
WaitOn "] (?=Help)?"
SetTextLineTrigger 5 :GOTSHIPNAME
SetTextLineTrigger 4 :GOTTPW "Turns Per Warp:"
SetTextLineTrigger 3 :GOTSHIELDS "Maximum Shields:"
SetTextLineTrigger 2 :GOTMAXFIGS "Max Fighters:"
SetTextLineTrigger 1 :GOTWAVE "Max Figs Per Attack:"
SetTextLineTrigger 6 :GOTLRS "Long Range Scan:"
SetTextLineTrigger 7 :GOTHOLDS "Maximum Holds:"
Pause
:GOTSHIPNAME
KillTrigger 5
If (CURRENTLINE <> "")
	SetVar $shipclass CURRENTLINE
Else
	SetTextLineTrigger 5 :GOTSHIPNAME
End
Pause
:GOTLRS
GetText CURRENTLINE & "!!!" $lrs "Long Range Scan:" "!!!"
StripText $lrs " "
Pause
:GOTTPW
GetText CURRENTLINE $tpw "Turns Per Warp:" "Defensive"
StripText $tpw " "
GetText CURRENTLINE $defodds "Defensive Odds:" ":"
StripText $defodds "."
StripText $defodds " "
Pause
:GOTSHIELDS
GetWordPos CURRENTLINE $pos "Maximum Shields:"
SetVar $pos ($pos + 16)
CutText CURRENTLINE $z_shields $pos 999
StripText $z_shields ","
StripText $z_shields " "
Pause
:GOTMAXFIGS
SetVar $gsdline CURRENTLINE
GetText $gsdline $z_maxfigs "Fighters:" "Offensive"
StripText $z_maxfigs ","
StripText $z_maxfigs " "
GetText CURRENTLINE $offodds "Offensive Odds:" ":"
StripText $offodds "."
StripText $offodds " "
Pause
:GOTWAVE
GetWord CURRENTLINE $z_wave 5
StripText $z_wave ","
GetWord CURRENTLINE $transwarp 8
Pause
:GOTHOLDS
GetWord CURRENTLINE $maxholds 3
GetWord CURRENTLINE $transrange 6
GetWord CURRENTLINE $photonsok 9
Send "q"
KillTrigger 1
KillTrigger 2
KillTrigger 3
KillTrigger 4
KillTrigger 5
KillTrigger 6
KillTrigger 7
SetVar $Z_Strings~trimstring $shipclass
Gosub :Z_Strings~RTRIM
SetVar $shipclass $Z_Strings~trimstring
SetVar $Z_Strings~trimstring $shipclass
Gosub :Z_Strings~LTRIM
SetVar $shipclass $Z_Strings~trimstring
SetVar $found FALSE
SetVar $x 1
While ($x <= $sstats)
	If ($shipclass = $sstatsclass[$x])
		SetVar $found TRUE
		SetVar $x $sstats
	End
	SetVar $x ($x + 1)
End
If ($found <> TRUE)
	Gosub :SSTATSADD
End
SetVar $lastshipupdate $shipid
Return
# CHECKIGON 
:CHECKIGON
SetTextLineTrigger igok :IGON "Your Interdictor generator is now"
SetTextLineTrigger noig :NOIG "is not equipped with an Interdictor Generator!"
Send "b"
Pause
:IGON
GetWord CURRENTLINE $ig 6
If ($ig = "ON")
   Send "n"
Else
   Send "y"
End
:NOIG
KillTrigger igok
KillTrigger noig
Return
# EXPORTAVOIDS 
:EXPORTAVOIDS
Echo "**" & ANSI_12 & "Delete the " & ANSI_14 & GAMENAME & "_AVOIDSLIST.TXT" & ANSI_12 & " avoids backup file first? (Y/N)"
GetConsoleInput $value SINGLEKEY
UpperCase $value
If ($value = "Y")
	Delete GAMENAME & "_AVOIDSLIST.TXT"
End
SetVar $avoidsfiledeleted TRUE
Send "q q q q z 0* q z 0* q z 0*"
Gosub :GETAVOIDS
Echo "**" ANSI_14 & "Export complete..."
Gosub :Z_Lib~ANYKEY
Return
# IMPORTAVOIDS 
:IMPORTAVOIDS
Echo "**" & ANSI_12 & "Clear current avoids first? (Y/N)"
GetConsoleInput $value SINGLEKEY
UpperCase $value
If ($value = "Y")
	Send "q q q q z 0* q z 0* q z 0* c v * y y q "
	ClearAllAvoids
	While ($i <= SECTORS)
		SetVar $avoidarray[$i] FALSE
		SetVar $i ($i + 1)
	End
	Echo "**" & ANSI_14 &"Avoids Cleared..*"
End
Fileexists $fileok GAMENAME & "_AVOIDSLIST.TXT"
If ($fileok = TRUE)
	ReadToArray GAMENAME & "_AVOIDSLIST.TXT" $avoidlist
	SetVar $i 1
	Send "^"
	While ($i <= $avoidlist)
		GetWord $avoidlist[$i] $word 1
		IsNumber $isnum $word
		If ($isnum = TRUE)
			If ($word > 0) and ($word <= SECTORS)
				Send "s" & $word & "*"
				SetAvoid $word
				SetVar $avoidarray[$word] TRUE
				Echo "*" & ANSI_15 & $word
			End
		End
		SetVar $i ($i + 1)
	End
	SetVar $i 1
	Send "q"
	Gosub :Z_Lib~SYNC
	Echo "**" & ANSI_14 & "Avoid Import List.*"
	While ($i <= $avoidlist)
		GetWord $avoidlist[$i] $word 1
		IsNumber $isnum $word
		If ($isnum = TRUE)
			If ($word > 0) and ($word <= SECTORS)
				Echo "*" & ANSI_15 & $word
			End
		End
		SetVar $i ($i + 1)
	End
	Echo "**" & ANSI_14 & "Import Complete..*"
Else
	Echo "**" & ANSI_14 & GAMENAME & "_AVOIDSLIST.TXT" & ANSI_12 & " FILE NOT FOUND !!!*"
End
Gosub :Z_Lib~ANYKEY
Return
# CHANGEDSHIP 
:CHANGEDSHIP
KillAllTriggers
If ($mode = "GENERAL") or ($mode = "COMMAND")
	Send "/*"
	WaitFor "Command [TL="
	Gosub :GETSHIPDATA
	If ($z_autoigon = "TRUE")
		Gosub :CHECKIGON
		Waitfor "Interdictor"
		WaitFor "Command [TL="
	End
	Send "/"
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# HOOKANDTOW 
:HOOKANDTOW
KillAllTriggers
Send #145
WaitOn #145 & #8
CutText CURRENTLINE $startprompt 1 7
SetVar $Z_Lib~messagemode "R"
SetVar $messagemode "R"
SetVar $Z_Lib~setprompt "COMMAND"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
SetVar $prompt $Z_Lib~prompt
If ($prompt = "ERROR")
	SetVar $startprompt ""
	Goto :NOHOOK
End
Gosub :Z_Lib~COMMSOFF
SetArray $towships 0
SetVar $numtows 0
SetVar $lastword 0
SetTextLineTrigger tow1 :HOOK1 "--<  Available Ships in Sector >--"
SetTextLineTrigger notow1 :NOHOOK "You shut off your Tractor Beam."
Send "w*"
Pause
:HOOK1
SetTextLineTrigger tow2 :HOOK2 "----------------------------------"
Pause
:HOOK2
SetTextLineTrigger tow3 :HOOK3 ""
Pause
:HOOK3
GetWord CURRENTLINE $word 1
If ($word = "0") or ($word = "")
	Goto :HOOKNOMORE
ElseIf ($word = "Choose")
	Goto :HOOKNOMORE
ElseIf ($word = "You")
	Goto :HOOKNOMORE
Else
	IsNumber $isnum $word
	If ($isnum = TRUE)
		SetVar $numtows ($numtows + 1)
		SetVar $towships[$numtows] $word
		If ($numtows >= 9)
			Goto :HOOKNOMORE
		End
	End
	Goto :HOOK2
End
:HOOKNOMORE
If ($numtows = 0)
	Echo "**" & $boldred & "No Ships in sector to tow!**"
ElseIf ($numtows = 1)
	Send $towships[1] & "*"
	WaitFor "turns for every sector you move."
	Echo "**" & $boldwhite & "Hooked tow onto ship #" & $towships[1] & ".*"
	SetVar $Z_Lib~message "Hooked tow onto ship #" & $towships[1] & ".*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
Else
	Send #145
	WaitOn #145 & #8
	SetVar $towmenu ""
	SetVar $i 1
	While ($i <= $numtows)
		SetVar $towmenu ($towmenu &  $boldcyan & " [" & $boldyellow & $i & $boldcyan & "]-" & $towships[$i])
		SetVar $i ($i + 1)
	End
	SetVar $towmenu ($towmenu &  $cyan & "  [" & $boldwhite & "Q" & $cyan & "]-" & "Quit")
	Gosub :Z_Lib~BLUELINE
	Gosub :Z_Lib~ZEDLINE
	Echo "[78D" & $boldblue & $blinkon & "HOOK & TOW" & $blinkoff
	Echo "*" & $towmenu
	Gosub :Z_Lib~BLUELINE
	Echo "*"
:TOWMENU
	GetConsoleInput $choice SINGLEKEY
	If ($choice = #13) or ($choice = "q") or ($choice = "Q")
		Echo "**" & $boldred & "CANCELLED by user!**"
		Send "q*"
		Goto :NOHOOK
	Else
		Isnumber $isnum $choice
		If ($isnum = TRUE)
			If ($choice > 0) and ($choice <= $numtows)
				Send $towships[$choice] & "*"
				WaitFor "turns for every sector you move."
				Echo "**" & $boldwhite & "Hooked tow onto ship #" & $towships[$choice] & ".*"
				SetVar $Z_Lib~message "Hooked tow onto ship #" & $towships[$choice] & ".*"
				SetVar $Z_Lib~messageto $sender
				SetVar $Z_Lib~messagemode $messagemode
				Gosub :MSGBRIDGE
				Goto :NOHOOK
			End
		End
		Goto :TOWMENU
	End
End
:NOHOOK
SetVar $towline ""
SetVar $towmenu ""
SetVar $Z_Strings~linecolour $boldred
If ($walking = TRUE)
	Goto :WALKLOOP
End
If ($startprompt = "<StarDo")
	Send "p sg yg q"
ElseIf ($startprompt = "<Shipya")
	Send "p sg yg qs"
ElseIf ($startprompt = "<Hardwa")
	Send "p sg yg qh"
ElseIf ($startprompt = "<Galact")
	Send "p sg yg"
ElseIf ($startprompt = "Which i")
	If (CURRENTSECTOR = STARDOCK)
		Send "p sg yg qs p"
	Else
		Send "P * y" & #8
	End
End
SetVar $reset TRUE
Gosub :Z_Lib~COMMSON
Goto :WAITFORCOMMAND
# CHARGEKEYPRESSED 
:CHARGEKEYPRESSED
KillAllTriggers
Gosub :GETSTATS
SetVar $z_dowavecap $do_wavecap
ReplaceText $z_dowavecap "<WAVE>" $z_wave
SetVar $z_docapture $do_capture
ReplaceText $z_docapture "<WAVE>" $z_wave
SetVar $z_dokill $do_kill
ReplaceText $z_dokill "<WAVE>" $z_wave
SetVar $z_domacro $do_macro
ReplaceText $z_domacro "<WAVE>" $z_wave
SetVar $messagemode "R"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~messageto ""
SetVar $mowmode "CHARGE"
Gosub :GETTARGET
If ($badpath = TRUE)
	Goto :NOCHARGE
End
If ($target < 1) or ($target > SECTORS)
	Gosub :DOOPTIONS
	Goto :NOCHARGE
End
Gosub :MOVE
SetVar $previoussector $current_sector
Gosub :GETSTATS
If ($target <> "-1")
	If ($current_sector = $target)
		SetVar $Z_Lib~message "Arrived at sector: [" & $current_sector & "]*"
		If ($current_sector <> STARDOCK) and ($current_sector > 10) and ($z_mowfigs > 0)
			Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*d"
		End
		If ($jumping = TRUE)
			SetVar $jumplistptr ($jumplistptr + 1)
			If ($jumplistptr > $jumplist)
				SetVar $jumplistptr $jumplist
			End
			GetWord $jumplist[$jumplistptr] $z_nextsector 1
			SaveVar $z_nextsector
			SetVar $jumping FALSE
		End
	Else
		SetVar $Z_Lib~message "DID NOT arrive at sector: [" & $target & "]. I am at sector " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOCHARGE
If ($walking = TRUE)
	Goto :WALKLOOP
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# MOWKEYPRESSED 
:MOWKEYPRESSED
KillAllTriggers
Gosub :GETSTATS
SetVar $z_dowavecap $do_wavecap
ReplaceText $z_dowavecap "<WAVE>" $z_wave
SetVar $z_docapture $do_capture
ReplaceText $z_docapture "<WAVE>" $z_wave
SetVar $z_dokill $do_kill
ReplaceText $z_dokill "<WAVE>" $z_wave
SetVar $z_domacro $do_macro
ReplaceText $z_domacro "<WAVE>" $z_wave
SetVar $messagemode "R"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~messageto ""
SetVar $mowmode "MOW"
Gosub :GETTARGET
If ($badpath = TRUE)
	Goto :NOMOW
End
If ($target < 1) or ($target > SECTORS)
	Gosub :DOOPTIONS
	Goto :NOMOW
End
Gosub :MOVE
SetVar $previoussector $current_sector
Gosub :GETSTATS
If ($target <> "-1")
	If ($current_sector = $target)
		SetVar $Z_Lib~message "Arrived at sector: [" & $current_sector & "]*"
		If ($jumping = TRUE)
			SetVar $jumplistptr ($jumplistptr + 1)
			If ($jumplistptr > $jumplist)
				SetVar $jumplistptr $jumplist
			End
			GetWord $jumplist[$jumplistptr] $z_nextsector 1
			SaveVar $z_nextsector
			SetVar $jumping FALSE
		End
	Else
		SetVar $Z_Lib~message "DID NOT arrive at sector: [" & $target & "]. I am at sector " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOMOW
If ($walking = TRUE)
	Goto :WALKLOOP
End
SetVar $reset TRUE
Goto :WAITFORCOMMAND
# BLINDWARPKEYPRESSED 
:BLINDWARPKEYPRESSED
KillAllTriggers
Echo "***" & ANSI_12 & $blinkon & "ARE YOU SURE YOU WANT TO BLINDWARP?" & $blinkoff
GetConsoleInput $yn SINGLEKEY
UpperCase $yn
If ($yn <> "Y")
	Goto :NOBLINDWARP
End
SetVar $z_dowavecap $do_wavecap
ReplaceText $z_dowavecap "<WAVE>" $z_wave
SetVar $z_docapture $do_capture
ReplaceText $z_docapture "<WAVE>" $z_wave
SetVar $z_dokill $do_kill
ReplaceText $z_dokill "<WAVE>" $z_wave
SetVar $z_domacro $do_macro
ReplaceText $z_domacro "<WAVE>" $z_wave
SetVar $messagemode "R"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~messageto ""
Gosub :GETSTATS
If ($twarp = "0")
	SetVar $Z_Lib~message "I need a Transwarp Drive... Exiting.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBLINDWARP
End
SetVar $mowmode "BLINDWARP"
Gosub :GETTARGET
If ($badpath = TRUE)
	Goto :NOBLINDWARP
End
If ($Z_Lib~prompt = "ERROR")
   Goto :NOBLINDWARP
End
SetVar $prompt $Z_Lib~prompt
If ($target < 1) or ($target > SECTORS)
	Gosub :DOOPTIONS
	Gosub :Z_Lib~SYNC
	Goto :NOBLINDWARP
End
GetDistance $blinddistance $current_sector $target
If ($blinddistance = "-1")
	SetTextTrigger trip1 :BLINDTRIP1 "The shortest path"
	Send "q q q q * c f" & $current_sector & "*" & $target "*q"
	Pause
:BLINDTRIP1
	KillAllTriggers
	GetWord CURRENTLINE $blinddistance 4
	StripText $blinddistance "("
End
If ($blinddistance = "-1") or (($blinddistance * 3) > $ore)
	SetVar $Z_Lib~message "Not enough fuel for the jump... Exiting.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOBLINDWARP
End
SetVar $previoussector $current_sector
If ($blinddistance = 1)
	SetVar $mowmode "Charge"
	Gosub :MOVE
	Goto :MADEITBLIND
Else
	SetVar $heretrigger "["& $target &"] (?="
	SetTextTrigger blindtrigger1 :MADEITBLIND "Warping to sector"
	SetTextTrigger blindtrigger2 :MADEITBLIND $heretrigger
	SetTextTrigger fused :FUSED "YOUR SHIP MATERIALIZED IN A SOLID MASS!"
	Send "q q q q * m" & $target & "* y y"
	Pause
End
:FUSED
KillAllTriggers
Goto :NOBLINDWARP
:MADEITBLIND
KillAllTriggers
Gosub :GETSTATS
If ($target <> "-1")
	Gosub :DOOPTIONS
	Gosub :Z_Lib~SYNC
	If ($current_sector = $target)
		SetVar $Z_Lib~message "Arrived at sector: [" & $current_sector & "]*"
		If ($jumping = TRUE) or ($target = $z_nextsector)
			SetVar $thisj $jumplistptr
			SetVar $jumplistptr ($jumplistptr + 1)
			If ($jumplistptr > $jumplist)
				SetVar $jumplistptr $jumplist
			End
			GetWord $jumplist[$jumplistptr] $z_nextsector 1
			SaveVar $z_nextsector
			SetPrecision 4
			SetVar $jlp ((100 / $jumplist) * $thisj)
			SetPrecision 0
			SetVar $jlp ($jlp * 1)
			SetVar $Z_Lib~message ($Z_Lib~message & "Jumplist Progress: " & $jlp & "% (" & $thisj & "/" & $jumplist & ")*")
			SetVar $jumping FALSE
		End
	Else
		SetVar $Z_Lib~message "DID NOT arrive at sector: [" & $target & "]. I am at sector " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOBLINDWARP
If ($walking = TRUE)
	Goto :WALKLOOP
End
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Goto :WAITFORCOMMAND
# TWARPKEYPRESSED 
:TWARPKEYPRESSED
KillAllTriggers
SetVar $z_dowavecap $do_wavecap
ReplaceText $z_dowavecap "<WAVE>" $z_wave
SetVar $z_docapture $do_capture
ReplaceText $z_docapture "<WAVE>" $z_wave
SetVar $z_dokill $do_kill
ReplaceText $z_dokill "<WAVE>" $z_wave
SetVar $z_domacro $do_macro
ReplaceText $z_domacro "<WAVE>" $z_wave
SetVar $messagemode "R"
SetVar $messageto ""
SetVar $Z_Lib~messagemode "R"
SetVar $Z_Lib~messageto ""
Gosub :GETSTATS
If ($twarp = "0")
	SetVar $Z_Lib~message "I need a Transwarp Drive... Exiting.*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTWARP
End
SetVar $mowmode "TWARP"
Gosub :GETTARGET
If ($badpath = TRUE)
	Goto :NOTWARP
End
SetVar $Z_Lib~setprompt "CITCOM"
SetVar $Z_Lib~heraldss TRUE
Gosub :Z_Lib~PROMPT
Send " "
If ($Z_Lib~prompt = "ERROR")
   Goto :NOTWARP
End
SetVar $prompt $Z_Lib~prompt
If ($target < 1) or ($target > SECTORS)
	Gosub :DOOPTIONS
	Goto :NOTWARP
End
SetVar $previoussector $current_sector
Gosub :TWARPING
Gosub :GETSTATS
If ($target <> "-1")
	If ($current_sector = $target)
		SetVar $Z_Lib~message "Arrived at sector: [" & $current_sector & "]*"
		If ($jumping = TRUE) or ($target = $z_nextsector)
			SetVar $thisj $jumplistptr
			SetVar $jumplistptr ($jumplistptr + 1)
			If ($jumplistptr > $jumplist)
				SetVar $jumplistptr $jumplist
			End
			GetWord $jumplist[$jumplistptr] $z_nextsector 1
			SaveVar $z_nextsector
			SetPrecision 4
			SetVar $jlp ((100 / $jumplist) * $thisj)
			SetPrecision 0
			SetVar $jlp ($jlp * 1)
			SetVar $Z_Lib~message ($Z_Lib~message & "Jumplist Progress: " & $jlp & "% (" & $thisj & "/" & $jumplist & ")*")
			SetVar $jumping FALSE
		End
	Else
		SetVar $Z_Lib~message "DID NOT arrive at sector: [" & $target & "]. I am at sector " & $current_sector & ".*"
	End
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
:NOTWARP
If ($walking = TRUE)
	Goto :WALKLOOP
End
SetVar $reset TRUE
SetVar $Z_Lib~heraldss FALSE
Goto :WAITFORCOMMAND
# TWARPING 
:TWARPING
Gosub :GETSTATS
If ($current_sector = $target)
	Echo "**" & ANSI_12 & "You are already here.**"
	SetVar $Z_Lib~message "I am already here...*"
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
	Goto :NOTWARP2
End
If ($prompt = "Citadel")
	SetTextTrigger getplanetnum :GETPLANETNUM "Planet #"
	Send "q*"
	Pause
:GETPLANETNUM
	KillAllTriggers
	GetWord CURRENTLINE $planetnumber 2
	StripText $planetnumber "#"
	SetTextTrigger gethops :TWGETHOPS "TransPort power ="
	SetTextTrigger notrans :NOTRANS "Planet command (?"
	Pause
:TWGETHOPS
	KillAllTriggers
	GetWord CURRENTLINE $transhops 5
	Send "c"
	Goto :GOTPLANETSTUFF
:NOTRANS
	KillAllTriggers
	SetVar $prompt "Command"
	Send "t**1*q "
	Gosub :GETSTATS
:GOTPLANETSTUFF
End
GetSectorParameter $target "FIGSEC" $directok
If (($target = STARDOCK) or ($target <= 10)) and ($align >= 1000)
	SetVar $directok TRUE
End
If ($directok <> TRUE)
	If ($z_twarpadj = "TRUE") or ($target = STARDOCK)
		SetVar $warpsincount SECTOR.WARPINCOUNT[$target]
		SetVar $count "1"
		SetVar $availablewarps "0"
		While ($count <= $warpsincount)
			SetVar $thiswarp SECTOR.WARPSIN[$target][$count]
			GetSectorParameter $thiswarp "FIGSEC" $figged
			If ($figged = TRUE)
				SetVar $availablewarps ($availablewarps + 1)
				SetVar $warpsin[$availablewarps] $thiswarp
			End
			SetVar $count ($count + 1)
		End
		If ($availablewarps < 1)
			SetVar $jumpsector $target
		Else
			GetRnd $warp 1 $availablewarps
			SetVar $jumpsector $warpsin[$warp]
		End
	Else
		SetVar $jumpsector $target
	End
Else
	SetVar $jumpsector $target
End
GetDistance $distance $current_sector $jumpsector
If ($distance = "-1")
	Goto :NOCOURSE
End
Goto :GOTCOURSE
:NOCOURSE
If ($jumpsector = $current_sector)
	Goto :CLEAR
End
SetTextTrigger trip1 :TRIP1 "The shortest path"
Send "c f" & $current_sector & "*" & $jumpsector "*q"
Pause
:TRIP1
KillAllTriggers
GetWord CURRENTLINE $distance 4
StripText $distance "("
:GOTCOURSE
If ($prompt = "Command")
	SetVar $oreneeded ($distance * 3)
	If ($ore < $oreneeded)
		GetSectorParameter $current_sector "BUSTED" $busted
		If (PORT.EXISTS[$current_sector] = TRUE) and (PORT.BUYFUEL[$current_sector] = FALSE) and (PORT.CLASS[$current_sector] <> "0") and ($busted <> TRUE)
			Send "p * * * z 0* z 0*"
			Gosub :GETSTATS
		End
		If ($ore < $oreneeded)
			If ($planetnumber > 0)
				Send "lj" & #8 & #8 & $planetnumber & "*c"
			End
			SetVar $Z_Lib~message "I need at least " & $oreneeded & " ore for the trip! Exiting.*"
			SetVar $Z_Lib~messageto $sender
			SetVar $Z_Lib~messagemode $messagemode
			Gosub :MSGBRIDGE
			Goto :NOTWARP2
		End
	End
Else
	Send "qt**1*c"
	Gosub :Z_Lib~SYNC
	SetVar $oreneeded ($distance * 10)
	SetTextTrigger planetore :PLANETORE "Fuel Ore"
	Send "q*"
	Pause
:PLANETORE
	KillAllTriggers
	GetWord CURRENTLINE $planetore 6
	StripText $planetore ","
	Send "c"
	If ($planetore < $oreneeded)
		SetVar $Z_Lib~message "I need at least " & $oreneeded & " ore on the planet! Exiting.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOTWARP2
	End
End
Gosub :Z_Lib~ISITUNLIMITED
If ($Z_Lib~isunlimited = FALSE)
	If ($tpw = "0") or ($tpw = "")
		Gosub :GETSHIPDATA
	End

	If ($jumpsector = $target)
		If ($prompt = "Citadel")
			SetVar $minturns (($tpw * 3) + 1)
		Else
			SetVar $minturns ($tpw * 4)
		End
	Else
		If ($prompt = "Citadel")
			SetVar $minturns (($tpw * 4) + 1)
		Else
			SetVar $minturns ($tpw * 5)
		End
	End
	If ($turns < $minturns)
		SetVar $Z_Lib~message "I don't have enough turns left!. Exiting.*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :NOTWARP2
	End
End
SetVar $heretrigger "["& $jumpsector &"] (?="
If ($prompt = "Command")
:TWARP
	KillAllTriggers
	SetVar $nothere FALSE
	SetTextTrigger trigger61 :USINGTWARP "Do you want to engage the TransWarp"
	SetTextTrigger trigger63 :WEREHERE "Warping to sector"
	SetTextTrigger trigger65 :WEREHERE $heretrigger
	SetTextTrigger trigger66 :AVOIDED "DANGER! You have marked sector"
	SetTextTrigger trigger70 :IGED "An Interdictor Generator in this sector holds you fast!"
	SetTextTrigger trigger71 :PHOTONED "Your ship was hit by a Photon and has been disabled."
	SetTextTrigger trigger72 :CUYOFF "Engage the Autopilot? (Y/N/Single step/Express) [Y]"
	SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
	#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
	Send "m" & $jumpsector & "*"
	Pause
End
:USINGTWARP
KillAllTriggers
SetTextTrigger trigger61 :NOFUEL "not have enough Fuel Ore"
SetTextTrigger trigger62 :NOBEAM "No locating beam found"
SetTextTrigger trigger63 :TWARPOK "Locating beam pinpointed"
SetTextTrigger trigger69 :NOROUTE "No route within"
SetTextTrigger norange :NORANGE "This planetary transporter does not have the range."
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
If ($prompt = "Citadel")
	Send "b" & $jumpsector & "*"
Else
	Send "y"
End
Pause
:CUYOFF
Send "n c u y q "
Goto :TWARP
:NORANGE
KillAllTriggers
Send "qq "
SetVar $prompt "Command"
Goto :TWARP
:NOROUTE
KillAllTriggers
Send "*"
SetVar $Z_Lib~message "NO ROUTE TO JUMP SECTOR " & $jumpsector & " !!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTWARP2
:PHOTONED
KillAllTriggers
SetVar $Z_Lib~message "PHOTON DAMAGE !!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTWARP2
:IGED
KillAllTriggers
SetVar $Z_Lib~message "CAUGHT IN AN INTERDICTOR!!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTWARP2
:TWARPOK
KillAllTriggers
If ($prompt = "Citadel")
	SetTextTrigger mined :MINED "Mined Sector: Do you wish to Avoid this sector in the future?"
	SetTextTrigger trigger65 :CLEAR $heretrigger
Else
	SetTextTrigger trigger65 :WEREHERE $heretrigger
	SetTextTrigger trigger63 :WEREHERE "TransWarp Drive Engaged!"
End
SetEventTrigger connectlost :CONNECTIONLOST "CONNECTION LOST"
#SetEventTrigger disconnected :CONNECTIONLOST "CLIENT DISCONNECTED"
Send "y"
Pause
:AVOIDED
KillAllTriggers
SetVar $Z_Lib~message "JUMP SECTOR " & $jumpsector & " AVOIDED !!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Send "n"
Goto :NOTWARP2
:NOBEAM
KillAllTriggers
Send "n"
SetSectorParameter $jumpsector "FIGSEC" FALSE
SetVar $Z_Lib~message "NO FIGHTER IN JUMP SECTOR " & $jumpsector & " !!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTWARP2
:NOFUEL
KillAllTriggers
SetVar $Z_Lib~message "NOT ENOUGH FUEL TO MAKE THE JUMP !!! Exiting.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Goto :NOTWARP2
:WEREHERE
KillAllTriggers
SetVar $previoussector $current_sector
If ($jumpsector <> $target)
	SetTextTrigger mined :MINED "Mined Sector: Do you wish to Avoid this sector in the future?"
	SetTextTrigger clear :CLEAR "Command [TL="
	SetDelayTrigger clear2 :CLEAR 2000
	Send #145
	Pause
:MINED
	KillAllTriggers
	Send "n"
:CLEAR
	KillAllTriggers
	If ($jumpsector <> $target)
		Gosub :MOVE
		If ($target <> STARDOCK) and ($target > 10) and ($z_mowfigs > 0)
			Send "fz" & $z_mowfigs & "*" & $z_figowner & "q*d"
		End
	End
End
Gosub :DOOPTIONS
Gosub :Z_Lib~SYNC
:NOTWARP2
Return
# DOOPTIONS 
:DOOPTIONS
SetVar $dooptionsonly FALSE
If ($target < 1) or ($target > SECTORS)
	SetVar $dooptionsonly TRUE 
	SetVar $target CURRENTSECTOR
End
If ($z_gas = TRUE)
	GetSectorParameter $target "BUSTED" $busted
	If (PORT.EXISTS[$target] = TRUE) and (PORT.BUYFUEL[$target] = FALSE) and (PORT.CLASS[$target] <> "0") and ($busted <> TRUE)
	   Send "q q q q z 0* q z 0* q z 0* p * * * z 0* z 0* "
	End
End
If ($z_clean = TRUE) and ($p = TRUE)
	Gosub :INTCOM_CLEAN
End
If ($z_surround = TRUE)
	Send "q q q q z 0* q z 0* q z 0*"
	Gosub :GETSTATS
	SetVar $Z_Surround~surround $current_sector
	SetVar $Z_Surround~surroundwave $z_wave
	SetVar $Z_Surround~surroundowner $z_figowner
	SetVar $Z_Surround~surroundtype $z_figtype
	SetVar $Z_Surround~surroundfigs $z_mowfigs
	SetVar $Z_Surround~surroundmines $z_mowmines
	SetVar $Z_Surround~surroundlimps $z_mowlimps
	SetVar $Z_Surround~scanner $Scanner
	SetVar $Z_Surround~forced FALSE
	Gosub :Z_Surround~SURROUND
End
If ($z_wavecap = TRUE)
	Send $z_dowavecap
End
If ($z_capture = TRUE)
	SetVar $attackmode "CAP"
	Send "q q q q z 0* q z 0* q z 0* "
	Gosub :SHIPCAP
End
If ($z_buzz = TRUE)
	send $z_docapture
End
If ($z_kill = TRUE)
	SetVar $count 1
	If ($z_volley <> "0") and ($z_volley <> "")
		SetVar $volleys $z_volley
	Else
		If ($z_wave <> "0") and ($z_maxfigs <> "0")
			SetVar $volleys ($z_maxfigs / $z_wave)
		Else
			SetVar $volleys 5
		End
	End
	While ($count <= $volleys)
		Send $z_dokill
		SetVar $count ($count + 1)
	End
End
If ($z_holoattack = TRUE)
	If ($z_kill = TRUE)
		SetVar $attackmode "KILL"
	Else
		SetVar $attackmode "CAP"
	End
	Gosub :HOLOATTACK
End
If ($z_macro = TRUE)
	Send $z_domacro
End
If ($z_callsaveme = TRUE)
	Send "q q q q z 0* q z 0* q z 0*"
	SetVar $z_dockport FALSE
	SetVar $z_land FALSE
	If ($z_callfast = "TRUE") and ($p = TRUE)
		SetVar $Z_SaveMe~planet $rescueplanet
		SetVar $Z_SaveMe~formattedsector $formattedsector
		SetVar $Z_SaveMe~current_sector $target
		SetVar $Z_SaveMe~nosend TRUE
		SetVar $Z_SaveMe~triedagain 0
		Gosub :Z_SaveMe~MOVEMENTCALL
	Else
		Gosub :Z_SaveMe~CALL
	End
End
If ($z_dockport = TRUE)
	SetVar $land FALSE
	If (SECTOR.EXPLORED[$target] <> "YES")
		Send "*"
		Gosub :Z_Lib~SYNC
	End
#	Send "q q q z 0* q z 0* q z 0*"
	If ($target = STARDOCK) and (PORT.EXISTS[$target] = TRUE)
	   Send "p sg yg q"
	   SetVar $z_limpetalarm FALSE
	ElseIf (PORT.EXISTS[$target] = TRUE) and (PORT.CLASS[$target] = "0")
	   Send "P * y" & #8
	   SetVar $z_limpetalarm FALSE
	ElseIf (PORT.EXISTS[$target] = TRUE)
	   Send "P *"
	Else
		Send "*"
	End
Else
	If ($dooptionsonly = FALSE) and ($z_land <> TRUE)
		Send "*"
	End
	SetVar $dooptionsonly ""
End
If ($z_land = TRUE)
	If ($target = 1)
		SetTextTrigger ps1 :LNOPS "Do you wish to"
		SetTextTrigger ps2 :LPS "Land on which planet"
		Send "l "
		Pause
:LPS
		KillTrigger ps1
		KillTrigger ps2
		Send "1* "
:LNOPS
		KillTrigger ps1
		KillTrigger ps2
	ElseIf ($z_landplanet = "0") or ($z_landplanet = "")
		Send "l j" & #8 & #8 & $z_planet & "* * c x q * "
	Else
		Send "l j" & #8 & #8 & $z_landplanet & "* * c x q *"
	End
End
If ($z_runcommand = TRUE)
	KillAllTriggers
	Send #145
	WaitOn #145 & #8
	SetVar $z_movement TRUE
	LowerCase $commandline
	SetVar $mcdisp "[" & $commandline & "]"
	GoSub :AUTOBOT
	SetVar $commandline ""
	SetVar $z_movement FALSE
End
If ($target < 1) or ($target > SECTORS)
	SetVar $ssstring "Target Sector NOT VALID... Not Mowing/Charging...*"
Else
	SetVar $ssstring ""
End
If ($z_quiet <> TRUE)
	If ($z_gas = TRUE)
		SetVar $ssstring ($ssstring & "Gas option executed...*")
	End
	If ($z_clean = TRUE) and ($p = TRUE)
		SetVar $ssstring ($ssstring & "Clean option executed...*")
	End
	If ($z_surround = TRUE)
		SetVar $ssstring ($ssstring & "Surround option executed...*")
	End
	If ($z_wavecap = TRUE)
		SetVar $ssstring ($ssstring & "WaveCap option executed...*")
	End
	If ($z_capture = TRUE)
		SetVar $ssstring ($ssstring & "Capture option executed...*")
	End
	If ($z_buzz = TRUE)
		SetVar $ssstring ($ssstring & "Buzz option executed...*")
	End
	If ($z_kill = TRUE)
		SetVar $ssstring ($ssstring & "Kill option executed...*")
	End
	If ($z_callsaveme = TRUE)
		SetVar $ssstring ($ssstring & "Call Saveme option executed...*")
	End
	If ($z_holoattack = TRUE)
		SetVar $ssstring ($ssstring & "Holo-attack option executed...*")
	End
	If ($z_macro = TRUE)
		SetVar $ssstring ($ssstring & "Macro option executed...*")
	End
	If ($z_dockport = TRUE)
		SetVar $ssstring ($ssstring & "Port option executed...*")
	End
	If ($z_land = TRUE)
		SetVar $ssstring ($ssstring & "Land option executed...*")
	End
	If ($z_runcommand = TRUE)
		SetVar $ssstring ($ssstring & "Command option " & $mcdisp & " executed...*")
	End
End
If ($ssstring <> "")
	SetVar $Z_Lib~message $ssstring
	SetVar $Z_Lib~messageto $sender
	SetVar $Z_Lib~messagemode $messagemode
	Gosub :MSGBRIDGE
End
Gosub :CLEARMOVEOPTIONS
SetVar $ssstring ""
Return
# MOVE 
:MOVE
SetVar $destination $target
SetVar $badpath FALSE
Gosub :GETCOURSE
If ($badpath = TRUE)
	Goto :ENDMOVE
End
If ($plow = TRUE)
	SetVar $Z_Strings~padchar "0"
	SetVar $Z_Strings~padlen 5
	SetVar $Z_Strings~unpadded $target
	GoSub :Z_Strings~PAD
	SetVar $formattedsector $Z_Strings~padded
	SetVar $Z_Lib~message $formattedsector & "=saveme*"
	SetVar $Z_Lib~messageto ""
	SetVar $Z_Lib~messagemode "R"
	Gosub :MSGBRIDGE
	Gosub :Z_Lib~SYNC
End
SetVar $leg 2
SetVar $mowmacro "q q q q z 0* q z 0* q z 0* "
While ($leg <= $mowcourselen)
	SetVar $mowmacro ($mowmacro & "m " & $mowcourse[$leg] & "*    ")
	If (($mowcourse[$leg] > 10) and ($mowcourse[$leg] <> STARDOCK))
		SetVar $mowmacro ($mowmacro & "za" & $z_wave & "* *  ")
	end
	If (($mowmode = "MOW") and ($z_mowfigs >= 0) and ($mowcourse[$leg] > 10) and ($mowcourse[$leg] <> STARDOCK) and ($leg > 1))
		If ($z_figtype = "d")
			SetVar $mowmacro ($mowmacro & "fz" & $z_mowfigs & "*" & $z_figowner & "q*d")
		Else
			SetVar $mowmacro ($mowmacro & "fz" & $z_mowfigs & "*" & $z_figowner & "q*" & $z_figtype & "q * ")
		End
		SetSectorParameter $mowcourse[$leg] "FIGSEC" TRUE
	end
	If (($mowmode = "MOW") and ($z_mowmines > 0) and ($mowcourse[$leg] > 10) and ($mowcourse[$leg] <> STARDOCK) and ($leg > 1))
		SetVar $mowmacro ($mowmacro & "h 1 z" & $z_mowmines & " * z" & $z_figowner & "* ")
		SetSectorParameter $mowcourse[$leg] "MINESEC" TRUE
	end
	If (($mowmode = "MOW") and ($z_mowlimps > 0) and ($mowcourse[$leg] > 10) and ($mowcourse[$leg] <> STARDOCK) and ($leg > 1))
		SetVar $mowmacro ($mowmacro & "h 2 z" & $z_mowlimps & " * z" & $z_figowner & "* ")
		SetSectorParameter $mowcourse[$leg] "LIMPSEC" TRUE
	end
	SetVar $leg ($leg + 1)
End
Send $mowmacro
If ($mowmode <> "TWARP")
	Gosub :DOOPTIONS
End
:ENDMOVE
Return
# GETCOURSE 
:GETCOURSE
#---------------------------------------------------------------
If (CURRENTSECTOR > 0) and (CURRENTSECTOR <= SECTORS) and ($destination > 0) and ($destination <= SECTORS)
	Getcourse $mowcourse CURRENTSECTOR $destination
	If ($mowcourse <> "-1")
		SetVar $mowcourselen ($mowcourse + 1)
		Goto :GETCOURSEDONE
	End
Else
	ECHO "*** GETCOURSE ERROR ! - CURRENT SECTOR = " & CURRENTSECTOR & " - DESTINATION = " & $destination & "***"
	Goto :FINISH
End
#---------------------------------------------------------------
SetArray $mowcourse 80
SetVar $rawsectors ""
SetTextLineTrigger linetrigger1 :STARTGETCOURSE " > "
setTextLineTrigger linetrigger6 :STARTGETCOURSE "Error - No route within"
Send "^f*" & $destination & "*q"
Pause
:STARTGETCOURSE
KillTrigger linetrigger1
KillTrigger linetrigger2
KillTrigger linetrigger3
KillTrigger linetrigger4
KillTrigger linetrigger5
KillTrigger linetrigger6
KillTrigger linetrigger7
SetVar $badpath FALSE
SetVar $line CURRENTLINE
ReplaceText $line ">" " "
StripText $line "("
StripText $line ")"
SetVar $line ($line & " ")
GetWordPos $line $pos1 "So what's the point?"
GetWordPos $line $pos2 ": ENDINTERROG"
GetWordPos $line $pos3 "Error"
If ($pos1 > 0) or ($pos2 > 0)
	SetVar $badpath TRUE
	Goto :BADPATH
End
If ($pos3 > 0)
	Send "* q "
	SetVar $badpath TRUE
	Goto :BADPATH
End
GetWordPos $line $pos1 "FM"
GetWordPos $line $pos2 "TO"
if (($pos1 <= 0) AND ($pos2 <= 0))
	SetVar $rawsectors $rawsectors & " " & $line
end
GetWordPos $line $pos1 " " & $destination & " "
GetWordPos $line $pos2 "(" & $destination & ")"
GetWordPos $line $pos3 "TO"
If ((($pos1 > 0) OR ($pos2 > 0)) AND ($pos3 <= 0))
	goto :GOTSECTORS
Else
	KillTrigger linetrigger1
	KillTrigger linetrigger2
	KillTrigger linetrigger3
	KillTrigger linetrigger4
	KillTrigger linetrigger5
	KillTrigger linetrigger6
	KillTrigger linetrigger7
	setTextLineTrigger linetrigger1 :STARTGETCOURSE " > "	
	setTextLineTrigger linetrigger2 :STARTGETCOURSE " "& $destination & " "
	setTextLineTrigger linetrigger3 :STARTGETCOURSE "(" & $destination & ")"
	setTextLineTrigger linetrigger4 :STARTGETCOURSE "So what's the point?"
	setTextLineTrigger linetrigger5 :STARTGETCOURSE ": ENDINTERROG"
	setTextLineTrigger linetrigger6 :STARTGETCOURSE "Error - No route within"
	setTextLineTrigger linetrigger7 :STARTGETCOURSE " "& $destination
End
pause
:GOTSECTORS
SetVar $rawsectors $rawsectors & " !!!"
SetVar $mowcourselen "0"
SetVar $count "1"

GetWord $rawsectors $mowcourse[$count] $count
While ($mowcourse[$count] <> "!!!")
	SetVar $mowcourselen ($mowcourselen + 1)
	SetVar $count ($count + 1)
	GetWord $rawsectors $mowcourse[$count] $count
End
Goto :GETCOURSEDONE
:BADPATH
Echo "**" & ANSI_12 & "NO PATH FOUND TO THAT SECTOR!**"
:GETCOURSEDONE
Return
# GETTARGET 
:GETTARGET
SetVar $target "0"
LoadVar $z_base
Gosub :GETBACKDOORS
LoadVar $z_safesector
SetVar $stardockok FALSE
SetVar $lastok FALSE
SetVar $safeok FALSE
SetVar $baseok FALSE
SetVar $options ""
SetVar $options2 ""
SetVar $optslen 0
SetVar $badpath FALSE
If ($z_mslflag = TRUE) and ($z_mslsok = TRUE)
	Gosub :CHECKMSLSFIGGED
End
SetVar $optslen ($optslen + 13)
If (STARDOCK > 0) and (STARDOCK <= SECTORS)
	SetVar $stardockok TRUE
	If ($align >= 1000)
		SetVar $options ($options & ANSI_10 & " [" & ANSI_15 & "D" & ANSI_10 & "]-STARDOCK")
	Else
		SetVar $options ($options & ANSI_10 & " [" & ANSI_15 & "D" & ANSI_10 & "]-" & ANSI_12 & "STARDOCK")
	End
	If ($z_sdbackdoor > 0) and ($z_sdbackdoor <= SECTORS)
		GetSectorParameter $z_sdbackdoor "FIGSEC" $figged 
		If ($figged = TRUE)
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "DB" & ANSI_10 & "]-" & ANSI_2 & "DOCKBD")
		Else
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "DB" & ANSI_10 & "]-" & ANSI_4 & "DOCKBD")
		End
		SetVar $sdbdok TRUE
	Else
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "DOCKBD")
	End
Else
	SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "STARDOCK")
	SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "DOCKBD")
End
SetVar $rylosok FALSE
SetVar $optslen ($optslen + 10)
If (RYLOS > 0) and (RYLOS <= SECTORS)
	SetVar $rylosok TRUE
	GetSectorParameter RYLOS "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "R" & ANSI_10 & "]-RYLOS")
	Else
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "R" & ANSI_10 & "]-" & ANSI_12 & "RYLOS")
	End
	If ($z_rybackdoor > 0) and ($z_rybackdoor <= SECTORS)
		GetSectorParameter $z_rybackdoor "FIGSEC" $figged 
		If ($figged = TRUE)
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "RB" & ANSI_10 & "]-" & ANSI_2 & "RYLOSBD")
		Else
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "RB" & ANSI_10 & "]-" & ANSI_4 & "RYLOSBD")
		End
		SetVar $rybdok TRUE
	Else
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "RYLOSBD")
	End
Else
	SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "RYLOS")
	SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "RYLOSBD")
End
SetVar $alphaok FALSE
SetVar $optslen ($optslen + 10)
If (ALPHACENTAURI > 0) and (ALPHACENTAURI <= SECTORS)
	SetVar $alphaok TRUE
	GetSectorParameter ALPHACENTAURI "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "A" & ANSI_10 & "]-ALPHA")
	Else
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "A" & ANSI_10 & "]-" & ANSI_12 & "ALPHA")
	End
	If ($z_acbackdoor > 0) and ($z_acbackdoor <= SECTORS)
		GetSectorParameter $z_acbackdoor "FIGSEC" $figged 
		If ($figged = TRUE)
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "AB" & ANSI_10 & "]-" & ANSI_2 & "ALPHABD")
		Else
			SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "AB" & ANSI_10 & "]-" & ANSI_4 & "ALPHABD")
		End
		SetVar $acbdok TRUE
	Else
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "ALPHABD")
	End
Else
	SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "ALPHA")
	SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "ALPHABD")
End
SetVar $baseok FALSE
SetVar $optslen ($optslen + 9)
If ($z_base > 0) and ($z_base <= SECTORS)
	SetVar $baseok TRUE
	GetSectorParameter $z_base "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "B" & ANSI_10 & "]-BASE")
	Else
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "B" & ANSI_10 & "]-" & ANSI_12 & "BASE")
	End
Else
	SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "BASE")
End
If ($z_tebackdoor > 0) and ($z_tebackdoor <= SECTORS)
	GetSectorParameter $z_tebackdoor "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "TB" & ANSI_10 & "]-" & ANSI_2 & "TERRABD")
	Else
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "TB" & ANSI_10 & "]-" & ANSI_4 & "TERRABD")
	End
	SetVar $tebdok TRUE
Else
	SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "TERRABD")
End
SetVar $safeok FALSE
If ($z_safesector > 0) and ($z_safesector <= SECTORS)
	SetVar $safeok TRUE
	SetVar $optslen ($optslen + 15)
	GetSectorParameter $z_safesector "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "S" & ANSI_10 & "]-SAFESECTOR")
	Else
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "S" & ANSI_10 & "]-" & ANSI_12 & "SAFESECTOR")
	End
Else
	SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "SAFESECTOR")
End
If ($z_nextsector > 0) and ($z_nextsector <= SECTORS)
	If ($jumplist > 0)
		If ($jumplistptr = 1)
			SetVar $jpct "Top"
		ElseIf ($jumplistptr = $jumplist)
			SetVar $jpct "LAST"
		Else
			SetPrecision 4
			SetVar $jpct ((100 / $jumplist) * $jumplistptr)
			SetPrecision 0
			SetVar $jpct ($jpct * 1)
			SetVar $jpct ($jpct & "%")
		End
	Else
		SetVar $jpct " "
	End
	GetSectorParameter $z_nextsector "FIGSEC" $figged 
	If ($figged = TRUE)
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "J" & ANSI_10 & "]-" & ANSI_2 & "NEXTJUMP (" & ANSI_10 & $z_nextsector & ANSI_2 & ")-" & ANSI_10 & $jpct)
	Else
		SetVar $options2 ($options2 & ANSI_10 & " [" & ANSI_15 & "J" & ANSI_10 & "]-" & ANSI_4 & "NEXTJUMP (" & ANSI_4 & $z_nextsector & ANSI_4 & ")-" & ANSI_4 & $jpct)
	End
	SetVar $jumpok TRUE
Else
	SetVar $options2 ($options2 & ANSI_10 & "  [" & ANSI_15 & "  " & ANSI_10 & "]-" & ANSI_8 & "NEXT JUMP")
End
If ($previoussector <> "")
	If ($previoussector > 0) and ($previoussector <= SECTORS)
		SetVar $lastok TRUE
		SetVar $optslen ($optslen + 15)
		GetSectorParameter $previoussector "FIGSEC" $figged 
		If ($figged = TRUE)
			SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "L" & ANSI_10 & "]-LASTSECTOR")
		Else
			SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & "L" & ANSI_10 & "]-" & ANSI_12 & "LASTSECTOR")
		End
	Else
		SetVar $options ($options & ANSI_10 & "  [" & ANSI_15 & " " & ANSI_10 & "]-" & ANSI_8 & "LASTSECTOR")
	End
End
Gosub :Z_Lib~COMMSOFF
Echo "*" 
Gosub :Z_Lib~BLUELINE
Gosub :Z_Lib~ZEDLINE
If ($z_lasthit = "0") or ($z_lasthit = "")
	SetVar $lasthitd ""
Else
	If ($z_lasthit > 10) and ($z_lasthit <= SECTORS)
		GetSectorParameter $z_lasthit "FIGSEC" $figged
		If ($figged = TRUE)
			SetVar $lasthitd $boldblue & "[" & $boldwhite & "H" & $boldblue & "]" & "[1C" & "Last" & #196 & "Hit:" & #196 & $boldblue & "[" & $boldgreen & $z_lasthit & $boldblue & "]"
		Else
			SetVar $lasthitd $boldblue & "[" & $boldwhite & "H" & $boldblue & "]" & "[1C" & "Last" & #196 & "Hit:" & #196 & $boldblue & "[" & $boldred & $z_lasthit & $boldblue & "]"
		End
	End
End
If ($mowmode = "BLINDWARP")
	Echo "[78D" & ANSI_12 & "[5m !!! " & $mowmode & " !!![0m" & "[20C" & $lasthitd
Else
	Echo "[78D" & ANSI_14 & "[5m" & $mowmode & "[0m" & "[20C" & $lasthitd
End
Echo "*" & $options 
If ($options2 <> "0")
	Echo "*" & $options2
End
Gosub :Z_Lib~BLUELINE
Echo "[78D" & ANSI_13 & "arrival options:"
Echo "*" & ANSI_11 & " [" & ANSI_15 & "G" & ANSI_11 & "]-Gas [" & ANSI_15 & "U" & ANSI_11 & "]-Surround [" & ANSI_15 & "W" & ANSI_11 & "]-WaveCap [" & ANSI_15 & "C" & ANSI_11 & "]-Cap [" & ANSI_15 & "K" & ANSI_11 & "]-Kill [" & ANSI_15 & "P" & ANSI_11 & "]-Port ["  & ANSI_15 & "N" & ANSI_11 & "]-Land [" & ANSI_15 & "V" & ANSI_11 & "]-Saveme"
Gosub :Z_Lib~BLUELINE
Echo "*" & ANSI_14 & "Enter the SECTOR NUMBER:" & "[s" & ANSI_15
If ($z_mslflag = TRUE) and ($z_mslsok = TRUE)
	If ($mslsfigged = FALSE)
		Echo "[42C" & ANSI_14 &"[" & ANSI_12 & "NO MSL FIGS" & ANSI_14 & "]" & "[u" & ANSI_15
	Else
		Echo "[43C" & ANSI_1 &"[" & ANSI_9 & "MSL FIGGED" & ANSI_1 & "]" & "[u" & ANSI_15
	End
End
GetConsoleInput $choice
SetVar $temp $choice
StripText $temp " "
If ($temp = "")
	SetVar $badpath TRUE
	Goto :GOTOMENU
End
:BOTMOWCHARGE
UpperCase $choice
SetVar $z_runcommand FALSE
GetWordpos $choice $pos "]"
If ($pos > 0)
	GetText $choice $commandline "[" "]"
	StripText $choice "[" & $commandline & "]"
	SetVar $z_runcommand TRUE
End
StripText $choice " "
SetVar $z_macro FALSE
GetWordPos $choice $pos "M"
If ($pos > 0)
	StripText $choice "M"
	SetVar $z_macro TRUE
End
SetVar $z_gas FALSE
GetWordPos $choice $pos "G"
If ($pos > 0)
	StripText $choice "G"
	SetVar $z_gas TRUE
End
SetVar $z_dockport FALSE
GetWordPos $choice $pos "P"
If ($pos > 0)
	StripText $choice "P"
	SetVar $z_dockport TRUE
	SetVar $z_land FALSE
End
SetVar $z_wavecap FALSE
GetWordPos $choice $pos "W"
If ($pos > 0)
	StripText $choice "W"
	SetVar $z_wavecap TRUE
End
SetVar $z_capture FALSE
GetWordPos $choice $pos "C"
If ($pos > 0)
	StripText $choice "C"
	SetVar $z_capture TRUE
End
SetVar $z_buzz FALSE
GetWordPos $choice $pos "Z"
If ($pos > 0)
	StripText $choice "Z"
	SetVar $z_buzz TRUE
End
SetVar $z_kill FALSE
GetWordPos $choice $pos "K"
If ($pos > 0)
	StripText $choice "K"
	SetVar $z_kill TRUE
End
SetVar $z_surround FALSE
GetWordPos $choice $pos "U"
If ($pos > 0)
	StripText $choice "U"
	SetVar $z_surround TRUE
End
SetVar $z_clean FALSE
GetWordPos $choice $pos "E"
If ($pos > 0)
	StripText $choice "E"
	SetVar $z_clean TRUE
End
SetVar $z_callsaveme FALSE
GetWordPos $choice $pos "V"
If ($pos > 0)
	StripText $choice "V"
	SetVar $z_callsaveme TRUE
	SetVar $z_dockport FALSE
End
SetVar $z_holoattack FALSE
GetWordPos $choice $pos "X"
If ($pos > 0)
	StripText $choice "X"
	SetVar $z_holoattack TRUE
End
SetVar $z_land FALSE
SetVar $z_landplanet "0"
GetWordPos $choice $pos "N"
If ($pos > 0) and ($z_dockport = FALSE)
	SetVar $z_land TRUE
	GetLength $choice $len
	If ($len >= $pos + 1)
		CutText $choice $temp ($pos + 1) 999
		StripText $temp " "
		If ($temp <> "") and ($temp <> "0")
			IsNumber $isnum $temp
			If ($isnum = TRUE)
				SetVar $z_landplanet $temp
			End
		End
		CutText $choice $choice 1 $pos
	End
	StripText $choice "N"
End
If ($choice = "D")
	If ($stardockok = TRUE)
		SetVar $target STARDOCK
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "R")
	If ($rylosok = TRUE)
		SetVar $target RYLOS
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "A")
	If ($alphaok = TRUE)
		SetVar $target ALPHACENTAURI
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "H")
	If ($z_lasthit <> "0") and ($z_lasthit <> "")
		SetVar $target $z_lasthit
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "B")
	If ($baseok = TRUE)
		SetVar $target $z_base
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "S")
	If ($safeok = TRUE)
		SetVar $target $z_safesector
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "L")
	If ($lastok = TRUE)
		SetVar $target $previoussector
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "DB")
	If ($sdbdok = TRUE)
		SetVar $target $z_sdbackdoor
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "RB")
	If ($rybdok = TRUE)
		SetVar $target $z_rybackdoor
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "AB")
	If ($acbdok = TRUE)
		SetVar $target $z_acbackdoor
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "TB")
	If ($tebdok = TRUE)
		SetVar $target $z_tebackdoor
	Else
		SetVar $target "-1"
	End
ElseIf ($choice = "J")
	If ($jumpok = TRUE)
		SetVar $target $z_nextsector
		SetVar $jumping TRUE
	Else
		SetVar $target "-1"
	End
Else
	SetVar $Z_Lib~stripalpha $choice
	Gosub :Z_Lib~STRIPALPHA
	SetVar $choice $Z_Lib~stripalpha
	IsNumber $isnum $choice
	If ($isnum = TRUE) 
		If ($choice > 0) and ($choice <= SECTORS)
			SetVar $target $choice
		Else
			SetVar $target "-1"
		End
	End
End
If ($target = "") or ($target = "0")
	SetVar $target "-1"
End
If ($target = STARDOCK) and ($z_dockport = TRUE) and ($z_doublecheckdock = "TRUE")
	Gosub :CHECKSTARDOCK
	If ($stardockchk <> TRUE)
		SetVar $target "-1"
		Gosub :CLEARMOVEOPTIONS
		SetVar $Z_Lib~message "Something is WRONG with STARDOCK! Aborting...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
	End
End
If ($target <> "-1")
	If ($avoidarray[$target] = TRUE)
		Gosub :CLEARMOVEOPTIONS
		SetVar $target "-1"
		SetVar $Z_Lib~message "Target sector is AVOIDED! Aborting...*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :GOTOMENU
	End
End
If ($z_callsaveme = TRUE) and ($z_callfast = "TRUE")
	Gosub :Z_Lib~COMMSON
	Gosub :CHECKRESCUE
	If ($z_rescueavailable <> TRUE)
		SetVar $target "-1"
		Gosub :CLEARMOVEOPTIONS
		SetVar $Z_Lib~message "NO RESCUE SERVICE AVAILABLE!*"
		SetVar $Z_Lib~messageto $sender
		SetVar $Z_Lib~messagemode $messagemode
		Gosub :MSGBRIDGE
		Goto :GOTOMENU
	Else
		If ($target = "-1")
			Gosub :GETSTATS
			SetVar $savetarget $current_sector
		Else
			SetVar $savetarget $target
		End
		If ($p = TRUE)
			StripText $current_sector " "
			SetVar $Z_Strings~padchar "0"
			SetVar $Z_Strings~padlen 5
			SetVar $Z_Strings~unpadded $savetarget
			GoSub :Z_Strings~PAD
			SetVar $formattedsector $z_Strings~padded
			Send "'" & $formattedsector & "=saveme*"
		End
	End
End
:GOTOMENU
Gosub :Z_Lib~COMMSON
Return
# CHECKRESCUE 
:CHECKRESCUE
SetTextLineTrigger rescueok :RESCUEOK " - Running from planet"
SetDelayTrigger rescuenotok :RESCUENOTOK 5000
Send "'script?*"
Pause
:RESCUENOTOK
KillTrigger rescueok
KillTrigger rescuenotok
SetVar $Z_Lib~message "NO RESCUE SERVICE AVAILABLE!*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
SetVar $z_rescueavailable FALSE
Goto :NOCHECKRESCUE
:RESCUEOK
KillTrigger rescueok
KillTrigger rescuenotok
GetText CURRENTLINE $rescueplanet "planet " "."
SetVar $z_rescueavailable TRUE
:NOCHECKRESCUE
Return
# CHECKSTARDOCK 
:CHECKSTARDOCK
SetVar $stardockchk TRUE
Send #145
WaitFor #145 & #8
CutText CURRENTLINE $word 1 7
If ($word = "Command") or ($word = "Citadel")
	SetVar $stardockchk FALSE
	SetTextTrigger nosdck :NOSDCK "I have no information about a port in that sector."
	SetTextTrigger nosdck2 :SDCK2 "You have never visted sector"
	SetTextTrigger sdck :SDCK "Commerce report for Stargate Alpha I"
	Send "cr" & STARDOCK & "*q"
	Pause
:SDCK
	KillTrigger nosdck
	KillTrigger nosdck2
	KillTrigger sdck
	SetVar $stardockchk TRUE
	SetTextLineTrigger sdbfchk :SDBFCHK "Fuel Ore"
	Pause
:SDBFCHK
	KillTrigger sdbfchk
	GetWord CURRENTLINE $word 3
	If ($word = "Buying")
		SetVar $sdsellfuel FALSE
	ElseIf ($word = "Selling")
		SetVar $sdsellfuel TRUE
	End
	Goto :NOSDCK
:SDCK2
	KillTrigger nosdck
	KillTrigger nosdck2
	KillTrigger sdck
	SetVar $stardockchk TRUE
:NOSDCK
	KillTrigger nosdck
	KillTrigger nosdck2
	KillTrigger sdck
End
Return
# XAUTOSS 
:XAUTOSS
If ($z_autoss <> TRUE)
	Goto :NOAUTOSS
End
GetTime $time "d m yyyy h"
SetVar $Z_Dates~date $time
Gosub :Z_Dates~DAYS
SetVar $hours ($Z_Dates~hours + $timeoffset)
If ($hours <> $lasthours)
	Echo "**" ANSI_15 & "Attempting to change the subspace channel. Standby...**"
	Gosub :Z_Lib~CHECKIFBUSY
	If ($Z_Lib~busy = FALSE)
		SetVar $Z_Dates~time ($time & " " & $timeoffset)
		Gosub :Z_Dates~APPLYOFFSET
		GetWord $Z_Dates~offsettime $day 1
		GetWord $Z_Dates~offsettime $month 2
		GetWord $Z_Dates~offsettime $year 3
		GetWord $Z_Dates~offsettime $hour 4
		SetVar $gameletter GAME
		UpperCase $gameletter
		GetCharCode $gameletter $gamecode
		SetVar $newchannel ($z_seed + ($day * $month * $year * $hour) + ($hour * $hour) + ($day * $day) - ($month * $month) + ($year * $year) - $year + $month - $day + $hour - $gamecode - ($hour * $z_corp) + $hour)
		StripText $newchannel "-"
		While ($newchannel > 60000)
			SetVar $newchannel ($newchannel - 60000)
		End
		StripText $newchannel "-"
		If ($newchannel = 0)
			SetVar $newchannel 38271
		End
		Send "c n 4 "
#								WaitFor "<Set ANSI and misc settings>"
#								Send "4"
		SetTextTrigger sschk :SSCHK "Ok, you will send and receive sub-space messages on channel"
		SetDelayTrigger badss :BADSS 3000
		Send $newchannel & "*q q "
		Pause
:SSCHK
		KillTrigger badss
		KillTrigger sschk
		SetVar $line CURRENTLINE
		GetText $line $ssch "channel " " now."
		WaitFor "(?="
		If ($ssch = $newchannel)
			SetVar $lasthours $hours
			Echo "**" & ANSI_10 & "New subspace channel successfully set to [" & ANSI_15 & $newchannel & ANSI_10 & "].**"
			SetVar $Z_Logs~logentry $scripttitle & ": AutoSS - Subspace channel set to: " & $newchannel & "."
			Gosub :Z_Logs~ENTERLOG
			Send "*"
			SetVar $Z_Lib~subspacechannel $newchannel
			SetVar $Z_Lib~message "Active in channel.*"
			SetVar $Z_Lib~messageto ""
			SetVar $Z_Lib~messagemode "R"
			Gosub :MSGBRIDGE
			Goto :NOAUTOSS
		End
:BADSS
		KillTrigger badss
		KillTrigger sschk
		Send #145
		WaitFor #145 & #8
		Echo "**" & ANSI_12 & "FAILED to change subspace channel.**"
		Goto :NOAUTOSS
	End
	If ($lasthours <> $hours)
		Echo "**" & ANSI_12 & "FAILED to change SS channel - Must be at the Command or Citadel prompt.**"
	End
End
:NOAUTOSS
 Return
 # SETAUTOSSON 
 :SETAUTOSSON
SetVar $z_autoss TRUE
SaveVar $z_autoss
Echo "**" & ANSI_15 & $scripttitle & ": " & ANSI_10 & "AutoSS ON...**"
SetVar $Z_Logs~logentry $scripttitle & ": AutoSS set to ON."
SetVar $Z_Lib~message $scripttitle & ": AutoSS set to ON.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Logs~ENTERLOG
Send "*"
SetVar $lasthours "-1"
SetDelayTrigger waitonauto :WAITONAUTO 1000
Pause
:WAITONAUTO
KillTrigger waitonauto
Gosub :XAUTOSS
Return
# SETAUTOSSOFF 
:SETAUTOSSOFF
SetVar $z_autoss FALSE
SaveVar $z_autoss
Echo "**" & ANSI_15 & $scripttitle & ": " & ANSI_12 & "AutoSS OFF...**"
SetVar $Z_Logs~logentry $scripttitle & ": AutoSS set to OFF."
SetVar $Z_Lib~message $scripttitle & ": AutoSS set to OFF.*"
SetVar $Z_Lib~messageto $sender
SetVar $Z_Lib~messagemode $messagemode
Gosub :MSGBRIDGE
Gosub :Z_Logs~ENTERLOG
Return
# CONNECTIONLOST 
:CONNECTIONLOST
KillAllTriggers
SetDelayTrigger conlost :CONLOST 4000
Pause
:CONLOST
KillAllTriggers
If (Connected = False)
	CONNECT 
	Goto :CONNECTIONLOST
End
#OpenMenu TWX_STOPALLFAST FALSE
SetVar $reset True
SetVar $mode "GENERAL"
Goto :WAITFORCOMMAND
#HALT
# MSGBRIDGE 
:MSGBRIDGE
KillTrigger t47
KillTrigger t48
KillTrigger t49
KillTrigger t49a
KillTrigger t49b
Send #145
Waiton #145 & #8
Gosub :Z_Lib~MESSAGE
KillTrigger t47
SetTextTrigger t47 :SENDINGMESSAGE "Sub-space radio ("
KillTrigger t48
SetTextTrigger t48 :SENDINGMESSAGE "Hailing frequencies: [<ENTER>"
KillTrigger t49
SetTextTrigger t49 :SENDINGMESSAGE "Type corporate message [<ENTER>"
KillTrigger t49a
SetTextTrigger t49a :SENDINGMESSAGE "Federation comm-link: [<ENTER>"
KillTrigger t49b
SetTextTrigger t49b :SENDINGMESSAGE "Enter your general announcement now [155 chars]"
Return
# CLEARMOVEOPTIONS
:CLEARMOVEOPTIONS
SetVar $z_macro FALSE
SetVar $z_gas FALSE
SetVar $z_dockport FALSE
SetVar $z_wavecap FALSE
SetVar $z_capture FALSE
SetVar $z_buzz FALSE
SetVar $z_kill FALSE
SetVar $z_surround FALSE
SetVar $z_callsaveme FALSE
SetVar $z_land FALSE
SetVar $z_clean FALSE
SetVar $z_runcommand FALSE
SetVar $z_holoattack FALSE
Return
# CREATESCRIPTMENUS 
:CREATESCRIPTMENUS
SetVar $menufile "zp-main.mnu"
FileExists $menufileok $menufile
If ($menufileok <> TRUE)
	Write $menufile "Main Menu"
	Write $menufile "M CO zp-combat.mnu Combat Menu"
	Write $menufile "M CA zp-cash.mnu Cashing Menu"
	Write $menufile "M RE zp-resrce.mnu Resource Menu"
	Write $menufile "M GR zp-grid.mnu Grid Menu"
	Write $menufile "M DA zp-data.mnu Data Menu"
	Write $menufile "M UT zp-util.mnu Utility Menu"
	Write $menufile "M PP zp-pack12.mnu Pack 1 & 2 Menu"
	Write $menufile "M ZZ zp-zed.mnu ZeD's Scripts Menu"
	SetVar $menufile "zp-combat.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Combat Menu"
		Write $menufile "S CA Z-Call.cts ZeD's Call Saveme"
		Write $menufile "S RE Z-Rescue.cts ZeD's Rescue Service"
		Write $menufile "S SN Z-SafetyNet.cts ZeD's Safety Net"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-cash.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Cashing Menu"
		Write $menufile "S TC Z-TransCash.cts ZeD's Transfer Cash"
		Write $menufile "S DE Z-Decash.cts ZeD's Decasher"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-resrce.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Resource Menu"
		Write $menufile "S AR Z-Armourer.cts ZeD's Armourer"
		Write $menufile "S PD Z-PDriver.cts ZeD's Planet Driver"
		Write $menufile "S FE Z-Fetch.cts ZeD's Fetch"
		Write $menufile "S CO Z-Coloniser.cts ZeD's Coloniser"
		Write $menufile "S OR Z-OreUp.cts ZeD's Ore Up"
		Write $menufile "S ZS Z-Strip.cts ZeD's Planet Stripper"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-grid.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Grid Menu"
		Write $menufile "S LG Z-ListGridder.cts ZeD's Sector List Gridder"
		Write $menufile "S SC Z-Scout.cts ZeD's Scout"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-data.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Data Menu"
		Write $menufile "S BD Z-Backdoor.cts ZeD's Backdoor Finder"
		Write $menufile "S FM Z-FigMon.cts ZeD's Fighter Monitor"
		Write $menufile "S FR Z-Figs.cts ZeD's Fighter Refresh"
		Write $menufile "S MR Z-Mines.cts ZeD's Armid Mine Refresh"
		Write $menufile "S LR Z-Limps.cts ZeD's Limpet Mine Refresh"
		Write $menufile "S SL Z-SectorLister.cts ZeD's Sector List Generator"
		Write $menufile "S SP Z-SPTool.cts ZeD's Sector Parameter Tool"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-util.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Utility Menu"
		Write $menufile "S DE Z-Decash.cts ZeD's Decasher"
		Write $menufile "S UL Z-Unload.cts ZeD's Unload ALL Scripts"
		Write $menufile "S AU Z-Authorise.cts ZeD's Script Authoriser"
		Write $menufile "S OT Z-OnTime.cts ZeD's Login On Time"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-pack12.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "Pack 1 & 2 Menu"
		Write $menufile "S EC 1_ecol.ts E-Coloniser"
		Write $menufile "S BU 2_build.ts Build"
		Write $menufile "S KA 1_keepalive.ts Keep Alive"
		Write $menufile "S BD 2_buydown.ts Buy Down"
		Write $menufile "S LI 1_login.ts Login"
		Write $menufile "S CO 2_col.ts Colonise"
		Write $menufile "S MO 1_move.ts Move"
		Write $menufile "S EV 2_evil.ts Evil"
		Write $menufile "S MV 1_movecol.ts Move Colonists"
		Write $menufile "S FI 2_find.ts Find"
		Write $menufile "S MF 1_movefig.ts Move Figs"
		Write $menufile "S GA 2_gather.ts Gather"
		Write $menufile "S PP 1_port.ts Port Pair"
		Write $menufile "S MC 2_masscolonise.ts Mass Colonise"
		Write $menufile "S PF 1_portfast.ts Port Pair Fast"
		Write $menufile "S MU 2_massupgrade.ts Mass Upgrade"
		Write $menufile "S SC 1_scout.ts Scout"
		Write $menufile "S PI 2_ping.ts Ping"
		Write $menufile "S SM 1_ssm.ts SSM"
		Write $menufile "S PR 2_probe.ts Probe"
		Write $menufile "S S1 1_sst.ts SST"
		Write $menufile "S QU 2_query.ts Query"
		Write $menufile "S TC 1_tcol.ts TCol"
		Write $menufile "S SF 2_sdf.ts SDF"
		Write $menufile "S TR 1_trade.ts Trade"
		Write $menufile "S SD 2_sdt.ts SDT"
		Write $menufile "S ZT 1_ztm.ts ZTM"
		Write $menufile "S SE 2_sentinel.ts Sentinel"
		Write $menufile "S ZF 1_ztmfast.ts ZTM Fast"
		Write $menufile "S SF 2_ssf.ts SSF"
		Write $menufile ""
		Write $menufile "S S2 2_sst.ts SST"
		Write $menufile ""
		Write $menufile "S WS 2_worldssm.ts World SSM"
		Write $menufile ""
		Write $menufile "S WT 2_worldtrade.ts World Trade"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-zed.mnu"
	FileExists $fileexists $menufile
	If ($fileexists = FALSE)
		Write $menufile "ZeD's Scripts Menu"
		Write $menufile "S ZZ Z-Bot.cts Z-Bot"
		Write $menufile "S AR Z-Armourer.cts ZeD's Armourer"
		Write $menufile "S DE Z-Decash.cts ZeD's Decasher"
		Write $menufile "S BD Z-Backdoor.cts ZeD's Backdoor Finder"
		Write $menufile "S FM Z-FigMon.cts ZeD's Fighter Monitor"
		Write $menufile "S FR Z-Figs.cts ZeD's Fighter Refresh"
		Write $menufile "S MR Z-Mines.cts ZeD's Armid Mine Refresh"
		Write $menufile "S LR Z-Limps.cts ZeD's Limpet Mine Refresh"
		Write $menufile "S PD Z-PDriver.cts ZeD's Planet Driver"
		Write $menufile "S SL Z-SectorLister.cts ZeD's Sector List Generator"
		Write $menufile "S FE Z-Fetch.cts ZeD's Fetch"
		Write $menufile "S LG Z-ListGridder.cts ZeD's Sector List Gridder"
		Write $menufile "S TC Z-TransCash.cts ZeD's Transfer Cash"
		Write $menufile "S UL Z-Unload.cts ZeD's Unload ALL Scripts"
		Write $menufile "S SP Z-SPTool.cts ZeD's Sector Parameter Tool"
		Write $menufile "S CA Z-Call.cts ZeD's Call Saveme"
		Write $menufile "S RE Z-Rescue.cts ZeD's Rescue Service"
		Write $menufile "S AU Z-Authorise.cts ZeD's Script Authoriser"
		Write $menufile "S CO Z-Coloniser.cts ZeD's Coloniser"
		Write $menufile "S SN Z-SafetyNet.cts ZeD's Safety Net"
		Write $menufile "S OR Z-OreUp.cts ZeD's Ore Up"
		Write $menufile "S OT Z-OnTime.cts ZeD's Login On Time"
		Write $menufile "S SC Z-Scout.cts ZeD's Scout"
		Write $menufile "S ZS Z-Strip.cts ZeD's Planet Stripper"
		Write $menufile "M MM zp-main.mnu Main Menu"
	End
	SetVar $menufile "zp-main.mnu"
End
Return
# INCLUDES 
Include include\Z_Auth.ts
Include include\Z_Lib.ts
Include include\Z_Strings.ts
Include include\Z_Surround.ts
Include include\Z_Backdoors.ts
Include include\Z_SaveMe.ts
Include include\Z_Dates.ts
Include include\Z_Logs.ts
Include include\Z_Help.ts
Include include\z_TurboOre.ts
Include include\PlayerInfo.ts
Include include\Z_GetPlayers.ts
Include include\Z_Gas.ts
# Project started Fri 14/01/2011 
# ZeD Compiled: Sun 16/01/2011 - 15:51:56.74 
# ZeD Compiled: Fri 31/01/2014 - 18:07:14.90 


